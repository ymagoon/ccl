1)translate pft_fin_encntr_outbound go

%CCL-I-140-EKS_CALL_COMPILE(0,0,58)200520:1225{SUBROUTINE.}The subroutine 'GETCODEVALUE' already exists. No duplicates allowed.
(S58L4.3p5)
;*** Generated by TRANSLATE, verify before re-including (Debug:N,Optimize:N,DiffEnd:N,Rdb:N) ***
DROP PROGRAM pft_fin_encntr_outbound :dba GO
CREATE PROGRAM pft_fin_encntr_outbound :dba
 SET pft_fin_encntr_outbound_vrsn = "500383.027"
 DECLARE script_dt_tm = dm12 WITH protect ,constant (systimestamp )
 DECLARE loop_dt_tm = dm12 WITH protect ,noconstant (0 )
 DECLARE qualcount = i4 WITH protect ,noconstant (0 )
 EXECUTE pft_log "PFT_INTERFACE_EVENT" ,
 "Entering Script Pft_Fin_Encntr_Outbound" ,
 2
 IF ((validate (getcodevalue ,char (128 ) ) = char (128 ) ) )
  DECLARE getcodevalue ((code_set = i4 ) ,(cdf_meaning = vc ) ,(option_flag = i2 ) ) = f8
 ENDIF
 IF ((validate (s_cdf_meaning ,char (128 ) ) = char (128 ) ) )
  DECLARE s_cdf_meaning = c12 WITH public ,noconstant (fillstring (12 ," " ) )
 ENDIF
 IF ((validate (s_code_value ,- (0.00001 ) ) = - (0.00001 ) ) )
  DECLARE s_code_value = f8 WITH public ,noconstant (0.0 )
 ENDIF
 SUBROUTINE  getcodevalue (code_set ,cdf_meaning ,option_flag )
  SET s_cdf_meaning = cdf_meaning
  SET s_code_value = 0.0
  SET stat = uar_get_meaning_by_codeset (code_set ,s_cdf_meaning ,1 ,s_code_value )
  IF ((((stat != 0 ) ) OR ((s_code_value <= 0.0 ) )) )
   SET s_code_value = 0.0
   CASE (option_flag )
    OF 0 :
     SET table_name = build ("ERROR-->GetCodeValue (" ,code_set ,"," ,'"' ,s_cdf_meaning ,'"' ,"," ,
      option_flag ,") not found, CURPROG [" ,curprog ,"]" )
     CALL echo (table_name )
     SET pft_failed = uar_error
     EXECUTE pft_log "getcodevalue" ,
     table_name ,
     0
     GO TO exit_script
    OF 1 :
     SET table_name = build ("INFO-->GetCodeValue (" ,code_set ,"," ,'"' ,s_cdf_meaning ,'"' ,"," ,
      option_flag ,") not found, CURPROG [" ,curprog ,"]" )
     CALL echo (table_name )
    OF 2 :
     SET table_name = build ("INFO-->GetCodeValue (" ,code_set ,"," ,'"' ,s_cdf_meaning ,'"' ,"," ,
      option_flag ,") not found, CURPROG [" ,curprog ,"]" )
     CALL echo (table_name )
     EXECUTE pft_log "getcodevalue" ,
     table_name ,
     3
    OF 3 :
     SET table_name = build ("ERROR-->GetCodeValue (" ,code_set ,"," ,'"' ,s_cdf_meaning ,'"' ,"," ,
      option_flag ,") not found, CURPROG [" ,curprog ,"]" )
     CALL echo (table_name )
     CALL err_add_message (table_name )
     SET pft_failed = uar_error
   ENDCASE
  ELSE
   CALL echo (build ("SUCCESS-->GetCodeValue (" ,code_set ,"," ,'"' ,s_cdf_meaning ,'"' ,"," ,
     option_flag ,") CODE_VALUE [" ,s_code_value ,"]" ) )
  ENDIF
  RETURN (s_code_value )
 END ;Subroutine
 CALL echo ("Begin including PFT_SYSTEM_ACTIVITY_LOG_SUBS.INC version [547530.021]" )
 IF (NOT (validate (log_error ) ) )
  DECLARE log_error = i4 WITH protect ,constant (0 )
 ENDIF
 IF (NOT (validate (log_warning ) ) )
  DECLARE log_warning = i4 WITH protect ,constant (1 )
 ENDIF
 IF (NOT (validate (log_audit ) ) )
  DECLARE log_audit = i4 WITH protect ,constant (2 )
 ENDIF
 IF (NOT (validate (log_info ) ) )
  DECLARE log_info = i4 WITH protect ,constant (3 )
 ENDIF
 IF (NOT (validate (log_debug ) ) )
  DECLARE log_debug = i4 WITH protect ,constant (4 )
 ENDIF
 IF ((validate (logmessage ,char (128 ) ) = char (128 ) ) )
  DECLARE logmessage ((psubroutine = vc ) ,(pmessage = vc ) ,(plevel = i4 ) ) = null
  SUBROUTINE  logmessage (psubroutine ,pmessage ,plevel )
   DECLARE llevel = vc WITH private ,noconstant ("" )
   DECLARE cs23372_failed_cd = f8 WITH protect ,constant (uar_get_code_by ("MEANING" ,23372 ,
     "FAILED" ) )
   DECLARE hmsg = i4 WITH protect ,noconstant (0 )
   DECLARE hreq = i4 WITH protect ,noconstant (0 )
   DECLARE hrep = i4 WITH protect ,noconstant (0 )
   DECLARE hobjarray = i4 WITH protect ,noconstant (0 )
   DECLARE srvstatus = i4 WITH protect ,noconstant (0 )
   DECLARE submit_log = i4 WITH protect ,constant (4099455 )
   CALL echo ("" )
   CALL echo ("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::" )
   IF ((size (trim (psubroutine ,3 ) ) > 0 ) )
    CALL echo (concat (curprog ," : " ,psubroutine ,"() : " ,pmessage ) )
   ELSE
    CALL echo (concat (curprog ," : " ,pmessage ) )
   ENDIF
   CALL echo ("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::" )
   CALL echo ("" )
   SET __hsys = 0
   SET __lsysstat = 0
   CALL uar_syscreatehandle (__hsys ,__lsysstat )
   IF ((__hsys > 0 ) )
    CALL uar_sysevent (__hsys ,plevel ,curprog ,nullterm (pmessage ) )
    CALL uar_sysdestroyhandle (__hsys )
   ENDIF
   IF ((plevel = log_error ) )
    SET hmsg = uar_srvselectmessage (submit_log )
    SET hreq = uar_srvcreaterequest (hmsg )
    SET hrep = uar_srvcreatereply (hmsg )
    SET hobjarray = uar_srvadditem (hreq ,"objArray" )
    SET stat = uar_srvsetdouble (hobjarray ,"final_status_cd" ,cs23372_failed_cd )
    SET stat = uar_srvsetstring (hobjarray ,"task_name" ,nullterm (curprog ) )
    SET stat = uar_srvsetstring (hobjarray ,"completion_msg" ,nullterm (pmessage ) )
    SET stat = uar_srvsetdate (hobjarray ,"end_dt_tm" ,cnvtdatetime (curdate ,curtime3 ) )
    SET stat = uar_srvsetstring (hobjarray ,"current_node_name" ,nullterm (curnode ) )
    SET stat = uar_srvsetstring (hobjarray ,"server_name" ,nullterm (build (curserver ) ) )
    SET srvstatus = uar_srvexecute (hmsg ,hreq ,hrep )
    IF ((srvstatus != 0 ) )
     CALL echo (build2 ("Execution of pft_save_system_activity_log was not successful" ) )
    ENDIF
    CALL uar_srvdestroyinstance (hreq )
    CALL uar_srvdestroyinstance (hrep )
   ENDIF
  END ;Subroutine
 ENDIF
 IF ((validate (getcodevalue ,char (128 ) ) = char (128 ) ) )
  DECLARE getcodevalue ((code_set = i4 ) ,(cdf_meaning = vc ) ,(option_flag = i2 ) ) = f8
 ENDIF
 IF ((validate (s_cdf_meaning ,char (128 ) ) = char (128 ) ) )
  DECLARE s_cdf_meaning = c12 WITH public ,noconstant (fillstring (12 ," " ) )
 ENDIF
 IF ((validate (s_code_value ,- (0.00001 ) ) = - (0.00001 ) ) )
  DECLARE s_code_value = f8 WITH public ,noconstant (0.0 )
 ENDIF
 SUBROUTINE  getcodevalue (code_set ,cdf_meaning ,option_flag )
  SET s_cdf_meaning = cdf_meaning
  SET s_code_value = 0.0
  SET stat = uar_get_meaning_by_codeset (code_set ,s_cdf_meaning ,1 ,s_code_value )
  IF ((((stat != 0 ) ) OR ((s_code_value <= 0.0 ) )) )
   SET s_code_value = 0.0
   CASE (option_flag )
    OF 0 :
     SET table_name = build ("ERROR-->GetCodeValue (" ,code_set ,"," ,'"' ,s_cdf_meaning ,'"' ,"," ,
      option_flag ,") not found, CURPROG [" ,curprog ,"]" )
     CALL echo (table_name )
     SET pft_failed = uar_error
     EXECUTE pft_log "getcodevalue" ,
     table_name ,
     0
     GO TO exit_script
    OF 1 :
     SET table_name = build ("INFO-->GetCodeValue (" ,code_set ,"," ,'"' ,s_cdf_meaning ,'"' ,"," ,
      option_flag ,") not found, CURPROG [" ,curprog ,"]" )
     CALL echo (table_name )
    OF 2 :
     SET table_name = build ("INFO-->GetCodeValue (" ,code_set ,"," ,'"' ,s_cdf_meaning ,'"' ,"," ,
      option_flag ,") not found, CURPROG [" ,curprog ,"]" )
     CALL echo (table_name )
     EXECUTE pft_log "getcodevalue" ,
     table_name ,
     3
    OF 3 :
     SET table_name = build ("ERROR-->GetCodeValue (" ,code_set ,"," ,'"' ,s_cdf_meaning ,'"' ,"," ,
      option_flag ,") not found, CURPROG [" ,curprog ,"]" )
     CALL echo (table_name )
     CALL err_add_message (table_name )
     SET pft_failed = uar_error
   ENDCASE
  ELSE
   CALL echo (build ("SUCCESS-->GetCodeValue (" ,code_set ,"," ,'"' ,s_cdf_meaning ,'"' ,"," ,
     option_flag ,") CODE_VALUE [" ,s_code_value ,"]" ) )
  ENDIF
  RETURN (s_code_value )
 END ;Subroutine
 CALL echo ("Begin PFT_LOGICAL_DOMAIN_SUBS.INC, version [434722.007]" )
 IF ((validate (ld_concept_person ) = 0 ) )
  DECLARE ld_concept_person = i2 WITH public ,constant (1 )
 ENDIF
 IF ((validate (ld_concept_prsnl ) = 0 ) )
  DECLARE ld_concept_prsnl = i2 WITH public ,constant (2 )
 ENDIF
 IF ((validate (ld_concept_organization ) = 0 ) )
  DECLARE ld_concept_organization = i2 WITH public ,constant (3 )
 ENDIF
 IF ((validate (ld_concept_healthplan ) = 0 ) )
  DECLARE ld_concept_healthplan = i2 WITH public ,constant (4 )
 ENDIF
 IF ((validate (ld_concept_alias_pool ) = 0 ) )
  DECLARE ld_concept_alias_pool = i2 WITH public ,constant (5 )
 ENDIF
 IF ((validate (ld_concept_minvalue ) = 0 ) )
  DECLARE ld_concept_minvalue = i2 WITH public ,constant (1 )
 ENDIF
 IF ((validate (ld_concept_maxvalue ) = 0 ) )
  DECLARE ld_concept_maxvalue = i2 WITH public ,constant (5 )
 ENDIF
 IF (NOT (validate (profitlogicaldomaininfo ) ) )
  RECORD profitlogicaldomaininfo (
    1 hasbeenset = i2
    1 logicaldomainid = f8
    1 logicaldomainsystemuserid = f8
  ) WITH persistscript
 ENDIF
 IF (NOT (validate (ld_concept_batch_trans ) ) )
  DECLARE ld_concept_batch_trans = i2 WITH public ,constant (ld_concept_person )
 ENDIF
 IF (NOT (validate (ld_concept_pft_event ) ) )
  DECLARE ld_concept_pft_event = i2 WITH public ,constant (ld_concept_person )
 ENDIF
 IF (NOT (validate (ld_concept_pft_ruleset ) ) )
  DECLARE ld_concept_pft_ruleset = i2 WITH public ,constant (ld_concept_person )
 ENDIF
 IF (NOT (validate (ld_concept_pft_workflow ) ) )
  DECLARE ld_concept_pft_workflow = i2 WITH public ,constant (ld_concept_prsnl )
 ENDIF
 IF (NOT (validate (getlogicaldomain ) ) )
  DECLARE getlogicaldomain ((concept = i4 ) ,(logicaldomainid = f8 (ref ) ) ) = i2
  SUBROUTINE  getlogicaldomain (concept ,logicaldomainid )
   CALL logmessage ("getLogicalDomain" ,"Entering..." ,log_debug )
   IF (arelogicaldomainsinuse (0 ) )
    IF ((((concept < ld_concept_minvalue ) ) OR ((concept > ld_concept_maxvalue ) )) )
     CALL logmessage ("getLogicalDomain" ,build2 ("Invalid logical domain concept: " ,concept ) ,
      log_error )
     RETURN (false )
    ENDIF
    FREE RECORD acm_get_curr_logical_domain_req
    RECORD acm_get_curr_logical_domain_req (
      1 concept = i4
    )
    FREE RECORD acm_get_curr_logical_domain_rep
    RECORD acm_get_curr_logical_domain_rep (
      1 logical_domain_id = f8
      1 status_block
        2 status_ind = i2
        2 error_code = i4
    )
    DECLARE currentuserid = f8 WITH protect ,constant (reqinfo->updt_id )
    IF ((profitlogicaldomaininfo->hasbeenset = true ) )
     SET reqinfo->updt_id = profitlogicaldomaininfo->logicaldomainsystemuserid
    ENDIF
    SET acm_get_curr_logical_domain_req->concept = concept
    EXECUTE acm_get_curr_logical_domain
    SET reqinfo->updt_id = currentuserid
    IF ((acm_get_curr_logical_domain_rep->status_block.status_ind != true ) )
     CALL logmessage ("getLogicalDomain" ,"Failed to retrieve logical domain..." ,log_error )
     CALL echorecord (acm_get_curr_logical_domain_rep )
     RETURN (false )
    ENDIF
    SET logicaldomainid = acm_get_curr_logical_domain_rep->logical_domain_id
    CALL logmessage ("getLogicalDomain" ,build2 ("Logical domain for concept [" ,trim (cnvtstring (
        concept ) ) ,"]: " ,trim (cnvtstring (logicaldomainid ) ) ) ,log_debug )
    FREE RECORD acm_get_curr_logical_domain_req
    FREE RECORD acm_get_curr_logical_domain_rep
   ELSE
    SET logicaldomainid = 0.0
   ENDIF
   CALL logmessage ("getLogicalDomain" ,"Exiting..." ,log_debug )
   RETURN (true )
  END ;Subroutine
 ENDIF
 IF (NOT (validate (setlogicaldomain ) ) )
  DECLARE setlogicaldomain ((logicaldomainid = f8 ) ) = i2
  SUBROUTINE  setlogicaldomain (logicaldomainid )
   CALL logmessage ("setLogicalDomain" ,"Entering..." ,log_debug )
   IF (arelogicaldomainsinuse (0 ) )
    SELECT INTO "nl:"
     FROM (logical_domain ld )
     WHERE (ld.logical_domain_id = logicaldomainid )
     DETAIL
      profitlogicaldomaininfo->logicaldomainsystemuserid = ld.system_user_id
     WITH nocounter
    ;end select
    SET profitlogicaldomaininfo->logicaldomainid = logicaldomainid
    SET profitlogicaldomaininfo->hasbeenset = true
    SELECT INTO "nl:"
     FROM (prsnl p )
     WHERE (p.person_id = reqinfo->updt_id )
     DETAIL
      IF ((p.logical_domain_id != logicaldomainid ) ) reqinfo->updt_id = profitlogicaldomaininfo->
       logicaldomainsystemuserid
      ENDIF
     WITH nocounter
    ;end select
    IF (validate (debug ,0 ) )
     CALL echorecord (profitlogicaldomaininfo )
     CALL echo (build ("reqinfo->updt_id:" ,reqinfo->updt_id ) )
    ENDIF
   ENDIF
   CALL logmessage ("setLogicalDomain" ,"Exiting..." ,log_debug )
   RETURN (true )
  END ;Subroutine
 ENDIF
 IF (NOT (validate (arelogicaldomainsinuse ) ) )
  DECLARE arelogicaldomainsinuse (null ) = i2
  SUBROUTINE  arelogicaldomainsinuse (null )
   CALL logmessage ("areLogicalDomainsInUse" ,"Entering..." ,log_debug )
   DECLARE multiplelogicaldomainsdefined = i2 WITH protect ,noconstant (false )
   SELECT INTO "nl:"
    FROM (logical_domain ld )
    WHERE (ld.logical_domain_id > 0.0 )
    AND (ld.active_ind = true )
    WITH nocounter
   ;end select
   IF ((curqual > 0 ) )
    SET multiplelogicaldomainsdefined = true
   ENDIF
   CALL logmessage ("areLogicalDomainsInUse" ,build2 ("Multiple logical domains " ,evaluate (
      multiplelogicaldomainsdefined ,true ,"are" ,"are not" ) ," in use" ) ,log_debug )
   CALL logmessage ("areLogicalDomainsInUse" ,"Exiting..." ,log_debug )
   RETURN (multiplelogicaldomainsdefined )
  END ;Subroutine
 ENDIF
 DECLARE getparameterentityname ((dparmcd = f8 ) ) = vc
 SUBROUTINE  getparameterentityname (dparmcd )
  DECLARE parammeaning = vc WITH private ,constant (trim (uar_get_code_meaning (dparmcd ) ) )
  DECLARE returnvalue = vc WITH private ,noconstant ("" )
  SET returnvalue = evaluate (parammeaning ,"BEID" ,"BILLING_ENTITY" ,"OPTIONALBEID" ,
   "BILLING_ENTITY" ,"HP ID" ,"HEALTH_PLAN" ,"HP_LIST" ,"HEALTH_PLAN" ,"PRIMARYHP" ,"HEALTH_PLAN" ,
   "PRIPAYORHPID" ,"HEALTH_PLAN" ,"SECPAYORHPID" ,"HEALTH_PLAN" ,"TERPAYORHPID" ,"HEALTH_PLAN" ,
   "COLLAGENCY" ,"ORGANIZATION" ,"PAYORORGID" ,"ORGANIZATION" ,"PRECOLAGENCY" ,"ORGANIZATION" ,
   "PRIPAYORORGI" ,"ORGANIZATION" ,"SECPAYORORGI" ,"ORGANIZATION" ,"TERPAYORORGI" ,"ORGANIZATION" ,
   "PAYER_LIST" ,"ORGANIZATION" ,"UNKNOWN" )
  RETURN (returnvalue )
 END ;Subroutine
 DECLARE paramsarevalidfordomain ((paramstruct = vc (ref ) ) ,(dlogicaldomainid = f8 ) ) = i2
 SUBROUTINE  paramsarevalidfordomain (paramstruct ,dlogicaldomainid )
  DECLARE paramidx = i4 WITH private ,noconstant (0 )
  DECLARE paramentityname = vc WITH private ,noconstant ("" )
  DECLARE paramvalue = f8 WITH protect ,noconstant (0.0 )
  DECLARE paramerror = i2 WITH protect ,noconstant (false )
  FOR (paramidx = 1 TO paramstruct->lparams_qual )
   SET paramentityname = getparameterentityname (paramstruct->aparams[paramidx ].dvalue_meaning )
   SET paramvalue = cnvtreal (paramstruct->aparams[paramidx ].svalue )
   SET paramerror = true
   IF ((paramentityname = "BILLING_ENTITY" ) )
    SELECT INTO "nl:"
     FROM (billing_entity be ),
      (organization o )
     PLAN (be
      WHERE (be.billing_entity_id = paramvalue ) )
      JOIN (o
      WHERE (o.organization_id = be.organization_id )
      AND (o.logical_domain_id = dlogicaldomainid ) )
     DETAIL
      paramerror = false
     WITH nocounter
    ;end select
   ELSEIF ((paramentityname = "HEALTH_PLAN" ) )
    SELECT INTO "nl:"
     FROM (health_plan hp )
     PLAN (hp
      WHERE (hp.health_plan_id = paramvalue )
      AND (hp.logical_domain_id = dlogicaldomainid ) )
     DETAIL
      paramerror = false
     WITH nocounter
    ;end select
   ELSEIF ((paramentityname = "ORGANIZATION" ) )
    SELECT INTO "nl:"
     FROM (organization o )
     PLAN (o
      WHERE (o.organization_id = paramvalue )
      AND (o.logical_domain_id = dlogicaldomainid ) )
     DETAIL
      paramerror = false
     WITH nocounter
    ;end select
   ELSE
    SET paramerror = false
   ENDIF
   IF (paramerror )
    RETURN (false )
   ENDIF
  ENDFOR
  RETURN (true )
 END ;Subroutine
 IF (NOT (validate (cs23372_comp_wo_err_cd ) ) )
  DECLARE cs23372_comp_wo_err_cd = f8 WITH protect ,constant (getcodevalue (23372 ,"COMP WO ERR" ,2
    ) )
 ENDIF
 IF (NOT (validate (cs23372_failed_cd ) ) )
  DECLARE cs23372_failed_cd = f8 WITH protect ,constant (getcodevalue (23372 ,"FAILED" ,2 ) )
 ENDIF
 IF (NOT (validate (claim_sys_log ) ) )
  DECLARE claim_sys_log = vc WITH protect ,constant ("CLAIM" )
 ENDIF
 IF (NOT (validate (statement_sys_log ) ) )
  DECLARE statement_sys_log = vc WITH protect ,constant ("STATEMENT" )
 ENDIF
 IF (NOT (validate (entity_balance_sys_log ) ) )
  DECLARE entity_balance_sys_log = vc WITH protect ,constant ("BALANCE" )
 ENDIF
 IF (NOT (validate (pftencntr_sys_log ) ) )
  DECLARE pftencntr_sys_log = vc WITH protect ,constant ("PFTENCNTR" )
 ENDIF
 IF (NOT (validate (encounter_sys_log ) ) )
  DECLARE encounter_sys_log = vc WITH protect ,constant ("ENCOUNTER" )
 ENDIF
 IF (NOT (validate (bill_rec_sys_log ) ) )
  DECLARE bill_rec_sys_log = vc WITH protect ,constant ("BILL_REC" )
 ENDIF
 IF (NOT (validate (bo_hp_reltn_sys_log ) ) )
  DECLARE bo_hp_reltn_sys_log = vc WITH protect ,constant ("BO_HP_RELTN" )
 ENDIF
 IF (NOT (validate (pft_encntr_sys_log ) ) )
  DECLARE pft_encntr_sys_log = vc WITH protect ,constant ("PFT_ENCNTR" )
 ENDIF
 IF (NOT (validate (charge_sys_log ) ) )
  DECLARE charge_sys_log = vc WITH protect ,constant ("CHARGE" )
 ENDIF
 IF (NOT (validate (pft_trans_sys_log ) ) )
  DECLARE pft_trans_sys_log = vc WITH protect ,constant ("PFT_TRANS_LOG" )
 ENDIF
 IF (NOT (validate (batch_trans_sys_log ) ) )
  DECLARE batch_trans_sys_log = vc WITH protect ,constant ("BATCH_TRANS" )
 ENDIF
 IF (NOT (validate (entity_trans_sys_log ) ) )
  DECLARE entity_trans_sys_log = vc WITH protect ,constant ("TRANS_LOG" )
 ENDIF
 IF (NOT (validate (entity_account_sys_log ) ) )
  DECLARE entity_account_sys_log = vc WITH protect ,constant ("ACCOUNT" )
 ENDIF
 IF (NOT (validate (entity_person_sys_log ) ) )
  DECLARE entity_person_sys_log = vc WITH protect ,constant ("PERSON" )
 ENDIF
 IF (NOT (validate (entity_sch_event_sys_log ) ) )
  DECLARE entity_sch_event_sys_log = vc WITH protect ,constant ("SCH_EVENT" )
 ENDIF
 IF (NOT (validate (entity_billing_entity_sys_log ) ) )
  DECLARE entity_billing_entity_sys_log = vc WITH protect ,constant ("BILLING_ENTITY" )
 ENDIF
 IF (NOT (validate (batch_trans_file_sys_log ) ) )
  DECLARE batch_trans_file_sys_log = vc WITH protect ,constant ("BATCH_TRANS_FILE" )
 ENDIF
 IF (NOT (validate (workflow_task_queue_hist_sys_log ) ) )
  DECLARE workflow_task_queue_hist_sys_log = vc WITH protect ,constant ("WORKFLOW_TASK_QUEUE_HIST" )
 ENDIF
 IF (NOT (validate (pft_system_activity_log_subs ) ) )
  DECLARE pft_system_activity_log_subs = vc WITH protect ,constant ("PFT_SYSTEM_ACTIVITY_LOG_SUBS" )
 ENDIF
 IF (NOT (validate (dm_info_domain_file_log ) ) )
  DECLARE dm_info_domain_file_log = vc WITH protect ,constant ("PATIENT_ACCOUNTING_FILE_LOGGING" )
 ENDIF
 IF (NOT (validate (dm_info_char_file_log ) ) )
  DECLARE dm_info_char_file_log = vc WITH protect ,constant ("OPT_IN_FILE_LOGGING" )
 ENDIF
 IF (NOT (validate (dm_info_domain_msgview_log ) ) )
  DECLARE dm_info_domain_msgview_log = vc WITH protect ,constant (
   "PATIENT_ACCOUNTING_MSGVIEW_LOGGING" )
 ENDIF
 IF (NOT (validate (dm_info_char_msgview_log ) ) )
  DECLARE dm_info_char_msgview_log = vc WITH protect ,constant ("OPT_IN_MSGVIEW_LOGGING" )
 ENDIF
 IF (NOT (validate (dm_info_domain_table_log ) ) )
  DECLARE dm_info_domain_table_log = vc WITH protect ,constant ("PATIENT_ACCOUNTING_LOGGING" )
 ENDIF
 IF (NOT (validate (dm_info_char_table_log ) ) )
  DECLARE dm_info_char_table_log = vc WITH protect ,constant (
   "OPT_IN_LOGGING_FRAMEWORK_FOR_PATIENT_ACCOUNTING" )
 ENDIF
 IF (NOT (validate (log_system_activity_sub ) ) )
  DECLARE log_system_activity_sub = vc WITH protect ,constant ("LogSystemActivity" )
 ENDIF
 IF (NOT (validate (base_log_file_name ) ) )
  DECLARE base_log_file_name = vc WITH protect ,constant (concat ("SysAct_" ,trim (curprcname ,3 ) ,
    "_" ) )
 ENDIF
 IF (NOT (validate (max_file_size_in_bytes ) ) )
  DECLARE max_file_size_in_bytes = f8 WITH protect ,constant (100000000.0 )
 ENDIF
 IF (NOT (validate (max_msgview_file_name_size ) ) )
  DECLARE max_msgview_file_name_size = f8 WITH protect ,constant (31.0 )
 ENDIF
 IF (NOT (validate (script_level_timer ) ) )
  DECLARE script_level_timer = f8 WITH protect ,constant (1.0 )
 ENDIF
 IF (NOT (validate (script_and_detail_level_timer ) ) )
  DECLARE script_and_detail_level_timer = f8 WITH protect ,constant (2.0 )
 ENDIF
 IF (NOT (validate (main_select_timer_string ) ) )
  DECLARE main_select_timer_string = vc WITH protect ,constant ("MAIN_SELECT_TIMER_STRING" )
 ENDIF
 IF (NOT (validate (tens_of_millisecs ) ) )
  DECLARE tens_of_millisecs = i2 WITH protect ,constant (6 )
 ENDIF
 IF (NOT (validate (sysactlog ) ) )
  RECORD sysactlog (
    1 finalstatuscd = f8
    1 entityname = vc
    1 entityid = f8
    1 taskname = vc
    1 completionmsg = vc
    1 logicaldomainid = f8
    1 locfacilitycd = f8
    1 organizationid = f8
    1 startdttm = dm12
    1 enddttm = dm12
    1 encntrid = f8
    1 personid = f8
    1 pfteventoccurlogid = f8
    1 currentnodename = vc
    1 servername = vc
    1 executiondurationsecs = f8
    1 timeridentifier = vc
  ) WITH protect
 ENDIF
 IF (NOT (validate (cachedtasks ) ) )
  RECORD cachedtasks (
    1 task [* ]
      2 taskname = vc
      2 tableloglevel = f8
      2 fileloglevel = f8
      2 msgviewloglevel = f8
      2 logicaldomainid = f8
  ) WITH protect
 ENDIF
 DECLARE sysactlogicaldomainid = f8 WITH protect ,noconstant (0.0 )
 DECLARE sysactlogicaldomainind = i2 WITH protect ,noconstant (false )
 IF ((validate (getfilesize ,char (128 ) ) = char (128 ) ) )
  DECLARE getfilesize ((pfilename = vc ) ) = f8
  SUBROUTINE  getfilesize (pfilename )
   DECLARE filesize = f8 WITH protect ,noconstant (0.0 )
   RECORD frec (
     1 file_desc = i4
     1 file_offset = i4
     1 file_dir = i4
     1 file_name = vc
     1 file_buf = vc
   ) WITH protect
   SET frec->file_name = pfilename
   SET frec->file_buf = "r"
   SET stat = cclio ("OPEN" ,frec )
   SET frec->file_dir = 2
   SET frec->file_offset = 0
   SET stat = cclio ("SEEK" ,frec )
   SET filesize = cclio ("TELL" ,frec )
   RETURN (filesize )
  END ;Subroutine
 ENDIF
 IF ((validate (transcribetofile ,char (128 ) ) = char (128 ) ) )
  DECLARE transcribetofile ((pfilename = vc ) ,(pcontent = gvc ) ,(pmode = vc ) ) = i2
  SUBROUTINE  transcribetofile (pfilename ,pcontent ,pmode )
   RECORD frec (
     1 file_desc = i4
     1 file_offset = i4
     1 file_dir = i4
     1 file_name = vc
     1 file_buf = vc
   ) WITH protect
   SET frec->file_name = pfilename
   SET frec->file_buf = pmode
   SET stat = cclio ("OPEN" ,frec )
   SET frec->file_buf = pcontent
   SET stat = cclio ("WRITE" ,frec )
   SET stat = cclio ("CLOSE" ,frec )
   RETURN (stat )
  END ;Subroutine
 ENDIF
 IF ((validate (logsystemactivity ,char (128 ) ) = char (128 ) ) )
  DECLARE logsystemactivity ((pstarttime = dm12 ) ,(ptaskname = vc ) ,(pentityname = vc ) ,(
   pentityid = f8 ) ,(pstatus = c1 ) ,(pmessage = vc ) ,(plogtimer = f8 (value ,script_level_timer )
   ) ,(ptimerident = vc (value ,"" ) ) ) = null
  SUBROUTINE  logsystemactivity (pstarttime ,ptaskname ,pentityname ,pentityid ,pstatus ,pmessage ,
   plogtimer ,ptimerident )
   DECLARE hmsg = i4 WITH protect ,noconstant (0 )
   DECLARE hreq = i4 WITH protect ,noconstant (0 )
   DECLARE hrep = i4 WITH protect ,noconstant (0 )
   DECLARE hobjarray = i4 WITH protect ,noconstant (0 )
   DECLARE srvstatus = i4 WITH protect ,noconstant (0 )
   DECLARE submit_log = i4 WITH protect ,constant (4099455 )
   DECLARE cacheidx = i4 WITH protect ,noconstant (0 )
   DECLARE cachecnt = i4 WITH protect ,noconstant (0 )
   DECLARE cachefound = i4 WITH protect ,noconstant (0 )
   DECLARE queriedind = i2 WITH protect ,noconstant (true )
   DECLARE logfilemsg = vc WITH protect ,noconstant ("" )
   DECLARE logfilename = vc WITH protect ,noconstant ("" )
   DECLARE logfilenum = i4 WITH protect ,noconstant (0 )
   DECLARE logfilesize = f8 WITH protect ,noconstant (max_file_size_in_bytes )
   DECLARE loggedmsgind = i2 WITH protect ,noconstant (false )
   DECLARE logactivitytofile = i2 WITH protect ,noconstant (false )
   DECLARE logactivitytotable = i2 WITH protect ,noconstant (false )
   DECLARE logactivitytomsgview = i2 WITH protect ,noconstant (false )
   DECLARE msgloglevel = i4 WITH protect ,noconstant (0 )
   DECLARE msghandle = i4 WITH protect ,noconstant (0 )
   DECLARE msglogevent = vc WITH protect ,noconstant ("" )
   DECLARE msgfilename = vc WITH protect ,noconstant ("" )
   SET stat = initrec (sysactlog )
   SET ptaskname = cnvtupper (ptaskname )
   SET cachecnt = size (cachedtasks->task ,5 )
   SET sysactlog->startdttm = pstarttime
   SET sysactlog->enddttm = systimestamp
   SET sysactlog->executiondurationsecs = timestampdiff (sysactlog->enddttm ,sysactlog->startdttm )
   SET sysactlog->taskname = ptaskname
   SET sysactlog->entityid = pentityid
   SET sysactlog->completionmsg = pmessage
   SET sysactlog->currentnodename = curnode
   SET sysactlog->servername = build (curserver )
   SET sysactlog->timeridentifier = trim (ptimerident ,3 )
   IF (NOT (sysactlogicaldomainind ) )
    CALL getlogicaldomain (ld_concept_person ,sysactlogicaldomainid )
    SET sysactlogicaldomainind = true
   ENDIF
   SET cachefound = locateval (cacheidx ,1 ,cachecnt ,ptaskname ,cachedtasks->task[cacheidx ].
    taskname ,sysactlogicaldomainid ,cachedtasks->task[cacheidx ].logicaldomainid )
   IF ((cachefound = 0 ) )
    SET cachecnt = (cachecnt + 1 )
    SET cachefound = cachecnt
    SET stat = alterlist (cachedtasks->task ,cachecnt )
    SET cachedtasks->task[cachecnt ].taskname = ptaskname
    SET cachedtasks->task[cachecnt ].logicaldomainid = sysactlogicaldomainid
    SELECT INTO "nl:"
     FROM (dm_info di )
     WHERE (di.info_name = ptaskname )
     AND (di.info_domain_id = sysactlogicaldomainid )
     AND (((di.info_domain = dm_info_domain_table_log )
     AND (di.info_char = dm_info_char_table_log ) ) OR ((((di.info_domain = dm_info_domain_file_log
     )
     AND (di.info_char = dm_info_char_file_log ) ) OR ((di.info_domain = dm_info_domain_msgview_log
     )
     AND (di.info_char = dm_info_char_msgview_log ) )) ))
     DETAIL
      IF ((di.info_domain = dm_info_domain_table_log ) ) cachedtasks->task[cachecnt ].tableloglevel
       = di.info_number
      ELSEIF ((di.info_domain = dm_info_domain_file_log ) ) cachedtasks->task[cachecnt ].fileloglevel
        = di.info_number
      ELSEIF ((di.info_domain = dm_info_domain_msgview_log ) ) cachedtasks->task[cachecnt ].
       msgviewloglevel = di.info_number
      ENDIF
     WITH nocounter
    ;end select
   ENDIF
   IF ((cachedtasks->task[cachefound ].tableloglevel >= plogtimer ) )
    SET logactivitytotable = true
   ENDIF
   IF ((cachedtasks->task[cachefound ].fileloglevel >= plogtimer ) )
    SET logactivitytofile = true
   ENDIF
   IF ((cachedtasks->task[cachefound ].msgviewloglevel >= plogtimer ) )
    SET logactivitytomsgview = true
   ENDIF
   IF (((logactivitytotable ) OR (((logactivitytofile ) OR (logactivitytomsgview )) )) )
    CASE (pstatus )
     OF "S" :
      SET sysactlog->finalstatuscd = cs23372_comp_wo_err_cd
      SET msgloglevel = log_info
      SET msglogevent = "Script success"
     OF "F" :
      SET sysactlog->finalstatuscd = cs23372_failed_cd
      SET msgloglevel = log_error
      SET msglogevent = "Script failure"
     ELSE
      SET sysactlog->finalstatuscd = 0.0
      SET msgloglevel = log_warning
      SET msglogevent = "No data"
    ENDCASE
    CASE (pentityname )
     OF claim_sys_log :
      SET sysactlog->entityname = bill_rec_sys_log
     OF statement_sys_log :
      SET sysactlog->entityname = bill_rec_sys_log
     OF bill_rec_sys_log :
      SET sysactlog->entityname = bill_rec_sys_log
     OF entity_balance_sys_log :
      SET sysactlog->entityname = bo_hp_reltn_sys_log
     OF bo_hp_reltn_sys_log :
      SET sysactlog->entityname = bo_hp_reltn_sys_log
     OF pftencntr_sys_log :
      SET sysactlog->entityname = pft_encntr_sys_log
     OF pft_encntr_sys_log :
      SET sysactlog->entityname = pft_encntr_sys_log
     OF encounter_sys_log :
      IF ((pentityid > 0.0 ) )
       SET sysactlog->entityname = encounter_sys_log
      ELSE
       SET sysactlog->entityname = pft_encntr_sys_log
      ENDIF
     OF charge_sys_log :
      SET sysactlog->entityname = charge_sys_log
     OF batch_trans_sys_log :
      SET sysactlog->entityname = batch_trans_sys_log
     OF entity_trans_sys_log :
      SET sysactlog->entityname = entity_trans_sys_log
     OF entity_account_sys_log :
      SET sysactlog->entityname = entity_account_sys_log
     OF entity_person_sys_log :
      SET sysactlog->entityname = entity_person_sys_log
     OF entity_sch_event_sys_log :
      SET sysactlog->entityname = entity_sch_event_sys_log
     OF entity_billing_entity_sys_log :
      SET sysactlog->entityname = entity_billing_entity_sys_log
     OF batch_trans_file_sys_log :
      SET sysactlog->entityname = batch_trans_file_sys_log
     OF workflow_task_queue_hist_sys_log :
      SET sysactlog->entityname = workflow_task_queue_hist_sys_log
     ELSE
      SET sysactlog->entityname = ""
    ENDCASE
    IF ((pentityid > 0.0 ) )
     CASE (sysactlog->entityname )
      OF bill_rec_sys_log :
       SELECT INTO "nl:"
        FROM (bill_rec br ),
         (bill_reltn brn ),
         (bo_hp_reltn bhr ),
         (benefit_order bo ),
         (pft_encntr pe ),
         (encounter e ),
         (person p )
        PLAN (br
         WHERE (br.corsp_activity_id = pentityid )
         AND (br.active_ind = true ) )
         JOIN (brn
         WHERE (brn.corsp_activity_id = br.corsp_activity_id )
         AND (brn.parent_entity_name = bo_hp_reltn_sys_log )
         AND (brn.active_ind = true ) )
         JOIN (bhr
         WHERE (bhr.bo_hp_reltn_id = brn.parent_entity_id )
         AND (bhr.active_ind = true ) )
         JOIN (bo
         WHERE (bo.benefit_order_id = bhr.benefit_order_id )
         AND (bo.active_ind = true ) )
         JOIN (pe
         WHERE (pe.pft_encntr_id = bo.pft_encntr_id )
         AND (pe.active_ind = true ) )
         JOIN (e
         WHERE (e.encntr_id = pe.encntr_id )
         AND (e.active_ind = true ) )
         JOIN (p
         WHERE (p.person_id = e.person_id )
         AND (p.active_ind = true ) )
        ORDER BY br.corsp_activity_id
        HEAD br.corsp_activity_id
         sysactlog->personid = p.person_id ,sysactlog->logicaldomainid = p.logical_domain_id ,
         sysactlog->encntrid = e.encntr_id ,sysactlog->locfacilitycd = e.loc_facility_cd ,sysactlog->
         organizationid = e.organization_id
        WITH nocounter
       ;end select
       IF ((curqual = 0 ) )
        SELECT INTO "nl:"
         FROM (pft_pending_bill ppb ),
          (pft_encntr pe ),
          (encounter e ),
          (person p )
         PLAN (ppb
          WHERE (ppb.corsp_activity_id = pentityid ) )
          JOIN (pe
          WHERE (pe.pft_encntr_id = ppb.pft_encntr_id )
          AND (pe.active_ind = true ) )
          JOIN (e
          WHERE (e.encntr_id = pe.encntr_id )
          AND (e.active_ind = true ) )
          JOIN (p
          WHERE (p.person_id = e.person_id )
          AND (p.active_ind = true ) )
         ORDER BY ppb.corsp_activity_id
         HEAD ppb.corsp_activity_id
          sysactlog->personid = p.person_id ,sysactlog->logicaldomainid = p.logical_domain_id ,
          sysactlog->encntrid = e.encntr_id ,sysactlog->locfacilitycd = e.loc_facility_cd ,sysactlog
          ->organizationid = e.organization_id
         WITH nocounter
        ;end select
       ENDIF
      OF bo_hp_reltn_sys_log :
       SELECT INTO "nl:"
        FROM (bo_hp_reltn bhr ),
         (benefit_order bo ),
         (pft_encntr pe ),
         (encounter e ),
         (person p )
        PLAN (bhr
         WHERE (bhr.bo_hp_reltn_id = pentityid ) )
         JOIN (bo
         WHERE (bo.benefit_order_id = bhr.benefit_order_id )
         AND (bo.active_ind = true ) )
         JOIN (pe
         WHERE (pe.pft_encntr_id = bo.pft_encntr_id )
         AND (pe.active_ind = true ) )
         JOIN (e
         WHERE (e.encntr_id = pe.encntr_id )
         AND (e.active_ind = true ) )
         JOIN (p
         WHERE (p.person_id = e.person_id )
         AND (p.active_ind = true ) )
        ORDER BY bhr.bo_hp_reltn_id
        HEAD bhr.bo_hp_reltn_id
         sysactlog->personid = p.person_id ,sysactlog->logicaldomainid = p.logical_domain_id ,
         sysactlog->encntrid = e.encntr_id ,sysactlog->locfacilitycd = e.loc_facility_cd ,sysactlog->
         organizationid = e.organization_id
        WITH nocounter
       ;end select
      OF pft_encntr_sys_log :
       SELECT INTO "nl:"
        FROM (pft_encntr pe ),
         (encounter e ),
         (person p )
        PLAN (pe
         WHERE (pe.pft_encntr_id = pentityid )
         AND (pe.active_ind = true ) )
         JOIN (e
         WHERE (e.encntr_id = pe.encntr_id )
         AND (e.active_ind = true ) )
         JOIN (p
         WHERE (p.person_id = e.person_id )
         AND (p.active_ind = true ) )
        ORDER BY pe.encntr_id
        HEAD pe.encntr_id
         sysactlog->personid = p.person_id ,sysactlog->logicaldomainid = p.logical_domain_id ,
         sysactlog->encntrid = e.encntr_id ,sysactlog->locfacilitycd = e.loc_facility_cd ,sysactlog->
         organizationid = e.organization_id
        WITH nocounter
       ;end select
      OF encounter_sys_log :
       SET sysactlog->entityname = pft_encntr_sys_log
       SET sysactlog->entityid = 0.0
       SET sysactlog->encntrid = pentityid
       SELECT INTO "nl:"
        FROM (encounter e ),
         (person p ),
         (pft_encntr pe )
        PLAN (e
         WHERE (e.encntr_id = pentityid )
         AND (e.active_ind = true ) )
         JOIN (p
         WHERE (p.person_id = e.person_id )
         AND (p.active_ind = true ) )
         JOIN (pe
         WHERE (pe.encntr_id = outerjoin (e.encntr_id ) )
         AND (pe.active_ind = outerjoin (true ) ) )
        ORDER BY pe.pft_encntr_id ,
         e.encntr_id
        HEAD e.encntr_id
         sysactlog->personid = p.person_id ,sysactlog->logicaldomainid = p.logical_domain_id ,
         sysactlog->locfacilitycd = e.loc_facility_cd ,sysactlog->organizationid = e.organization_id
         ,sysactlog->entityid = pe.pft_encntr_id
        WITH nocounter
       ;end select
      OF charge_sys_log :
       SELECT INTO "nl:"
        FROM (charge c ),
         (encounter e ),
         (person p )
        PLAN (c
         WHERE (c.charge_item_id = pentityid )
         AND (c.active_ind = true ) )
         JOIN (e
         WHERE (e.encntr_id = c.encntr_id )
         AND (e.active_ind = true ) )
         JOIN (p
         WHERE (p.person_id = e.person_id )
         AND (p.active_ind = true ) )
        ORDER BY e.encntr_id
        HEAD e.encntr_id
         sysactlog->personid = p.person_id ,sysactlog->logicaldomainid = p.logical_domain_id ,
         sysactlog->encntrid = e.encntr_id ,sysactlog->locfacilitycd = e.loc_facility_cd ,sysactlog->
         organizationid = e.organization_id
        WITH nocounter
       ;end select
      OF batch_trans_sys_log :
       SELECT INTO "nl:"
        FROM (batch_trans bt )
        WHERE (bt.batch_trans_id = pentityid )
        ORDER BY bt.batch_trans_id
        HEAD bt.batch_trans_id
         sysactlog->entityid = bt.batch_trans_id ,sysactlog->logicaldomainid = bt.logical_domain_id
        WITH nocounter
       ;end select
      OF batch_trans_file_sys_log :
       SELECT INTO "nl:"
        FROM (batch_trans_file btf ),
         (batch_trans bt )
        PLAN (btf
         WHERE (btf.batch_trans_file_id = pentityid )
         AND (btf.active_ind = true ) )
         JOIN (bt
         WHERE (bt.batch_trans_id = btf.batch_trans_id )
         AND (bt.active_ind = true ) )
        ORDER BY btf.batch_trans_file_id
        HEAD btf.batch_trans_file_id
         sysactlog->logicaldomainid = bt.logical_domain_id
        WITH nocounter
       ;end select
      OF entity_trans_sys_log :
       SELECT INTO "nl:"
        FROM (trans_log t ),
         (batch_trans_reltn btr ),
         (batch_trans bt )
        PLAN (t
         WHERE (t.activity_id = pentityid )
         AND (t.active_ind = true ) )
         JOIN (btr
         WHERE (btr.activity_id = t.activity_id )
         AND (btr.active_ind = true ) )
         JOIN (bt
         WHERE (bt.batch_trans_id = btr.batch_trans_id )
         AND (bt.active_ind = true ) )
        ORDER BY t.activity_id
        HEAD t.activity_id
         sysactlog->logicaldomainid = bt.logical_domain_id
        WITH nocounter
       ;end select
      OF entity_account_sys_log :
       SELECT INTO "nl:"
        FROM (account a ),
         (pft_encntr pe ),
         (encounter e ),
         (person p )
        PLAN (a
         WHERE (a.acct_id = pentityid )
         AND (a.active_ind = true ) )
         JOIN (pe
         WHERE (pe.acct_id = a.acct_id )
         AND (pe.active_ind = true ) )
         JOIN (e
         WHERE (e.encntr_id = pe.encntr_id )
         AND (e.active_ind = true ) )
         JOIN (p
         WHERE (p.person_id = e.person_id )
         AND (p.active_ind = true ) )
        ORDER BY a.acct_id
        HEAD a.acct_id
         sysactlog->personid = p.person_id ,sysactlog->logicaldomainid = p.logical_domain_id ,
         sysactlog->encntrid = e.encntr_id ,sysactlog->locfacilitycd = e.loc_facility_cd ,sysactlog->
         organizationid = e.organization_id
        WITH nocounter
       ;end select
      OF entity_person_sys_log :
       SELECT INTO "nl:"
        FROM (person p )
        WHERE (p.person_id = pentityid )
        AND (p.active_ind = true )
        ORDER BY p.person_id
        HEAD p.person_id
         sysactlog->personid = p.person_id ,sysactlog->logicaldomainid = p.logical_domain_id
        WITH nocounter
       ;end select
      OF entity_billing_entity_sys_log :
       SELECT INTO "nl:"
        FROM (billing_entity be ),
         (organization o )
        PLAN (be
         WHERE (be.billing_entity_id = pentityid )
         AND (be.active_ind = true ) )
         JOIN (o
         WHERE (o.organization_id = be.organization_id )
         AND (o.active_ind = true ) )
        ORDER BY be.billing_entity_id
        HEAD be.billing_entity_id
         sysactlog->logicaldomainid = o.logical_domain_id ,sysactlog->organizationid = o
         .organization_id
        WITH nocounter
       ;end select
      OF entity_sch_event_sys_log :
       SELECT INTO "nl:"
        FROM (sch_event se ),
         (sch_appt sa ),
         (person p )
        PLAN (se
         WHERE (se.sch_event_id = pentityid )
         AND (se.active_ind = true ) )
         JOIN (sa
         WHERE (sa.sch_event_id = se.sch_event_id )
         AND (sa.active_ind = true ) )
         JOIN (p
         WHERE (p.person_id = sa.person_id )
         AND (p.active_ind = true ) )
        ORDER BY se.sch_event_id
        HEAD se.sch_event_id
         sysactlog->logicaldomainid = p.logical_domain_id
        WITH nocounter
       ;end select
      OF workflow_task_queue_hist_sys_log :
       SELECT INTO "nl:"
        FROM (workflow_task_queue_hist wtqh ),
         (person p )
        PLAN (wtqh
         WHERE (wtqh.workflow_task_queue_hist_id = pentityid ) )
         JOIN (p
         WHERE (p.person_id = wtqh.updt_id )
         AND (p.active_ind = true ) )
        DETAIL
         sysactlog->personid = p.person_id ,
         sysactlog->logicaldomainid = p.logical_domain_id
        WITH nocounter
       ;end select
      ELSE
       CALL logmessage (log_system_activity_sub ,build2 ("Invalid entity [" ,pentityname ,"]" ) ,
        log_warning )
       SET queriedind = false
     ENDCASE
     IF (queriedind )
      IF ((curqual = 0 ) )
       CALL logmessage (log_system_activity_sub ,build2 ("No results returned for entity id [" ,
         pentityid ,"]" ) ,log_warning )
      ENDIF
     ENDIF
    ENDIF
   ENDIF
   IF (logactivitytotable )
    SET hmsg = uar_srvselectmessage (submit_log )
    SET hreq = uar_srvcreaterequest (hmsg )
    SET hrep = uar_srvcreatereply (hmsg )
    SET hobjarray = uar_srvadditem (hreq ,"objArray" )
    SET stat = uar_srvsetdouble (hobjarray ,"final_status_cd" ,sysactlog->finalstatuscd )
    SET stat = uar_srvsetstring (hobjarray ,"entity_name" ,nullterm (sysactlog->entityname ) )
    SET stat = uar_srvsetdouble (hobjarray ,"entity_id" ,sysactlog->entityid )
    SET stat = uar_srvsetstring (hobjarray ,"task_name" ,nullterm (sysactlog->taskname ) )
    SET stat = uar_srvsetstring (hobjarray ,"completion_msg" ,nullterm (sysactlog->completionmsg ) )
    SET stat = uar_srvsetdouble (hobjarray ,"logical_domain_id" ,sysactlog->logicaldomainid )
    SET stat = uar_srvsetdouble (hobjarray ,"loc_facility_cd" ,sysactlog->locfacilitycd )
    SET stat = uar_srvsetdouble (hobjarray ,"organization_id" ,sysactlog->organizationid )
    SET stat = uar_srvsetdate (hobjarray ,"start_dt_tm" ,cnvtdatetime (sysactlog->startdttm ) )
    SET stat = uar_srvsetdate (hobjarray ,"end_dt_tm" ,cnvtdatetime (sysactlog->enddttm ) )
    SET stat = uar_srvsetdouble (hobjarray ,"encntr_id" ,sysactlog->encntrid )
    SET stat = uar_srvsetdouble (hobjarray ,"person_id" ,sysactlog->personid )
    SET stat = uar_srvsetdouble (hobjarray ,"pft_event_occur_log_id" ,sysactlog->pfteventoccurlogid
     )
    SET stat = uar_srvsetstring (hobjarray ,"current_node_name" ,nullterm (sysactlog->currentnodename
       ) )
    SET stat = uar_srvsetstring (hobjarray ,"server_name" ,nullterm (sysactlog->servername ) )
    SET stat = uar_srvsetstring (hobjarray ,"current_process_name" ,nullterm (trim (curprcname ,3 )
      ) )
    SET stat = uar_srvsetdouble (hobjarray ,"execution_duration_secs" ,sysactlog->
     executiondurationsecs )
    SET stat = uar_srvsetstring (hobjarray ,"timer_ident" ,nullterm (sysactlog->timeridentifier ) )
    SET srvstatus = uar_srvexecute (hmsg ,hreq ,hrep )
    IF ((srvstatus != 0 ) )
     CALL echo (build2 ("Execution of pft_save_system_activity_log was not successful" ) )
    ENDIF
    IF (validate (debug ) )
     CALL echorecord (sysactlog )
    ENDIF
    CALL uar_srvdestroyinstance (hreq )
    CALL uar_srvdestroyinstance (hrep )
   ENDIF
   IF (((logactivitytofile ) OR (logactivitytomsgview )) )
    SET logfilemsg = build (sysactlog->entityname ,"|" ,cnvtstring (sysactlog->entityid ,17 ,2 ) ,
     "|" ,sysactlog->taskname ,"|" ,cnvtstring (sysactlog->finalstatuscd ,17 ,2 ) ,"|" ,sysactlog->
     completionmsg ,"|" ,cnvtstring (sysactlog->personid ,17 ,2 ) ,"|" ,cnvtstring (sysactlog->
      encntrid ,17 ,2 ) ,"|" ,cnvtstring (sysactlog->organizationid ,17 ,2 ) ,"|" ,cnvtstring (
      sysactlog->locfacilitycd ,17 ,2 ) ,"|" ,cnvtstring (sysactlog->logicaldomainid ,17 ,2 ) ,"|" ,
     cnvtstring (sysactlog->pfteventoccurlogid ,17 ,2 ) ,"|" ,sysactlog->currentnodename ,"|" ,
     sysactlog->servername ,"|" ,trim (curprcname ,3 ) ,"|" ,cnvtstring (sysactlog->
      executiondurationsecs ,17 ,2 ) ,"|" ,sysactlog->timeridentifier ,"|" ,format (sysactlog->
      startdttm ,";;Q" ) ,"|" ,format (sysactlog->enddttm ,";;Q" ) ,char (13 ) ,char (10 ) )
    WHILE ((logfilesize >= max_file_size_in_bytes ) )
     SET logfilenum = (logfilenum + 1 )
     SET msgfilename = concat (base_log_file_name ,cnvtstring (logfilenum ,11 ) )
     SET logfilename = concat (msgfilename ,".txt" )
     SET logfilesize = getfilesize (logfilename )
    ENDWHILE
   ENDIF
   IF (logactivitytofile )
    IF ((logfilesize = 0 ) )
     DECLARE logfileheader = vc WITH protect ,noconstant ("" )
     SET logfileheader = build (
      "ENTITY_NAME|ENTITY_ID|TASK_NAME|FINAL_STATUS_CD|COMPLETION_MSG|PERSON_ID|ENCNTR_ID|" ,
      "ORGANIZATION_ID|LOC_FACILITY_CD|LOGICAL_DOMAIN_ID|PFT_EVENT_OCCUR_LOG_ID|" ,
      "CURRENT_NODE_NAME|SERVER_NAME|CURRENT_PROCESS_NAME|EXECUTION_DURATION_SECS|TIMER_IDENT|" ,
      "START_DT_TM|END_DT_TM" ,char (13 ) ,char (10 ) )
     SET loggedmsgind = transcribetofile (logfilename ,logfileheader ,"a" )
    ENDIF
    SET loggedmsgind = transcribetofile (logfilename ,logfilemsg ,"a" )
    IF (NOT (loggedmsgind ) )
     CALL logmessage (log_system_activity_sub ,concat ("Failed to write to file:" ,logfilename ) ,
      log_warning )
    ENDIF
   ENDIF
   IF (logactivitytomsgview )
    IF ((size (msgfilename ,1 ) <= max_msgview_file_name_size ) )
     EXECUTE msgrtl
     SET msghandle = uar_msgopen (nullterm (msgfilename ) )
     IF ((msghandle != 0 ) )
      CALL uar_msgsetlevel (msghandle ,msgloglevel )
      CALL uar_msgwrite (msghandle ,0 ,nullterm (msglogevent ) ,msgloglevel ,nullterm (logfilemsg )
       )
      CALL uar_msgclose (msghandle )
     ELSE
      CALL logmessage (log_system_activity_sub ,
       "Failed to write to MsgView. No file handle obtained" ,log_warning )
     ENDIF
    ELSE
     CALL logmessage (log_system_activity_sub ,concat ("File name " ,msgfilename ,
       " exceeds 31 character limit" ) ,log_warning )
    ENDIF
   ENDIF
  END ;Subroutine
 ENDIF
 IF ((validate (buildtimerident ,char (128 ) ) = char (128 ) ) )
  DECLARE buildtimerident ((psubroutinename = vc ) ,(psequencenumber = i4 ) ) = vc
  SUBROUTINE  buildtimerident (psubroutinename ,psequencenumber )
   DECLARE concatenatedvalue = vc WITH protect ,noconstant ("" )
   SET psubroutinename = trim (cnvtupper (psubroutinename ) ,3 )
   SET concatenatedvalue = concat (psubroutinename ,"-" ,cnvtstring (psequencenumber ,11 ) )
   RETURN (concatenatedvalue )
  END ;Subroutine
 ENDIF
 IF (NOT (validate (reply->status_data ) ) )
  RECORD reply (
    1 status_data
      2 status = c1
      2 subeventstatus [1 ]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 FREE RECORD event_temp_request
 RECORD event_temp_request (
   1 devent_id = f8
 )
 FREE RECORD event_temp_reply
 RECORD event_temp_reply (
   1 devent_type_cd = f8
   1 devent_sub_type_cd = f8
   1 lcurrent_occurrence = i4
   1 levent_updt_cnt = i4
   1 devent_occur_log_id = f8
   1 devent_status_cd = f8
   1 devent_reason_cd = f8
   1 loccur_updt_cnt = i4
   1 lparams_qual = i4
   1 aparams [* ]
     2 devent_params_id = f8
     2 dvalue_meaning = f8
     2 svalue = vc
   1 status_data
     2 status = c1
     2 subeventstatus [1 ]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 )
 FREE RECORD event_end_temp_request
 RECORD event_end_temp_request (
   1 devent_occur_log_id = f8
   1 dstatus_cd = f8
   1 dreason_cd = f8
 )
 FREE RECORD event_end_temp_reply
 RECORD event_end_temp_reply (
   1 status_data
     2 status = c1
     2 subeventstatus [1 ]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 )
 FREE RECORD cagency
 RECORD cagency (
   1 billing_entity_list [* ]
     2 beid = f8
     2 parent_be_id = f8
     2 media_type_cd = f8
     2 collection_agency_id = f8
     2 encntrs [* ]
       3 pft_encntr_id = f8
       3 batch_id_wrap = f8
       3 batch_number = i4
       3 create_dt_tm = dq8
       3 batch_event_id = f8
 )
 FREE RECORD dates
 RECORD dates (
   1 dqstartdttm = dq8
   1 dqfilestartdttm = dq8
   1 dqbatchstartdttm = dq8
   1 dqfileenddttm = dq8
   1 dqbatchenddttm = dq8
 )
 FREE RECORD input_oenobj
 RECORD input_oenobj (
   1 interface_id = f8
   1 cerner
     2 msg_id = vc
     2 oe_info
       3 replication_idx = i4
       3 replication_max = i4
       3 batch_id = i4
       3 pid_cont_sys_id_list [* ]
         4 proc_id = i4
         4 cont_sys_ids [* ]
           5 cont_sys_id = i4
     2 longlist [* ]
       3 lval = i4
       3 strmeaning = vc
     2 stringlist [* ]
       3 strval = vc
       3 strmeaning = vc
     2 doublelist [* ]
       3 dval = f8
       3 strmeaning = vc
 )
 FREE RECORD reportinforeq
 RECORD reportinforeq (
   1 org_id = f8
   1 billing_entity_id = f8
   1 printer_location = vc
   1 encntr_list [* ]
     2 pft_encntr_id = f8
 )
 DECLARE ilog_flag = i2 WITH noconstant (0 )
 DECLARE ieventparamcount = i2 WITH noconstant (0 )
 DECLARE gcount = i2 WITH noconstant (0 )
 DECLARE hcount = i2 WITH noconstant (0 )
 DECLARE icount = i2 WITH noconstant (0 )
 DECLARE jcount = i2 WITH noconstant (0 )
 DECLARE kcount = i2 WITH noconstant (0 )
 DECLARE iagencyflag = i2 WITH noconstant (0 )
 DECLARE stringcnt = i2 WITH noconstant (0 )
 DECLARE bcount = i4 WITH noconstant (0 )
 DECLARE ecount = i4 WITH noconstant (0 )
 DECLARE loutboundcount = i4 WITH noconstant (0 )
 DECLARE iend_batch_return = i4 WITH noconstant (0 )
 DECLARE ienq_batch_event_return = i4 WITH noconstant (0 )
 DECLARE idestroy_ui_message_return = i4 WITH noconstant (0 )
 DECLARE lcallreturn = i4 WITH noconstant (0 )
 DECLARE lbatchcount = i4 WITH noconstant (0 )
 DECLARE cvbeid = f8 WITH noconstant (0.0 )
 DECLARE cvactive = f8 WITH noconstant (0.0 )
 DECLARE cvreadytosend = f8 WITH noconstant (0.0 )
 DECLARE cvatagency = f8 WITH noconstant (0.0 )
 DECLARE cvpayadjcol = f8 WITH noconstant (0.0 )
 DECLARE dbatch_id = f8 WITH noconstant (0.0 )
 DECLARE dfile_header_handle = f8 WITH noconstant (0.0 )
 DECLARE dfile_end_handle = f8 WITH noconstant (0.0 )
 DECLARE dbatch_header_handle = f8 WITH noconstant (0.0 )
 DECLARE dbatch_trailer_handle = f8 WITH noconstant (0.0 )
 DECLARE ddetail_header_handle = f8 WITH noconstant (0.0 )
 DECLARE cvcollagencytypecd = f8 WITH noconstant (0.0 )
 DECLARE cvprecollagencytypecd = f8 WITH noconstant (0.0 )
 DECLARE printer_loc_cd = f8 WITH noconstant (0.0 )
 DECLARE coll_report_cd = f8 WITH noconstant (0.0 )
 DECLARE edi_cd = f8 WITH noconstant (0.0 )
 DECLARE paper_cd = f8 WITH noconstant (0.0 )
 DECLARE adj_bal = f8 WITH noconstant (0.0 )
 DECLARE bad_debt_bal = f8 WITH noconstant (0.0 )
 DECLARE cvcollinterfacedcd = f8 WITH noconstant (0.0 )
 DECLARE cvprecollinterfacedcd = f8 WITH noconstant (0.0 )
 DECLARE cvpftencntrcd = f8 WITH noconstant (0.0 )
 DECLARE cvincollcd = f8 WITH noconstant (0.0 )
 DECLARE cvinprecollcd = f8 WITH noconstant (0.0 )
 DECLARE cvcontribsystemcd = f8 WITH noconstant (0.0 )
 DECLARE cvagencytypecd = f8 WITH noconstant (0.0 )
 DECLARE dcontribsystemcd = f8 WITH noconstant (0.0 )
 DECLARE smodule = vc WITH constant ("PFT_OCOLL_IFACE" )
 DECLARE sscript_status = vc WITH noconstant ("FAILURE" )
 DECLARE class = vc
 DECLARE type = vc
 DECLARE subtype = vc
 DECLARE cdf_meaning = c20
 DECLARE sagencytype = vc WITH noconstant ("" )
 DECLARE sprinterlocation = vc WITH noconstant ("" )
 DECLARE sscriptname = vc WITH noconstant ("" )
 DECLARE batchfilename = vc
 DECLARE batchroute = vc
 SET cdf_meaning = fillstring (20 ,"" )
 SET code_set = 24454
 SET cdf_meaning = "BEID"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,cvbeid )
 IF ((cvbeid = 0 ) )
  CALL log_message ("Failed To Cache BEID Meaning:" ,"F" ,0 )
 ENDIF
 SET code_set = 24454
 SET cdf_meaning = "PRINTERLOC"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,printer_loc_cd )
 IF ((printer_loc_cd = 0 ) )
  CALL log_message ("Failed To Cache Printer_Loc_cd Meaning:" ,"F" ,0 )
 ENDIF
 SET code_set = 24454
 SET cdf_meaning = "COLL REPORT"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,coll_report_cd )
 IF ((coll_report_cd = 0 ) )
  CALL log_message ("Failed To Cache Coll_Report_cd Meaning:" ,"F" ,0 )
 ENDIF
 SET code_set = 24454
 SET cdf_meaning = "CONTRIBSYS"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,cvcontribsystemcd )
 IF ((cvcontribsystemcd = 0 ) )
  CALL log_message ("Failed To Cache cvContribSystemCd Meaning:" ,"F" ,0 )
 ENDIF
 SET code_set = 24454
 SET cdf_meaning = "AGENCYTYPE"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,cvagencytypecd )
 IF ((cvagencytypecd = 0 ) )
  CALL log_message ("Failed To Cache cvAgencyTypeCd Meaning:" ,"F" ,0 )
 ENDIF
 IF (NOT (validate (cs24454_batchroute ) ) )
  DECLARE cs24454_batchroute = f8 WITH constant (getcodevalue (24454 ,"BATCHROUTE" ,0 ) )
 ENDIF
 IF (NOT (validate (cs24454_btchfilename ) ) )
  DECLARE cs24454_btchfilename = f8 WITH constant (getcodevalue (24454 ,"BTCHFILENAME" ,0 ) )
 ENDIF
 SET code_set = 21752
 SET cdf_meaning = "EDI"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,edi_cd )
 IF ((edi_cd = 0 ) )
  CALL log_message ("Failed To Cache EDI_cd Meaning:" ,"F" ,0 )
 ENDIF
 SET code_set = 21752
 SET cdf_meaning = "PAPER"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,paper_cd )
 IF ((paper_cd = 0 ) )
  CALL log_message ("Failed To Cache Paper_cd Meaning:" ,"F" ,0 )
 ENDIF
 SET code_set = 48
 SET cdf_meaning = "ACTIVE"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,cvactive )
 IF ((cvactive = 0 ) )
  CALL log_message ("Failed To Cache Active Meaning:" ,"F" ,0 )
 ENDIF
 SET code_set = 28120
 SET cdf_meaning = "READYTOSEND"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,cvreadytosend )
 IF ((cvreadytosend = 0 ) )
  CALL log_message ("Failed To Cache cvReadyToSend Meaning:" ,"F" ,0 )
 ENDIF
 SET code_set = 28120
 SET cdf_meaning = "ATAGENCY"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,cvatagency )
 IF ((cvatagency = 0 ) )
  CALL log_message ("Failed To Cache cvAtAgency:" ,"F" ,0 )
 ENDIF
 SET code_set = 26900
 SET cdf_meaning = "PAYADJTOCOL"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,cvpayadjcol )
 IF ((cvpayadjcol = 0 ) )
  CALL log_message ("Failed To Cache cvPayAdjCol:" ,"F" ,0 )
 ENDIF
 CALL uar_get_meaning_by_codeset (278 ,"COLAGENCY" ,1 ,cvcollagencytypecd )
 CALL uar_get_meaning_by_codeset (278 ,"PRECOLAGENCY" ,1 ,cvprecollagencytypecd )
 SET code_set = 29823
 SET cdf_meaning = "COLLINTFACED"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,cvcollinterfacedcd )
 IF ((cvcollinterfacedcd = 0 ) )
  CALL log_message ("Failed To Cache cvCollInterfacedCd:" ,"F" ,0 )
 ENDIF
 SET code_set = 29823
 SET cdf_meaning = "PRECOLLIFACE"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,
  cvprecollinterfacedcd )
 IF ((cvprecollinterfacedcd = 0 ) )
  CALL log_message ("Failed To Cache cvPrecollInterfacedCd:" ,"F" ,0 )
 ENDIF
 SET code_set = 29320
 SET cdf_meaning = "PFTENCNTR"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,cvpftencntrcd )
 IF ((cvpftencntrcd = 0 ) )
  CALL log_message ("Failed To Cache cvPftEncntrCd:" ,"F" ,0 )
 ENDIF
 SET code_set = 29321
 SET cdf_meaning = "INCOLL"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,cvincollcd )
 IF ((cvincollcd = 0 ) )
  CALL log_message ("Failed To Cache cvInCollCd:" ,"F" ,0 )
 ENDIF
 SET code_set = 29321
 SET cdf_meaning = "INPRECOLL"
 SET cnt = 1
 SET stat = uar_get_meaning_by_codeset (code_set ,nullterm (cdf_meaning ) ,cnt ,cvinprecollcd )
 IF ((cvinprecollcd = 0 ) )
  CALL log_message ("Failed To Cache cvInPreCollCd:" ,"F" ,0 )
 ENDIF
 SET ilog_flag = 0
 SET dates->dqstartdttm = cnvtdatetime (curdate ,curtime3 )
 CALL echo ("<===== SI_BATCH_PROCESSING.INC Begin =====>" )
 CALL echo ("MOD:033" )
 EXECUTE si_crmrtl
 EXECUTE si_srvrtl
 CALL echo ("<===== ESO_GET_CODE.INC Begin =====>" )
 CALL echo ("MOD:008" )
 DECLARE eso_get_code_meaning (code ) = c12
 DECLARE eso_get_code_display (code ) = c40
 DECLARE eso_get_meaning_by_codeset (x_code_set ,x_meaning ) = f8
 DECLARE eso_get_code_set (code ) = i4
 DECLARE eso_get_alias_or_display (code ,contrib_src_cd ) = vc
 SUBROUTINE  eso_get_code_meaning (code )
  CALL echo ("Entering eso_get_code_meaning subroutine" )
  CALL echo (build ("    code=" ,code ) )
  FREE SET t_meaning
  DECLARE t_meaning = c12
  SET t_meaning = fillstring (12 ," " )
  IF ((code > 0 ) )
   IF (validate (readme_data ,0 ) )
    CALL echo ("    A Readme is calling this script" )
    CALL echo ("    selecting rows from code_value table" )
    SELECT INTO "nl:"
     cv.*
     FROM (code_value cv )
     WHERE (cv.code_value = code )
     AND (cv.begin_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
     AND (cv.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) )
     AND (cv.active_ind = 1 )
     DETAIL
      t_meaning = cv.cdf_meaning
     WITH maxqual (cv ,1 )
    ;end select
    IF ((curqual < 1 ) )
     CALL echo ("    no rows qualified on code_value table" )
    ENDIF
   ELSE
    SET t_meaning = uar_get_code_meaning (cnvtreal (code ) )
    IF ((trim (t_meaning ) = "" ) )
     CALL echo ("    uar_get_code_meaning failed" )
     CALL echo ("    selecting row from code_value table" )
     SELECT INTO "nl:"
      cv.*
      FROM (code_value cv )
      WHERE (cv.code_value = code )
      AND (cv.begin_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
      AND (cv.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) )
      AND (cv.active_ind = 1 )
      DETAIL
       t_meaning = cv.cdf_meaning
      WITH maxqual (cv ,1 )
     ;end select
     IF ((curqual < 1 ) )
      CALL echo ("    no rows qualified on code_value table" )
     ENDIF
    ENDIF
   ENDIF
  ENDIF
  CALL echo (build ("    t_meaning=" ,t_meaning ) )
  CALL echo ("Exiting eso_get_code_meaning subroutine" )
  RETURN (trim (t_meaning ,3 ) )
 END ;Subroutine
 SUBROUTINE  eso_get_code_display (code )
  CALL echo ("Entering eso_get_code_display subroutine" )
  CALL echo (build ("    code=" ,code ) )
  FREE SET t_display
  DECLARE t_display = c40
  SET t_display = fillstring (40 ," " )
  IF ((code > 0 ) )
   IF (validate (readme_data ,0 ) )
    CALL echo ("   A Readme is calling this script" )
    CALL echo ("   Selecting rows from code_value table" )
    SELECT INTO "nl:"
     cv.*
     FROM (code_value cv )
     WHERE (cv.code_value = code )
     AND (cv.begin_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
     AND (cv.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) )
     AND (cv.active_ind = 1 )
     DETAIL
      t_display = cv.display
     WITH maxqual (cv ,1 )
    ;end select
    IF ((curqual < 1 ) )
     CALL echo ("    no rows qualified on code_value table" )
    ENDIF
   ELSE
    SET t_display = uar_get_code_display (cnvtreal (code ) )
    IF ((trim (t_display ) = "" ) )
     CALL echo ("    uar_get_code_display failed" )
     CALL echo ("    selecting row from code_value table" )
     SELECT INTO "nl:"
      cv.*
      FROM (code_value cv )
      WHERE (cv.code_value = code )
      AND (cv.begin_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
      AND (cv.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) )
      AND (cv.active_ind = 1 )
      DETAIL
       t_display = cv.display
      WITH maxqual (cv ,1 )
     ;end select
     IF ((curqual < 1 ) )
      CALL echo ("    no rows qualified on code_value table" )
     ENDIF
    ENDIF
   ENDIF
  ENDIF
  CALL echo (build ("    t_display=" ,t_display ) )
  CALL echo ("Exiting eso_get_code_display subroutine" )
  RETURN (trim (t_display ,3 ) )
 END ;Subroutine
 SUBROUTINE  eso_get_meaning_by_codeset (x_code_set ,x_meaning )
  CALL echo ("Entering eso_get_meaning_by_codeset subroutine" )
  CALL echo (build ("    code_set=" ,x_code_set ) )
  CALL echo (build ("    meaning=" ,x_meaning ) )
  FREE SET t_code
  DECLARE t_code = f8
  SET t_code = 0.0
  IF ((x_code_set > 0 )
  AND (trim (x_meaning ) > "" ) )
   FREE SET t_meaning
   DECLARE t_meaning = c12
   SET t_meaning = fillstring (12 ," " )
   SET t_meaning = x_meaning
   FREE SET t_rc
   IF (validate (readme_data ,0 ) )
    CALL echo ("   A Readme is calling this script" )
    CALL echo ("   Selecting rows from code_value table" )
    SELECT INTO "nl:"
     cv.*
     FROM (code_value cv )
     WHERE (cv.code_set = x_code_set )
     AND (cv.cdf_meaning = trim (x_meaning ) )
     AND (cv.begin_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
     AND (cv.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) )
     AND (cv.active_ind = 1 )
     DETAIL
      t_code = cv.code_value
     WITH maxqual (cv ,1 )
    ;end select
    IF ((curqual < 1 ) )
     CALL echo ("    no rows qualified on code_value table" )
    ENDIF
   ELSE
    SET t_rc = uar_get_meaning_by_codeset (cnvtint (x_code_set ) ,nullterm (t_meaning ) ,1 ,t_code )
    IF ((t_code <= 0 ) )
     CALL echo ("    uar_get_meaning_by_codeset failed" )
     CALL echo ("    selecting row from code_value table" )
     SELECT INTO "nl:"
      cv.*
      FROM (code_value cv )
      WHERE (cv.code_set = x_code_set )
      AND (cv.cdf_meaning = trim (x_meaning ) )
      AND (cv.begin_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
      AND (cv.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) )
      AND (cv.active_ind = 1 )
      DETAIL
       t_code = cv.code_value
      WITH maxqual (cv ,1 )
     ;end select
     IF ((curqual < 1 ) )
      CALL echo ("    no rows qualified on code_value table" )
     ENDIF
    ENDIF
   ENDIF
  ENDIF
  CALL echo (build ("    t_code=" ,t_code ) )
  CALL echo ("Exiting eso_get_meaning_by_codeset subroutine" )
  RETURN (t_code )
 END ;Subroutine
 SUBROUTINE  eso_get_code_set (code )
  CALL echo ("Entering eso_get_code_set subroutine" )
  CALL echo (build ("    code=" ,code ) )
  DECLARE icode_set = i4 WITH private ,noconstant (0 )
  IF ((code > 0 ) )
   IF (validate (readme_data ,0 ) )
    CALL echo ("   A Readme is calling this script" )
    CALL echo ("   Selecting rowS from code_value table" )
    SELECT INTO "nl:"
     cv.code_set
     FROM (code_value cv )
     WHERE (cv.code_value = code )
     AND (cv.begin_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
     AND (cv.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) )
     AND (cv.active_ind = 1 )
     DETAIL
      icode_set = cv.code_set
     WITH maxqual (cv ,1 )
    ;end select
    IF ((curqual < 1 ) )
     CALL echo ("    no rows qualified on code_value table" )
    ENDIF
   ELSE
    SET icode_set = uar_get_code_set (cnvtreal (code ) )
    IF (NOT ((icode_set > 0 ) ) )
     CALL echo ("    uar_get_code_set failed" )
     CALL echo ("    selecting row from code_value table" )
     SELECT INTO "nl:"
      cv.code_set
      FROM (code_value cv )
      WHERE (cv.code_value = code )
      AND (cv.begin_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
      AND (cv.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) )
      AND (cv.active_ind = 1 )
      DETAIL
       icode_set = cv.code_set
      WITH maxqual (cv ,1 )
     ;end select
     IF ((curqual < 1 ) )
      CALL echo ("    no rows qualified on code_value table" )
     ENDIF
    ENDIF
   ENDIF
  ENDIF
  CALL echo (build ("    Code_set=" ,icode_set ) )
  CALL echo ("Exiting eso_get_code_set subroutine" )
  RETURN (icode_set )
 END ;Subroutine
 SUBROUTINE  eso_get_alias_or_display (code ,contrib_src_cd )
  CALL echo ("Entering eso_get_alias_or_display" )
  CALL echo (build ("   code            = " ,code ) )
  CALL echo (build ("   contrib_src_cd = " ,contrib_src_cd ) )
  FREE SET t_alias_or_display
  DECLARE t_alias_or_display = vc
  SET t_alias_or_display = " "
  IF (NOT ((code > 0.0 ) ) )
   RETURN (t_alias_or_display )
  ENDIF
  IF ((contrib_src_cd > 0.0 ) )
   SELECT INTO "nl:"
    cvo.alias
    FROM (code_value_outbound cvo )
    WHERE (cvo.code_value = code )
    AND (cvo.contributor_source_cd = contrib_src_cd )
    DETAIL
     IF ((cvo.alias > "" ) ) t_alias_or_display = cvo.alias
     ENDIF
    WITH nocounter
   ;end select
  ENDIF
  IF ((size (trim (t_alias_or_display ) ) = 0 ) )
   CALL echo ("Alias not found, checking code value display" )
   SET t_alias_or_display = eso_get_code_display (code )
  ENDIF
  CALL echo ("Exiting eso_get_alias_or_display" )
  RETURN (t_alias_or_display )
 END ;Subroutine
 CALL echo ("<===== ESO_GET_CODE.INC End =====>" )
 DECLARE begin_batch2 (batchnumber2 ,batchdescription2 ,batchorigincdf2 ,interfacetypecdf2 ,
  messageformatcdf2 ,sysdirectioncdf2 ,dummy2 ) = f8
 DECLARE begin_batch (batchnumber ,batchdescription ,batchorigincdf ,interfacetypecdf ,
  messageformatcdf ) = f8
 DECLARE end_batch2 (batchid2 ,interfaceid2 ,suppressnotifyoeind2 ,dummy2 ) = i2
 DECLARE end_batch (batchid ,interfaceid ) = i2
 DECLARE update_event_sys_row2 (s_dbatcheventid2 ,s_ieventstatus ,s_strgsident ,s_strstident ,
  s_ibegsegseq ,s_iendsegseq ,s_igrpbegsegseq ,s_igrpendsegseq ,s_streventstattext ,s_dresponsecd )
 = i2
 DECLARE reset_batch2 (s_dbatchid ,s_dinterfaceid ,s_iresetflag ,s_strgsident ,s_strstident ,
  s_isortflag ) = i2
 DECLARE reset_batch ((batchid = f8 ) ,(interfaceid = f8 ) ,(resetflag = i2 ) ) = i2
 DECLARE create_ui_message (class ,type ,subtype ,subtype_detail ) = i4
 DECLARE create_trigger (class ,type ,subtype ,subtype_detail ) = i4
 DECLARE reset_ui_message (hreq1 ) = i2
 DECLARE destroy_ui_message (hreq1 ) = i2
 DECLARE enq_batch_event (batchid ,batchsortflag ,sortstring ,sub_hreq ) = f8
 DECLARE deq_batch_event (batcheventid ) = i4
 DECLARE set_batch_stats ((batchid = f8 ) ,(interfaceid = f8 ) ,(tallycdf = c12 ) ,(tallyvalue = vc
  ) ) = i2
 DECLARE get_batch_stats ((batchid = f8 ) ,(interfaceid = f8 ) ,(tallycdf = c12 ) ) = vc
 DECLARE get_alias (contributorsourcecd ,codevalue ) = vc
 DECLARE notify_oe (batchid2 ) = i2
 DECLARE suppress_event ((batcheventid = f8 ) ) = i2
 DECLARE unsuppress_event ((batcheventid = f8 ) ) = i2
 DECLARE mark_batch_complete ((batchid2 = f8 ) ) = i2
 DECLARE explode_events (batchid2 ,interfaceid2 ,ccsortstring2 ,contributorsystemcd2 ) = i2
 DECLARE get_batch_routing (batchid2 ,interfaceid ) = i2
 DECLARE get_sort_order (batchid3 ,sortstring3 ,origin3 ) = i2
 DECLARE sort_events (dummy1 ) = i2
 DECLARE init_srv_stuff (messageid ,get_hreq ,get_hrep ) = i2
 DECLARE cleanup_srv_stuff (dummy1 ) = i2
 DECLARE init_crm_stuff (appnbr ,tasknbr ,reqnbr ) = i2
 DECLARE cleanup_crm_stuff (dummy1 ) = i2
 DECLARE undo_si_batch (batchidx ) = i2
 DECLARE undo_si_batch_event (batcheventidx ) = i2
 DECLARE copylists_to_cernerarea (caseflag ) = i2
 DECLARE update_event_sys_row ((batcheventid2 = f8 ) ,(eventstatus = i2 ) ) = i2
 DECLARE reset_si_batch_req (d1 ) = i2
 DECLARE reset_si_batch_rep (d1 ) = i2
 DECLARE reset_si_batch_stats_req (d1 ) = i2
 DECLARE reset_si_batch_stats_rep (d1 ) = i2
 DECLARE reset_si_batch_sys_req (d1 ) = i2
 DECLARE reset_si_batch_sys_rep (d1 ) = i2
 DECLARE reset_si_batch_event_req (d1 ) = i2
 DECLARE reset_si_batch_event_rep (d1 ) = i2
 DECLARE unprocessed = i2 WITH public ,constant (10 )
 DECLARE oenotified = i2 WITH public ,constant (20 )
 DECLARE comserversprocessing = i2 WITH public ,constant (30 )
 DECLARE errorincomserversprocessing = i2 WITH public ,constant (60 )
 DECLARE errornotifyingoe = i2 WITH public ,constant (70 )
 DECLARE errorinprocessing = i2 WITH public ,constant (80 )
 DECLARE processed = i2 WITH public ,constant (90 )
 DECLARE batch_begin = i2 WITH public ,constant (100 )
 DECLARE msg_header = i2 WITH public ,constant (200 )
 DECLARE trans_set_header = i2 WITH public ,constant (250 )
 DECLARE msg_detail = i2 WITH public ,constant (300 )
 DECLARE trans_set_trailer = i2 WITH public ,constant (350 )
 DECLARE msg_trailer = i2 WITH public ,constant (400 )
 DECLARE batch_end = i2 WITH public ,constant (500 )
 DECLARE unprocessedevent = i2 WITH public ,constant (10 )
 DECLARE errorinprocessingevent = i2 WITH public ,constant (70 )
 DECLARE processedevent = i2 WITH public ,constant (90 )
 DECLARE suppressedevent = i2 WITH public ,constant (100 )
 DECLARE resetall = i2 WITH public ,constant (1 )
 DECLARE resetprocessed = i2 WITH public ,constant (2 )
 DECLARE reseterrorinprocessing = i2 WITH public ,constant (3 )
 DECLARE sysdircs = f8 WITH public ,constant (14869.0 )
 DECLARE batchorigincs = f8 WITH public ,constant (25452.0 )
 DECLARE interfacetypecs = f8 WITH public ,constant (19169.0 )
 DECLARE esiinterfacetypecs = f8 WITH public ,constant (28480.0 )
 DECLARE msgformatcs = f8 WITH public ,constant (25453.0 )
 DECLARE tallycs = f8 WITH public ,constant (25560.0 )
 DECLARE glb_sortind = i2 WITH public ,noconstant (0 )
 FREE RECORD params_rec
 RECORD params_rec (
   1 end_batch
     2 suppress_notify_oe_ind = i4
   1 all_sub
     2 sys_direction_cd = f8
 )
 FREE RECORD crmrec
 RECORD crmrec (
   1 qual [* ]
     2 app = i4
     2 task = i4
     2 req = i4
     2 happ = i4
     2 htask = i4
     2 hreq = i4
     2 hstep = i4
     2 status = i4
 )
 FREE RECORD srvrec
 RECORD srvrec (
   1 qual [* ]
     2 msg_id = i4
     2 hmsg = i4
     2 hreq = i4
     2 hrep = i4
     2 status = i4
 )
 FREE RECORD oenobj
 RECORD oenobj (
   1 interface_id = f8
   1 cerner
     2 msg_id = vc
     2 oe_info
       3 replication_idx = i4
       3 replication_max = i4
       3 batch_info
         4 batch_id = f8
         4 batch_event_id = f8
       3 pid_cont_sys_id_list [* ]
         4 proc_id = i4
         4 cont_sys_ids [* ]
           5 cont_sys_id = i4
     2 longlist [* ]
       3 lval = i4
       3 strmeaning = vc
     2 stringlist [* ]
       3 strval = vc
       3 strmeaning = vc
     2 doublelist [* ]
       3 dval = f8
       3 strmeaning = vc
 )
 FREE RECORD rep_oen_list
 RECORD rep_oen_list (
   1 route_list [* ]
     2 interface_id = f8
     2 sort_string = vc
     2 contributor_system_cd = f8
   1 status_data
     2 status = c1
     2 subeventstatus [1 ]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 )
 FREE RECORD ccsort_order
 RECORD ccsort_order (
   1 qual [* ]
     2 field_name = vc
     2 operator = c2
     2 numeric_value = f8
     2 string_value = vc
 )
 FREE RECORD tblsort_order
 RECORD tblsort_order (
   1 qual [* ]
     2 batch_event_id = f8
     2 batch_id = f8
     2 seq_num = i4
     2 batch_sort_flag = i2
     2 sort_info [* ]
       3 field_name = vc
       3 operator = c2
       3 numeric_value = f8
       3 string_value = vc
 )
 FREE RECORD sorted_rec
 RECORD sorted_rec (
   1 qual [* ]
     2 batch_event_id = f8
     2 batch_id = f8
     2 seq_num = i4
     2 batch_sort_flag = i2
     2 sort_info [* ]
       3 field_name = vc
       3 operator = c2
       3 numeric_value = f8
       3 string_value = vc
 )
 FREE RECORD req_si_batch
 RECORD req_si_batch (
   1 debuglogging = i2
   1 request_type = c15
   1 req_set [* ]
     2 batch_id = f8
     2 batch_number = c25
     2 batch_description = vc
     2 batch_origin_cd = f8
     2 sys_direction_cd = f8
     2 interface_type_cd = f8
     2 message_format_cd = f8
     2 message_location = vc
     2 batch_status_flag = i2
 )
 FREE RECORD rep_si_batch
 RECORD rep_si_batch (
   1 qual [* ]
     2 batch_id = f8
     2 batch_number = vc
     2 batch_description = vc
     2 batch_origin_cd = f8
     2 sys_direction_cd = f8
     2 interface_type_cd = f8
     2 message_format_cd = f8
     2 message_location = vc
     2 batch_status_flag = i2
   1 si_info
     2 longlist [* ]
       3 lval = i4
       3 strmeaning = vc
     2 stringlist [* ]
       3 strval = vc
       3 strmeaning = vc
     2 doublelist [* ]
       3 dval = f8
       3 strmeaning = vc
   1 status_data
     2 status = c1
     2 subeventstatus [* ]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 )
 FREE RECORD req_si_batch_stats
 RECORD req_si_batch_stats (
   1 debuglogging = i2
   1 request_type = c15
   1 req_set [* ]
     2 batch_id = f8
     2 interface_id = f8
     2 oen_trigger_id = f8
     2 message_count = i4
     2 tally_cd = f8
     2 tally_value = vc
     2 start_dt_tm = dq8
     2 complete_dt_tm = dq8
 )
 FREE RECORD rep_si_batch_stats
 RECORD rep_si_batch_stats (
   1 qual [* ]
     2 batch_id = f8
     2 interface_id = f8
     2 oen_trigger_id = f8
     2 message_count = i4
     2 tally_cd = f8
     2 tally_value = vc
     2 start_dt_tm = dq8
     2 complete_dt_tm = dq8
   1 si_info
     2 longlist [* ]
       3 lval = i4
       3 strmeaning = vc
     2 stringlist [* ]
       3 strval = vc
       3 strmeaning = vc
     2 doublelist [* ]
       3 dval = f8
       3 strmeaning = vc
   1 status_data
     2 status = c1
     2 subeventstatus [* ]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 )
 FREE RECORD req_event
 RECORD req_event (
   1 debuglogging = i2
   1 request_type = c15
   1 req_set [* ]
     2 batch_event_id = f8
     2 batch_id = f8
     2 batch_sort_flag = i2
     2 sort_string = vc
     2 message_length = i4
 )
 FREE RECORD rep_event
 RECORD rep_event (
   1 qual [* ]
     2 batch_event_id = f8
     2 batch_id = f8
     2 batch_sort_flag = i2
     2 sort_string = vc
   1 si_info
     2 longlist [* ]
       3 lval = i4
       3 strmeaning = vc
     2 stringlist [* ]
       3 strval = vc
       3 strmeaning = vc
     2 doublelist [* ]
       3 dval = f8
       3 strmeaning = vc
   1 status_data
     2 status = c1
     2 subeventstatus [* ]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 )
 FREE RECORD req_batch_sys
 RECORD req_batch_sys (
   1 debuglogging = i2
   1 request_type = c15
   1 req_set [* ]
     2 batch_event_id = f8
     2 interface_id = f8
     2 seq_num = i4
     2 event_status_flag = i2
     2 start_dt_tm = dq8
     2 complete_dt_tm = dq8
     2 gs_ident = vc
     2 st_ident = vc
     2 beg_seg_seq_num = i4
     2 end_seg_seq_num = i4
     2 grp_beg_seg_seq_num = i4
     2 grp_end_seg_seq_num = i4
     2 event_status_text = vc
     2 response_cd = f8
     2 seg_seq_num = i4
 )
 FREE RECORD rep_batch_sys
 RECORD rep_batch_sys (
   1 qual [* ]
     2 batch_event_id = f8
     2 interface_id = f8
     2 seq_num = i4
     2 event_status_flag = i2
     2 start_dt_tm = dq8
     2 complete_dt_tm = dq8
     2 gs_ident = vc
     2 st_ident = vc
     2 beg_seg_seq_num = i4
     2 end_seg_seq_num = i4
     2 grp_beg_seg_seq_num = i4
     2 grp_end_seg_seq_num = i4
     2 event_status_text = vc
     2 response_cd = f8
   1 si_info
     2 longlist [* ]
       3 lval = i4
       3 strmeaning = vc
     2 stringlist [* ]
       3 strval = vc
       3 strmeaning = vc
     2 doublelist [* ]
       3 dval = f8
       3 strmeaning = vc
   1 status_data
     2 status = c1
     2 subeventstatus [* ]
       3 operationname = c25
       3 operationstatus = c1
       3 targetobjectname = c25
       3 targetobjectvalue = vc
 )
 FREE RECORD req_get_trig
 RECORD req_get_trig (
   1 eso_trigger_qual = i2
   1 eso_trigger_maxqual = i2
   1 eso_trigger [* ]
     2 trigger_id = f8
     2 class = vc
     2 stype = vc
     2 subtype = vc
     2 subtype_detail = vc
     2 scp_binding = vc
     2 request_nbr = i4
 )
 FREE RECORD rep_get_trig
 RECORD rep_get_trig (
   1 eso_trigger_qual = i2
   1 eso_trigger [10 ]
     2 trigger_id = f8
     2 class = c15
     2 stype = c15
     2 subtype = c15
     2 subtype_detail = c15
     2 request_nbr = i4
     2 processing_control = i4
     2 create_dt_tm = dq8
     2 updt_dt_tm = dq8
     2 updt_cnt = i4
     2 active_ind = i2
     2 source_req_nbr = i4
     2 call_srv_flag = i2
     2 message_format_cd = f8
     2 message_version_cd = f8
     2 message_type_cd = f8
     2 interface_type_cd = f8
     2 interface_type_mean = c12
   1 status_data
     2 status = c1
     2 subeventstatus [1 ]
       3 operationname = c8
       3 operationstatus = c1
       3 targetobjectname = c15
       3 targetobjectvalue = c100
 )
 SUBROUTINE  begin_batch2 (batchnumber2 ,batchdescription2 ,batchorigincdf2 ,interfacetypecdf2 ,
  messageformatcdf2 ,sysdirectioncdf2 ,dummy2 )
  CALL echo ("In Begin_Batch2() routine..." )
  DECLARE sub2_batch_id = f8 WITH private ,noconstant (0.0 )
  IF ((trim (sysdirectioncdf2 ,3 ) <= "" ) )
   CALL echo (build ("ERROR!! Invalid incoming SysDirectionCDF2 = " ,sysdirectioncdf2 ) )
   RETURN (sub2_batch_id )
  ENDIF
  SET params_rec->all_sub.sys_direction_cd = eso_get_meaning_by_codeset (sysdircs ,trim (
    sysdirectioncdf2 ,3 ) )
  IF (params_rec->all_sub.sys_direction_cd )
   SET sub2_batch_id = begin_batch (batchnumber2 ,batchdescription2 ,batchorigincdf2 ,
    interfacetypecdf2 ,messageformatcdf2 )
   CALL echo (build ("SI_BATCH_METHODS Script returned Batch_Id = " ,sub2_batch_id ) )
   IF (sub2_batch_id )
    CALL echo ("Begin_Batch() successfully executed" )
   ELSE
    CALL echo ("FAILURE!! Begin_Batch()" )
    SET sub2_batch_id = 0
   ENDIF
  ELSE
   CALL echo (build ("FAILURE!! No code_value found for SysDirectionCDF2 = " ,trim (sysdirectioncdf2
      ,3 ) ) )
  ENDIF
  CALL echo ("Exiting Begin_Batch2() routine..." )
  RETURN (sub2_batch_id )
 END ;Subroutine
 SUBROUTINE  begin_batch (batchnumber ,batchdescription ,batchorigincdf ,interfacetypecdf ,
  messageformatcdf )
  CALL echo ("In Begin_Batch() routine..." )
  DECLARE sub_batchid = f8 WITH private ,noconstant (0.0 )
  DECLARE sub_interfaceid = f8 WITH private ,noconstant (0.0 )
  DECLARE messagelocation = vc WITH private ,constant ("SI_BATCH_EVENT_MSG" )
  DECLARE sub_batchnumber = c25 WITH private ,noconstant (trim (batchnumber ,3 ) )
  DECLARE sub_batchdescription = vc WITH private ,noconstant (trim (batchdescription ,3 ) )
  DECLARE sub_batchorigincdf = c12 WITH private ,noconstant (trim (batchorigincdf ,3 ) )
  DECLARE sub_interfacetypecdf = c12 WITH private ,noconstant (trim (interfacetypecdf ,3 ) )
  DECLARE sub_messageformatcdf = c12 WITH private ,noconstant (trim (messageformatcdf ,3 ) )
  IF ((trim (batchnumber ,3 ) <= " " ) )
   CALL echo ("ERROR!! Begin_Batch() routine BatchNumber is not set" )
   RETURN (0 )
  ENDIF
  IF ((trim (batchdescription ,3 ) <= " " ) )
   CALL echo ("ERROR!! Begin_Batch() routine BatchDescription is not set" )
   RETURN (0 )
  ENDIF
  IF ((trim (batchorigincdf ,3 ) <= " " ) )
   CALL echo ("ERROR!! Begin_Batch() routine BatchOriginCDF is not set" )
   RETURN (0 )
  ENDIF
  IF ((trim (interfacetypecdf ,3 ) <= " " ) )
   CALL echo ("ERROR!! Begin_Batch() routine InterfaceTypeCDF is not set" )
   RETURN (0 )
  ENDIF
  IF ((trim (messageformatcdf ,3 ) <= " " ) )
   CALL echo ("ERROR!! Begin_Batch() routine MessageFormatCD is not set" )
   RETURN (0 )
  ENDIF
  CALL reset_si_batch_req (0 )
  CALL reset_si_batch_rep (0 )
  SET req_si_batch->request_type = "INSERT"
  SET stat = alterlist (req_si_batch->req_set ,1 )
  SET req_si_batch->req_set[1 ].batch_number = trim (sub_batchnumber ,3 )
  SET req_si_batch->req_set[1 ].batch_description = trim (sub_batchdescription ,3 )
  SET req_si_batch->req_set[1 ].message_location = trim (messagelocation ,3 )
  SET req_si_batch->req_set[1 ].batch_status_flag = unprocessed
  SET req_si_batch->req_set[1 ].sys_direction_cd = params_rec->all_sub.sys_direction_cd
  SET req_si_batch->req_set[1 ].batch_origin_cd = eso_get_meaning_by_codeset (batchorigincs ,trim (
    sub_batchorigincdf ,3 ) )
  IF ((req_si_batch->req_set[1 ].batch_origin_cd <= 0 ) )
   CALL echo (build ("FAILURE!! No Code Value found for BatchOriginCDF = " ,trim (sub_batchorigincdf
      ,3 ) ) )
   RETURN (0 )
  ENDIF
  SET req_si_batch->req_set[1 ].interface_type_cd = eso_get_meaning_by_codeset (interfacetypecs ,
   trim (sub_interfacetypecdf ,3 ) )
  IF ((req_si_batch->req_set[1 ].interface_type_cd <= 0 ) )
   CALL echo (build ("WARNING!! No Code Value found in ESO Interface Type for CDFMeaning = " ,trim (
      sub_interfacetypecdf ,3 ) ) )
   SET req_si_batch->req_set[1 ].interface_type_cd = eso_get_meaning_by_codeset (esiinterfacetypecs ,
    trim (sub_interfacetypecdf ,3 ) )
   IF ((req_si_batch->req_set[1 ].interface_type_cd <= 0 ) )
    CALL echo (build ("ERROR!! No Code Value found in ESI Interface Type for CDFMeaning = " ,trim (
       sub_interfacetypecdf ,3 ) ) )
    RETURN (0 )
   ENDIF
  ENDIF
  SET req_si_batch->req_set[1 ].message_format_cd = eso_get_meaning_by_codeset (msgformatcs ,trim (
    sub_messageformatcdf ,3 ) )
  IF ((req_si_batch->req_set[1 ].message_format_cd <= 0 ) )
   CALL echo (build ("FAILURE!! No Code Value found for MessageFormatCDF = " ,trim (
      sub_messageformatcdf ,3 ) ) )
   RETURN (0 )
  ENDIF
  EXECUTE si_batch_methods WITH replace ("REQUEST" ,req_si_batch ) ,
  replace ("REPLY" ,rep_si_batch )
  IF ((rep_si_batch->status_data.status != "S" ) )
   CALL echo (build ("FAILURE!! SI_BATCH_METHODS Script returned with a status = " ,rep_si_batch->
     status_data.status ) )
   RETURN (0 )
  ENDIF
  SET sub_batchid = rep_si_batch->qual[1 ].batch_id
  CALL echo (build ("batch_id = " ,sub_batchid ) )
  IF ((sub_batchid <= 0 ) )
   CALL echo (build ("ERROR!! SI_BATCH_METHODS Script returned an Invalid Batch_Id = " ,sub_batchid
     ) )
   SET sub_batchid = 0
  ELSE
   COMMIT
  ENDIF
  CALL echo ("Exiting Begin_Batch() routine..." )
  RETURN (sub_batchid )
 END ;Subroutine
 SUBROUTINE  end_batch2 (batchid2 ,interfaceid2 ,suppressnotifyoeind2 ,dummy2 )
  CALL echo ("In End_Batch2() routine..." )
  DECLARE iretstat = i2
  SET iretstat = 0
  CALL echo (build ("Incoming Batch_Id =" ,batchid2 ) )
  CALL echo (build ("Incoming Interface_Id =" ,interfaceid2 ) )
  CALL echo (build ("Incoming Suppress Notify_OE Indicator =" ,suppressnotifyoeind2 ) )
  SET params_rec->end_batch.suppress_notify_oe_ind = suppressnotifyoeind2
  IF (end_batch (batchid2 ,interfaceid2 ) )
   CALL echo ("End_Batch() successfully executed" )
   SET iretstat = 1
  ELSE
   CALL echo ("FAILURE!! End_Batch() failed" )
  ENDIF
  RETURN (iretstat )
 END ;Subroutine
 SUBROUTINE  end_batch (batchid ,interfaceid )
  CALL echo ("In End_Batch() routine..." )
  DECLARE sub_batchid = f8
  DECLARE sub_tallycdf = c12
  DECLARE sub_tallyvalue = vc
  DECLARE sub_batchorigincdf = c12
  DECLARE sub_batchdescription = vc
  DECLARE sub_interfacetypecd = c12
  DECLARE sub_batchstatusflag = i2
  DECLARE sub_interfaceid = f8
  SET sub_batchid = batchid
  SET sub_interfaceid = interfaceid
  IF ((batchid <= 0 ) )
   CALL echo ("ERROR!! End_Batch() the BatchID <= 0  " )
   RETURN (0 )
  ENDIF
  IF ((sub_interfaceid <= 0 ) )
   CALL echo ("WARNING!! End_Batch() the sub_InterfaceId <= 0  " )
  ENDIF
  IF (size (ccsort_order->qual ,5 ) )
   SET stat = alterlist (ccsort_order->req_set ,0 )
  ENDIF
  IF (size (tblsort_order->qual ,5 ) )
   SET stat = alterlist (tblsort_order->qual ,0 )
  ENDIF
  SET glb_sortind = 0
  CALL reset_si_batch_req (0 )
  CALL reset_si_batch_rep (0 )
  SET stat = alterlist (req_si_batch->req_set ,1 )
  SET req_si_batch->request_type = "SELECT"
  SET req_si_batch->req_set[1 ].batch_id = sub_batchid
  EXECUTE si_batch_methods WITH replace ("REQUEST" ,req_si_batch ) ,
  replace ("REPLY" ,rep_si_batch )
  IF ((rep_si_batch->status_data.status != "S" ) )
   CALL echo (build ("FAILURE!! SI_BATCH_METHODS Script returned with a status = " ,rep_si_batch->
     status_data.status ) )
   RETURN (0 )
  ENDIF
  IF (size (rep_si_batch->qual ,5 ) )
   IF ((rep_si_batch->qual[1 ].batch_id > 0 )
   AND (rep_si_batch->qual[1 ].batch_origin_cd > 0 )
   AND (rep_si_batch->qual[1 ].batch_description > " " )
   AND (rep_si_batch->qual[1 ].interface_type_cd > 0 ) )
    SET sub_batchdescription = trim (rep_si_batch->qual[1 ].batch_description ,3 )
    IF (params_rec->end_batch.suppress_notify_oe_ind )
     CALL echo ("Supress call to CopyLists_to_CernerArea()" )
    ELSE
     SET stat = copylists_to_cernerarea ("ROUTE" )
     IF (NOT (stat ) )
      CALL echo ("FAILURE!! CopyLists_to_CernerArea()" )
      RETURN (0 )
     ENDIF
    ENDIF
    SET sub_batchorigincdf = uar_get_code_meaning (rep_si_batch->qual[1 ].batch_origin_cd )
    SET sub_interfacetypecdf = uar_get_code_meaning (rep_si_batch->qual[1 ].interface_type_cd )
    SET stat = get_batch_routing (sub_batchid ,sub_interfaceid )
    IF (stat )
     FOR (r = 1 TO size (rep_oen_list->route_list ,5 ) )
      SET stat = explode_events (sub_batchid ,rep_oen_list->route_list[r ].interface_id ,rep_oen_list
       ->route_list[r ].sort_string ,rep_oen_list->route_list[r ].contributor_system_cd )
      IF (NOT (stat ) )
       CALL echo (build ("FAILURE!! Explode_Events() for Interface_Id = " ,rep_oen_list->route_list[
         r ].interface_id ) )
       RETURN (0 )
      ENDIF
      IF (size (ccsort_order->qual ,5 ) )
       SET stat = alterlist (ccsort_order->qual ,0 )
      ENDIF
     ENDFOR
     IF (params_rec->end_batch.suppress_notify_oe_ind )
      CALL echo ("Supress call to Notify_OE()" )
     ELSE
      SET stat = notify_oe (sub_batchid )
      IF (NOT (stat ) )
       CALL echo (build ("FAILURE!! Notify_OE() routine with Batch_Id = " ,sub_batchid ) )
       RETURN (0 )
      ENDIF
     ENDIF
    ELSE
     CALL echo (build ("FAILURE!! Get_Batch_Routing() routine with Batch_Id = " ,sub_batchid ) )
     RETURN (0 )
    ENDIF
   ELSE
    CALL echo (build ("FAILURE!! A row was not found on the SI_BATCH table with BATCH_ID = " ,
      batchid ) )
    RETURN (0 )
   ENDIF
  ELSE
   CALL echo ("REPLY from SI_BATCH_METHODS is EMPTY!!!" )
   RETURN (0 )
  ENDIF
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  reset_batch (batchid ,interfaceid ,resetflag )
  CALL echo ("In Reset_Batch() routine..." )
  DECLARE s_ireturn = i2 WITH private ,noconstant (0 )
  SET s_ireturn = reset_batch2 (batchid ,interfaceid ,resetflag ,"" ,"" ,0 )
  RETURN (s_ireturn )
 END ;Subroutine
 SUBROUTINE  mark_batch_complete (batchid2 )
  CALL echo ("In Mark_Batch_Complete() routine..." )
  DECLARE sub_batchid = f8
  DECLARE retstat = i2
  DECLARE unprocessedeventind = i2
  DECLARE errorinprocessingeventind = i2
  SET sub_batchid = batchid
  SET retstat = 0
  SET unprocessedeventind = 0
  SET errorinprocessingeventind = 0
  IF ((batchid <= 0 ) )
   CALL echo ("Mark_Batch_Complete() ERROR!!! the BatchID <= 0  " )
   RETURN (retstat )
  ENDIF
  CALL reset_si_batch_sys_req (0 )
  CALL reset_si_batch_sys_rep (0 )
  SELECT INTO "nl:"
   be.batch_id ,
   be.batch_event_id ,
   bs.batch_event_id ,
   bs.interface_id ,
   bs.seq_num ,
   bs.event_status_flag
   FROM (si_batch_event be ),
    (si_batch_event_sys bs )
   PLAN (be
    WHERE (be.batch_id > 0 )
    AND (be.batch_id = sub_batchid ) )
    JOIN (bs
    WHERE (bs.batch_event_id > 0 )
    AND (bs.batch_event_id = be.batch_event_id ) )
   ORDER BY bs.interface_id ,
    bs.seq_num
   HEAD REPORT
    i = 0 ,
    unprocessedeventind = 0 ,
    errorinprocessingeventind = 0
   DETAIL
    IF ((bs.event_status_flag != processedevent ) )
     IF ((bs.event_status_flag = unprocessedevent ) ) unprocessedeventind = 1
     ENDIF
     ,
     IF ((bs.event_status_flag = errorinprocessingevent ) ) errorinprocessingeventind = 1
     ENDIF
     ,i = (i + 1 ) ,stat = alterlist (req_batch_sys->req_set ,i ) ,req_batch_sys->req_set[i ].
     batch_event_id = bs.batch_event_id ,req_batch_sys->req_set[i ].interface_id = bs.interface_id ,
     req_batch_sys->req_set[i ].seq_num = bs.seq_num ,req_batch_sys->req_set[i ].event_status_flag =
     bs.event_status_flag
    ENDIF
   WITH nocounter
  ;end select
  CALL reset_si_batch_req (0 )
  CALL reset_si_batch_rep (0 )
  SET req_si_batch->request_type = "UPDATE"
  SET stat = alterlist (req_si_batch->req_set ,1 )
  SET req_si_batch->req_set[1 ].batch_id = sub_batchid
  IF (unprocessedeventind
  AND errorinprocessingeventind )
   SET req_si_batch->req_set[1 ].batch_status_flag = errorincomserversprocessing
   SET retstat = 4
  ELSEIF (errorinprocessingeventind )
   SET req_si_batch->req_set[1 ].batch_status_flag = errorincomserversprocessing
   SET retstat = 3
  ELSEIF (unprocessedeventind )
   SET req_si_batch->req_set[1 ].batch_status_flag = comserversprocessing
   SET retstat = 2
  ELSE
   SET req_si_batch->req_set[1 ].batch_status_flag = processed
   SET retstat = 1
  ENDIF
  CALL echo (build ("Before execute RetStat = " ,retstat ) )
  EXECUTE si_batch_methods WITH replace ("REQUEST" ,req_si_batch ) ,
  replace ("REPLY" ,rep_si_batch )
  IF ((rep_si_batch->status_data.status != "S" ) )
   CALL echo (build ("FAILURE!! SI_BATCH_METHODS Script returned with a status = " ,rep_si_batch->
     status_data.status ) )
   SET retstat = 0
  ENDIF
  RETURN (retstat )
 END ;Subroutine
 SUBROUTINE  create_ui_message (class ,type ,subtype ,subtype_detail )
  CALL echo ("In Create_UI_Message() routine..." )
  DECLARE hmsg = i4
  DECLARE hreq = i4
  DECLARE request_nbr = i4
  DECLARE sub_class = c12
  DECLARE sub_type = c15
  DECLARE sub_subtype = c15
  DECLARE sub_subtype_detail = c15
  SET sub_class = class
  SET sub_type = type
  SET sub_subtype = subtype
  SET sub_subtype_detail = subtype_detail
  IF ((size (req_get_trig->eso_trigger ,5 ) > 0 ) )
   SET stat = alterlist (req_get_trig->eso_trigger ,0 )
  ENDIF
  SET req_get_trig->eso_trigger_qual = 1
  SET stat = alterlist (req_get_trig->eso_trigger ,1 )
  IF ((trim (sub_class ,3 ) > " " ) )
   SET req_get_trig->eso_trigger[1 ].class = sub_class
  ENDIF
  IF ((trim (sub_type ,3 ) > " " ) )
   SET req_get_trig->eso_trigger[1 ].stype = sub_type
  ENDIF
  IF ((trim (sub_subtype ,3 ) > " " ) )
   SET req_get_trig->eso_trigger[1 ].subtype = sub_subtype
  ENDIF
  IF ((trim (sub_subtype_detail ,3 ) > " " ) )
   SET req_get_trig->eso_trigger[1 ].subtype_detail = sub_subtype_detail
  ENDIF
  EXECUTE eso_get_trigger WITH replace ("REQUEST" ,req_get_trig ) ,
  replace ("REPLY" ,rep_get_trig )
  IF ((rep_get_trig->status_data.status != "S" ) )
   CALL echo (build ("FAILURE!! ESO_GET_TRIGGER Script returned with a status = " ,rep_get_trig->
     status_data.status ) )
   CALL echo ("WARNING!! No matching row was found on the ESO_TRIGGER Table for the following." )
   CALL echo (build ("Class   = " ,sub_class ) )
   CALL echo (build ("Type    = " ,sub_type ) )
   CALL echo (build ("SubType = " ,sub_subtype ) )
   CALL echo (build ("SubType_Detail = " ,sub_subtype_detail ) )
   RETURN (0 )
  ENDIF
  IF (size (rep_get_trig->eso_trigger ,5 ) )
   IF (rep_get_trig->eso_trigger[1 ].active_ind )
    SET request_nbr = rep_get_trig->eso_trigger[1 ].request_nbr
    CALL echo (build ("Request_Nbr = " ,request_nbr ) )
    IF (request_nbr )
     SET hmsg = uar_srvselectmessage (request_nbr )
     IF (hmsg )
      SET hreq = uar_srvcreaterequest (hmsg )
      RETURN (hreq )
     ELSE
      CALL echo ("The uar_SrvSelectMessage() FAILED!!" )
      RETURN (0 )
     ENDIF
    ELSE
     CALL echo ("FAILURE!! The Request_Nbr = 0" )
     RETURN (0 )
    ENDIF
   ELSE
    CALL echo (build ("WARNING!! The desired trigger is In-Active TRIGGER_ID = " ,rep_get_trig->
      eso_trigger[1 ].trigger_id ) )
    RETURN (- (1 ) )
   ENDIF
  ELSE
   CALL echo ("WARNING!! Reply structure for the ESO_GET_TRIGGER Script is EMPTY." )
   RETURN (0 )
  ENDIF
 END ;Subroutine
 SUBROUTINE  create_trigger (class ,type ,subtype ,subtype_detail )
  CALL echo ("In Create_Trigger() routine..." )
  DECLARE hmsg = i4
  DECLARE hreq = i4
  DECLARE hitem = i4
  DECLARE hcerner = i4
  DECLARE hcqminfo = i4
  DECLARE hesoinfo = i4
  DECLARE hoeinfo = i4
  DECLARE iretstat = i2
  DECLARE src_request_nbr = i4
  DECLARE sub_class = c12
  DECLARE sub_type = c15
  DECLARE sub_subtype = c15
  DECLARE sub_subtype_detail = c15
  SET iretstat = 0
  SET sub_class = class
  SET sub_type = type
  SET sub_subtype = subtype
  SET sub_subtype_detail = subtype_detail
  SET mfcd_ok = 0
  SET mvcd_ok = 0
  SET mtcd_ok = 0
  IF ((size (req_get_trig->eso_trigger ,5 ) > 0 ) )
   SET stat = alterlist (req_get_trig->eso_trigger ,0 )
  ENDIF
  SET req_get_trig->eso_trigger_qual = 1
  SET stat = alterlist (req_get_trig->eso_trigger ,1 )
  IF ((trim (sub_class ,3 ) > " " ) )
   SET req_get_trig->eso_trigger[1 ].class = sub_class
  ENDIF
  IF ((trim (sub_type ,3 ) > " " ) )
   SET req_get_trig->eso_trigger[1 ].stype = sub_type
  ENDIF
  IF ((trim (sub_subtype ,3 ) > " " ) )
   SET req_get_trig->eso_trigger[1 ].subtype = sub_subtype
  ENDIF
  IF ((trim (sub_subtype_detail ,3 ) > " " ) )
   SET req_get_trig->eso_trigger[1 ].subtype_detail = sub_subtype_detail
  ENDIF
  EXECUTE eso_get_trigger WITH replace ("REQUEST" ,req_get_trig ) ,
  replace ("REPLY" ,rep_get_trig )
  IF ((rep_get_trig->status_data.status != "S" ) )
   CALL echo (build ("FAILURE!! ESO_GET_TRIGGER Script returned with a status = " ,rep_get_trig->
     status_data.status ) )
   CALL echo ("WARNING!! No matching row was found on the ESO_TRIGGER Table for the following." )
   CALL echo (build ("Class   = " ,sub_class ) )
   CALL echo (build ("Type    = " ,sub_type ) )
   CALL echo (build ("SubType = " ,sub_subtype ) )
   CALL echo (build ("SubType_Detail = " ,sub_subtype_detail ) )
   RETURN (0 )
  ENDIF
  IF (size (rep_get_trig->eso_trigger ,5 ) )
   IF (rep_get_trig->eso_trigger[1 ].active_ind )
    SET src_request_nbr = rep_get_trig->eso_trigger[1 ].source_req_nbr
    CALL echo (build ("Src_Request_Nbr = " ,src_request_nbr ) )
    IF (src_request_nbr )
     SET hmsg = uar_srvselectmessage (src_request_nbr )
     IF (hmsg )
      SET hreq = uar_srvcreaterequest (hmsg )
      IF (hreq )
       SET hcerner = uar_srvgetstruct (hreq ,"cerner" )
       IF (hcerner )
        SET hoeinfo = uar_srvgetstruct (hcerner ,"oe_info" )
        IF (hoeinfo )
         SET stat1 = uar_srvsetshort (hoeinfo ,"call_srv_flag" ,rep_get_trig->eso_trigger[1 ].
          call_srv_flag )
         IF (NOT (stat1 ) )
          CALL echo ("The uar_SrvSetLong(call_srv_flag) FAILED!!" )
          IF (hreq )
           CALL uar_srvdestroyinstance (hreq )
           SET hreq = 0
          ENDIF
          RETURN (0 )
         ENDIF
        ELSE
         CALL echo ("The uar_SrvGetStruct(oe_info) FAILED!!" )
        ENDIF
       ELSE
        CALL echo ("The uar_SrvGetStruct(cerner) FAILED!!" )
       ENDIF
       SET hcqminfo = uar_srvgetstruct (hreq ,"CQMInfo" )
       IF (hcqminfo )
        SET stat1 = uar_srvsetstring (hcqminfo ,"class" ,nullterm (rep_get_trig->eso_trigger[1 ].
          class ) )
        IF (NOT (stat1 ) )
         CALL echo ("The uar_SrvSetString(class) FAILED!!" )
        ENDIF
        SET stat2 = uar_srvsetstring (hcqminfo ,"type" ,nullterm (rep_get_trig->eso_trigger[1 ].stype
           ) )
        IF (NOT (stat2 ) )
         CALL echo ("The uar_SrvSetString(type) FAILED!!" )
        ENDIF
        SET stat3 = uar_srvsetstring (hcqminfo ,"subtype" ,nullterm (rep_get_trig->eso_trigger[1 ].
          subtype ) )
        IF (NOT (stat3 ) )
         CALL echo ("The uar_SrvSetString(subtype) FAILED!!" )
        ENDIF
        IF (stat1
        AND stat2
        AND stat3 )
         SET hesoinfo = uar_srvgetstruct (hreq ,"ESOInfo" )
         IF (hesoinfo )
          SET hitem = uar_srvadditem (hesoinfo ,"doubleList" )
          IF (hitem )
           SET stat1 = uar_srvsetdouble (hitem ,"dVal" ,rep_get_trig->eso_trigger[1 ].
            message_format_cd )
           SET stat2 = uar_srvsetstring (hitem ,"strMeaning" ,nullterm ("message_format_cd" ) )
           IF (NOT (stat1 ) )
            CALL echo ("the uar_SrvSetDouble(message_format_cd) FAILED!!" )
           ELSEIF (NOT (stat2 ) )
            CALL echo ("the uar_SrvSetString(message_format_cd) FAILED!!" )
           ELSE
            SET mfcd_ok = 1
           ENDIF
          ELSE
           CALL echo ("The uar_SrvAddItem(doubleList) FAILED!!" )
          ENDIF
          SET hitem = uar_srvadditem (hesoinfo ,"doubleList" )
          IF (hitem )
           SET stat1 = uar_srvsetdouble (hitem ,"dVal" ,rep_get_trig->eso_trigger[1 ].
            message_version_cd )
           SET stat2 = uar_srvsetstring (hitem ,"strMeaning" ,nullterm ("message_version_cd" ) )
           IF (NOT (stat1 ) )
            CALL echo ("the uar_SrvSetDouble(message_version_cd) FAILED!!" )
           ELSEIF (NOT (stat2 ) )
            CALL echo ("the uar_SrvSetString(message_version_cd) FAILED!!" )
           ELSE
            SET mvcd_ok = 1
           ENDIF
          ELSE
           CALL echo ("The uar_SrvAddItem(doubleList) FAILED!!" )
          ENDIF
          SET hitem = uar_srvadditem (hesoinfo ,"doubleList" )
          IF (hitem )
           SET stat1 = uar_srvsetdouble (hitem ,"dVal" ,rep_get_trig->eso_trigger[1 ].message_type_cd
             )
           SET stat2 = uar_srvsetstring (hitem ,"strMeaning" ,nullterm ("message_type_cd" ) )
           IF (NOT (stat1 ) )
            CALL echo ("the uar_SrvSetDouble(message_type_cd) FAILED!!" )
           ELSEIF (NOT (stat2 ) )
            CALL echo ("the uar_SrvSetString(message_type_cd) FAILED!!" )
           ELSE
            SET mtcd_ok = 1
           ENDIF
          ELSE
           CALL echo ("The uar_SrvAddItem(doubleList) FAILED!!" )
          ENDIF
          IF (mfcd_ok
          AND mvcd_ok
          AND mtcd_ok )
           RETURN (hreq )
          ENDIF
         ELSE
          CALL echo ("The uar_SrvGetStruct(ESOInfo) FAILED!!" )
         ENDIF
        ENDIF
       ELSE
        CALL echo ("The uar_SrvGetStruct(CQMInfo) FAILED!!" )
       ENDIF
      ELSE
       CALL echo ("The uar_SrvCreateRequest() FAILED!!" )
      ENDIF
     ELSE
      CALL echo ("The uar_SrvSelectMessage() FAILED!!" )
     ENDIF
    ELSE
     CALL echo ("FAILURE!! The Src_Request_Nbr = 0" )
    ENDIF
   ELSE
    CALL echo (build ("WARNING!! The desired trigger is In-Active TRIGGER_ID = " ,rep_get_trig->
      eso_trigger[1 ].trigger_id ) )
    SET iretstat = - (1 )
   ENDIF
  ELSE
   CALL echo ("WARNING!! Reply structure for the ESO_GET_TRIGGER Script is EMPTY." )
  ENDIF
  IF (hreq )
   CALL uar_srvdestroyinstance (hreq )
   SET hreq = 0
  ENDIF
  RETURN (iretstat )
 END ;Subroutine
 SUBROUTINE  execute_ui_methods (hmsg ,scriptlist )
  CALL echo ("In Execute_UI_Methods() routine..." )
  RETURN (hmsg )
 END ;Subroutine
 SUBROUTINE  enq_batch_event (batchid ,batchsortflag ,sortstring ,sub_hreq )
  CALL echo ("In Enq_Batch_Event() routine..." )
  DECLARE m_hmsg = i4
  DECLARE m_hreq = i4
  DECLARE m_hrep = i4
  DECLARE m_hitem = i4
  DECLARE hesoinfo = i4
  DECLARE hditem = i4
  DECLARE sub_batchid = f8
  DECLARE sub_batcheventid = f8
  DECLARE sub_batchsortflag = i2
  DECLARE sub_sortstring = vc
  DECLARE messageid = i4
  DECLARE request_type = c15
  SET sub_batchid = batchid
  SET sub_batchsortflag = batchsortflag
  SET sub_sortstring = sortstring
  SET sub_batcheventid = 0
  SET messageid = 1215006
  CALL reset_si_batch_event_req (0 )
  CALL reset_si_batch_event_rep (0 )
  SET stat = alterlist (req_event->req_set ,1 )
  SET req_event->request_type = "INSERT"
  SET req_event->req_set[1 ].batch_id = sub_batchid
  SET req_event->req_set[1 ].sort_string = sub_sortstring
  SET req_event->req_set[1 ].batch_sort_flag = sub_batchsortflag
  EXECUTE si_batch_event_methods WITH replace ("REQUEST" ,req_event ) ,
  replace ("REPLY" ,rep_event )
  IF ((rep_event->status_data.status != "S" ) )
   CALL echo (build ("FAILURE!! SI_BATCH_EVENT_METHODS Script returned with a status = " ,rep_event->
     status_data.status ) )
   RETURN (0 )
  ENDIF
  SET sub_batcheventid = rep_event->qual[1 ].batch_event_id
  CALL echo (build ("Batch_Event_Id = " ,sub_batcheventid ) )
  IF (sub_batcheventid )
   CALL echo ("/*---------- Insert Batch_Event_Id into Trigger ----------*/ " )
   IF (uar_srvfieldexists (sub_hreq ,"ESOInfo" ) )
    SET hesoinfo = uar_srvgetstruct (sub_hreq ,"ESOInfo" )
    IF (hesoinfo )
     SET hditem = uar_srvadditem (hesoinfo ,"doubleList" )
     IF (hditem )
      CALL uar_srvsetstring (hditem ,"strMeaning" ,nullterm ("batch_event_id" ) )
      CALL uar_srvsetdouble (hditem ,"dVal" ,sub_batcheventid )
     ELSE
      CALL echo ("The uar_SrvAddItem(doubleList) FAILED!!" )
      RETURN (0 )
     ENDIF
    ELSE
     CALL echo ("The uar_SrvGetStruct(ESOInfo) FAILED!!" )
     RETURN (0 )
    ENDIF
   ELSE
    CALL echo ("The ESOInfo structure does not exist" )
   ENDIF
   CALL echo ("/*---------- Select CQM Step Message ----------*/ " )
   SET m_hmsg = uar_srvselectmessage (messageid )
   IF (m_hmsg )
    SET m_hreq = uar_srvcreaterequest (m_hmsg )
    IF (NOT (m_hreq ) )
     CALL echo ("The uar_SrvCreateRequest() FAILED!!" )
     RETURN (0 )
    ENDIF
    SET m_hrep = uar_srvcreatereply (m_hmsg )
    IF (NOT (m_hrep ) )
     CALL echo ("The uar_SrvCreateReply() FAILED!!" )
     IF (m_hreq )
      CALL uar_srvdestroyinstance (m_hreq )
      SET hreq = 0
     ENDIF
     RETURN (0 )
    ENDIF
   ELSE
    CALL echo ("The uar_SrvSelectMessage() FAILED!!" )
    RETURN (0 )
   ENDIF
   SET stat = uar_srvsetstring (m_hreq ,"request_type" ,nullterm ("INSERT" ) )
   SET m_hitem = uar_srvadditem (m_hreq ,"req_set" )
   SET stat = uar_srvsetdouble (m_hitem ,"batch_event_id" ,sub_batcheventid )
   CALL echo ("Executing COMMIT...." )
   COMMIT
   CALL echo ("/*---------- Perform an Execute on the CQM Batch Server ----------*/" )
   SET stat = uar_srvexecas (m_hmsg ,m_hreq ,m_hrep ,sub_hreq ,0 ,"batch" )
   CALL uar_srvdestroyinstance (m_hreq )
   CALL uar_srvdestroyinstance (m_hrep )
   IF (stat )
    SET stat2 = undo_si_batch_event (sub_batcheventid )
    IF (NOT (stat2 ) )
     CALL echo (build ("FAILURE!! UNDO_SI_BATCH_EVENT() failed for Batch_Event_Id = " ,
       sub_batcheventid ) )
    ENDIF
   ENDIF
   CASE (stat )
    OF 0 :
     CALL echo ("Successful uar_SrvExecAs()" )
     RETURN (sub_batcheventid )
    OF 1 :
     CALL echo ("Srv Execute failed - Communication Error - FSI CQM Server may be down" )
    OF 2 :
     IF ((messageid = 0 ) )
      CALL echo ("TDB Message Id is zero..." )
     ELSE
      CALL echo ("SrvSelectMessage failed -- May need to perfrom CCLSECLOGIN" )
     ENDIF
    OF 3 :
     CALL echo ("Failed to allocate either the Request or Reply Handle" )
    ELSE
     CALL echo (build ("FAILURE!! The uar_SrvExecAs() routine failed with a MsgStatus = " ,stat ) )
   ENDCASE
  ELSE
   CALL echo ("The SI_BATCH_EVENT Script FAILED!!" )
  ENDIF
  RETURN (0 )
 END ;Subroutine
 SUBROUTINE  deq_batch_event (batcheventid )
  CALL echo ("In  Deq_Batch_Event() routine..." )
  DECLARE m_hmsg = i4
  DECLARE m_hreq = i4
  DECLARE m_hrep = i4
  DECLARE m_hitem = i4
  DECLARE stat = i2
  DECLARE messageid = i4
  DECLARE request_type = c15
  SET messageid = 1215006
  IF ((batcheventid <= 0 ) )
   CALL echo ("Deq_Batch_Event() ERROR!!! the BatchEventID <= 0  " )
   RETURN (0 )
  ENDIF
  CALL echo ("/*---------- Select CQM Step Message ----------*/ " )
  SET m_hmsg = uar_srvselectmessage (messageid )
  IF (m_hmsg )
   SET m_hreq = uar_srvcreaterequest (m_hmsg )
   IF (NOT (m_hreq ) )
    CALL echo ("The uar_SrvCreateRequest() FAILED!!" )
    RETURN (0 )
   ENDIF
   SET m_hrep = uar_srvcreatereply (m_hmsg )
   IF (NOT (m_hrep ) )
    CALL echo ("The uar_SrvCreateReply() FAILED!!" )
    IF (m_hreq )
     CALL uar_srvdestroyinstance (m_hreq )
     SET m_hreq = 0
    ENDIF
    RETURN (0 )
   ENDIF
  ELSE
   CALL echo ("The uar_SrvSelectMessage() FAILED!!" )
   RETURN (0 )
  ENDIF
  CALL echo ("/*---------- Set Required fields in Request to CQM Server ----------*/" )
  SET stat = uar_srvsetstring (m_hreq ,"request_type" ,nullterm ("SELECT" ) )
  SET m_hitem = uar_srvadditem (m_hreq ,"req_set" )
  SET stat = uar_srvsetdouble (m_hitem ,"batch_event_id" ,batcheventid )
  CALL echo ("/*---------- Perform an Execute on the CQM Batch Server ----------*/" )
  SET stat = uar_srvexecuteas (m_hmsg ,m_hreq ,m_hrep ,"batch" )
  CALL uar_srvdestroyinstance (m_hreq )
  CASE (stat )
   OF 0 :
    CALL echo ("Successful uar_SrvExecuteAs()" )
    RETURN (m_hrep )
   OF 1 :
    CALL echo ("Srv Execute failed - Communication Error - FSI CQM Server may be down" )
   OF 2 :
    IF ((messageid = 0 ) )
     CALL echo ("TDB Message Id is zero..." )
    ELSE
     CALL echo ("SrvSelectMessage failed -- May need to perfrom CCLSECLOGIN" )
    ENDIF
   OF 3 :
    CALL echo ("Failed to allocate either the Request or Reply Handle" )
   ELSE
    CALL echo (build ("FAILURE!! The uar_SrvExecuteAs() routine failed with a MsgStatus = " ,stat )
     )
  ENDCASE
  CALL uar_srvdestroyinstance (m_hrep )
  RETURN (0 )
 END ;Subroutine
 SUBROUTINE  explode_events (batchid2 ,interfaceid2 ,ccsortstring2 ,contributorsystemcd2 )
  CALL echo ("In Explode_Events() routine..." )
  DECLARE sub_batchid = f8
  DECLARE sub_interfaceid = f8
  DECLARE sub_ccsortstring = vc
  DECLARE sortedrecind = i2
  SET sub_batchid = batchid2
  SET sub_interfaceid = interfaceid2
  SET sub_ccsortstring = trim (ccsortstring2 ,3 )
  SET sub_contributorsystemcd = contributorsystemcd2
  SET sortedrecind = 0
  IF ((sub_batchid <= 0 ) )
   CALL echo ("ERROR!! Explode_Events() the Batch_Id <= 0  " )
   RETURN (0 )
  ENDIF
  IF ((sub_interfaceid <= 0 ) )
   CALL echo ("ERROR!! Explode_Events() the sub_InterfaceId <= 0  " )
   RETURN (0 )
  ENDIF
  IF ((trim (sub_ccsortstring ,3 ) <= " " ) )
   CALL echo (build ("NO Sort_String defined for Interface_Id = " ,sub_interfaceid ) )
  ENDIF
  IF (NOT (size (tblsort_order->qual ,5 ) ) )
   SET sub_origin = fillstring (25 ," " )
   SET sub_origin = "SI_BATCH_EVENT"
   SET stat = get_sort_order (sub_batchid ,sub_ccsortstring ,sub_origin )
   CASE (stat )
    OF 0 :
     CALL echo (build ("FAILURE!! Get_Sort_Order() routine with Batch_Id = " ,sub_batchid ) )
     RETURN (0 )
    OF 1 :
     CALL echo ("The Get_Sort_Order() routine found NO! Batch Events with Sort_String Values" )
    OF 2 :
     CALL echo (
      "The Get_Sort_Order() routine found one or more Batch Events with Sort_String Values" )
     CALL echo ("Setting Sort Indicator..." )
     SET glb_sortind = 1
    ELSE
     CALL echo (build ("The Get_Sort_Order() routine returned an unknown value = " ,stat ) )
     RETURN (0 )
   ENDCASE
  ELSE
   CALL echo (build ("Events already loaded for batch_id = " ,sub_batchid ) )
  ENDIF
  CALL echo (build ("Glb_SortIND = " ,glb_sortind ) )
  IF ((trim (sub_ccsortstring ,3 ) > " " )
  AND glb_sortind )
   SET sub_origin = fillstring (25 ," " )
   SET sub_origin = "ComServer"
   SET stat = get_sort_order (sub_batchid ,sub_ccsortstring ,sub_origin )
   CASE (stat )
    OF 0 :
     CALL echo (build ("FAILURE!! Get_Sort_Order() routine with Batch_Id = " ,sub_batchid ) )
     RETURN (0 )
    OF 1 :
     CALL echo ("The Get_Sort_Order() routine Successfully parsed the ComServer Sort_String." )
    ELSE
     CALL echo (build ("The Get_Sort_Order() routine returned an unknown value = " ,stat ) )
     RETURN (0 )
   ENDCASE
   CALL sort_events (1 )
   SET sortedrecind = 1
  ENDIF
  CALL reset_si_batch_sys_req (0 )
  CALL reset_si_batch_sys_rep (0 )
  IF (sortedrecind )
   FOR (i = 1 TO size (sorted_rec->qual ,5 ) )
    SET stat = alterlist (req_batch_sys->req_set ,i )
    SET req_batch_sys->req_set[i ].batch_event_id = sorted_rec->qual[i ].batch_event_id
    SET req_batch_sys->req_set[i ].seq_num = sorted_rec->qual[i ].seq_num
    SET req_batch_sys->req_set[i ].interface_id = sub_interfaceid
    SET req_batch_sys->req_set[i ].event_status_flag = unprocessed
   ENDFOR
  ELSE
   FOR (i = 1 TO size (tblsort_order->qual ,5 ) )
    SET stat = alterlist (req_batch_sys->req_set ,i )
    SET req_batch_sys->req_set[i ].batch_event_id = tblsort_order->qual[i ].batch_event_id
    SET req_batch_sys->req_set[i ].seq_num = i
    SET req_batch_sys->req_set[i ].interface_id = sub_interfaceid
    SET req_batch_sys->req_set[i ].event_status_flag = unprocessed
   ENDFOR
  ENDIF
  SET req_batch_sys->request_type = "INSERT"
  EXECUTE si_batch_event_sys_methods WITH replace ("REQUEST" ,req_batch_sys ) ,
  replace ("REPLY" ,rep_batch_sys )
  IF ((rep_batch_sys->status_data.status != "S" ) )
   CALL echo (build ("FAILURE!! SI_BATCH_EVENT_SYS_METHODS Script returned with a status = " ,
     rep_batch_sys->status_data.status ) )
   RETURN (0 )
  ELSE
   CALL echo ("Executing COMMIT...." )
   COMMIT
  ENDIF
  CALL echo ("Exiting Explode_Events() routine..." )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  get_batch_routing (batchid2 ,interfaceid )
  CALL echo ("In Get_Batch_Routing() routine..." )
  DECLARE dbl_idx = i4
  SET dbl_idx = 0
  DECLARE num_comservers = i4
  SET num_comservers = 0
  DECLARE sub_interfaceid = f8
  SET sub_interfaceid = interfaceid
  IF ((sub_interfaceid <= 0 ) )
   SET sub_interfaceid = 994
   CALL echo (build (
     "WARNING!! Interface_Id passed in is <= 0, defaulting to ESO Batch Interface = " ,
     sub_interfaceid ) )
  ENDIF
  SET dbl_idx = size (oenobj->cerner.doublelist ,5 )
  SET dbl_idx = (dbl_idx + 1 )
  CALL echo (build ("dbl_idx = " ,dbl_idx ) )
  SET oenobj->interface_id = sub_interfaceid
  SET stat = alterlist (oenobj->cerner.doublelist ,dbl_idx )
  SET oenobj->cerner.oe_info.batch_info.batch_id = batchid2
  SET oenobj->cerner.doublelist[dbl_idx ].dval = batchid2
  SET oenobj->cerner.doublelist[dbl_idx ].strmeaning = "batch_id"
  CALL echorecord (oenobj )
  EXECUTE oen_list_custom_route_batch WITH replace ("REPLY" ,rep_oen_list )
  CALL echorecord (rep_oen_list )
  IF ((rep_oen_list->status_data.status != "S" ) )
   CALL echo (build ("FAILURE!! OEN_LIST_CUSTOM_ROUTE_BATCH Script returned with a status = " ,
     rep_oen_list->status_data.status ) )
   RETURN (0 )
  ENDIF
  SET num_comservers = size (rep_oen_list->route_list ,5 )
  IF (num_comservers )
   CALL echo (build ("The number of INTERFACE_IDs returned by OEN_LIST_CUSTOM_ROUTE_BATCH was: " ,
     num_comservers ) )
  ELSE
   CALL echo (build (
     "The returned OEN_LIST_CUSTOM_ROUTE_BATCH returned ZERO INTERFACE_IDs for Batch_Id = " ,
     batchid2 ) )
  ENDIF
  CALL echo ("Exiting Get_Batch_Routing() routine..." )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  set_batch_stats (batchid ,interfaceid ,tallycdf ,tallyvalue )
  CALL echo ("In Set_Batch_Stats() routine..." )
  CALL echo (build ("setting batch [" ,batchid ,"]" ) )
  DECLARE sub_batchid = f8 WITH private ,noconstant (batchid )
  DECLARE sub_interfaceid = f8 WITH private ,noconstant (interfaceid )
  DECLARE sub_tallycdf = c12 WITH private ,noconstant (tallycdf )
  DECLARE sub_tallycd = f8 WITH private ,noconstant (0.0 )
  DECLARE sub_tallyvalue = vc WITH private ,noconstant (trim (tallyvalue ,3 ) )
  DECLARE s_dtemptallycd = f8 WITH private ,noconstant (0.0 )
  SET sub_tallycdf = trim (sub_tallycdf ,3 )
  SET blank_date = cnvtdatetime ("01-JAN-1800 00:00:00.00" )
  IF ((sub_batchid <= 0 ) )
   CALL echo ("ERROR!! Invalid incoming BatchID" )
   RETURN (0 )
  ENDIF
  IF ((sub_interfaceid <= 0 ) )
   CALL echo ("ERROR!! Invalid incoming InterfaceID" )
   RETURN (0 )
  ENDIF
  IF ((sub_tallycdf <= "" ) )
   CALL echo ("ERROR!! Invalid incoming TallyCDF" )
   RETURN (0 )
  ENDIF
  SET sub_tallycd = eso_get_meaning_by_codeset (tallycs ,sub_tallycdf )
  IF ((sub_tallycd <= 0 ) )
   CALL echo (concat ("FAILURE!! No Code Value found for incoming TallyCDF = " ,"'" ,sub_tallycdf ,
     "'" ) )
   RETURN (0 )
  ENDIF
  CALL reset_si_batch_stats_req (0 )
  CALL reset_si_batch_stats_rep (0 )
  SET stat = alterlist (req_si_batch_stats->req_set ,1 )
  SET req_si_batch_stats->req_set[1 ].batch_id = sub_batchid
  SET req_si_batch_stats->req_set[1 ].interface_id = sub_interfaceid
  SET req_si_batch_stats->req_set[1 ].tally_cd = sub_tallycd
  SELECT INTO "nl:"
   bs.batch_id ,
   bs.interface_id ,
   bs.tally_cd
   FROM (si_batch_stats bs )
   WHERE (bs.batch_id = value (sub_batchid ) )
   AND (bs.interface_id = value (sub_interfaceid ) )
   AND (bs.tally_cd = value (sub_tallycd ) )
   DETAIL
    junk = 0
   WITH nocounter
  ;end select
  IF ((curqual > 0 ) )
   SET req_si_batch_stats->request_type = "UPDATE"
  ELSE
   SET req_si_batch_stats->request_type = "INSERT"
  ENDIF
  CASE (sub_tallycdf )
   OF "OEN_TRIG_ID" :
   OF "MESSAGE_CNT" :
    SET req_si_batch_stats->req_set[1 ].tally_value = eso_trim_zeros (sub_tallyvalue )
   OF "COMPLT_DT_TM" :
    SET req_si_batch_stats->req_set[1 ].complete_dt_tm = cnvtdatetime (curdate ,curtime3 )
   OF "PREVCMPLTDT" :
    SET s_dtemptallycd = eso_get_meaning_by_codeset (tallycs ,"COMPLT_DT_TM" )
    SELECT INTO "nl:"
     bs.batch_id ,
     bs.interface_id ,
     bs.tally_cd ,
     bs.complete_dt_tm
     FROM (si_batch_stats bs )
     WHERE (bs.batch_id = value (sub_batchid ) )
     AND (bs.interface_id = value (sub_interfaceid ) )
     AND (bs.tally_cd = value (s_dtemptallycd ) )
     DETAIL
      req_si_batch_stats->req_set[1 ].complete_dt_tm = cnvtdatetime (bs.complete_dt_tm )
     WITH nocounter
    ;end select
   OF "START_DT_TM" :
    SET req_si_batch_stats->req_set[1 ].start_dt_tm = cnvtdatetime (curdate ,curtime3 )
   ELSE
    SET req_si_batch_stats->req_set[1 ].tally_value = sub_tallyvalue
  ENDCASE
  EXECUTE si_batch_stats_methods WITH replace ("REQUEST" ,req_si_batch_stats ) ,
  replace ("REPLY" ,rep_si_batch_stats )
  IF ((rep_si_batch_stats->status_data.status != "S" ) )
   CALL echo (build ("FAILURE!! SI_BATCH_STATS_METHODS Script returned with a status = " ,
     rep_si_batch_stats->status_data.status ) )
   RETURN (0 )
  ENDIF
  IF ((sub_tallycdf = "START_DT_TM" ) )
   SELECT INTO "nl:"
    b.batch_id ,
    b.batch_status_flag
    FROM (si_batch b )
    WHERE (b.batch_id = value (sub_batchid ) )
    AND (b.batch_status_flag = comserversprocessing )
    DETAIL
     junk = 0
    WITH nocounter
   ;end select
   IF ((curqual <= 0 ) )
    CALL reset_si_batch_req (0 )
    CALL reset_si_batch_rep (0 )
    SET req_si_batch->request_type = "UPDATE"
    SET stat = alterlist (req_si_batch->req_set ,1 )
    SET req_si_batch->req_set[1 ].batch_id = sub_batchid
    SET req_si_batch->req_set[1 ].batch_status_flag = comserversprocessing
    EXECUTE si_batch_methods WITH replace ("REQUEST" ,req_si_batch ) ,
    replace ("REPLY" ,rep_si_batch )
    IF ((rep_si_batch->status_data.status != "S" ) )
     CALL echo (build ("FAILURE!! SI_BATCH_METHODS Script returned with a status = " ,rep_si_batch->
       status_data.status ) )
     RETURN (0 )
    ENDIF
   ENDIF
  ENDIF
  IF ((sub_tallycdf = "COMPLT_DT_TM" ) )
   SET stat = mark_batch_complete (sub_batchid )
   CASE (stat )
    OF 0 :
     CALL echo ("FAILURE!! Mark_Batch_Complete() routine returned a failure status." )
     RETURN (0 )
    OF 1 :
     CALL echo ("SUCCESSFUL!! Mark_Batch_Complete() routine updated batch to a COMPLETED status." )
    OF 2 :
     CALL echo ("WARNING!! Mark_Batch_Complete() routine found events with a 'UnProcessed' status."
      )
    OF 3 :
     CALL echo (
      "WARNING!! Mark_Batch_Complete() routine found events with a 'ErrorInProcessing' status." )
    OF 4 :
     CALL echo (
      "WARNING!! Mark_Batch_Complete() routine found events with 'UnProcessed' and 'ErrorInProcessing' statuses"
      )
    ELSE
     CALL echo (build ("FAILURE!! Mark_Batch_Complete() routine returned an unknown status = " ,stat
       ) )
     RETURN (0 )
   ENDCASE
  ENDIF
  CALL echo ("Exiting Set_Batch_Stats() routine..." )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  get_batch_stats (batchid ,interfaceid ,tallycdf )
  CALL echo ("In Get_Batch_Stats() routine..." )
  DECLARE sub_batchid = f8 WITH private ,noconstant (batchid )
  DECLARE sub_interfaceid = f8 WITH private ,noconstant (interfaceid )
  DECLARE sub_tallycdf = c12 WITH private ,noconstant (trim (tallycdf ,3 ) )
  DECLARE sub_tallycd = f8 WITH private ,noconstant (0.0 )
  SET sub_tallycd = eso_get_meaning_by_codeset (tallycs ,sub_tallycdf )
  CALL reset_si_batch_stats_req (0 )
  CALL reset_si_batch_stats_rep (0 )
  SET stat = alterlist (req_si_batch_stats->req_set ,1 )
  SET req_si_batch_stats->req_set[1 ].batch_id = sub_batchid
  SET req_si_batch_stats->req_set[1 ].interface_id = sub_interfaceid
  SET req_si_batch_stats->req_set[1 ].tally_cd = sub_tallycd
  SET req_si_batch_stats->request_type = "SELECT"
  EXECUTE si_batch_stats_methods WITH replace ("REQUEST" ,req_si_batch_stats ) ,
  replace ("REPLY" ,rep_si_batch_stats )
  IF ((rep_si_batch_stats->status_data.status != "S" ) )
   CALL echo (build ("FAILURE!! SI_BATCH_STATS_METHODS Script returned with a status = " ,
     rep_si_batch_stats->status_data.status ) )
   RETURN ("" )
  ENDIF
  CALL echo ("Exiting Get_Batch_Stats() routine..." )
  RETURN (rep_si_batch_stats->qual[1 ].tally_value )
 END ;Subroutine
 SUBROUTINE  notify_oe (batchid2 )
  CALL echo ("In Notify_OE() routine..." )
  DECLARE hitem = i4
  DECLARE hstruct = i4
  DECLARE hstruct2 = i4
  DECLARE hoestruct = i4
  DECLARE hmsgtype = i4
  DECLARE hbatchinfo = i4
  DECLARE sub_batchid2 = f8
  DECLARE sub_batchid2_old = i4
  DECLARE sub_batchstatusflag = i2
  DECLARE oemsgcreated = i2
  DECLARE oe_applicationnbr = i4
  DECLARE oe_tasknbr = i4
  DECLARE oe_requestnbr = i4
  DECLARE oe_messagenbr = i4
  SET oe_applicationnbr = 1241002
  SET oe_tasknbr = 1242002
  SET oe_requestnbr = 1243004
  SET oe_messagenbr = 1202300
  SET sub_batchid2 = batchid2
  SET sub_batchid2_old = batchid2
  SET sub_batchstatusflag = errornotifyingoe
  SET oemsgcreated = 0
  IF ((sub_batchid2 <= 0 ) )
   CALL echo ("ERROR!! Notify_OE() the BatchID <= 0  " )
   RETURN (0 )
  ENDIF
  SET stat = init_crm_stuff (oe_applicationnbr ,oe_tasknbr ,oe_requestnbr )
  IF (stat )
   SET stat = init_srv_stuff (oe_messagenbr ,1 ,0 )
   IF (stat )
    SET hstruct = uar_srvgetstruct (srvrec->qual[1 ].hreq ,"cerner" )
    IF (hstruct )
     SET stat = copylists_to_cernerarea ("NOTIFY" )
     IF (NOT (stat ) )
      CALL echo ("FAILURE!! CopyLists_to_CernerArea() " )
      RETURN (0 )
     ENDIF
     SET hoestruct = uar_srvgetstruct (hstruct ,"oe_info" )
     IF (hoestruct )
      IF (uar_srvfieldexists (hoestruct ,"batch_info" ) )
       SET hbatchinfo = uar_srvgetstruct (hoestruct ,"batch_info" )
       IF (hbatchinfo )
        CALL echo ("BATCH_INFO Exists.  Using new tdb." )
        SET stat = uar_srvsetshort (hoestruct ,"batch_notify_ind" ,1 )
        IF (NOT (stat ) )
         CALL echo ("FAILURE!! Could not set batch_notify_ind " )
        ENDIF
        SET stat = uar_srvsetdouble (hbatchinfo ,"batch_id" ,sub_batchid2 )
       ELSE
        CALL echo ("SrvGetStruct Failed on BATCH_INFO for new tdb." )
        SET stat = 0
       ENDIF
      ELSE
       CALL echo ("BATCH_INFO Doesn't Exist.  Using old tdb." )
       SET stat = uar_srvsetulong (hoestruct ,"batch_id" ,sub_batchid2_old )
      ENDIF
      IF (stat )
       SET hitem = uar_srvadditem (srvrec->qual[1 ].hreq ,"control_group" )
       IF (hitem )
        SET hitem2 = uar_srvadditem (hitem ,"msh" )
        IF (hitem2 )
         SET hstruct2 = uar_srvgetstruct (hitem2 ,"sending_application" )
         IF (hstruct2 )
          SET stat = uar_srvsetstring (hstruct2 ,"name_id" ,nullterm (
            "Call from Notify_OE() Routine" ) )
          IF (stat )
           SET oemsgcreated = 1
          ELSE
           CALL echo ("FAILURE!! uar_SrvSetString( NAME_ID )" )
          ENDIF
         ELSE
          CALL echo ("FAILURE!! uar_SrvGetStruct( SENDING_APPLICATION )" )
         ENDIF
        ELSE
         CALL echo ("FAILURE!! uar_SrvAddItem( MSH )" )
        ENDIF
       ELSE
        CALL echo ("FAILUER!! uar_SrvAddItem( CONTROL_GROUP )" )
       ENDIF
      ELSE
       CALL echo ("FAILURE!! BatchID Not Found" )
      ENDIF
     ELSE
      CALL echo ("FAILURE!! uar_SrvGetStruct( OE_INFO )" )
     ENDIF
    ELSE
     CALL echo ("FAILURE!! uar_SrvGetStruct( CERNER )" )
    ENDIF
    IF (oemsgcreated )
     SET hmsgtype = uar_srvcreaterequesttype (srvrec->qual[1 ].hmsg )
     IF (hmsgtype )
      SET stat = uar_srvrecreateinstance (crmrec->qual[1 ].hreq ,hmsgtype )
      IF (stat )
       SET stat = uar_srvcopy (crmrec->qual[1 ].hreq ,srvrec->qual[1 ].hreq )
       IF (stat )
        CALL echo ("Calling  uar_CrmPerform( )" )
        SET stat = uar_crmperform (crmrec->qual[1 ].hstep )
        IF (stat )
         CALL echo (build ("FAILURE!! uar_CrmPerform() status = " ,stat ) )
        ELSE
         CALL echo ("uar_CrmPerform on the OE Router was SUCCESSFUL!!..." )
         SET sub_batchstatusflag = oenotified
        ENDIF
       ELSE
        CALL echo (build ("FAILURE!! uar_SrvCopy() status = " ,stat ) )
       ENDIF
      ELSE
       CALL echo (build ("FAILURE!! uar_SrvReCreateInstance status = " ,stat ) )
      ENDIF
      CALL uar_srvdestroyinstance (hmsgtype )
     ELSE
      CALL echo ("FAILURE!! SrvCreateRequestType()" )
     ENDIF
    ELSE
     CALL echo ("ERROR!! In creating the SrvMessage to OE Router." )
    ENDIF
   ELSE
    CALL echo ("FAILURE!! Init_Srv_Stuff()" )
   ENDIF
   SET stat = cleanup_srv_stuff (1 )
  ELSE
   CALL echo ("FAILURE!! Init_Crm_Stuff()" )
  ENDIF
  SET stat = cleanup_crm_stuff (1 )
  CALL reset_si_batch_req (0 )
  CALL reset_si_batch_rep (0 )
  SET req_si_batch->request_type = "UPDATE"
  SET stat = alterlist (req_si_batch->req_set ,1 )
  SET req_si_batch->req_set[1 ].batch_id = sub_batchid2
  SET req_si_batch->req_set[1 ].batch_status_flag = sub_batchstatusflag
  EXECUTE si_batch_methods WITH replace ("REQUEST" ,req_si_batch ) ,
  replace ("REPLY" ,rep_si_batch )
  IF ((rep_si_batch->status_data.status != "S" ) )
   CALL echo (build ("FAILURE!! SI_BATCH_METHODS Script returned status = " ,rep_si_batch->
     status_data.status ) )
   RETURN (0 )
  ENDIF
  CALL echo ("Exiting Notify_OE() routine..." )
  IF ((sub_batchstatusflag = oenotified ) )
   RETURN (1 )
  ELSE
   RETURN (0 )
  ENDIF
 END ;Subroutine
 SUBROUTINE  get_alias (contributorsourcecd ,codevalue )
  CALL echo ("In Get_Alias() routine..." )
  DECLARE alias = vc
  FREE RECORD req_get_cvalias
  RECORD req_get_cvalias (
    1 qual [* ]
      2 code_value = f8
      2 contributor_source_cd = f8
      2 code_set = f8
      2 alt_contrib_src_cd = f8
      2 index = f8
  )
  FREE RECORD rep_get_cvalias
  RECORD rep_get_cvalias (
    1 qual [* ]
      2 alias = vc
      2 code_set = i4
      2 code_value = f8
      2 contributor_source_cd = f8
      2 found_ind = i2
      2 found_prim_ind = i2
      2 display = c40
      2 display_key = c40
      2 cdf_meaning = c12
      2 dbnull = c20
      2 cd_cs_string = c40
      2 cki = c255
      2 index = f8
    1 status_data
      2 status = c1
      2 subeventstatus [1 ]
        3 operationname = c15
        3 operationstatus = c1
        3 targetobjectname = c15
        3 targetobjectvalue = vc
  )
  SET stat = alterlist (req_get_cvalias->qual ,1 )
  SET req_get_cvalias->qual[1 ].code_value = codevalue
  SET req_get_cvalias->qual[1 ].contributor_source_cd = contributorsourcecd
  EXECUTE fsi_get_cvalias WITH replace ("REQUEST" ,req_get_cvalias ) ,
  replace ("REPLY" ,rep_get_cvalias )
  IF ((rep_get_cvalias->status_data.status != "S" ) )
   CALL echo (build ("FAILURE!! FSI_GET_CVALIAS Script returned with a status = " ,rep_get_cvalias->
     status_data.status ) )
   RETURN (0 )
  ENDIF
  SET alias = trim (rep_get_cvalias->qual[1 ].alias ,3 )
  CALL echo (build ("Alias = " ,alias ) )
  CALL echo ("Exiting Get_Alias() routine..." )
  RETURN (alias )
 END ;Subroutine
 SUBROUTINE  get_sort_order (batchid3 ,sortstring3 ,origin3 )
  CALL echo ("In Get_Sort_Order() routine..." )
  DECLARE sub_batchid = f8
  DECLARE sub_sortstring = vc
  DECLARE sub_origin = c25
  DECLARE i = i4
  DECLARE temp_pos = i4
  DECLARE length = i4
  DECLARE sortind = i2
  SET sub_origin = trim (origin3 ,3 )
  SET sub_batchid = batchid3
  SET sub_sortstring = trim (sortstring3 ,3 )
  SET i = 0
  SET sortind = 0
  SET length = size (trim (sub_sortstring ,3 ) )
  SET next_delim = 0
  SET curr_delim = 0
  SET batcheventcnt = 0
  CALL echo (build ("origin = " ,cnvtupper (trim (sub_origin ,3 ) ) ) )
  CALL echo (build ("ComServer SortString = " ,sub_sortstring ) )
  CALL echo (build ("length = " ,length ) )
  CASE (cnvtupper (trim (sub_origin ,3 ) ) )
   OF "COMSERVER" :
    IF (length )
     SET stat = alterlist (ccsort_order->qual ,0 )
     SET curr_delim = findstring ("~" ,sub_sortstring )
     IF (curr_delim )
      WHILE ((curr_delim < length ) )
       SET next_delim = findstring ("~" ,sub_sortstring ,(curr_delim + 1 ) )
       IF (next_delim )
        SET i = (i + 1 )
        SET stat = alterlist (ccsort_order->qual ,i )
        SET found = 0
        SET temp_str = fillstring (255 ," " )
        SET temp_str = substring ((curr_delim + 1 ) ,(next_delim - (curr_delim + 1 ) ) ,
         sub_sortstring )
        CALL echo (build ("temp_str = " ,temp_str ) )
        SET temp_pos = 0
        SET temp_pos = findstring (":" ,trim (temp_str ,3 ) )
        IF (temp_pos )
         SET ccsort_order->qual[i ].field_name = substring (1 ,(temp_pos - 1 ) ,temp_str )
         SET ccsort_order->qual[i ].operator = trim (substring (temp_pos ,1 ,temp_str ) ,3 )
         SET ccsort_order->qual[i ].string_value = substring ((temp_pos + 1 ) ,(size (trim (temp_str
            ,3 ) ) - temp_pos ) ,temp_str )
        ENDIF
        SET temp_pos = findstring (">=" ,trim (temp_str ,3 ) )
        IF (temp_pos )
         SET found = 1
         SET ccsort_order->qual[i ].field_name = substring (1 ,(temp_pos - 1 ) ,temp_str )
         SET ccsort_order->qual[i ].operator = trim (substring (temp_pos ,2 ,temp_str ) ,3 )
         SET ccsort_order->qual[i ].numeric_value = cnvtint (substring ((temp_pos + 2 ) ,(size (trim
            (temp_str ,3 ) ) - (temp_pos + 1 ) ) ,temp_str ) )
        ELSE
         SET temp_pos = findstring (">" ,trim (temp_str ,3 ) )
         IF (temp_pos )
          SET ccsort_order->qual[i ].field_name = substring (1 ,(temp_pos - 1 ) ,temp_str )
          SET ccsort_order->qual[i ].operator = trim (substring (temp_pos ,1 ,temp_str ) ,3 )
          SET ccsort_order->qual[i ].numeric_value = cnvtint (substring ((temp_pos + 1 ) ,(size (
             trim (temp_str ,3 ) ) - temp_pos ) ,temp_str ) )
         ENDIF
        ENDIF
        SET temp_pos = findstring ("<=" ,trim (temp_str ,3 ) )
        IF (temp_pos )
         SET found = 1
         SET ccsort_order->qual[i ].field_name = substring (1 ,(temp_pos - 1 ) ,temp_str )
         SET ccsort_order->qual[i ].operator = trim (substring (temp_pos ,2 ,temp_str ) ,3 )
         SET ccsort_order->qual[i ].numeric_value = cnvtint (substring ((temp_pos + 2 ) ,(size (trim
            (temp_str ,3 ) ) - (temp_pos + 1 ) ) ,temp_str ) )
        ELSE
         SET temp_pos = findstring ("<" ,trim (temp_str ,3 ) )
         IF (temp_pos )
          SET ccsort_order->qual[i ].field_name = substring (1 ,(temp_pos - 1 ) ,temp_str )
          SET ccsort_order->qual[i ].operator = trim (substring (temp_pos ,1 ,temp_str ) ,3 )
          SET ccsort_order->qual[i ].numeric_value = cnvtint (substring ((temp_pos + 1 ) ,(size (
             trim (temp_str ,3 ) ) - temp_pos ) ,temp_str ) )
         ENDIF
        ENDIF
        SET temp_pos = findstring ("!=" ,trim (temp_str ,3 ) )
        IF (temp_pos )
         SET found = 1
         SET ccsort_order->qual[i ].field_name = substring (1 ,(temp_pos - 1 ) ,temp_str )
         SET ccsort_order->qual[i ].operator = trim (substring (temp_pos ,2 ,temp_str ) ,3 )
         IF ((ichar (substring ((temp_pos + 2 ) ,1 ,temp_str ) ) = 34 ) )
          SET ccsort_order->qual[i ].string_value = substring ((temp_pos + 3 ) ,(size (trim (
             temp_str ,3 ) ) - (temp_pos + 3 ) ) ,temp_str )
         ELSE
          SET ccsort_order->qual[i ].numeric_value = cnvtint (substring ((temp_pos + 2 ) ,(size (
             trim (temp_str ,3 ) ) - (temp_pos + 1 ) ) ,temp_str ) )
         ENDIF
        ENDIF
        SET temp_pos = findstring ("=" ,trim (temp_str ,3 ) )
        IF (temp_pos
        AND NOT (found ) )
         SET ccsort_order->qual[i ].field_name = substring (1 ,(temp_pos - 1 ) ,temp_str )
         SET ccsort_order->qual[i ].operator = trim (substring (temp_pos ,1 ,temp_str ) ,3 )
         IF ((ichar (substring ((temp_pos + 1 ) ,1 ,temp_str ) ) = 34 ) )
          SET ccsort_order->qual[i ].string_value = substring ((temp_pos + 2 ) ,(size (trim (
             temp_str ,3 ) ) - (temp_pos + 2 ) ) ,temp_str )
         ELSE
          SET ccsort_order->qual[i ].numeric_value = cnvtint (substring ((temp_pos + 1 ) ,(size (
             trim (temp_str ,3 ) ) - temp_pos ) ,temp_str ) )
         ENDIF
        ENDIF
        SET curr_delim = next_delim
       ELSE
        CALL echo ("ERROR!! Missing a second delimiter." )
        RETURN (0 )
       ENDIF
      ENDWHILE
     ELSE
      CALL echo ("ERROR!! Sort_String doesn't have a Begining Delimiter." )
      RETURN (0 )
     ENDIF
    ELSE
     CALL echo ("ERROR!! Sort_String is empty." )
     RETURN (0 )
    ENDIF
    ,
    CALL echorecord (ccsort_order )
   OF "SI_BATCH_EVENT" :
    CALL reset_si_batch_event_req (0 )
    CALL reset_si_batch_event_rep (0 )
    SET stat = alterlist (req_event->req_set ,1 )
    SET req_event->request_type = "SELECT"
    SET req_event->req_set[1 ].batch_id = sub_batchid
    EXECUTE si_batch_event_methods WITH replace ("REQUEST" ,req_event ) ,
    replace ("REPLY" ,rep_event )
    IF ((rep_event->status_data.status != "S" ) )
     CALL echo (build ("FAILURE!! SI_BATCH_EVENT_METHODS Script returned status = " ,rep_event->
       status_data.status ) )
     RETURN (0 )
    ENDIF
    ,
    SET batcheventcnt = size (rep_event->qual ,5 )
    CALL echo (build ("BatchEventCnt = " ,batcheventcnt ) )
    IF (batcheventcnt )
     IF (NOT (length ) )
      FOR (i = 1 TO batcheventcnt )
       SET stat = alterlist (tblsort_order->qual ,i )
       SET tblsort_order->qual[i ].batch_event_id = rep_event->qual[i ].batch_event_id
       SET tblsort_order->qual[i ].batch_id = rep_event->qual[i ].batch_id
       SET tblsort_order->qual[i ].batch_sort_flag = rep_event->qual[i ].batch_sort_flag
      ENDFOR
     ELSE
      FOR (i = 1 TO batcheventcnt )
       SET stat = alterlist (tblsort_order->qual ,i )
       SET tblsort_order->qual[i ].batch_event_id = rep_event->qual[i ].batch_event_id
       SET tblsort_order->qual[i ].batch_id = rep_event->qual[i ].batch_id
       SET tblsort_order->qual[i ].batch_sort_flag = rep_event->qual[i ].batch_sort_flag
       SET j = 0
       SET next_delim = 0
       SET curr_delim = 0
       SET temp_pos = 0
       SET sub_sortstring = trim (rep_event->qual[i ].sort_string ,3 )
       SET length2 = size (trim (sub_sortstring ,3 ) )
       IF (length2 )
        SET curr_delim = findstring ("~" ,sub_sortstring )
        IF (curr_delim )
         SET sortind = 1
         WHILE ((curr_delim < length2 ) )
          SET next_delim = findstring ("~" ,sub_sortstring ,(curr_delim + 1 ) )
          IF (next_delim )
           SET j = (j + 1 )
           SET stat = alterlist (tblsort_order->qual[i ].sort_info ,j )
           SET temp_str = fillstring (255 ," " )
           SET temp_str = substring ((curr_delim + 1 ) ,(next_delim - (curr_delim + 1 ) ) ,
            sub_sortstring )
           CALL echo (build ("temp_str = " ,temp_str ) )
           SET temp_pos = 0
           SET temp_pos = findstring ("=" ,trim (temp_str ,3 ) )
           IF (temp_pos )
            SET tblsort_order->qual[i ].sort_info[j ].field_name = substring (1 ,(temp_pos - 1 ) ,
             temp_str )
            SET tblsort_order->qual[i ].sort_info[j ].operator = trim (substring (temp_pos ,1 ,
              temp_str ) ,3 )
            IF ((ichar (substring ((temp_pos + 1 ) ,1 ,temp_str ) ) = 34 ) )
             SET tblsort_order->qual[i ].sort_info[j ].string_value = substring ((temp_pos + 2 ) ,(
              size (trim (temp_str ,3 ) ) - (temp_pos + 2 ) ) ,temp_str )
            ELSE
             SET tblsort_order->qual[i ].sort_info[j ].numeric_value = cnvtint (substring ((temp_pos
               + 1 ) ,(size (trim (temp_str ,3 ) ) - temp_pos ) ,temp_str ) )
            ENDIF
           ENDIF
           SET curr_delim = next_delim
          ELSE
           CALL echo ("ERROR!! Sort_String is missing a second delimiter." )
           RETURN (0 )
          ENDIF
         ENDWHILE
        ELSE
         CALL echo ("ERROR!! Sort_String doesn't have a Begining Delimiter." )
         RETURN (0 )
        ENDIF
       ELSE
        CALL echo (build ("NO Sort_String values exist for Batch_Event_Id = " ,tblsort_order->qual[i
          ].batch_event_id ) )
       ENDIF
      ENDFOR
     ENDIF
    ELSE
     CALL echo (build (
       "FAILURE!! SI_BATCH_EVENT_METHODS script returned zero Batch Events for Batch_Id = " ,
       sub_batchid ) )
     RETURN (0 )
    ENDIF
    ,
    CALL echorecord (tblsort_order )
   ELSE
    CALL echo (build ("ERROR!! Invalid Origin passed into Get_Sort_Order() routine.  Origin = " ,
      sub_origin ) )
  ENDCASE
  CALL echo ("Exiting Get_Sort_Order() routine..." )
  IF (sortind )
   RETURN (2 )
  ELSE
   RETURN (1 )
  ENDIF
 END ;Subroutine
 SUBROUTINE  sort_events (dummy1 )
  CALL echo ("In Sort_Events() routine..." )
  DECLARE order_clause = vc
  DECLARE w = i4
  DECLARE i = i4
  DECLARE j = i4
  DECLARE k = i4
  SET w = 0
  SET i = size (ccsort_order->qual ,5 )
  WHILE ((i > 0 ) )
   CALL echo (build ("i = " ,i ) )
   CALL echo (build ("operator = " ,trim (ccsort_order->qual[i ].operator ,3 ) ) )
   IF ((trim (ccsort_order->qual[i ].operator ,3 ) = ":" ) )
    IF ((validate (temp_rec->field[1 ].field_name ,"N" ) = "N" ) )
     FREE RECORD temp_rec
     RECORD temp_rec (
       1 field [* ]
         2 field_name = vc
         2 desc_ind = i2
         2 ignor_ind = i2
         2 event [* ]
           3 sort_value = f8
     )
    ENDIF
    SET w = (w + 1 )
    SET stat = alterlist (temp_rec->field ,w )
    SET temp_rec->field[w ].field_name = ccsort_order->qual[i ].field_name
    IF ((cnvtupper (trim (ccsort_order->qual[i ].string_value ,3 ) ) = "DESC" ) )
     SET temp_rec->field[w ].desc_ind = 1
    ENDIF
    FOR (j = 1 TO size (tblsort_order->qual ,5 ) )
     SET stat = alterlist (temp_rec->field[w ].event ,j )
     FOR (k = 1 TO size (tblsort_order->qual[j ].sort_info ,5 ) )
      IF ((cnvtupper (trim (tblsort_order->qual[j ].sort_info[k ].field_name ,3 ) ) = cnvtupper (
       trim (temp_rec->field[w ].field_name ,3 ) ) ) )
       SET temp_rec->field[w ].event[j ].sort_value = tblsort_order->qual[j ].sort_info[k ].
       numeric_value
      ENDIF
     ENDFOR
    ENDFOR
   ENDIF
   SET i = (i - 1 )
  ENDWHILE
  CALL echorecord (temp_rec )
  FREE RECORD sort_array
  RECORD sort_array (
    1 qual [* ]
      2 index = i4
  )
  SET numfields = size (temp_rec->field ,5 )
  CALL echo (build ("NumFields = " ,numfields ) )
  SELECT
   IF ((numfields = 1 )
   AND (temp_rec->field[1 ].desc_ind > 0 ) )
    ORDER BY field_value1 DESC
   ELSEIF ((numfields = 1 )
   AND (temp_rec->field[1 ].desc_ind <= 0 ) )
    ORDER BY field_value1
   ELSEIF ((numfields = 2 )
   AND (temp_rec->field[1 ].desc_ind > 0 )
   AND (temp_rec->field[2 ].desc_ind > 0 ) )
    ORDER BY field_value1 DESC ,
     field_value2 DESC
   ELSEIF ((numfields = 2 )
   AND (temp_rec->field[1 ].desc_ind > 0 )
   AND (temp_rec->field[2 ].desc_ind <= 0 ) )
    ORDER BY field_value1 DESC ,
     field_value2
   ELSEIF ((numfields = 2 )
   AND (temp_rec->field[1 ].desc_ind <= 0 )
   AND (temp_rec->field[2 ].desc_ind > 0 ) )
    ORDER BY field_value1 ,
     field_value2 DESC
   ELSEIF ((numfields = 2 )
   AND (temp_rec->field[1 ].desc_ind <= 0 )
   AND (temp_rec->field[2 ].desc_ind <= 0 ) )
    ORDER BY field_value1 ,
     field_value2
   ELSEIF ((numfields = 3 )
   AND (temp_rec->field[1 ].desc_ind > 0 )
   AND (temp_rec->field[2 ].desc_ind > 0 )
   AND (temp_rec->field[3 ].desc_ind > 0 ) )
    ORDER BY field_value1 DESC ,
     field_value2 DESC ,
     field_value3 DESC
   ELSEIF ((numfields = 3 )
   AND (temp_rec->field[1 ].desc_ind > 0 )
   AND (temp_rec->field[2 ].desc_ind > 0 )
   AND (temp_rec->field[3 ].desc_ind <= 0 ) )
    ORDER BY field_value1 DESC ,
     field_value2 DESC ,
     field_value3
   ELSEIF ((numfields = 3 )
   AND (temp_rec->field[1 ].desc_ind > 0 )
   AND (temp_rec->field[2 ].desc_ind <= 0 )
   AND (temp_rec->field[3 ].desc_ind > 0 ) )
    ORDER BY field_value1 DESC ,
     field_value2 ,
     field_value3 DESC
   ELSEIF ((numfields = 3 )
   AND (temp_rec->field[1 ].desc_ind <= 0 )
   AND (temp_rec->field[2 ].desc_ind > 0 )
   AND (temp_rec->field[3 ].desc_ind > 0 ) )
    ORDER BY field_value1 ,
     field_value2 DESC ,
     field_value3 DESC
   ELSEIF ((numfields = 3 )
   AND (temp_rec->field[1 ].desc_ind <= 0 )
   AND (temp_rec->field[2 ].desc_ind <= 0 )
   AND (temp_rec->field[3 ].desc_ind > 0 ) )
    ORDER BY field_value1 ,
     field_value2 ,
     field_value3 DESC
   ELSEIF ((numfields = 3 )
   AND (temp_rec->field[1 ].desc_ind > 0 )
   AND (temp_rec->field[2 ].desc_ind <= 0 )
   AND (temp_rec->field[3 ].desc_ind <= 0 ) )
    ORDER BY field_value1 DESC ,
     field_value2 ,
     field_value3
   ELSEIF ((numfields = 3 )
   AND (temp_rec->field[1 ].desc_ind <= 0 )
   AND (temp_rec->field[2 ].desc_ind > 0 )
   AND (temp_rec->field[3 ].desc_ind <= 0 ) )
    ORDER BY field_value1 ,
     field_value2 DESC ,
     field_value3
   ELSEIF ((numfields = 3 )
   AND (temp_rec->field[1 ].desc_ind <= 0 )
   AND (temp_rec->field[2 ].desc_ind <= 0 )
   AND (temp_rec->field[3 ].desc_ind <= 0 ) )
    ORDER BY field_value1 ,
     field_value2 ,
     field_value3
   ELSE
   ENDIF
   INTO "nl:"
   field_value1 =
   IF ((numfields >= 1 ) ) temp_rec->field[1 ].event[d.seq ].sort_value
   ELSE 0
   ENDIF
   ,field_value2 =
   IF ((numfields >= 2 ) ) temp_rec->field[2 ].event[d.seq ].sort_value
   ELSE 0
   ENDIF
   ,field_value3 =
   IF ((numfields >= 3 ) ) temp_rec->field[3 ].event[d.seq ].sort_value
   ELSE 0
   ENDIF
   ,field_value4 =
   IF ((numfields >= 4 ) ) temp_rec->field[4 ].event[d.seq ].sort_value
   ELSE 0
   ENDIF
   ,field_value5 =
   IF ((numfields >= 5 ) ) temp_rec->field[5 ].event[d.seq ].sort_value
   ELSE 0
   ENDIF
   FROM (dummyt d WITH seq = value (size (temp_rec->field[1 ].event ,5 ) ) )
   HEAD REPORT
    lcount = 0
   DETAIL
    lcount = (lcount + 1 ) ,
    stat = alterlist (sort_array->qual ,lcount ) ,
    sort_array->qual[lcount ].index = d.seq
   WITH nocounter
  ;end select
  CALL echorecord (sort_array )
  IF (size (sorted_rec->qual ,5 ) )
   SET stat = alterlist (sorted_rec->qual ,0 )
  ENDIF
  FOR (j = 1 TO size (sort_array->qual ,5 ) )
   SET z = sort_array->qual[j ].index
   SET stat = alterlist (sorted_rec->qual ,j )
   SET sorted_rec->qual[j ].batch_event_id = tblsort_order->qual[z ].batch_event_id
   SET sorted_rec->qual[j ].batch_id = tblsort_order->qual[z ].batch_id
   SET sorted_rec->qual[j ].seq_num = j
   SET sorted_rec->qual[j ].batch_sort_flag = tblsort_order->qual[z ].batch_sort_flag
   FOR (k = 1 TO size (tblsort_order->qual[z ].sort_info ,5 ) )
    SET stat = alterlist (sorted_rec->qual[j ].sort_info ,k )
    SET sorted_rec->qual[j ].sort_info[k ].field_name = tblsort_order->qual[z ].sort_info[k ].
    field_name
    SET sorted_rec->qual[j ].sort_info[k ].operator = tblsort_order->qual[z ].sort_info[k ].operator
    SET sorted_rec->qual[j ].sort_info[k ].numeric_value = tblsort_order->qual[z ].sort_info[k ].
    numeric_value
    SET sorted_rec->qual[j ].sort_info[k ].string_value = tblsort_order->qual[z ].sort_info[k ].
    string_value
   ENDFOR
  ENDFOR
  CALL echorecord (sorted_rec )
  CALL echo ("Exiting Sort_Events() routine..." )
 END ;Subroutine
 SUBROUTINE  reset_ui_message (hreq1 )
  CALL echo ("In Reset_UI_Message() routine..." )
  CALL uar_srvreset (hreq1 ,0 )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  destroy_ui_message (hreq1 )
  CALL echo ("In Destroy_UI_Message() routine..." )
  CALL uar_srvdestroyinstance (hreq1 )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  init_srv_stuff (messageid ,get_hreq ,get_hrep )
  CALL echo ("In Init_Srv_Stuff() routine..." )
  IF (size (srvrec->qual ,5 ) )
   CALL cleanup_srv_stuff (1 )
  ENDIF
  SET stat = alterlist (srvrec->qual ,1 )
  SET srvrec->qual[1 ].msg_id = messageid
  SET srvrec->qual[1 ].hmsg = uar_srvselectmessage (srvrec->qual[1 ].msg_id )
  IF (srvrec->qual[1 ].hmsg )
   IF (get_hreq )
    SET srvrec->qual[1 ].hreq = uar_srvcreaterequest (srvrec->qual[1 ].hmsg )
    IF (NOT (srvrec->qual[1 ].hreq ) )
     CALL echo ("The uar_SrvCreateRequest() FAILED!!" )
     RETURN (0 )
    ENDIF
   ENDIF
   IF (get_hrep )
    SET srvrec->qual[1 ].hrep = uar_srvcreatereply (srvrec->qual[1 ].hmsg )
    IF (NOT (srvrec->qual[1 ].hrep ) )
     CALL echo ("The uar_SrvCreateReply() FAILED!!" )
     IF (srvrec->qual[1 ].hreq )
      CALL uar_srvdestroyinstance (srvrec->qual[1 ].hreq )
      SET srvrec->qual[1 ].hreq = 0
     ENDIF
     RETURN (0 )
    ENDIF
   ENDIF
  ELSE
   CALL echo ("The uar_SrvSelectMessage() FAILED!!" )
   RETURN (0 )
  ENDIF
  CALL echo ("Exiting Init_Srv_Stuff() routine... " )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  cleanup_srv_stuff (dummy1 )
  CALL echo ("In CleanUp_Srv_Stuff() routine..." )
  FOR (i = 1 TO size (srvrec->qual ,5 ) )
   CALL echo (build ("i = " ,i ) )
   IF ((srvrec->qual[i ].hreq > 0 ) )
    CALL uar_srvdestroyinstance (srvrec->qual[i ].hreq )
   ENDIF
   IF ((srvrec->qual[i ].hrep > 0 ) )
    CALL uar_srvdestroyinstance (srvrec->qual[i ].hrep )
   ENDIF
  ENDFOR
  IF (size (srvrec->qual ,5 ) )
   SET stat = alterlist (srvrec->qual ,0 )
  ENDIF
  CALL echo ("Exiting CleanUp_Srv_Stuff() routine..." )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  init_crm_stuff (appnbr ,tasknbr ,reqnbr )
  CALL echo ("In Init_Crm_Stuff() routine..." )
  IF (size (crmrec->qual ,5 ) )
   CALL cleanup_crm_stuff (1 )
  ENDIF
  SET stat = alterlist (crmrec->qual ,1 )
  SET crmrec->qual[1 ].app = appnbr
  SET crmrec->qual[1 ].task = tasknbr
  SET crmrec->qual[1 ].req = reqnbr
  SET crmrec->qual[1 ].status = uar_crmbeginapp (crmrec->qual[1 ].app ,crmrec->qual[1 ].happ )
  IF (crmrec->qual[1 ].status )
   CALL echo (concat ("Begin app failed with status: " ,cnvtstring (crmrec->qual[1 ].status ) ) )
   RETURN (0 )
  ENDIF
  CALL echo (concat ("Begin app handle: " ,cnvtstring (crmrec->qual[1 ].happ ) ) )
  SET crmrec->qual[1 ].status = uar_crmbegintask (crmrec->qual[1 ].happ ,crmrec->qual[1 ].task ,
   crmrec->qual[1 ].htask )
  IF (crmrec->qual[1 ].status )
   CALL echo (concat ("Begin task failed with status: " ,cnvtstring (crmrec->qual[1 ].status ) ) )
   RETURN (0 )
  ENDIF
  CALL echo (concat ("Begin task handle: " ,cnvtstring (crmrec->qual[1 ].htask ) ) )
  IF (crmrec->qual[1 ].req )
   SET status = uar_crmbeginreq (crmrec->qual[1 ].htask ,"" ,crmrec->qual[1 ].req ,crmrec->qual[1 ].
    hstep )
   IF (crmrec->qual[1 ].status )
    CALL echo (concat ("Begin Req failed with status: " ,cnvtstring (crmrec->qual[1 ].status ) ) )
    RETURN (0 )
   ENDIF
   CALL echo (concat ("Begin Req handle crmrec->qual[1]->hStep=" ,cnvtstring (crmrec->qual[1 ].hstep
      ) ) )
   SET crmrec->qual[1 ].hreq = uar_crmgetrequest (crmrec->qual[1 ].hstep )
   IF (NOT (crmrec->qual[1 ].hreq ) )
    CALL echo (concat ("Get Reqest failed crmrec->qual[1]->hReq=" ,cnvtstring (crmrec->qual[1 ].hreq
       ) ) )
    RETURN (0 )
   ENDIF
   CALL echo (concat ("Get Req handle crmrec->qual[1]->hReq=" ,cnvtstring (crmrec->qual[1 ].hreq ) )
    )
  ENDIF
  CALL echo ("Exiting Init_Crm_Stuff() routine..." )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  cleanup_crm_stuff (dummy1 )
  CALL echo ("In CleanUp_Crm_Stuff() routine..." )
  FOR (i = 1 TO size (crmrec->qual ,5 ) )
   CALL echo (build ("i = " ,i ) )
   IF (crmrec->qual[i ].hstep )
    CALL uar_crmendreq (crmrec->qual[i ].hstep )
   ENDIF
   IF (crmrec->qual[i ].htask )
    CALL uar_crmendtask (crmrec->qual[i ].htask )
   ENDIF
   IF (crmrec->qual[i ].happ )
    CALL uar_crmendapp (crmrec->qual[i ].happ )
   ENDIF
  ENDFOR
  IF (size (crmrec->qual ,5 ) )
   SET stat = alterlist (crmrec->qual ,0 )
  ENDIF
  CALL echo ("Exiting CleanUp_Crm_Stuff() routine..." )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  undo_si_batch (batchidx )
  CALL echo ("In UNDO_SI_BATCH() routine..." )
  CALL reset_si_batch_req (0 )
  CALL reset_si_batch_rep (0 )
  SET req_si_batch->request_type = "DELETE"
  SET stat = alterlist (req_si_batch->req_set ,1 )
  SET req_si_batch->req_set[1 ].batch_id = batchidx
  EXECUTE si_batch_methods WITH replace ("REQUEST" ,req_si_batch ) ,
  replace ("REPLY" ,rep_si_batch )
  IF ((rep_si_batch->status_data.status = "F" ) )
   CALL echo ("FAILURE!! SI_BATCH_METHODS Script returned a 'F' status." )
   RETURN (0 )
  ENDIF
  CALL echo ("Exiting UNDO_SI_BATCH() routine..." )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  undo_si_batch_event (batcheventidx )
  CALL echo ("In UNDO_SI_BATCH_EVENT() routine..." )
  CALL reset_si_batch_event_req (0 )
  CALL reset_si_batch_event_rep (0 )
  SET stat = alterlist (req_event->req_set ,1 )
  SET req_event->request_type = "DELETE"
  SET req_event->req_set[1 ].batch_event_id = batcheventidx
  EXECUTE si_batch_event_methods WITH replace ("REQUEST" ,req_event ) ,
  replace ("REPLY" ,rep_event )
  IF ((rep_event->status_data.status = "F" ) )
   CALL echo ("FAILURE!! SI_BATCH_EVENT_METHODS Script returned a 'F' status." )
   RETURN (0 )
  ENDIF
  CALL echo ("Exiting UNDO_SI_BATCH_EVENT() routine..." )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  copylists_to_cernerarea (caseflag )
  CALL echo ("In COPYLISTS_TO_CERNERAREA() routine..." )
  DECLARE m_hitem = i4
  DECLARE m_hstruct = i4
  SET m_hitem = 0
  SET m_hstruct = 0
  SET retstat = 0
  CASE (caseflag )
   OF "ROUTE" :
    CALL echo ("In ROUTE" )
    IF ((validate (input_oenobj ,"Z" ) = "Z" ) )
     CALL echo ("ERROR!! INPUT_OENOBJ does not exist" )
     RETURN (0 )
    ENDIF
    ,
    IF (size (input_oenobj->cerner.longlist ,5 ) )
     SET jj = size (oenobj->cerner.longlist ,5 )
     FOR (ii = 1 TO size (input_oenobj->cerner.longlist ,5 ) )
      SET jj = (jj + 1 )
      SET stat = alterlist (oenobj->cerner.longlist ,jj )
      SET oenobj->cerner.longlist[jj ].lval = input_oenobj->cerner.longlist[ii ].lval
      SET oenobj->cerner.longlist[jj ].strmeaning = input_oenobj->cerner.longlist[ii ].strmeaning
     ENDFOR
    ELSE
     CALL echo ("Nothing to add to LongList for ROUTE" )
    ENDIF
    ,
    IF (size (input_oenobj->cerner.stringlist ,5 ) )
     SET jj = size (oenobj->cerner.stringlist ,5 )
     FOR (ii = 1 TO size (input_oenobj->cerner.stringlist ,5 ) )
      SET jj = (jj + 1 )
      SET stat = alterlist (oenobj->cerner.stringlist ,jj )
      SET oenobj->cerner.stringlist[jj ].strval = input_oenobj->cerner.stringlist[ii ].strval
      SET oenobj->cerner.stringlist[jj ].strmeaning = input_oenobj->cerner.stringlist[ii ].strmeaning
     ENDFOR
    ELSE
     CALL echo ("Nothing to add to StringList for ROUTE" )
    ENDIF
    ,
    IF (size (input_oenobj->cerner.doublelist ,5 ) )
     SET jj = size (oenobj->cerner.doublelist ,5 )
     FOR (ii = 1 TO size (input_oenobj->cerner.doublelist ,5 ) )
      SET jj = (jj + 1 )
      SET stat = alterlist (oenobj->cerner.doublelist ,jj )
      SET oenobj->cerner.doublelist[jj ].dval = input_oenobj->cerner.doublelist[ii ].dval
      SET oenobj->cerner.doublelist[jj ].strmeaning = input_oenobj->cerner.doublelist[ii ].strmeaning
     ENDFOR
    ELSE
     CALL echo ("Nothing to add to DoubleList for ROUTE" )
    ENDIF
   OF "NOTIFY" :
    CALL echo ("In NOTIFY" )
    SET m_hstruct = uar_srvgetstruct (srvrec->qual[1 ].hreq ,"cerner" )
    IF (NOT (m_hstruct ) )
     CALL echo ("FAILURE!! uar_SrvGetStruct() failed to get a handle Cerner" )
     RETURN (0 )
    ENDIF
    ,
    IF (size (oenobj->cerner.longlist ,5 ) )
     FOR (ii = 1 TO size (oenobj->cerner.longlist ,5 ) )
      SET m_hitem = uar_srvadditem (hstruct ,"longlist" )
      IF (m_hitem )
       SET stat = uar_srvsetlong (m_hitem ,"lVal" ,oenobj->cerner.longlist[ii ].lval )
       SET stat = uar_srvsetstring (m_hitem ,"strMeaning" ,nullterm (oenobj->cerner.longlist[ii ].
         strmeaning ) )
      ELSE
       CALL echo ("FAILURE!! uar_SrvAddItem() failed to add item to longList" )
      ENDIF
     ENDFOR
    ELSE
     CALL echo ("Nothing to add to LongList for NOTIFY" )
    ENDIF
    ,
    IF (size (oenobj->cerner.stringlist ,5 ) )
     FOR (ii = 1 TO size (oenobj->cerner.stringlist ,5 ) )
      SET m_hitem = uar_srvadditem (hstruct ,"stringlist" )
      IF (m_hitem )
       SET stat = uar_srvsetstring (m_hitem ,"strVal" ,nullterm (oenobj->cerner.stringlist[ii ].
         strval ) )
       SET stat = uar_srvsetstring (m_hitem ,"strMeaning" ,nullterm (oenobj->cerner.stringlist[ii ].
         strmeaning ) )
      ELSE
       CALL echo ("FAILURE!! uar_SrvAddItem() failed to add item to StringList" )
      ENDIF
     ENDFOR
    ELSE
     CALL echo ("Nothing to add to StringList for NOTIFY" )
    ENDIF
    ,
    IF (size (oenobj->cerner.doublelist ,5 ) )
     FOR (ii = 1 TO size (oenobj->cerner.doublelist ,5 ) )
      SET m_hitem = uar_srvadditem (hstruct ,"doublelist" )
      IF (m_hitem )
       SET stat = uar_srvsetdouble (m_hitem ,"dVal" ,oenobj->cerner.doublelist[ii ].dval )
       SET stat = uar_srvsetstring (m_hitem ,"strMeaning" ,nullterm (oenobj->cerner.doublelist[ii ].
         strmeaning ) )
      ELSE
       CALL echo ("FAILURE!! uar_SrvAddItem() failed to add item to DoubleList" )
      ENDIF
     ENDFOR
    ELSE
     CALL echo ("Nothing to add to DoubleList for NOTIFY" )
    ENDIF
   ELSE
    CALL echo (build ("INVALID!! Incoming CaseFlag =" ,caseflag ) )
  ENDCASE
  CALL echorecord (oenobj )
  CALL echo ("Exiting COPYLISTS_TO_CERNERAREA() routine..." )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  suppress_event (batcheventid )
  CALL echo ("Entering Suppress_Event()..." )
  DECLARE retstat = i2 WITH private ,noconstant (0 )
  SET retstat = update_event_sys_row2 (batcheventid ,suppressedevent ,"" ,"" ,0 ,0 ,0 ,0 ,"" ,0.0 )
  CALL echo ("Exiting Suppress_Event()..." )
  RETURN (retstat )
 END ;Subroutine
 SUBROUTINE  unsuppress_event (batcheventid )
  CALL echo ("Entering UnSuppress_Event()..." )
  DECLARE retstat = i2 WITH private ,noconstant (0 )
  SET retstat = update_event_sys_row2 (batcheventid ,processedevent ,"" ,"" ,0 ,0 ,0 ,0 ,"" ,0.0 )
  CALL echo ("Exiting UnSuppress_Event()..." )
  RETURN (retstat )
 END ;Subroutine
 SUBROUTINE  update_event_sys_row (batcheventid2 ,eventstatus )
  RETURN (update_event_sys_row2 (batcheventid2 ,eventstatus ,"" ,"" ,0 ,0 ,0 ,0 ,"" ,0.0 ) )
 END ;Subroutine
 SUBROUTINE  reset_si_batch_req (d1 )
  CALL echo ("Entering reset_si_batch_req()..." )
  DECLARE retstat = i2 WITH private ,noconstant (0 )
  SET stat = alterlist (req_si_batch->req_set ,0 )
  CALL echo ("Exiting reset_si_batch_req()..." )
  RETURN (retstat )
 END ;Subroutine
 SUBROUTINE  reset_si_batch_rep (d1 )
  CALL echo ("Entering reset_si_batch_rep()..." )
  DECLARE retstat = i2 WITH private ,noconstant (0 )
  SET stat = alterlist (rep_si_batch->qual ,0 )
  SET stat = alterlist (rep_si_batch->si_info.longlist ,0 )
  SET stat = alterlist (rep_si_batch->si_info.stringlist ,0 )
  SET stat = alterlist (rep_si_batch->si_info.doublelist ,0 )
  SET stat = alterlist (rep_si_batch->status_data.subeventstatus ,0 )
  CALL echo ("Exiting reset_si_batch_rep()..." )
  RETURN (retstat )
 END ;Subroutine
 SUBROUTINE  reset_si_batch_stats_req (d1 )
  CALL echo ("Entering reset_si_batch_stats_req()..." )
  DECLARE retstat = i2 WITH private ,noconstant (0 )
  SET stat = alterlist (req_si_batch_stats->req_set ,0 )
  CALL echo ("Exiting reset_si_batch_stats_req()..." )
  RETURN (retstat )
 END ;Subroutine
 SUBROUTINE  reset_si_batch_stats_rep (d1 )
  CALL echo ("Entering reset_si_batch_stats_rep()..." )
  DECLARE retstat = i2 WITH private ,noconstant (0 )
  SET stat = alterlist (rep_si_batch_stats->qual ,0 )
  SET stat = alterlist (rep_si_batch_stats->si_info.longlist ,0 )
  SET stat = alterlist (rep_si_batch_stats->si_info.stringlist ,0 )
  SET stat = alterlist (rep_si_batch_stats->si_info.doublelist ,0 )
  SET stat = alterlist (rep_si_batch_stats->status_data.subeventstatus ,0 )
  CALL echo ("Exiting reset_si_batch_stats_rep()..." )
  RETURN (retstat )
 END ;Subroutine
 SUBROUTINE  reset_si_batch_sys_req (d1 )
  CALL echo ("Entering reset_si_batch_sys_req()..." )
  DECLARE retstat = i2 WITH private ,noconstant (0 )
  DECLARE s_ireqcnt = i4 WITH private ,noconstant (0 )
  DECLARE s_ireqidx = i4 WITH private ,noconstant (0 )
  SET s_ireqcnt = size (req_batch_sys->req_set ,5 )
  FOR (s_ireqidx = 1 TO s_ireqcnt )
   SET req_batch_sys->req_set[s_ireqidx ].batch_event_id = 0.0
   SET req_batch_sys->req_set[s_ireqidx ].interface_id = 0.0
   SET req_batch_sys->req_set[s_ireqidx ].seq_num = 0
   SET req_batch_sys->req_set[s_ireqidx ].event_status_flag = 0
   SET req_batch_sys->req_set[s_ireqidx ].start_dt_tm = 0.0
   SET req_batch_sys->req_set[s_ireqidx ].complete_dt_tm = 0.0
   SET req_batch_sys->req_set[s_ireqidx ].gs_ident = ""
   SET req_batch_sys->req_set[s_ireqidx ].st_ident = ""
   SET req_batch_sys->req_set[s_ireqidx ].beg_seg_seq_num = 0
   SET req_batch_sys->req_set[s_ireqidx ].end_seg_seq_num = 0
   SET req_batch_sys->req_set[s_ireqidx ].grp_beg_seg_seq_num = 0
   SET req_batch_sys->req_set[s_ireqidx ].grp_end_seg_seq_num = 0
   SET req_batch_sys->req_set[s_ireqidx ].event_status_text = ""
   SET req_batch_sys->req_set[s_ireqidx ].response_cd = 0.0
   SET req_batch_sys->req_set[s_ireqidx ].seg_seq_num = 0
  ENDFOR
  SET stat = alterlist (req_batch_sys->req_set ,0 )
  CALL echo ("Exiting reset_si_batch_sys_req()..." )
  RETURN (retstat )
 END ;Subroutine
 SUBROUTINE  reset_si_batch_sys_rep (d1 )
  CALL echo ("Entering reset_si_batch_sys_rep()..." )
  DECLARE retstat = i2 WITH private ,noconstant (0 )
  SET stat = alterlist (rep_batch_sys->qual ,0 )
  SET stat = alterlist (rep_batch_sys->si_info.longlist ,0 )
  SET stat = alterlist (rep_batch_sys->si_info.stringlist ,0 )
  SET stat = alterlist (rep_batch_sys->si_info.doublelist ,0 )
  SET stat = alterlist (rep_batch_sys->status_data.subeventstatus ,0 )
  CALL echo ("Exiting reset_si_batch_sys_rep()..." )
  RETURN (retstat )
 END ;Subroutine
 SUBROUTINE  reset_si_batch_event_req (d1 )
  CALL echo ("Entering reset_si_batch_event_req()..." )
  DECLARE retstat = i2 WITH private ,noconstant (0 )
  SET stat = alterlist (req_event->req_set ,0 )
  CALL echo ("Exiting reset_si_batch_event_req()..." )
  RETURN (retstat )
 END ;Subroutine
 SUBROUTINE  reset_si_batch_event_rep (d1 )
  CALL echo ("Entering reset_si_batch_event_rep()..." )
  DECLARE retstat = i2 WITH private ,noconstant (0 )
  SET stat = alterlist (rep_event->qual ,0 )
  SET stat = alterlist (rep_event->si_info.longlist ,0 )
  SET stat = alterlist (rep_event->si_info.stringlist ,0 )
  SET stat = alterlist (rep_event->si_info.doublelist ,0 )
  SET stat = alterlist (rep_event->status_data.subeventstatus ,0 )
  CALL echo ("Exiting reset_si_batch_event_rep()..." )
  RETURN (retstat )
 END ;Subroutine
 SUBROUTINE  update_event_sys_row2 (s_dbatcheventid2 ,s_ieventstatus ,s_strgsident ,s_strstident ,
  s_ibegsegseq ,s_iendsegseq ,s_igrpbegsegseq ,s_igrpendsegseq ,s_streventstattext ,s_dresponsecd )
  CALL echo ("Entering Update_Event_Sys_Row()..." )
  DECLARE retstat = i2 WITH private ,noconstant (1 )
  CALL reset_si_batch_sys_req (0 )
  CALL reset_si_batch_sys_rep (0 )
  SET req_batch_sys->request_type = "UPDATE"
  SET stat = alterlist (req_batch_sys->req_set ,1 )
  SET req_batch_sys->req_set[1 ].batch_event_id = s_dbatcheventid2
  SET req_batch_sys->req_set[1 ].event_status_flag = s_ieventstatus
  SET req_batch_sys->req_set[1 ].gs_ident = trim (s_strgsident ,3 )
  SET req_batch_sys->req_set[1 ].st_ident = trim (s_strstident ,3 )
  SET req_batch_sys->req_set[1 ].beg_seg_seq_num = s_ibegsegseq
  SET req_batch_sys->req_set[1 ].end_seg_seq_num = s_iendsegseq
  SET req_batch_sys->req_set[1 ].grp_beg_seg_seq_num = s_igrpbegsegseq
  SET req_batch_sys->req_set[1 ].grp_end_seg_seq_num = s_igrpendsegseq
  SET req_batch_sys->req_set[1 ].event_status_text = trim (substring (1 ,500 ,s_streventstattext ) ,
   3 )
  SET req_batch_sys->req_set[1 ].response_cd = s_dresponsecd
  EXECUTE si_batch_event_sys_methods WITH replace ("REQUEST" ,req_batch_sys ) ,
  replace ("REPLY" ,rep_batch_sys )
  IF ((rep_batch_sys->status_data.status = "F" ) )
   CALL echo (build (
     "FAILURE!! SI_BATCH_EVENT_SYS_METHODS Script failed to update a row using batch_event_id =" ,
     s_dbatcheventid2 ) )
   SET retstat = 0
  ENDIF
  CALL echo ("Exiting Update_Event_Sys_Row()..." )
  RETURN (retstat )
 END ;Subroutine
 SUBROUTINE  reset_batch2 (s_dbatchid ,s_dinterfaceid ,s_iresetflag ,s_strgsident ,s_strstident ,
  s_isortflag )
  CALL echo ("In Reset_Batch2() routine..." )
  DECLARE s_batchid = f8 WITH public ,constant (s_dbatchid )
  DECLARE s_interfaceid = f8 WITH public ,constant (s_dinterfaceid )
  DECLARE s_resetflag = i2 WITH public ,constant (s_iresetflag )
  DECLARE s_idetailcnt = i4 WITH public ,noconstant (0 )
  SET b_failed = 0
  SET bsys_failed = 0
  CALL reset_si_batch_req (0 )
  CALL reset_si_batch_rep (0 )
  SET req_si_batch->debuglogging = 4
  SET req_si_batch->request_type = "UPDATE"
  SET stat = alterlist (req_si_batch->req_set ,1 )
  SET req_si_batch->req_set[1 ].batch_id = s_batchid
  SET req_si_batch->req_set[1 ].batch_status_flag = unprocessed
  EXECUTE si_batch_methods WITH replace ("REQUEST" ,req_si_batch ) ,
  replace ("REPLY" ,rep_si_batch )
  IF ((rep_si_batch->status_data.status = "F" ) )
   CALL echo ("FAILURE!! SI_BATCH_METHODS failed" )
   SET b_failed = 1
  ENDIF
  CALL reset_si_batch_stats_req (0 )
  CALL reset_si_batch_stats_rep (0 )
  SET req_si_batch_stats->debuglogging = 4
  SET req_si_batch_stats->request_type = "DELETE"
  SET stat = alterlist (req_si_batch_stats->req_set ,1 )
  SET req_si_batch_stats->req_set[1 ].batch_id = s_batchid
  SET req_si_batch_stats->req_set[1 ].interface_id = s_interfaceid
  EXECUTE si_batch_stats_methods WITH replace ("REQUEST" ,req_si_batch_stats ) ,
  replace ("REPLY" ,rep_si_batch_stats )
  IF ((rep_si_batch_stats->status_data.status = "F" ) )
   CALL echo ("No SI_BATCH_STATS rows were found" )
  ENDIF
  CALL reset_si_batch_sys_req (0 )
  CALL reset_si_batch_sys_rep (0 )
  SET req_batch_sys->debuglogging = 4
  SET req_batch_sys->request_type = "UPDATE"
  SELECT INTO "nl:"
   be.batch_id ,
   be.batch_event_id ,
   bs.batch_event_id ,
   bs.interface_id ,
   bs.event_status_flag
   FROM (si_batch_event be ),
    (si_batch_event_sys bs )
   PLAN (be
    WHERE (be.batch_id > 0 )
    AND (be.batch_event_id > 0 )
    AND (be.batch_id = s_batchid )
    AND (((s_isortflag > 0 )
    AND (be.batch_sort_flag = s_isortflag ) ) OR ((s_isortflag = 0 ) )) )
    JOIN (bs
    WHERE (bs.batch_event_id = be.batch_event_id )
    AND (((s_interfaceid > 0 )
    AND (bs.interface_id = s_interfaceid ) ) OR ((s_interfaceid <= 0 )
    AND (bs.interface_id > 0 ) ))
    AND (((s_resetflag = 1 )
    AND (bs.event_status_flag > 0 ) ) OR ((((s_resetflag = 2 )
    AND (bs.event_status_flag = 90 ) ) OR ((s_resetflag = 3 )
    AND (bs.event_status_flag = 70 ) )) ))
    AND (((s_strgsident > " " )
    AND (bs.gs_ident = s_strgsident ) ) OR ((s_strgsident <= " " ) ))
    AND (((s_strstident > " " )
    AND (bs.st_ident = s_strstident ) ) OR ((s_strstident <= " " ) )) )
   HEAD REPORT
    x = 0
   DETAIL
    x = (x + 1 ) ,
    IF ((be.batch_sort_flag = msg_detail ) ) s_idetailcnt = (s_idetailcnt + 1 )
    ENDIF
    ,stat = alterlist (req_batch_sys->req_set ,x ) ,
    req_batch_sys->req_set[x ].batch_event_id = bs.batch_event_id ,
    req_batch_sys->req_set[x ].interface_id = bs.interface_id ,
    req_batch_sys->req_set[x ].event_status_flag = unprocessed ,
    req_batch_sys->req_set[x ].start_dt_tm = cnvtdatetime (curdate ,curtime3 )
   WITH nocounter
  ;end select
  IF ((((s_isortflag != 0 ) ) OR ((((s_idetailcnt > 0 ) ) OR ((textlen (trim (s_strgsident ) ) = 0 )
  AND (textlen (trim (s_strstident ) ) = 0 ) )) )) )
   EXECUTE si_batch_event_sys_methods WITH replace ("REQUEST" ,req_batch_sys ) ,
   replace ("REPLY" ,rep_batch_sys )
  ENDIF
  IF ((s_isortflag = 0 )
  AND (s_idetailcnt <= 0 ) )
   CALL echo (build ("No batch details present for batch id:" ,s_batchid ," interface id:" ,
     s_interfaceid ," GS Ctrl ID:" ,s_strgsident ," ST Ctrl Id:" ,s_strstident ," sort flag:" ,
     s_isortflag ) )
   RETURN (2 )
  ENDIF
  IF ((rep_batch_sys->status_data.status = "F" ) )
   CALL echo ("FAILURE!! SI_BATCH_EVENT_SYS_METHODS failed" )
   SET bsys_failed = 1
  ENDIF
  CALL echo ("Exiting Reset_Batch2() routine..." )
  IF (((b_failed ) OR (bsys_failed )) )
   RETURN (0 )
  ELSE
   RETURN (1 )
  ENDIF
 END ;Subroutine
 CALL echo ("<===== SI_BATCH_PROCESSING.INC End =====>" )
 SET strpos1 = findstring ("-" ,request->batch_selection )
 IF ((strpos1 > 0 ) )
  SET strsz = size (request->batch_selection )
  SET ilog_flag = cnvtint (substring ((strpos1 + 1 ) ,(strsz - strpos1 ) ,request->batch_selection )
   )
  SET request->batch_selection = trim (substring (1 ,(strpos1 - 1 ) ,request->batch_selection ) ,3 )
 ENDIF
 SET event_temp_request->devent_id = cnvtreal (request->batch_selection )
 IF ((event_temp_request->devent_id = 0 ) )
  CALL log_message ("The Event Id Entered For Batch Selection Is Invalid" ,"F" ,0 )
 ENDIF
 EXECUTE pft_start_occur WITH replace (request ,event_temp_request ) ,
 replace (reply ,event_temp_reply )
 CALL log_message ("Pft_Start_Occur Returned:" ,event_temp_reply->status_data.status ,2 )
 SET ieventparamcount = size (event_temp_reply->aparams ,5 )
 IF ((ieventparamcount > 0 ) )
  FOR (i = 1 TO ieventparamcount )
   IF ((event_temp_reply->aparams[i ].dvalue_meaning = cvbeid ) )
    SET hcount = (hcount + 1 )
    SET stat = alterlist (cagency->billing_entity_list ,hcount )
    SET cagency->billing_entity_list[hcount ].beid = cnvtreal (event_temp_reply->aparams[i ].svalue
     )
   ELSEIF ((event_temp_reply->aparams[i ].dvalue_meaning = cvcontribsystemcd ) )
    SET dcontribsystemcd = cnvtreal (event_temp_reply->aparams[i ].svalue )
    CALL echo (dcontribsystemcd )
   ELSEIF ((event_temp_reply->aparams[i ].dvalue_meaning = cvagencytypecd ) )
    SET iagencyflag = cnvtint (event_temp_reply->aparams[i ].svalue )
   ELSEIF ((event_temp_reply->aparams[i ].dvalue_meaning = printer_loc_cd ) )
    SET sprinterlocation = event_temp_reply->aparams[i ].svalue
   ELSEIF ((event_temp_reply->aparams[i ].dvalue_meaning = coll_report_cd ) )
    SET sscriptname = event_temp_reply->aparams[i ].svalue
   ELSEIF ((event_temp_reply->aparams[i ].dvalue_meaning = cs24454_btchfilename ) )
    SET batchfilename = event_temp_reply->aparams[i ].svalue
   ELSEIF ((event_temp_reply->aparams[i ].dvalue_meaning = cs24454_batchroute ) )
    SET batchroute = event_temp_reply->aparams[i ].svalue
   ENDIF
  ENDFOR
 ELSE
  CALL echo ("No Parameters Were Received While Parsing The Event" )
  CALL log_message ("No Parameters Were Received While Parsing The Event" ,"F" ,0 )
 ENDIF
 SELECT INTO "nl:"
  be.parent_be_id
  FROM (billing_entity be ),
   (dummyt d1 WITH seq = size (cagency->billing_entity_list ,5 ) )
  PLAN (d1
   WHERE (cagency->billing_entity_list[d1.seq ].beid > 0.0 ) )
   JOIN (be
   WHERE (be.billing_entity_id = cagency->billing_entity_list[d1.seq ].beid ) )
  DETAIL
   cagency->billing_entity_list[d1.seq ].parent_be_id = be.parent_be_id
  WITH nocounter
 ;end select
 SET qualcount = size (cagency->billing_entity_list ,5 )
 SELECT INTO "Nl:"
  pca.pft_collection_agency_id ,
  pca.media_type_cd
  FROM (contributor_system cs ),
   (pft_collection_agency pca ),
   (dummyt d1 WITH seq = size (cagency->billing_entity_list ,5 ) )
  PLAN (d1
   WHERE (cagency->billing_entity_list[d1.seq ].beid > 0.0 ) )
   JOIN (pca
   WHERE (pca.billing_entity_id =
   IF ((cagency->billing_entity_list[d1.seq ].parent_be_id > 0.0 ) ) cagency->billing_entity_list[d1
    .seq ].parent_be_id
   ELSE cagency->billing_entity_list[d1.seq ].beid
   ENDIF
   )
   AND (pca.active_ind = 1 )
   AND (pca.active_status_cd = cvactive )
   AND (pca.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
   AND (pca.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) )
   AND (pca.agency_type_cd =
   IF ((iagencyflag = 0 ) ) cvcollagencytypecd
   ELSEIF ((iagencyflag = 1 ) ) cvprecollagencytypecd
   ENDIF
   ) )
   JOIN (cs
   WHERE (cs.organization_id = pca.organization_id )
   AND (cs.contributor_system_cd = dcontribsystemcd )
   AND (cs.active_ind = 1 )
   AND (cs.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
   AND (cs.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) ) )
  DETAIL
   cagency->billing_entity_list[d1.seq ].collection_agency_id = pca.pft_collection_agency_id ,
   cagency->billing_entity_list[d1.seq ].media_type_cd = pca.media_type_cd
  WITH nocounter
 ;end select
 CALL echorecord (event_temp_reply )
 FOR (lbatchcount = 1 TO hcount )
  SET loutboundcount = 0
  SELECT INTO "Nl:"
   FROM (pft_queue_item pqi ),
    (pft_encntr pe )
   PLAN (pqi
    WHERE (pqi.pft_entity_type_cd = cvpftencntrcd )
    AND (pqi.contributor_system_cd = dcontribsystemcd )
    AND (pqi.pft_entity_status_cd =
    IF ((iagencyflag = 0 ) ) cvincollcd
    ELSEIF ((iagencyflag = 1 ) ) cvinprecollcd
    ENDIF
    )
    AND (pqi.item_status_cd <= 0 )
    AND (pqi.active_ind = 1 )
    AND (pqi.active_status_cd = cvactive )
    AND (pqi.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
    AND (pqi.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) ) )
    JOIN (pe
    WHERE (pe.pft_encntr_id = pqi.pft_encntr_id )
    AND (pe.billing_entity_id = cagency->billing_entity_list[lbatchcount ].beid )
    AND (pe.active_ind = 1 )
    AND (pe.active_status_cd = cvactive )
    AND (pe.beg_effective_dt_tm <= cnvtdatetime (curdate ,curtime3 ) )
    AND (pe.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) ) )
   DETAIL
    loutboundcount = (loutboundcount + 1 ) ,
    stat = alterlist (cagency->billing_entity_list[lbatchcount ].encntrs ,loutboundcount ) ,
    cagency->billing_entity_list[lbatchcount ].encntrs[loutboundcount ].pft_encntr_id = pqi
    .pft_encntr_id
   WITH nocounter
  ;end select
  IF ((curqual <= 0 ) )
   CALL echo ("CURQUAL 0 FOR ENCOUNTER SELECT" )
   CALL echorecord (cagency )
  ENDIF
 ENDFOR
 IF ((size (trim (batchfilename ) ) > 0 ) )
  SET stringcnt = (stringcnt + 1 )
  SET stat = alterlist (input_oenobj->cerner.stringlist ,stringcnt )
  SET input_oenobj->cerner.stringlist[stringcnt ].strmeaning = "BATCH_FILE_NAME"
  SET input_oenobj->cerner.stringlist[stringcnt ].strval = batchfilename
  CALL log_message (build ("BTCHFILENAME [" ,batchfilename ,"]" ) ,"S" ,0 )
 ENDIF
 IF ((size (trim (batchroute ) ) > 0 ) )
  SET stringcnt = (stringcnt + 1 )
  SET stat = alterlist (input_oenobj->cerner.stringlist ,stringcnt )
  SET input_oenobj->cerner.stringlist[stringcnt ].strmeaning = "BATCH_ROUTE"
  SET input_oenobj->cerner.stringlist[stringcnt ].strval = batchroute
  CALL log_message (build ("BATCH_ROUTE [" ,batchroute ,"]" ) ,"S" ,0 )
 ENDIF
 SET stringcnt = (stringcnt + 1 )
 SET stat = alterlist (input_oenobj->cerner.stringlist ,stringcnt )
 SET input_oenobj->cerner.stringlist[stringcnt ].strmeaning = nullterm ("COLLECTIONS_INTERFACE" )
 IF ((iagencyflag = 0 ) )
  SET input_oenobj->cerner.stringlist[stringcnt ].strval = nullterm ("COLL_NEW_BUS" )
 ELSEIF ((iagencyflag = 1 ) )
  SET input_oenobj->cerner.stringlist[stringcnt ].strval = nullterm ("PRECOLL_NEW_BUS" )
 ENDIF
 IF ((validate (debug ,- (1 ) ) > 0 ) )
  CALL echorecord (input_oenobj )
 ENDIF
 CALL echo ("------------------------" )
 CALL echo ("------------------------" )
 CALL echo ("BEGIN INTERFACE ROUTINES" )
 CALL echo ("------------------------" )
 CALL echo ("------------------------" )
 CALL echo ("BEGIN INTERFACE ROUTINES" )
 CALL echo (build ("hCount:" ,hcount ) )
 FOR (lbatchcount = 1 TO hcount )
  IF ((size (cagency->billing_entity_list[lbatchcount ].encntrs ,5 ) > 0 ) )
   CALL echo (build ("Media Type CD is: " ,cagency->billing_entity_list[lbatchcount ].media_type_cd
     ) )
   IF ((cagency->billing_entity_list[lbatchcount ].media_type_cd = edi_cd ) )
    SET gcount = (gcount + 1 )
    IF ((gcount = 1 ) )
     SET dates->dqfilestartdttm = cnvtdatetime (curdate ,curtime3 )
     CALL log_message ("Calling Create Trigger For File" ,"S" ,2 )
     SET dfile_header_handle = create_trigger ("PROFIT" ,"COLL_NEW_BUS" ,"BEGIN" ,"" )
     IF ((dfile_header_handle > 0 ) )
      CALL log_message (build ("File_Handle:" ,dfile_header_handle ) ,"S" ,2 )
     ELSE
      CALL log_message (build ("File_Handle:" ,dfile_header_handle ) ,"F" ,0 )
     ENDIF
     SET lcallreturn = populatecqminfo (dfile_header_handle ,"PROFIT" ,"COLL_NEW_BUS" ,"BEGIN" )
     IF ((lcallreturn != 0 ) )
      CALL log_message ("PopulateCQMInfo Returned Success" ,"S" ,2 )
     ELSE
      CALL log_message ("PopulateCQMInfo Returned Failure" ,"F" ,0 )
     ENDIF
     SET lcallreturn = populatetriginfo (dfile_header_handle )
     IF ((lcallreturn != 0 ) )
      CALL log_message ("PopulateTRIGInfo Returned Success" ,"S" ,2 )
     ELSE
      CALL log_message ("PopulateTRIGInfo Returned Failure" ,"F" ,0 )
     ENDIF
     CALL log_message ("Calling Begin Batch For File" ,"S" ,2 )
     SET dbatch_id = begin_batch (build (cnvtstring (dates->dqstartdttm ) ,lbatchcount ) ,
      "Financial Encounters To Collections" ,"PROFIT" ,"PROFIT_NBUS" ,"HL7" )
     IF ((dbatch_id > 0 ) )
      CALL log_message (build ("Interface_Batch_Id:" ,dbatch_id ) ,"S" ,2 )
     ELSE
      CALL log_message (build ("Interface_Batch_Id:" ,dbatch_id ) ,"F" ,0 )
     ENDIF
     CALL log_message ("Calling Enqueue For File Header" ,"S" ,2 )
     SET ienq_batch_event_return = enq_batch_event (dbatch_id ,100 ,"" ,cnvtint (dfile_header_handle
       ) )
     IF ((ienq_batch_event_return != 0 ) )
      CALL log_message (build ("iEnq_Batch_Event_Return:" ,ienq_batch_event_return ) ,"S" ,2 )
     ELSE
      CALL log_message (build ("iEnq_Batch_Event_Return:" ,ienq_batch_event_return ) ,"F" ,0 )
     ENDIF
     CALL log_message ("Calling Destroy UI Message For File" ,"S" ,2 )
     SET idestroy_ui_message_return = destroy_ui_message (cnvtint (dfile_header_handle ) )
     IF ((idestroy_ui_message_return = 1 ) )
      CALL log_message (build ("iDestroy_Ui_Message_Return:" ,idestroy_ui_message_return ) ,"S" ,2 )
     ELSE
      CALL log_message (build ("iDestroy_Ui_Message_Return:" ,idestroy_ui_message_return ) ,"F" ,0 )
     ENDIF
    ENDIF
    CALL log_message ("Calling Create Trigger For Batch" ,"S" ,2 )
    SET dbatch_header_handle = create_trigger ("PROFIT" ,"COLL_NEW_BUS" ,"HEADER" ,"" )
    IF ((dbatch_header_handle > 0 ) )
     CALL log_message (build ("dBatch_Header_Handle:" ,dbatch_header_handle ) ,"S" ,2 )
    ELSE
     CALL log_message (build ("dBatch_Header_Handle:" ,dbatch_header_handle ) ,"F" ,0 )
    ENDIF
    SET lcallreturn = populatecqminfo (dbatch_header_handle ,"PROFIT" ,"COLL_NEW_BUS" ,"HEADER" )
    IF ((lcallreturn != 0 ) )
     CALL log_message ("PopulateCQMInfo Returned Success" ,"S" ,2 )
    ELSE
     CALL log_message ("PopulateCQMInfo Returned Failure" ,"F" ,0 )
    ENDIF
    SET lcallreturn = populatetriginfo (dbatch_header_handle )
    IF ((lcallreturn != 0 ) )
     CALL log_message ("PopulateTRIGInfo Returned Success" ,"S" ,2 )
    ELSE
     CALL log_message ("PopulateTRIGInfo Returned Failure" ,"F" ,0 )
    ENDIF
    CALL log_message ("Calling Enqueue For Batch Header" ,"S" ,2 )
    SET ienq_batch_event_return = enq_batch_event (dbatch_id ,200 ,"" ,cnvtint (dbatch_header_handle
      ) )
    IF ((ienq_batch_event_return != 0 ) )
     CALL log_message (build ("iEnq_Batch_Event_Return:" ,ienq_batch_event_return ) ,"S" ,2 )
    ELSE
     CALL log_message (build ("iEnq_Batch_Event_Return:" ,ienq_batch_event_return ) ,"F" ,0 )
    ENDIF
    SET dates->dqbatchstartdttm = cnvtdatetime (curdate ,curtime3 )
    CALL log_message ("Calling Destroy UI Message" ,"S" ,2 )
    SET idestroy_ui_message_return = destroy_ui_message (cnvtint (dbatch_header_handle ) )
    IF ((idestroy_ui_message_return = 1 ) )
     CALL log_message (build ("iDestroy_Ui_Message_Return:" ,idestroy_ui_message_return ) ,"S" ,2 )
    ELSE
     CALL log_message (build ("iDestroy_Ui_Message_Return:" ,idestroy_ui_message_return ) ,"F" ,0 )
    ENDIF
    FOR (jcount = 1 TO size (cagency->billing_entity_list[lbatchcount ].encntrs ,5 ) )
     CALL log_message ("Calling Create Trigger For Detail" ,"S" ,2 )
     SET ddetail_header_handle = create_trigger ("PROFIT" ,"COLL_NEW_BUS" ,"DETAIL" ,"" )
     IF ((ddetail_header_handle > 0 ) )
      CALL log_message (build ("dDetail_Header_Handle:" ,ddetail_header_handle ) ,"S" ,2 )
     ELSE
      CALL log_message (build ("dDetail_Header_Handle:" ,ddetail_header_handle ) ,"F" ,0 )
     ENDIF
     SET lcallreturn = populatecqminfo (ddetail_header_handle ,"PROFIT" ,"COLL_NEW_BUS" ,"DETAIL" )
     IF ((lcallreturn != 0 ) )
      CALL log_message ("PopulateCQMInfo Returned Success" ,"S" ,2 )
     ELSE
      CALL log_message ("PopulateCQMInfo Returned Failure" ,"F" ,0 )
     ENDIF
     SET lcallreturn = populatetriginfo (ddetail_header_handle )
     IF ((lcallreturn != 0 ) )
      CALL log_message ("PopulateTRIGInfo Returned Success" ,"S" ,2 )
     ELSE
      CALL log_message ("PopulateTRIGInfo Returned Failure" ,"F" ,0 )
     ENDIF
     SET lcallreturn = populatetrigbatchenc (lcallreturn ,ddetail_header_handle )
     IF ((lcallreturn != 0 ) )
      CALL log_message ("PopulateTRIGBatchEnc Returned Success" ,"S" ,2 )
     ELSE
      CALL log_message ("PopulateTRIGBatchEnc Returned Failure" ,"F" ,0 )
     ENDIF
     CALL log_message ("Calling Detail EnQueue" ,"S" ,2 )
     SET ienq_batch_event_return = enq_batch_event (dbatch_id ,300 ,"" ,cnvtint (
       ddetail_header_handle ) )
     IF ((ienq_batch_event_return != 0 ) )
      SET cagency->billing_entity_list[lbatchcount ].encntrs[jcount ].batch_event_id =
      ienq_batch_event_return
      CALL log_message (build ("iEnq_Batch_Event_Return:" ,ienq_batch_event_return ) ,"S" ,2 )
     ELSE
      CALL log_message (build ("iEnq_Batch_Event_Return:" ,ienq_batch_event_return ) ,"F" ,0 )
     ENDIF
     CALL log_message ("Calling Destroy UI Message" ,"S" ,2 )
     SET idestroy_ui_message_return = destroy_ui_message (cnvtint (ddetail_header_handle ) )
     IF ((idestroy_ui_message_return = 1 ) )
      CALL log_message (build ("iDestroy_Ui_Message_Return:" ,idestroy_ui_message_return ) ,"S" ,2 )
     ELSE
      CALL log_message (build ("iDestroy_Ui_Message_Return:" ,idestroy_ui_message_return ) ,"F" ,0 )
     ENDIF
     SET cagency->billing_entity_list[lbatchcount ].encntrs[jcount ].batch_id_wrap = dbatch_id
     SET cagency->billing_entity_list[lbatchcount ].encntrs[jcount ].batch_number = gcount
    ENDFOR
    CALL log_message ("Calling Create Trigger For Batch Trailer" ,"S" ,2 )
    SET dbatch_trailer_handle = create_trigger ("PROFIT" ,"COLL_NEW_BUS" ,"TRAILER" ,"" )
    IF ((dbatch_trailer_handle > 0 ) )
     CALL log_message (build ("dBatch_Trailer_Handle:" ,dbatch_trailer_handle ) ,"S" ,2 )
    ELSE
     CALL log_message (build ("dBatch_Trailer_Handle:" ,dbatch_trailer_handle ) ,"F" ,0 )
    ENDIF
    SET lcallreturn = populatecqminfo (dbatch_trailer_handle ,"PROFIT" ,"COLL_NEW_BUS" ,"TRAILER" )
    IF ((lcallreturn != 0 ) )
     CALL log_message ("PopulateCQMInfo Returned Success" ,"S" ,2 )
    ELSE
     CALL log_message ("PopulateCQMInfo Returned Failure" ,"F" ,0 )
    ENDIF
    SET lcallreturn = populatetriginfo (dbatch_trailer_handle )
    IF ((lcallreturn != 0 ) )
     CALL log_message ("PopulateTRIGInfo Returned Success" ,"S" ,2 )
    ELSE
     CALL log_message ("PopulateTRIGInfo Returned Failure" ,"F" ,0 )
    ENDIF
    CALL log_message ("Calling Enqueue For Batch Trailer" ,"S" ,2 )
    SET ienq_batch_event_return = enq_batch_event (dbatch_id ,400 ,"" ,cnvtint (
      dbatch_trailer_handle ) )
    IF ((ienq_batch_event_return != 0 ) )
     CALL log_message (build ("iEnq_Batch_Event_Return:" ,ienq_batch_event_return ) ,"S" ,2 )
    ELSE
     CALL log_message (build ("iEnq_Batch_Event_Return:" ,ienq_batch_event_return ) ,"F" ,0 )
    ENDIF
    SET dates->dqbatchenddttm = cnvtdatetime (curdate ,curtime3 )
    CALL log_message ("Calling Destroy UI Message" ,"S" ,2 )
    SET idestroy_ui_message_return = destroy_ui_message (cnvtint (dbatch_trailer_handle ) )
    IF ((idestroy_ui_message_return = 1 ) )
     CALL log_message (build ("iDestroy_Ui_Message_Return:" ,idestroy_ui_message_return ) ,"S" ,2 )
    ELSE
     CALL log_message (build ("iDestroy_Ui_Message_Return:" ,idestroy_ui_message_return ) ,"F" ,0 )
    ENDIF
   ELSEIF ((cagency->billing_entity_list[lbatchcount ].media_type_cd = paper_cd ) )
    IF ((sprinterlocation != "" )
    AND (sscriptname != "" ) )
     CALL generatecollectionreport (sscriptname ,lbatchcount )
     SET gcount = 1
     SET sscript_status = "SUCCESS"
    ELSE
     SET sscript_status = "FAILURE"
     CALL log_message (
      "Failed to execute report because the report name and/or printer location is missing" ,"F" ,0
      )
    ENDIF
   ENDIF
  ELSE
   CALL log_message ("No Encntrs Qualified For First Attempted Batch" ,"S" ,2 )
   SET sscript_status = "SUCCESS"
  ENDIF
  IF ((lbatchcount = hcount )
  AND (cagency->billing_entity_list[lbatchcount ].media_type_cd = edi_cd )
  AND (gcount >= 1 ) )
   CALL echo ("Inside 500 Record Logic" )
   CALL log_message ("Calling Create Trigger For File Trailer" ,"S" ,2 )
   SET dfile_end_handle = create_trigger ("PROFIT" ,"COLL_NEW_BUS" ,"END" ,"" )
   IF ((dfile_end_handle > 0 ) )
    CALL log_message (build ("File_Handle:" ,dfile_end_handle ) ,"S" ,2 )
   ELSE
    CALL log_message (build ("File_Handle:" ,dfile_end_handle ) ,"F" ,0 )
   ENDIF
   SET lcallreturn = populatecqminfo (dfile_end_handle ,"PROFIT" ,"COLL_NEW_BUS" ,"END" )
   IF ((lcallreturn != 0 ) )
    CALL log_message ("PopulateCQMInfo Returned Success" ,"S" ,2 )
   ELSE
    CALL log_message ("PopulateCQMInfo Returned Failure" ,"F" ,0 )
   ENDIF
   SET lcallreturn = populatetriginfo (dfile_end_handle )
   IF ((lcallreturn != 0 ) )
    CALL log_message ("PopulateTRIGInfo Returned Success" ,"S" ,2 )
   ELSE
    CALL log_message ("PopulateTRIGInfo Returned Failure" ,"F" ,0 )
   ENDIF
   SET dates->dqfileenddttm = cnvtdatetime (curdate ,curtime3 )
   CALL log_message ("Enqueue File Trailer" ,"S" ,2 )
   SET ienq_batch_event_return = enq_batch_event (dbatch_id ,500 ,"" ,cnvtint (dfile_end_handle ) )
   IF ((ienq_batch_event_return != 0 ) )
    CALL log_message (build ("iEnq_Batch_Event_Return:" ,ienq_batch_event_return ) ,"S" ,2 )
   ELSE
    CALL log_message (build ("iEnq_Batch_Event_Return:" ,ienq_batch_event_return ) ,"F" ,0 )
   ENDIF
   CALL log_message ("Calling Destroy UI Message" ,"S" ,2 )
   SET idestroy_ui_message_return = destroy_ui_message (cnvtint (dfile_end_handle ) )
   IF ((idestroy_ui_message_return = 1 ) )
    CALL log_message (build ("iDestroy_Ui_Message_Return:" ,idestroy_ui_message_return ) ,"S" ,2 )
    SET sscript_status = "SUCCESS"
   ELSE
    CALL log_message (build ("iDestroy_Ui_Message_Return:" ,idestroy_ui_message_return ) ,"F" ,0 )
   ENDIF
   CALL log_message ("Calling End Batch For File" ,"S" ,2 )
   SET iend_batch_return = end_batch (dbatch_id ,0 )
   IF ((iend_batch_return > 0 ) )
    CALL log_message (build ("iEnd_Batch_Return:" ,iend_batch_return ) ,"S" ,2 )
   ELSE
    CALL log_message (build ("iEnd_Batch_Return:" ,iend_batch_return ) ,"F" ,0 )
   ENDIF
  ENDIF
 ENDFOR
 IF ((gcount = 0 ) )
  SET reply->status_data.status = "Z"
  CALL echo ("Generated No Batches - No Data Available" )
  CALL log_message ("Generated No Batches - No Data Available" ,"F" ,0 )
 ELSE
  SET reply->status_data.status = "S"
  CALL echo ("Generated At Least One Batch" )
  CALL log_message ("Generated At Least One Batch" ,"S" ,2 )
 ENDIF
 CALL echo ("-------------------------------------------" )
 CALL echo ("-------------------------------------------" )
 CALL echo ("BEGIN TABLE UPDATES IF ERRORS DID NOT OCCUR" )
 CALL echo ("-------------------------------------------" )
 CALL echo ("-------------------------------------------" )
 IF ((sscript_status = "SUCCESS" ) )
  SET new_nbr = 0.0
  FOR (kcount = 1 TO hcount )
   CALL log_message ("Pft Collections Outbound Interface Process Completed Successfully" ,"S" ,2 )
   CALL log_message ("Entering Table Updates Now" ,"S" ,2 )
   FOR (icount = 1 TO size (cagency->billing_entity_list[kcount ].encntrs ,5 ) )
    SET loop_dt_tm = systimestamp
    DECLARE process_queue_message = vc
    SET process_queue_message = build ("Interfaced To Agency On Batch:" ,cagency->
     billing_entity_list[kcount ].encntrs[icount ].batch_id_wrap ," On Event:" ,cagency->
     billing_entity_list[kcount ].encntrs[icount ].batch_event_id )
    CALL echo ("UPDATING INTO PFT_ENCNTR_COLLECTION_RELTN" )
    CALL echo (build ("PFT ENCNTR ID: " ,cagency->billing_entity_list[kcount ].encntrs[icount ].
      pft_encntr_id ) )
    CALL echo (build ("BATCH END TIME: " ,dates->dqbatchenddttm ) )
    CALL echo (build ("agency_id ->" ,cagency->billing_entity_list[kcount ].collection_agency_id ) )
    UPDATE FROM (pft_encntr_collection_reltn pecr )
     SET pecr.collection_state_cd = cvatagency ,
      pecr.orig_bal_sent_amt = pecr.current_balance ,
      pecr.send_dt_tm =
      IF ((cnvtdatetime (dates->dqbatchenddttm ) IN (0.0 ,
      null ) ) ) cnvtdatetime (curdate ,curtime3 )
      ELSE cnvtdatetime (dates->dqbatchenddttm )
      ENDIF
      ,pecr.updt_dt_tm = cnvtdatetime (curdate ,curtime3 )
     WHERE (pecr.pft_encntr_id = cagency->billing_entity_list[kcount ].encntrs[icount ].pft_encntr_id
      )
     AND (pecr.beg_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
     AND (pecr.end_effective_dt_tm >= cnvtdatetime (curdate ,curtime3 ) )
     AND (pecr.active_ind = 1 )
     AND (pecr.parent_entity_id = cagency->billing_entity_list[kcount ].collection_agency_id )
     WITH nocounter
    ;end update
    IF ((curqual > 0 ) )
     SET sscript_status = "SUCCESS"
    ELSE
     CALL echo ("CURQUAL IS 0 FOR PFT_ENCNTR_COLLECTION_RELTN" )
     SET sscript_status = "FAILURE"
    ENDIF
    CALL echo ("UPDATING INTO PFT_QUEUE_ITEM" )
    UPDATE FROM (pft_queue_item pqi )
     SET pqi.updt_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
      pqi.updt_id = reqinfo->updt_id ,
      pqi.item_status_cd =
      IF ((iagencyflag = 0 ) ) cvcollinterfacedcd
      ELSEIF ((iagencyflag = 1 ) ) cvprecollinterfacedcd
      ENDIF
      ,pqi.process_msg_txt = process_queue_message
     WHERE (pqi.pft_encntr_id = cagency->billing_entity_list[kcount ].encntrs[icount ].pft_encntr_id
     )
     AND (pqi.item_status_cd = 0 )
     AND (pqi.pft_entity_type_cd = cvpftencntrcd )
     AND (pqi.contributor_system_cd = dcontribsystemcd )
     AND (pqi.pft_entity_status_cd =
     IF ((iagencyflag = 0 ) ) cvincollcd
     ELSEIF ((iagencyflag = 1 ) ) cvinprecollcd
     ENDIF
     )
     WITH nocounter
    ;end update
    IF ((curqual > 0 )
    AND (sscript_status != "FAILURE" ) )
     SET sscript_status = "SUCCESS"
    ELSE
     SET sscript_status = "FAILURE"
    ENDIF
    DECLARE bdateexists = vc WITH noconstant ("FALSE" )
    DECLARE bpftdateid = f8 WITH noconstant (0.0 )
    SELECT INTO "nl:"
     FROM (pft_date pd )
     WHERE (pd.parent_entity_name = "PFTENCNTR" )
     AND (pd.parent_entity_id = cagency->billing_entity_list[kcount ].encntrs[icount ].pft_encntr_id
     )
     AND (pd.date_type_cd = cvpayadjcol )
     AND (pd.active_ind = 1 )
     AND (pd.active_status_cd = cvactive )
     DETAIL
      bdateexists = "TRUE" ,
      bpftdateid = pd.pft_date_id
     WITH maxqual (pd ,1 ) ,nocounter
    ;end select
    IF ((bdateexists = "FALSE" )
    AND (sscript_status != "FAILURE" ) )
     CALL echo ("INSERTING INTO PFT_DATE" )
     INSERT FROM (pft_date pd )
      SET pd.pft_date_id = cnvtreal (seq (pft_activity_seq ,nextval ) ) ,
       pd.parent_entity_name = "PFTENCNTR" ,
       pd.parent_entity_id = cagency->billing_entity_list[kcount ].encntrs[icount ].pft_encntr_id ,
       pd.date_type_cd = cvpayadjcol ,
       pd.date_value_dt_tm = cnvtdatetime (curdate ,curtime3 ) ,
       pd.active_ind = 1 ,
       pd.active_status_cd = cvactive ,
       pd.active_status_dt_tm = cnvtdatetime (curdate ,curtime3 )
      WITH nocounter
     ;end insert
     IF ((curqual > 0 )
     AND (sscript_status != "FAILURE" ) )
      SET sscript_status = "SUCCESS"
     ELSE
      SET sscript_status = "FAILURE"
     ENDIF
    ELSEIF ((sscript_status != "FAILURE" ) )
     CALL echo ("UPDATING INTO PFT_DATE" )
     UPDATE FROM (pft_date pd )
      SET pd.date_value_dt_tm = cnvtdatetime (curdate ,curtime3 )
      WHERE (pd.pft_date_id = bpftdateid )
      WITH nocounter
     ;end update
     SET sscript_status = evaluate (curqual ,0 ,"FAILURE" ,"SUCCESS" )
    ENDIF
    CALL logsystemactivity (loop_dt_tm ,curprog ,"PFTENCNTR" ,cagency->billing_entity_list[kcount ].
     encntrs[icount ].pft_encntr_id ,substring (1 ,1 ,sscript_status ) ,"End loop for table updates"
     ,script_and_detail_level_timer )
   ENDFOR
  ENDFOR
 ELSE
  CALL log_message ("No Records To Update" ,"S" ,2 )
 ENDIF
 CALL echo ("--------------------------------------------" )
 CALL echo ("--------------------------------------------" )
 CALL echo ("FINAL STEP END THE EVENT USING PFT_END_OCCUR" )
 CALL echo ("--------------------------------------------" )
 CALL echo ("--------------------------------------------" )
 SET event_end_temp_request->devent_occur_log_id = event_temp_reply->devent_occur_log_id
 EXECUTE pft_end_occur WITH replace (request ,event_end_temp_request ) ,
 replace (reply ,event_end_temp_reply )
 CALL log_message ("Pft_End_Occur Returned:" ,event_end_temp_reply->status_data.status ,2 )
 CALL echorecord (event_end_temp_reply )
 IF ((sscript_status = "SUCCESS" ) )
  SET reply->status_data.status = "S"
  CALL log_message ("Pft_Fin_Encntr_Outbound Concluded Successfully:" ,"S" ,2 )
  COMMIT
 ELSE
  SET reply->status_data.status = "F"
  CALL log_message ("Pft_Fin_Encntr_Outbound Concluded With Errors:" ,"F" ,0 )
  ROLLBACK
 ENDIF
#interface_exit
 IF ((reply->status_data.status = "" ) )
  SET reply->status_data.status = "F"
 ENDIF
 CALL echo ("Finished: Pft_FinEncntr_OutBound  Script" )
 EXECUTE pft_log smodule ,
 "Finished: Pft_Fin_Encntr_OutBound Script" ,
 2
 SUBROUTINE  populatetrigbatchenc (hreq ,hreqcerner )
  CALL echo ("-------------------------------" )
  CALL echo ("-------------------------------" )
  CALL echo ("INSIDE PopulateTrigBatchEnc SUB" )
  CALL echo ("-------------------------------" )
  CALL echo ("-------------------------------" )
  DECLARE hencntr = i4 WITH noconstant (0 )
  DECLARE lstatus = i4 WITH noconstant (1 )
  DECLARE hcernstruct = i4 WITH noconstant (0 )
  DECLARE hoeinfo = i4 WITH noconstant (0 )
  SET hcernstruct = uar_srvgetstruct (cnvtint (hreqcerner ) ,"Cerner" )
  IF ((hcernstruct = 0 ) )
   CALL log_message ("hCernStruct Handle Invalid" ,"F" ,0 )
  ENDIF
  SET hoeinfo = uar_srvgetstruct (hcernstruct ,"oe_info" )
  IF ((hoeinfo = 0 ) )
   CALL log_message ("hOeInfo Handle Invalid" ,"F" ,0 )
  ENDIF
  SET stat = uar_srvsetshort (hoeinfo ,"call_srv_flag" ,1 )
  SET hencntr = uar_srvadditem (hreq ,"Pft_Encntr" )
  IF ((hencntr = 0 ) )
   CALL log_message ("Batch_Info Handle Invalid On Items" ,"F" ,0 )
  ENDIF
  SET stat = uar_srvsetdouble (hencntr ,"Pft_Encntr_Id" ,cagency->billing_entity_list[lbatchcount ].
   encntrs[jcount ].pft_encntr_id )
  SELECT INTO "nl:"
   FROM (pft_encntr pe ),
    (account a ),
    (encounter e ),
    (person p )
   PLAN (pe
    WHERE (pe.pft_encntr_id = cagency->billing_entity_list[lbatchcount ].encntrs[jcount ].
    pft_encntr_id )
    AND (pe.active_ind = 1 )
    AND (pe.active_status_cd = cvactive )
    AND (pe.beg_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
    AND (pe.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
    JOIN (a
    WHERE (a.acct_id = pe.acct_id )
    AND (a.active_ind = 1 )
    AND (a.active_status_cd = cvactive )
    AND (a.beg_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
    AND (a.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
    JOIN (e
    WHERE (e.encntr_id = pe.encntr_id )
    AND (e.active_ind = 1 )
    AND (e.active_status_cd = cvactive )
    AND (e.beg_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
    AND (e.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
    JOIN (p
    WHERE (p.person_id = e.person_id )
    AND (p.active_ind = 1 )
    AND (p.active_status_cd = cvactive )
    AND (p.beg_effective_dt_tm < cnvtdatetime (curdate ,curtime3 ) )
    AND (p.end_effective_dt_tm > cnvtdatetime (curdate ,curtime3 ) ) )
   DETAIL
    CALL echo ("At Least One Encounter Qualified" ) ,
    stat = uar_srvsetdouble (hencntr ,"Account_Id" ,a.acct_id ) ,
    stat = uar_srvsetdouble (hencntr ,"Person_Id" ,p.person_id ) ,
    stat = uar_srvsetdouble (hencntr ,"Encntr_Id" ,e.encntr_id ) ,
    stat = uar_srvsetdouble (hencntr ,"Related_Org_Id" ,e.organization_id ) ,
    IF ((iagencyflag = 0 ) ) stat = uar_srvsetdouble (hencntr ,"Encntr_Balance" ,pe.bad_debt_balance
      )
    ELSE stat = uar_srvsetdouble (hencntr ,"Encntr_Balance" ,pe.balance )
    ENDIF
    ,
    IF ((pe.chrg_bal_dr_cr_flag = 1 ) ) stat = uar_srvsetdouble (hencntr ,"Total_Charges" ,pe
      .charge_balance )
    ELSEIF ((pe.chrg_bal_dr_cr_flag = 2 ) ) stat = uar_srvsetdouble (hencntr ,"Total_Charges" ,(- (1
      ) * pe.charge_balance ) )
    ENDIF
    ,bad_debt_bal = pe.bad_debt_balance ,
    IF ((pe.bad_debt_bal_dr_cr_flag = 2 ) ) bad_debt_bal = (bad_debt_bal * - (1 ) )
    ENDIF
    ,adj_bal = pe.adjustment_balance ,
    IF ((pe.adj_bal_dr_cr_flag = 2 ) ) adj_bal = (adj_bal * - (1 ) )
    ENDIF
    ,adj_bal = (adj_bal + bad_debt_bal ) ,
    stat = uar_srvsetdouble (hencntr ,"Total_Adjustments" ,adj_bal ) ,
    stat = uar_srvsetdouble (hencntr ,"Total_Payments" ,(pe.applied_payment_balance + pe
     .unapplied_payment_balance ) ) ,
    cagency->billing_entity_list[lbatchcount ].encntrs[jcount ].create_dt_tm = e.active_status_dt_tm
   WITH nocounter
  ;end select
  SET lstatus = hencntr
  RETURN (lstatus )
 END ;Subroutine
 SUBROUTINE  populatetriginfo (hreq )
  CALL echo ("---------------------------" )
  CALL echo ("---------------------------" )
  CALL echo ("INSIDE PopulateTrigInfo SUB" )
  CALL echo ("---------------------------" )
  CALL echo ("---------------------------" )
  DECLARE htrigstruct = i4 WITH noconstant (0 )
  DECLARE hitem0 = i4 WITH noconstant (0 )
  DECLARE lstatus = i4 WITH noconstant (1 )
  SET htrigstruct = uar_srvgetstruct (cnvtint (hreq ) ,"TRIGInfo" )
  IF ((htrigstruct = 0 ) )
   CALL log_message ("TRIGInfo Handle Invalid" ,"F" ,0 )
  ENDIF
  SET stat = uar_srvsetlong (htrigstruct ,"File_Batch_Cnt" ,lbatchcount )
  SET hitem0 = uar_srvadditem (htrigstruct ,"Batch_Info" )
  IF ((hitem0 = 0 ) )
   CALL log_message ("Batch_Info Handle Invalid On Items" ,"F" ,0 )
  ENDIF
  DECLARE hcernstruct = i4 WITH noconstant (0 )
  DECLARE hoeinfo = i4 WITH noconstant (0 )
  SET hcernstruct = uar_srvgetstruct (cnvtint (hreq ) ,"Cerner" )
  IF ((hcernstruct = 0 ) )
   CALL log_message ("hCernStruct Handle Invalid" ,"F" ,0 )
  ENDIF
  SET hoeinfo = uar_srvgetstruct (hcernstruct ,"oe_info" )
  IF ((hoeinfo = 0 ) )
   CALL log_message ("hOeInfo Handle Invalid" ,"F" ,0 )
  ENDIF
  SET stat = uar_srvsetshort (hoeinfo ,"call_srv_flag" ,1 )
  SET stat = uar_srvsetstring (hitem0 ,"Sending_System" ,nullterm ("Default_Cerner" ) )
  SET stat = uar_srvsetdouble (hitem0 ,"Sending_System_Id" ,cagency->billing_entity_list[lbatchcount
   ].beid )
  SET stat = uar_srvsetstring (hitem0 ,"Receiving_System" ,nullterm (uar_get_code_display (
     dcontribsystemcd ) ) )
  SET stat = uar_srvsetdouble (hitem0 ,"Receiving_System_Id" ,dcontribsystemcd )
  SET stat = uar_srvsetdouble (hitem0 ,"File_Id" ,cnvtreal (build (cnvtstring (dates->dqfilestartdttm
       ) ,cagency->billing_entity_list[lbatchcount ].beid ) ) )
  SET stat = uar_srvsetdate (hitem0 ,"File_Generate_Dt_Tm" ,dates->dqfilestartdttm )
  SET stat = uar_srvsetdouble (hitem0 ,"Batch_Id" ,dbatch_id )
  SET stat = uar_srvsetlong (hitem0 ,"Batch_Cnt" ,loutboundcount )
  SET stat = uar_srvsetdate (hitem0 ,"Batch_Generate_Dt_Tm" ,dates->dqbatchstartdttm )
  SET stat = uar_srvsetdouble (hitem0 ,"Billing_Entity_Id" ,cagency->billing_entity_list[lbatchcount
   ].beid )
  SET stat = uar_srvsetdouble (hitem0 ,"Collection_Agency_Id" ,cagency->billing_entity_list[
   lbatchcount ].collection_agency_id )
  SET stat = uar_srvsetstring (hitem0 ,"Owner_Source" ,nullterm ("Pft_Fin_Encntr_Outbound" ) )
  SET lstatus = hitem0
  RETURN (lstatus )
 END ;Subroutine
 SUBROUTINE  populatecqminfo (hreq ,class ,type ,subtype )
  CALL echo ("--------------------------" )
  CALL echo ("--------------------------" )
  CALL echo ("INSIDE PopulateCQMInfo SUB" )
  CALL echo ("--------------------------" )
  CALL echo ("--------------------------" )
  DECLARE hcqmstruct = i4 WITH noconstant (0 )
  DECLARE lstatus = i4 WITH noconstant (1 )
  SET hcqmstruct = uar_srvgetstruct (cnvtint (hreq ) ,"CQMInfo" )
  IF ((hcqmstruct = 0 ) )
   CALL log_message ("CQMInfo Handle Invalid" ,"F" ,0 )
  ENDIF
  DECLARE hcernstruct = i4 WITH noconstant (0 )
  DECLARE hoeinfo = i4 WITH noconstant (0 )
  SET hcernstruct = uar_srvgetstruct (cnvtint (hreq ) ,"Cerner" )
  IF ((hcernstruct = 0 ) )
   CALL log_message ("hCernStruct Handle Invalid" ,"F" ,0 )
  ENDIF
  SET hoeinfo = uar_srvgetstruct (hcernstruct ,"oe_info" )
  IF ((hoeinfo = 0 ) )
   CALL log_message ("hOeInfo Handle Invalid" ,"F" ,0 )
  ENDIF
  SET stat = uar_srvsetshort (hoeinfo ,"call_srv_flag" ,1 )
  SET stat = uar_srvsetstring (hcqmstruct ,"AppName" ,nullterm ("FSIESO" ) )
  SET stat = uar_srvsetstring (hcqmstruct ,"ContribAlias" ,nullterm ("PFT_FIN_ENCNTR_COLL" ) )
  SET stat = uar_srvsetstring (hcqmstruct ,"ContribRefnum" ,nullterm (build (dates->dqstartdttm ,
     class ,type ,subtype ) ) )
  SET stat = uar_srvsetdate (hcqmstruct ,"ContribDtTm" ,dates->dqstartdttm )
  SET stat = uar_srvsetlong (hcqmstruct ,"Priority" ,99 )
  SET stat = uar_srvsetstring (hcqmstruct ,"Class" ,nullterm (class ) )
  SET stat = uar_srvsetstring (hcqmstruct ,"Type" ,nullterm ("COLL_NEW_BUS" ) )
  SET stat = uar_srvsetstring (hcqmstruct ,"SubType" ,nullterm (subtype ) )
  SET stat = uar_srvsetlong (hcqmstruct ,"Debug_Ind" ,0 )
  SET stat = uar_srvsetlong (hcqmstruct ,"Verbosity_Flag" ,1 )
  SET lstatus = hcqmstruct
  SET class = ""
  SET type = ""
  SET subtype = ""
  RETURN (lstatus )
 END ;Subroutine
 SUBROUTINE  generatecollectionreport (sscriptname ,lbatchcount )
  CALL echo ("-----------------------------------" )
  CALL echo ("-----------------------------------" )
  CALL echo ("INSIDE GenerateCollectionReport SUB" )
  CALL echo ("-----------------------------------" )
  CALL echo ("-----------------------------------" )
  CALL echo (build ("SCRIPT NAME: " ,sscriptname ) )
  CALL echo (build ("lBatchCount: " ,lbatchcount ) )
  CALL echorecord (cagency )
  SET sscriptname = trim (cnvtupper (sscriptname ) ,3 )
  SET bcount = size (cagency->billing_entity_list ,5 )
  CALL echo (build ("BCOUNT: " ,bcount ) )
  FOR (xy = 1 TO bcount )
   SET reportinforeq->printer_location = sprinterlocation
   SET reportinforeq->org_id = cagency->billing_entity_list[xy ].collection_agency_id
   SET reportinforeq->billing_entity_id = cagency->billing_entity_list[xy ].beid
   SET ecount = size (cagency->billing_entity_list[xy ].encntrs ,5 )
   SET stat = alterlist (reportinforeq->encntr_list ,ecount )
   FOR (xw = 1 TO ecount )
    SET reportinforeq->encntr_list[xw ].pft_encntr_id = cagency->billing_entity_list[xy ].encntrs[xw
    ].pft_encntr_id
   ENDFOR
   CALL echorecord (reportinforeq )
   EXECUTE value (sscriptname ) WITH replace ("REQUEST" ,reportinforeq )
  ENDFOR
 END ;Subroutine
 SUBROUTINE  log_message (sinfo1 ,sreturn ,ilog_level )
  IF ((sreturn = "F" ) )
   SET ilog_level = 0
  ELSEIF ((sreturn = "W" ) )
   SET ilog_level = 1
  ELSEIF ((sreturn = "S" ) )
   SET ilog_level = 2
  ELSE
   SET ilog_level = 0
  ENDIF
  EXECUTE pft_log smodule ,
  build (sinfo1 ,sreturn ) ,
  ilog_level
  CALL echo (build (smodule ,":" ,sinfo1 ,"*" ,sreturn ) )
  IF ((ilog_level = 0 ) )
   GO TO interface_exit
  ENDIF
 END ;Subroutine
 CALL logsystemactivity (script_dt_tm ,curprog ," " ,0.0 ,reply->status_data.status ,build2 (
   "End calculation of the script execution time - " ,"Count[" ,qualcount ,"]" ) ,script_level_timer
  )
END GO
1)
1);107807284
2)

200520:122512 YMAGOON_DVD2               Cost 0.00 Cpu 0.02 Ela 0.02 Dio   0 O0M0R0 P1R0