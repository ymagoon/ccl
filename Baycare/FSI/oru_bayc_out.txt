/*
 *  ---------------------------------------------------------------------------------------------
 *  Script Name:  oru_lab_out
 *  Description:  Script for lab results outbound
 *  Type:     Modify Object Script
 *  ---------------------------------------------------------------------------------------------
 *  Author:     Yitzhak Magoon
 *  Library:    OEOCF23ORUORU
 *  Creation Date:  01/25/2019
 *  ---------------------------------------------------------------------------------------------
 *  Mod#   Date      Author           Description & Requestor Information
 *
 *  001  01/25/19   Yitzhak Magoon    Initial script release with model project

 *  ---------------------------------------------------------------------------------------------
*/

if(oen_reply->RES_ORU_GROUP [1]->OBR [1]->diag_serv_sec_id = "AP")
  /*
    When a physician places a AP request order (e.g. Tissue Request Order) the initial order is a 'fake request order.' The pathologist
	Takes that request order and places the proper AP order. When you look at the message tree for a charted AP result, there are two
	RES_ORU_GROUP's. The first is for the tissue request, the second is for the actual AP report. The tissue request order (should be) aliased on CS 200
	to DONOTSEND, so it is skipped before it reaches the ModObject script. The following code builds the proper order alias and physician
	alaises based on this AP build. 
  */
  
  declare order_action_type = f8 with public, noconstant(uar_get_code_by("MEANING",6003,"ORDER"))
  declare npi_number = f8 with public, noconstant(uar_get_code_by("MEANING", 320, "NPI"))
  declare invision = f8 with public, noconstant(uar_get_code_by("DISPLAYKEY",73,"INVISION"))
  
  declare num = i2
  declare obr_size = i2 with public, noconstant(size(oen_reply->RES_ORU_GROUP->OBR,5))

  select into "nl:"
    oa.action_type_cd
    , oa.order_provider_id
    , p.name_last_key
    , p.name_first_key
    , pa.alias
    , cvo.alias
    , cv.description
  from 
    order_action oa
    , prsnl p
    , prsnl_alias pa
    , orders o
    , code_value cv
    , code_value_outbound cvo
  plan o
    where expand(num,1, obr_size, o.order_id, cnvtreal(trim(oen_reply->RES_ORU_GROUP->OBR[num]->placer_ord_nbr[1]->entity_id)))
  join oa 
    where oa.order_id = o.order_id
      and oa.action_type_cd =order_action_type
  join cvo
    where cvo.code_value = o.catalog_cd
      and cvo.contributor_source_cd = invision
  join cv
    where cv.code_value = cvo.code_value
  join p 
    where p.person_id = oa.order_provider_id
  join pa
    where pa.person_id = p.person_id
      and pa.prsnl_alias_type_cd = npi_number
      and pa.active_ind = 1
      and pa.end_effective_dt_tm > cnvtdatetime(curdate, curtime3)
  head report
    oen_reply->RES_ORU_GROUP [1]->OBR [1]->univ_service_id [1]->identifier = cvo.alias
    oen_reply->RES_ORU_GROUP [1]->OBR [1]->univ_service_id [1]->text = cv.description
  detail
    pos = locateval(num,1, obr_size,o.order_id, cnvtreal(trim(oen_reply->RES_ORU_GROUP->OBR[num]->placer_ord_nbr[1]->entity_id)))
    
    ;there are tons of ordering physicians set in OBR-16, so we want to clear them out before setting this new one
    stat = alterlist(oen_reply->RES_ORU_GROUP->OBR [num]->ord_provider, 0)
    stat = alterlist(oen_reply->RES_ORU_GROUP->OBR [num]->ord_provider, 1)
    
    oen_reply->RES_ORU_GROUP->OBR[num]->ord_provider [1]->id_nbr = pa.alias
    oen_reply->RES_ORU_GROUP->OBR[num]->ord_provider [1]->last_name = p.name_last_key
    oen_reply->RES_ORU_GROUP->OBR[num]->ord_provider [1]->first_name = p.name_first_key
    oen_reply->RES_ORU_GROUP->OBR[num]->ord_provider [1]->assign_auth->name_id = "NPI Number"
    oen_reply->RES_ORU_GROUP->OBR[num]->ord_provider [1]->id_type = "National Provider Identifier"
  with nocounter

  /*
  declare listsize = i4
  declare accessionid = vc
  declare ordalias = vc

  set x = 1
  set listsize = size(oen_reply->RES_ORU_GROUP [1]->OBR [1]->filler_field1,5)

  execute oencpm_msglog(build("LISTSIZE = ",listsize))

  for (x = 1 to listsize)
    if (oen_reply->RES_ORU_GROUP [1]->OBR [1]->filler_field1 [x]->field_type = "HNA_ACCNID")
      set accessionid = oen_reply->res_oru_group [1]->obr [1]->filler_field1 [x]->value 
    endif
  endfor

  execute oencpm_msglog(build("Accession id = ",accessionid))

  select
    ao.order_id
	, o.alias
  from 
    accession_order_r ao
	, order_alias o
  plan ao
    where ao.accession_id = cnvtint(accessionid)
  join o 
    where o.order_id = ao.order_id and o.alias not in("",null," ")
  detail
    ordalias = o.alias
  with nocounter
   
  execute oencpm_msglog(build("AP Order Alias = ",ordalias))

  set oen_reply->RES_ORU_GROUP [1]->OBR [1]->placer_ord_nbr [1]->entity_id = ordalias
  */
endif ;end AP

/* 
  ask hope about logic here for medicity and the fact that we don't use a pd1 segment
*/

declare encntr_id = f8 with noconstant(value(oen_reply->cerner->encntr_prsnl_info->encntr [1]->encntr_id))
declare phys_number = f8 with noconstant(value(uar_get_code_by ("DISPLAY",263,"NPI Number")))
declare phys_reltn = f8 with noconstant(value(uar_get_code_by ("MEANING",333,"PCPE")))
set pd1_size = size(oen_reply->PERSON_GROUP [1]->PAT_GROUP [1]->PD1, 5)

if (pd1_size > 0)
  set stat = alterlist(oen_reply->PERSON_GROUP [1]->PAT_GROUP [1]->PD1, 0)
endif

select into "nl:"
  p.alias
  , pr.name_last
  , pr.name_first
from 
  encntr_prsnl_reltn e
  , prsnl_alias p
  , prsnl pr
plan e
  where e.encntr_id = encntr_id  
    and e.encntr_prsnl_r_cd = phys_reltn  
	and e.manual_create_ind = 0 
join p
  where e.prsnl_person_id = p.person_id   
    and p.alias_pool_cd = phys_number
join pr
  where p.person_id = pr.person_id
head report
  stat = alterlist(oen_reply->PERSON_GROUP->PAT_GROUP->PD1,1)
detail
  if (p.alias not in("", NULL, " "))
    oen_reply->PERSON_GROUP [1]->PAT_GROUP [1]->PD1 [1]->pat_primary_provider [1]->id_nbr =  p.alias
    oen_reply->PERSON_GROUP [1]->PAT_GROUP [1]->PD1 [1]->pat_primary_provider [1]->last_name =  pr.name_last
    oen_reply->PERSON_GROUP [1]->PAT_GROUP [1]->PD1 [1]->pat_primary_provider [1]->first_name = pr.name_first
    oen_reply->PERSON_GROUP [1]->PAT_GROUP [1]->PD1 [1]->pat_primary_provider [1]->assign_auth->name_id  = "NPI Number"
    oen_reply->PERSON_GROUP [1]->PAT_GROUP [1]->PD1 [1]->pat_primary_provider [1]->name_type = "Personnel"
    oen_reply->PERSON_GROUP [1]->PAT_GROUP [1]->PD1 [1]->pat_primary_provider [1]->id_type = "National Provider Identifier"
  endif
with nocounter

/* Remove results with an alias of "DONOTSEND" */
declare index_to_remove = i4
set obx_size = size(oen_reply->RES_ORU_GROUP->OBX_GROUP, 5)
set x = 1

; find the OBX segment to remove
while(x <= obx_size)
  set oen_reply->RES_ORU_GROUP ->OBX_GROUP [x]->OBX->set_id = cnvtstring(x)
  set index_to_remove = -1
  
  if (oen_reply->RES_ORU_GROUP->OBX_GROUP [x]->OBX->observation_id->alt_identifier = "DONOTSEND")
    set index_to_remove = x
  endif
  
  if (index_to_remove > -1)
    set stat = alterlist(oen_reply->RES_ORU_GROUP-> OBX_GROUP, obx_size -1, x -1)
    set obx_size = obx_size -1
  else
    set x = x +1
  endif
endwhile