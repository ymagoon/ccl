1);translate ESO_UPT_HOLD_QUEUE go
2);translate ESO_UPT_HOLD_QUEUE_COND go
3)
4);translate ESO_RMV_HOLD_QUEUE go
5)translate ESO_RMV_HOLD_QUEUE_COND go
;*** Generated by TRANSLATE, verify before re-including (Debug:N,Optimize:N,DiffEnd:N,Rdb:N) ***
DROP PROGRAM eso_rmv_hold_queue_cond :dba GO
CREATE PROGRAM eso_rmv_hold_queue_cond :dba
 SET false = 0
 SET true = 1
 SET gen_nbr_error = 3
 SET insert_error = 4
 SET update_error = 5
 SET replace_error = 6
 SET delete_error = 7
 SET undelete_error = 8
 SET remove_error = 9
 SET attribute_error = 10
 SET lock_error = 11
 SET none_found = 12
 SET select_error = 13
 SET failed = false
 SET table_name = fillstring (50 ," " )
 IF ((validate (reply->status_data.status ,"Z" ) = "Z" ) )
  RECORD reply (
    1 hold_queue_condition_qual = i2
    1 hold_queue_condition [* ]
      2 hold_queue_id = f8
      2 seq_num = i4
    1 status_data
      2 status = c1
      2 subeventstatus [1 ]
        3 operationname = c8
        3 operationstatus = c1
        3 targetobjectname = c15
        3 targetobjectvalue = c100
  )
  IF ((request->hold_queue_condition_qual = 0 ) )
   SET request->hold_queue_condition_qual = size (request->hold_queue_condition ,5 )
  ENDIF
  SET action_begin = 1
  SET action_end = request->hold_queue_condition_qual
  SET reply->hold_queue_condition_qual = request->hold_queue_condition_qual
 ENDIF
 CALL echo ("*** ESO_RMV_HOLD_QUEUE_COND  START!! ***" )
 SET reply->status_data.status = "F"
 SET table_name = "HOLD_QUEUE_CONDITION"
 CALL echo (build ("hold_queue_condition = " ,size (request->hold_queue_condition ,5 ) ) )
 IF (action_end )
  CALL rmv_hold_queue_condition (action_begin ,action_end )
 ELSE
  SET failed = delete_error
  GO TO check_error
 ENDIF
 IF ((failed != false ) )
  GO TO check_error
 ENDIF
#check_error
 IF ((failed = false ) )
  SET reply->status_data.status = "S"
  SET reqinfo->commit_ind = true
 ELSE
  CASE (failed )
   OF gen_nbr_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "GEN_NBR"
   OF insert_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "INSERT"
   OF update_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "UPDATE"
   OF replace_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "REPLACE"
   OF delete_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "DELETE"
   OF undelete_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "UNDELETE"
   OF remove_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "REMOVE"
   OF attribute_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "ATTRIBUTE"
   OF lock_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "LOCK"
   ELSE
    SET reply->status_data.subeventstatus[1 ].operationname = "UNKNOWN"
  ENDCASE
  SET reply->status_data.subeventstatus[1 ].operationstatus = "F"
  SET reply->status_data.subeventstatus[1 ].targetobjectname = "TABLE"
  SET reply->status_data.subeventstatus[1 ].targetobjectvalue = table_name
  SET reqinfo->commit_ind = false
 ENDIF
 GO TO end_program
 SUBROUTINE  rmv_hold_queue_condition (rmv_begin ,rmv_end )
  FOR (x = rmv_begin TO rmv_end )
   CALL echo (build ("X = " ,x ) )
   CALL echo ("Begin Delete!!" )
   DELETE FROM (hold_queue_condition h )
    WHERE (h.hold_queue_id = request->hold_queue_condition[x ].hold_queue_id )
    AND (((request->hold_queue_condition[x ].seq_num = 0 ) ) OR ((h.seq_num = request->
    hold_queue_condition[x ].seq_num ) ))
    WITH nocounter
   ;end delete
   CALL echo ("End Delete!!" )
   IF ((curqual = 0 ) )
    SET failed = remove_error
    RETURN
   ELSE
    SET stat = alterlist (reply->hold_queue_condition ,x )
    SET reply->hold_queue_condition[x ].hold_queue_id = request->hold_queue_condition[x ].
    hold_queue_id
    SET reply->hold_queue_condition[x ].seq_num = request->hold_queue_condition[x ].seq_num
   ENDIF
  ENDFOR
 END ;Subroutine
 CALL echo ("*** ESO_RMV_HOLD_QUEUE_COND  END!! ***" )
#end_program
END GO
1)
1);translate ESO_UPDATE_CQM_QUE go
2)

190411:153706 B134316_DVD7              Cost 0.00 Cpu 0.00 Ela 0.00 Dio   0 O0M0R0 P1R0