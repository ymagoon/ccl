1)translate ESO_GET_HOLD_QUEUE go
;*** Generated by TRANSLATE, verify before re-including (Debug:N,Optimize:N,DiffEnd:N,Rdb:N) ***
DROP PROGRAM eso_get_hold_queue :dba GO
CREATE PROGRAM eso_get_hold_queue :dba
 SET false = 0
 SET true = 1
 SET gen_nbr_error = 3
 SET insert_error = 4
 SET update_error = 5
 SET replace_error = 6
 SET delete_error = 7
 SET undelete_error = 8
 SET remove_error = 9
 SET attribute_error = 10
 SET lock_error = 11
 SET none_found = 12
 SET select_error = 13
 SET select_zero = 14
 SET failed = false
 SET table_name = fillstring (50 ," " )
 IF ((validate (reply->status_data.status ,"Z" ) = "Z" ) )
  RECORD reply (
    1 hold_queue_qual = i2
    1 hold_queue [10 ]
      2 hold_queue_id = f8
      2 hold_rule_id = f8
      2 queue_id = f8
      2 person_id = f8
      2 encntr_id = f8
      2 order_id = f8
      2 sch_event_id = f8
      2 updt_cnt = i4
      2 updt_dt_tm = dq8
    1 status_data
      2 status = c1
      2 subeventstatus [1 ]
        3 operationname = c8
        3 operationstatus = c1
        3 targetobjectname = c15
        3 targetobjectvalue = c100
  )
 ENDIF
 SET reply->status_data.status = "F"
 SET table_name = "HOLD_QUEUE"
 SET x = 0
 SET req_idx = 0
 SET req_max = size (request->hold_queue ,5 )
 IF ((req_max = 0 ) )
  SET req_max = 1
  SET stat = alterlist (request->hold_queue ,1 )
 ENDIF
 FOR (req_idx = 1 TO req_max )
  SELECT
   IF ((request->hold_queue[req_idx ].hold_queue_id > 0 ) )
    WHERE (h.hold_queue_id = request->hold_queue[req_idx ].hold_queue_id )
   ELSE
   ENDIF
   INTO "nl:"
   h.*
   FROM (hold_queue h )
   DETAIL
    x = (x + 1 ) ,
    stat = alter (reply->hold_queue ,x ) ,
    reply->hold_queue[x ].hold_rule_id = h.hold_rule_id ,
    reply->hold_queue[x ].queue_id = h.queue_id ,
    reply->hold_queue[x ].person_id = h.person_id ,
    reply->hold_queue[x ].encntr_id = h.encntr_id ,
    reply->hold_queue[x ].order_id = h.order_id ,
    reply->hold_queue[x ].sch_event_id = h.sch_event_id ,
    reply->hold_queue[x ].updt_cnt = h.updt_cnt ,
    reply->hold_queue[x ].updt_dt_tm = cnvtdatetime (h.updt_dt_tm )
   WITH nocounter
  ;end select
  IF ((curqual = 0 ) )
   SET failed = select_zero
   GO TO check_error
  ENDIF
 ENDFOR
#check_error
 IF ((failed = false ) )
  SET reply->status_data.status = "S"
  SET reqinfo->commit_ind = true
 ELSE
  SET reply->status_data.subeventstatus[1 ].operationstatus = "F"
  SET reply->status_data.subeventstatus[1 ].targetobjectname = "TABLE"
  SET reply->status_data.subeventstatus[1 ].targetobjectvalue = table_name
  SET reqinfo->commit_ind = false
  CASE (failed )
   OF gen_nbr_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "GEN_NBR"
   OF insert_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "INSERT"
   OF update_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "UPDATE"
   OF replace_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "REPLACE"
   OF delete_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "DELETE"
   OF undelete_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "UNDELETE"
   OF remove_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "REMOVE"
   OF attribute_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "ATTRIBUTE"
   OF lock_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "LOCK"
   OF select_error :
    SET reply->status_data.subeventstatus[1 ].operationname = "SELECT"
   OF select_zero :
    SET reply->status_data.status = "Z"
    SET reply->status_data.subeventstatus[1 ].operationstatus = "Z"
    SET reply->status_data.subeventstatus[1 ].operationname = "SELECT"
   ELSE
    SET reply->status_data.subeventstatus[1 ].operationname = "UNKNOWN"
  ENDCASE
 ENDIF
#end_program
END GO
1)

190411:150919 B134316_DVD7              Cost 0.00 Cpu 0.00 Ela 0.00 Dio   0 O0M0R0 P1R0