1)translate SIM_ESO_HOLD_UTILITIES
2) go
;*** Generated by TRANSLATE, verify before re-including (Debug:N,Optimize:N,DiffEnd:N,Rdb:N) ***
DROP PROGRAM sim_eso_hold_utilities :dba GO
CREATE PROGRAM sim_eso_hold_utilities :dba
 DECLARE sim_eso_hold_utilities_ver = vc WITH constant ("000" ) ,private
 DECLARE manual_release (null ) = null
 DECLARE checkerror ((nfailed = i4 ) ) = i4
 IF ((validate (gen_nbr_error ,- (9 ) ) = - (9 ) ) )
  DECLARE gen_nbr_error = i2 WITH constant (3 )
 ENDIF
 IF ((validate (insert_error ,- (9 ) ) = - (9 ) ) )
  DECLARE insert_error = i2 WITH constant (4 )
 ENDIF
 IF ((validate (update_error ,- (9 ) ) = - (9 ) ) )
  DECLARE update_error = i2 WITH constant (5 )
 ENDIF
 IF ((validate (replace_error ,- (9 ) ) = - (9 ) ) )
  DECLARE replace_error = i2 WITH constant (6 )
 ENDIF
 IF ((validate (delete_error ,- (9 ) ) = - (9 ) ) )
  DECLARE delete_error = i2 WITH constant (7 )
 ENDIF
 IF ((validate (undelete_error ,- (9 ) ) = - (9 ) ) )
  DECLARE undelete_error = i2 WITH constant (8 )
 ENDIF
 IF ((validate (remove_error ,- (9 ) ) = - (9 ) ) )
  DECLARE remove_error = i2 WITH constant (9 )
 ENDIF
 IF ((validate (attribute_error ,- (9 ) ) = - (9 ) ) )
  DECLARE attribute_error = i2 WITH constant (10 )
 ENDIF
 IF ((validate (lock_error ,- (9 ) ) = - (9 ) ) )
  DECLARE lock_error = i2 WITH constant (11 )
 ENDIF
 IF ((validate (none_found ,- (9 ) ) = - (9 ) ) )
  DECLARE none_found = i2 WITH constant (12 )
 ENDIF
 IF ((validate (select_error ,- (9 ) ) = - (9 ) ) )
  DECLARE select_error = i2 WITH constant (13 )
 ENDIF
 IF ((validate (failed ,- (9 ) ) = - (9 ) ) )
  DECLARE failed = i2 WITH noconstant (false )
 ENDIF
 IF ((validate (table_name ,"ZZZ" ) = "ZZZ" ) )
  DECLARE table_name = vc WITH noconstant ("" )
  SET table_name = fillstring (50 ," " )
 ENDIF
 CALL echo ("<===== ESO_COMMON_SRV_ROUTINES.INC Begin =====>" )
 CALL echo ("MOD:005" )
 DECLARE get_srv_esoinfo_long_index (sea_name ) = i4
 DECLARE get_srv_esoinfo_long (sea_name ) = i4
 DECLARE set_srv_esoinfo_long (sea_name ,lvalue ) = i4
 DECLARE get_srv_esoinfo_string_index (sea_name ) = i4
 DECLARE get_srv_esoinfo_string (sea_name ) = c200
 DECLARE set_srv_esoinfo_string (sea_name ,svalue ) = i4
 DECLARE get_srv_esoinfo_double_index (sea_name ) = i4
 DECLARE get_srv_esoinfo_double (sea_name ) = f8
 DECLARE set_srv_esoinfo_double (sea_name ,dvalue ) = i4
 DECLARE set_srv_esoinfo_pft_structured_list (hcustlistitem ) = i4
 DECLARE get_srv_esoinfo_pft_structured_list (strmean ,litem ) = vc
 DECLARE get_srv_esoinfo_pft_structured_list_item (strmean ,litem ,lsubitem ) = vc
 DECLARE get_srv_reqinfo_long_index (sea_name ) = i4
 DECLARE get_srv_reqinfo_long (sea_name ) = i4
 DECLARE set_srv_reqinfo_long (sea_name ,lvalue ) = i4
 DECLARE get_srv_reqinfo_double_index (sea_name ) = i4
 DECLARE get_srv_reqinfo_double (sea_name ) = f8
 DECLARE set_srv_reqinfo_double (sea_name ,dvalue ) = i4
 DECLARE get_srv_reqinfo_string_index (sea_name ) = i4
 DECLARE get_srv_reqinfo_string (sea_name ) = c200
 DECLARE set_srv_reqinfo_string (sea_name ,svalue ) = i4
 DECLARE get_srv_routine_arg_value (name ) = vc
 DECLARE init_srv_stuff (messageid ,get_hreq ,get_hrep ) = i2
 DECLARE cleanup_srv_stuff (dummy1 ) = i2
 SUBROUTINE  get_srv_esoinfo_long_index (sea_name )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hcerner = i4
  DECLARE list_size = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hcerner = 0
  SET list_size = 0
  SET strmeaning = ""
  SET hcerner = uar_srvgetstruct (request->hctx ,"cerner" )
  IF (hcerner )
   SET list_size = uar_srvgetitemcount (hcerner ,"longList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hcerner ,"longList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      RETURN (x_i )
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("longList is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get cerner struct from request->hCtx" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  get_srv_esoinfo_long (sea_name )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hcerner = i4
  DECLARE list_size = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hcerner = 0
  SET list_size = 0
  SET strmeaning = ""
  SET hcerner = uar_srvgetstruct (request->hctx ,"cerner" )
  IF (hcerner )
   SET list_size = uar_srvgetitemcount (hcerner ,"longList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hcerner ,"longList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      RETURN (uar_srvgetlong (hitem ,"lVal" ) )
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("longList is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get cerner struct from request->hCtx" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  set_srv_esoinfo_long (sea_name ,lvalue )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hcerner = i4
  DECLARE list_size = i2
  DECLARE ifound = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hcerner = 0
  SET list_size = 0
  SET ifound = - (1 )
  SET strmeaning = ""
  SET hcerner = uar_srvgetstruct (request->hctx ,"cerner" )
  IF (hcerner )
   SET list_size = uar_srvgetitemcount (hcerner ,"longList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hcerner ,"longlist" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      SET ifound = x_i
      SET x_i = list_size
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("longlist is empty" )
   ENDIF
   IF ((ifound >= 0 ) )
    SET hitem = uar_srvgetitem (hcerner ,"longlist" ,ifound )
    IF (hitem )
     CALL uar_srvsetlong (hitem ,"lVal" ,lvalue )
     RETURN (0 )
    ELSE
     CALL echo (build ("ERROR!! uar_SrvGetItem() failed to get item = " ,ifound ) )
    ENDIF
   ELSE
    SET hitem = uar_srvadditem (hcerner ,"longlist" )
    IF (hitem )
     CALL uar_srvsetstring (hitem ,"strMeaning" ,nullterm (cnvtlower (sea_name ) ) )
     CALL uar_srvsetlong (hitem ,"lVal" ,lvalue )
     RETURN (1 )
    ELSE
     CALL echo ("ERROR!! uar_SrvAddItem() failed to add item to longList" )
    ENDIF
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get cerner struct from request->hCtx" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  get_srv_esoinfo_string_index (sea_name )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hcerner = i4
  DECLARE list_size = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hcerner = 0
  SET list_size = 0
  SET strmeaning = ""
  SET hcerner = uar_srvgetstruct (request->hctx ,"cerner" )
  IF (hcerner )
   SET list_size = uar_srvgetitemcount (hcerner ,"stringList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hcerner ,"stringList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      RETURN (x_i )
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("stringList is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get cerner struct from request->hCtx" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  get_srv_esoinfo_string (sea_name )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hcerner = i4
  DECLARE list_size = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hcerner = 0
  SET list_size = 0
  SET strmeaning = ""
  SET hcerner = uar_srvgetstruct (request->hctx ,"cerner" )
  IF (hcerner )
   SET list_size = uar_srvgetitemcount (hcerner ,"stringList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hcerner ,"stringList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      RETURN (nullterm (uar_srvgetstringptr (hitem ,"strVal" ) ) )
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("stringList is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get cerner struct from request->hCtx" )
  ENDIF
  RETURN ("" )
 END ;Subroutine
 SUBROUTINE  set_srv_esoinfo_string (sea_name ,svalue )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hcerner = i4
  DECLARE list_size = i2
  DECLARE ifound = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hcerner = 0
  SET list_size = 0
  SET ifound = - (1 )
  SET strmeaning = ""
  SET hcerner = uar_srvgetstruct (request->hctx ,"cerner" )
  IF (hcerner )
   SET list_size = uar_srvgetitemcount (hcerner ,"stringList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hcerner ,"stringList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      SET ifound = x_i
      SET x_i = list_size
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("stringList is empty" )
   ENDIF
   IF ((ifound >= 0 ) )
    SET hitem = uar_srvgetitem (hcerner ,"stringList" ,ifound )
    IF (hitem )
     CALL uar_srvsetstring (hitem ,"strVal" ,nullterm (svalue ) )
     RETURN (0 )
    ELSE
     CALL echo (build ("ERROR!! uar_SrvGetItem() failed to get item = " ,ifound ) )
    ENDIF
   ELSE
    SET hitem = uar_srvadditem (hcerner ,"stringList" )
    IF (hitem )
     CALL uar_srvsetstring (hitem ,"strMeaning" ,nullterm (cnvtlower (sea_name ) ) )
     CALL uar_srvsetstring (hitem ,"strVal" ,nullterm (svalue ) )
     RETURN (1 )
    ELSE
     CALL echo ("ERROR!! uar_SrvAddItem() failed to add item to stringList" )
    ENDIF
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get cerner struct from request->hCtx" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  get_srv_esoinfo_double_index (sea_name )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hcerner = i4
  DECLARE list_size = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hcerner = 0
  SET list_size = 0
  SET strmeaning = ""
  SET hcerner = uar_srvgetstruct (request->hctx ,"cerner" )
  IF (hcerner )
   SET list_size = uar_srvgetitemcount (hcerner ,"doubleList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hcerner ,"doubleList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      RETURN (x_i )
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("doubleList is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get cerner struct from request->hCtx" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  get_srv_esoinfo_double (sea_name )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hcerner = i4
  DECLARE list_size = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hcerner = 0
  SET list_size = 0
  SET strmeaning = ""
  SET hcerner = uar_srvgetstruct (request->hctx ,"cerner" )
  IF (hcerner )
   SET list_size = uar_srvgetitemcount (hcerner ,"doubleList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hcerner ,"doubleList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      RETURN (uar_srvgetdouble (hitem ,"dVal" ) )
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("doubleList is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get cerner struct from request->hCtx" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  set_srv_esoinfo_double (sea_name ,dvalue )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hcerner = i4
  DECLARE list_size = i2
  DECLARE ifound = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hcerner = 0
  SET list_size = 0
  SET ifound = - (1 )
  SET strmeaning = ""
  SET hcerner = uar_srvgetstruct (request->hctx ,"cerner" )
  IF (hcerner )
   SET list_size = uar_srvgetitemcount (hcerner ,"doubleList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hcerner ,"doubleList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      SET ifound = x_i
      SET x_i = list_size
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("doubleList is empty" )
   ENDIF
   IF ((ifound >= 0 ) )
    SET hitem = uar_srvgetitem (hcerner ,"doubleList" ,ifound )
    IF (hitem )
     CALL uar_srvsetdouble (hitem ,"dVal" ,dvalue )
     RETURN (0 )
    ELSE
     CALL echo (build ("ERROR!! uar_SrvGetItem() failed to get item = " ,ifound ) )
    ENDIF
   ELSE
    SET hitem = uar_srvadditem (hcerner ,"doubleList" )
    IF (hitem )
     CALL uar_srvsetstring (hitem ,"strMeaning" ,nullterm (cnvtlower (sea_name ) ) )
     CALL uar_srvsetdouble (hitem ,"dVal" ,dvalue )
     RETURN (1 )
    ELSE
     CALL echo ("ERROR!! uar_SrvAddItem() failed to add item to doubleList" )
    ENDIF
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get cerner struct from request->hCtx" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  set_srv_esoinfo_pft_structured_list (hcustlistitem )
  DECLARE ifound = i2 WITH private ,noconstant (- (1 ) )
  DECLARE x_i = i2 WITH private ,noconstant (0 )
  DECLARE n_i = i2 WITH private ,noconstant (0 )
  DECLARE hitem = i4 WITH private ,noconstant (0 )
  DECLARE hcustitem2 = i4 WITH private ,noconstant (0 )
  DECLARE hvallist = i4 WITH private ,noconstant (0 )
  DECLARE hstrvallist = i4 WITH private ,noconstant (0 )
  DECLARE hcerner = i4 WITH private ,noconstant (0 )
  DECLARE list_size = i2 WITH private ,noconstant (0 )
  DECLARE vallist_size = i2 WITH private ,noconstant (0 )
  DECLARE strvallist_size = i2 WITH private ,noconstant (0 )
  DECLARE strmeaning = vc WITH private ,noconstant ("" )
  DECLARE strfield = vc WITH private ,noconstant ("" )
  SET hcerner = uar_srvgetstruct (request->hctx ,"cerner" )
  IF (hcerner )
   SET list_size = uar_srvgetitemcount (hcerner ,"structuredList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hcerner ,"structuredList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((cnvtlower (strmeaning ) = cnvtlower (nullterm (uar_srvgetstringptr (hcustlistitem ,
        "custom_field1" ) ) ) ) )
      SET ifound = x_i
      SET x_i = list_size
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("structuredList is empty" )
   ENDIF
   IF ((ifound >= 0 ) )
    SET hitem = uar_srvgetitem (hcerner ,"structuredList" ,ifound )
    IF (hitem )
     SET vallist_size = uar_srvgetitemcount (hitem ,"valList" )
     FOR (x_i = 0 TO (vallist_size - 1 ) )
      SET hvallist = uar_srvgetitem (hitem ,"valList" ,x_i )
      IF (hvallist )
       SET strvallist_size = uar_srvgetitemcount (hvallist ,"strValList" )
       FOR (n_i = 0 TO (strvallist_size - 1 ) )
        SET hstrvallist = uar_srvgetitem (hvallist ,"strValList" ,n_i )
        IF (hstrvallist )
         SET strfield = concat ("custom_Field" ,cnvtstring ((x_i + 2 ) ) )
         IF ((x_i = 0 ) )
          SET hcustitem2 = uar_srvgetitem (hcustlistitem ,nullterm (strfield ) ,n_i )
          CALL uar_srvsetstring (hstrvallist ,"strVal" ,nullterm (uar_srvgetstringptr (hcustitem2 ,
             nullterm (strfield ) ) ) )
         ELSE
          CALL uar_srvsetstring (hstrvallist ,"strVal" ,nullterm (uar_srvgetstringptr (hcustlistitem
             ,nullterm (strfield ) ) ) )
         ENDIF
        ELSE
         CALL echo (build ("ERROR!! uar_SrvGetItem() failed to get hStrValList = " ,n_i ) )
        ENDIF
       ENDFOR
      ELSE
       CALL echo (build ("ERROR!! uar_SrvGetItem() failed to get hValList = " ,x_i ) )
      ENDIF
     ENDFOR
    ELSE
     CALL echo (build ("ERROR!! uar_SrvGetItem() failed to get item = " ,ifound ) )
    ENDIF
   ELSE
    SET hitem = uar_srvadditem (hcerner ,"structuredList" )
    IF (hitem )
     CALL uar_srvsetstring (hitem ,"strMeaning" ,nullterm (uar_srvgetstringptr (hcustlistitem ,
        "custom_field1" ) ) )
     SET vallist_size = uar_srvgetitemcount (hcustlistitem ,"custom_field2" )
     IF (vallist_size )
      SET hvallist = uar_srvadditem (hitem ,"valList" )
      FOR (x_i = 0 TO (vallist_size - 1 ) )
       SET hcustitem2 = uar_srvgetitem (hcustlistitem ,"custom_field2" ,x_i )
       SET strvallist = uar_srvadditem (hvallist ,"strValList" )
       CALL uar_srvsetstring (strvallist ,"strVal" ,nullterm (uar_srvgetstringptr (hcustitem2 ,
          "custom_field2" ) ) )
      ENDFOR
     ENDIF
     SET hvallist = uar_srvadditem (hitem ,"valList" )
     IF (hvallist )
      SET strvallist = uar_srvadditem (hvallist ,"strValList" )
      CALL uar_srvsetstring (strvallist ,"strVal" ,nullterm (uar_srvgetstringptr (hcustlistitem ,
         "custom_field3" ) ) )
     ENDIF
     SET hvallist = uar_srvadditem (hitem ,"valList" )
     IF (hvallist )
      SET strvallist = uar_srvadditem (hvallist ,"strValList" )
      CALL uar_srvsetstring (strvallist ,"strVal" ,nullterm (uar_srvgetstringptr (hcustlistitem ,
         "custom_field4" ) ) )
     ENDIF
     SET hvallist = uar_srvadditem (hitem ,"valList" )
     IF (hvallist )
      SET strvallist = uar_srvadditem (hvallist ,"strValList" )
      CALL uar_srvsetstring (strvallist ,"strVal" ,nullterm (uar_srvgetstringptr (hcustlistitem ,
         "custom_field5" ) ) )
     ENDIF
     SET hvallist = uar_srvadditem (hitem ,"valList" )
     IF (hvallist )
      SET strvallist = uar_srvadditem (hvallist ,"strValList" )
      CALL uar_srvsetstring (strvallist ,"strVal" ,nullterm (uar_srvgetstringptr (hcustlistitem ,
         "custom_field6" ) ) )
     ENDIF
    ELSE
     CALL echo ("ERROR!! uar_SrvAddItem() failed to add item to structuredList" )
    ENDIF
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get cerner struct from request->hCtx" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  get_srv_esoinfo_pft_structured_list (strmean ,litem )
  RETURN (get_srv_esoinfo_pft_structured_list_item (strmean ,litem ,0 ) )
 END ;Subroutine
 SUBROUTINE  get_srv_esoinfo_pft_structured_list_item (strmean ,litem ,lsubitem )
  IF ((validate (lstringitem ,999999999 ) = 999999999 ) )
   DECLARE lstringitem = i4 WITH protect ,noconstant (0 ) ,persist
  ENDIF
  DECLARE x_i = i2 WITH private ,noconstant (0 )
  DECLARE hitem = i4 WITH private ,noconstant (0 )
  DECLARE hvallist = i4 WITH private ,noconstant (0 )
  DECLARE hstrvallist = i4 WITH private ,noconstant (0 )
  DECLARE hcerner = i4 WITH private ,noconstant (0 )
  DECLARE list_size = i2 WITH private ,noconstant (0 )
  DECLARE strmeaning = vc WITH private ,noconstant ("" )
  SET hcerner = uar_srvgetstruct (request->hctx ,"cerner" )
  IF (hcerner )
   SET list_size = uar_srvgetitemcount (hcerner ,"structuredList" )
   IF ((list_size > 0 ) )
    FOR (x_i = lstringitem TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hcerner ,"structuredList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((cnvtlower (strmeaning ) = cnvtlower (strmean ) ) )
      SET lstringitem = x_i
      SET hvallist = uar_srvgetitem (hitem ,"valList" ,litem )
      IF (hvallist )
       SET hstrvallist = uar_srvgetitem (hvallist ,"strValList" ,lsubitem )
       IF (hstrvallist )
        RETURN (nullterm (uar_srvgetstringptr (hstrvallist ,"strVal" ) ) )
       ELSE
        CALL echo (build (
          "ERROR!! uar_SrvGetItem() failed to get strValList from valList using item = " ,lsubitem )
         )
       ENDIF
      ELSE
       CALL echo (build (
         "ERROR!! uar_SrvGetItem() failed to get valList from structuredList using item = " ,litem )
        )
      ENDIF
     ENDIF
    ENDFOR
    SET lstringitem = 0
    FOR (x_i = lstringitem TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hcerner ,"structuredList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((cnvtlower (strmeaning ) = cnvtlower (strmean ) ) )
      SET lstringitem = x_i
      SET hvallist = uar_srvgetitem (hitem ,"valList" ,litem )
      IF (hvallist )
       SET hstrvallist = uar_srvgetitem (hvallist ,"strValList" ,lsubitem )
       IF (hstrvallist )
        RETURN (nullterm (uar_srvgetstringptr (hstrvallist ,"strVal" ) ) )
       ELSE
        CALL echo (build (
          "ERROR!! uar_SrvGetItem() failed to get strValList from valList using item = " ,lsubitem )
         )
       ENDIF
      ELSE
       CALL echo (build (
         "ERROR!! uar_SrvGetItem() failed to get valList from structuredList using item = " ,litem )
        )
      ENDIF
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("structuredList is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get cerner struct from request->hCtx" )
  ENDIF
  RETURN ("" )
 END ;Subroutine
 SUBROUTINE  get_srv_reqinfo_long_index (sea_name )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hesoinfo = i4
  DECLARE list_size = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hesoinfo = 0
  SET list_size = 0
  SET strmeaning = ""
  SET hesoinfo = uar_srvgetstruct (request->hreq ,"esoinfo" )
  IF (hesoinfo )
   SET list_size = uar_srvgetitemcount (hesoinfo ,"longList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hesoinfo ,"longlist" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      RETURN (x_i )
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("longlist is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get EsoInfo struct from request->hReq" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  get_srv_reqinfo_long (sea_name )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hesoinfo = i4
  DECLARE list_size = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hesoinfo = 0
  SET list_size = 0
  SET strmeaning = ""
  SET hesoinfo = uar_srvgetstruct (request->hreq ,"esoinfo" )
  IF (hesoinfo )
   SET list_size = uar_srvgetitemcount (hesoinfo ,"longList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hesoinfo ,"longList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      RETURN (uar_srvgetlong (hitem ,"lVal" ) )
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("longList is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get EsoInfo struct from request->hReq" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  set_srv_reqinfo_long (sea_name ,lvalue )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hesoinfo = i4
  DECLARE list_size = i2
  DECLARE ifound = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hesoinfo = 0
  SET list_size = 0
  SET ifound = - (1 )
  SET strmeaning = ""
  SET hesoinfo = uar_srvgetstruct (request->hreq ,"esoinfo" )
  IF (hesoinfo )
   SET list_size = uar_srvgetitemcount (hesoinfo ,"longList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hesoinfo ,"longList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      SET ifound = x_i
      SET x_i = list_size
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("longList is empty" )
   ENDIF
   IF ((ifound >= 0 ) )
    SET hitem = uar_srvgetitem (hesoinfo ,"longlist" ,ifound )
    IF (hitem )
     CALL uar_srvsetlong (hitem ,"lVal" ,lvalue )
     RETURN (0 )
    ELSE
     CALL echo (build ("ERROR!! uar_SrvGetItem() failed to get item = " ,ifound ) )
    ENDIF
   ELSE
    SET hitem = uar_srvadditem (hesoinfo ,"longlist" )
    IF (hitem )
     CALL uar_srvsetstring (hitem ,"strMeaning" ,nullterm (cnvtlower (sea_name ) ) )
     CALL uar_srvsetlong (hitem ,"lVal" ,lvalue )
     RETURN (1 )
    ELSE
     CALL echo ("ERROR!! uar_SrvAddItem() failed to add item to longList" )
    ENDIF
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get EsoInfo struct from request->hReq" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  get_srv_reqinfo_double_index (sea_name )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hesoinfo = i4
  DECLARE list_size = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hesoinfo = 0
  SET list_size = 0
  SET strmeaning = ""
  SET hesoinfo = uar_srvgetstruct (request->hreq ,"esoinfo" )
  IF (hesoinfo )
   SET list_size = uar_srvgetitemcount (hesoinfo ,"doubleList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hesoinfo ,"doubleList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      RETURN (x_i )
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("doubleList is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get EsoInfo struct from request->hReq" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  get_srv_reqinfo_double (sea_name )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hesoinfo = i4
  DECLARE list_size = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hesoinfo = 0
  SET list_size = 0
  SET strmeaning = ""
  SET hesoinfo = uar_srvgetstruct (request->hreq ,"esoinfo" )
  IF (hesoinfo )
   SET list_size = uar_srvgetitemcount (hesoinfo ,"doubleList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hesoinfo ,"doubleList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      RETURN (uar_srvgetdouble (hitem ,"dVal" ) )
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("doubleList is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get EsoInfo struct from request->hReq" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  set_srv_reqinfo_double (sea_name ,dvalue )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hesoinfo = i4
  DECLARE list_size = i2
  DECLARE ifound = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hesoinfo = 0
  SET list_size = 0
  SET ifound = - (1 )
  SET strmeaning = ""
  SET hesoinfo = uar_srvgetstruct (request->hreq ,"esoinfo" )
  IF (hesoinfo )
   SET list_size = uar_srvgetitemcount (hesoinfo ,"doubleList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hesoinfo ,"doubleList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      SET ifound = x_i
      SET x_i = list_size
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("doubleList is empty" )
   ENDIF
   IF ((ifound >= 0 ) )
    SET hitem = uar_srvgetitem (hesoinfo ,"doubleList" ,ifound )
    IF (hitem )
     CALL uar_srvsetdouble (hitem ,"dVal" ,dvalue )
     RETURN (0 )
    ELSE
     CALL echo (build ("ERROR!! uar_SrvGetItem() failed to get item = " ,ifound ) )
    ENDIF
   ELSE
    SET hitem = uar_srvadditem (hesoinfo ,"doubleList" )
    IF (hitem )
     CALL uar_srvsetstring (hitem ,"strMeaning" ,nullterm (cnvtlower (sea_name ) ) )
     CALL uar_srvsetdouble (hitem ,"dVal" ,dvalue )
     RETURN (1 )
    ELSE
     CALL echo ("ERROR!! uar_SrvAddItem() failed to add item to doubleList" )
    ENDIF
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get EsoInfo struct from request->hReq" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  get_srv_reqinfo_string_index (sea_name )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hesoinfo = i4
  DECLARE list_size = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hesoinfo = 0
  SET list_size = 0
  SET strmeaning = ""
  SET hesoinfo = uar_srvgetstruct (request->hreq ,"esoinfo" )
  IF (hesoinfo )
   SET list_size = uar_srvgetitemcount (hesoinfo ,"stringList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hesoinfo ,"stringList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      RETURN (x_i )
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("stringList is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get EsoInfo struct from request->hReq" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  get_srv_reqinfo_string (sea_name )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hesoinfo = i4
  DECLARE list_size = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hesoinfo = 0
  SET list_size = 0
  SET strmeaning = ""
  SET hesoinfo = uar_srvgetstruct (request->hreq ,"esoinfo" )
  IF (hesoinfo )
   SET list_size = uar_srvgetitemcount (hesoinfo ,"stringList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hesoinfo ,"stringList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      RETURN (nullterm (uar_srvgetstringptr (hitem ,"strVal" ) ) )
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("stringList is empty" )
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get EsoInfo struct from request->hReq" )
  ENDIF
  RETURN ("" )
 END ;Subroutine
 SUBROUTINE  set_srv_reqinfo_string (sea_name ,svalue )
  DECLARE x_i = i2
  DECLARE hitem = i4
  DECLARE hesoinfo = i4
  DECLARE list_size = i2
  DECLARE ifound = i2
  DECLARE strmeaning = vc
  SET x_i = 0
  SET hitem = 0
  SET hesoinfo = 0
  SET list_size = 0
  SET ifound = - (1 )
  SET strmeaning = ""
  SET hesoinfo = uar_srvgetstruct (request->hreq ,"esoinfo" )
  IF (hesoinfo )
   SET list_size = uar_srvgetitemcount (hesoinfo ,"stringList" )
   IF ((list_size > 0 ) )
    FOR (x_i = 0 TO (list_size - 1 ) )
     SET hitem = uar_srvgetitem (hesoinfo ,"stringList" ,x_i )
     SET strmeaning = nullterm (uar_srvgetstringptr (hitem ,"strMeaning" ) )
     IF ((strmeaning = cnvtlower (sea_name ) ) )
      SET ifound = x_i
      SET x_i = list_size
     ENDIF
    ENDFOR
   ELSE
    CALL echo ("stringList is empty" )
   ENDIF
   IF ((ifound >= 0 ) )
    SET hitem = uar_srvgetitem (hesoinfo ,"stringList" ,ifound )
    IF (hitem )
     CALL uar_srvsetstring (hitem ,"strVal" ,nullterm (svalue ) )
     RETURN (0 )
    ELSE
     CALL echo (build ("ERROR!! uar_SrvGetItem() failed to get item = " ,ifound ) )
    ENDIF
   ELSE
    SET hitem = uar_srvadditem (hesoinfo ,"stringList" )
    IF (hitem )
     CALL uar_srvsetstring (hitem ,"strMeaning" ,nullterm (cnvtlower (sea_name ) ) )
     CALL uar_srvsetstring (hitem ,"strVal" ,nullterm (svalue ) )
     RETURN (1 )
    ELSE
     CALL echo ("ERROR!! uar_SrvAddItem() failed to add item to stringList" )
    ENDIF
   ENDIF
  ELSE
   CALL echo ("ERROR!! uar_SrvGetStruct() failed to get EsoInfo struct from request->hReq" )
  ENDIF
  RETURN (- (1 ) )
 END ;Subroutine
 SUBROUTINE  init_srv_stuff (messageid ,get_hreq ,get_hrep )
  CALL echo ("In Init_Srv_Stuff() routine..." )
  SET m_idx = size (srvrec->qual ,5 )
  CALL echo (build ("Incomming size of srvrec->qual = " ,m_idx ) )
  SET m_idx = (m_idx + 1 )
  SET stat = alterlist (srvrec->qual ,m_idx )
  CALL echo (build ("m_idx = " ,m_idx ) )
  SET srvrec->qual[m_idx ].msg_id = messageid
  CALL echo (build ("srvrec->qual[m_idx]->msg_id = " ,srvrec->qual[m_idx ].msg_id ) )
  SET srvrec->qual[m_idx ].hmsg = uar_srvselectmessage (srvrec->qual[m_idx ].msg_id )
  IF (srvrec->qual[m_idx ].hmsg )
   IF (get_hreq )
    SET srvrec->qual[m_idx ].hreq = uar_srvcreaterequest (srvrec->qual[m_idx ].hmsg )
    IF (NOT (srvrec->qual[m_idx ].hreq ) )
     CALL echo ("The uar_SrvCreateRequest() FAILED!!" )
     RETURN (0 )
    ENDIF
   ENDIF
   IF (get_hrep )
    SET srvrec->qual[m_idx ].hrep = uar_srvcreatereply (srvrec->qual[m_idx ].hmsg )
    IF (NOT (srvrec->qual[m_idx ].hrep ) )
     IF (srvrec->qual[m_idx ].hreq )
      CALL uar_srvdestroyinstance (srvrec->qual[m_idx ].hreq )
      SET srvrec->qual[m_idx ].hreq = 0
     ENDIF
     CALL echo ("The uar_SrvCreateReply() FAILED!!" )
     RETURN (0 )
    ENDIF
   ENDIF
  ELSE
   CALL echo ("The uar_SrvSelectMessage() FAILED!!" )
   RETURN (0 )
  ENDIF
  CALL echo ("Exiting Init_Srv_Stuff() routine... " )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  cleanup_srv_stuff (dummy1 )
  CALL echo ("In CleanUp_Srv_Stuff() routine..." )
  FOR (i = 1 TO size (srvrec->qual ,5 ) )
   CALL echo (build ("i = " ,i ) )
   IF ((srvrec->qual[i ].hreq > 0 ) )
    CALL uar_srvdestroyinstance (srvrec->qual[i ].hreq )
   ENDIF
   IF ((srvrec->qual[i ].hrep > 0 ) )
    CALL uar_srvdestroyinstance (srvrec->qual[i ].hrep )
   ENDIF
  ENDFOR
  IF (size (srvrec->qual ,5 ) )
   SET stat = alterlist (srvrec->qual ,0 )
  ENDIF
  CALL echo ("Exiting CleanUp_Srv_Stuff() routine..." )
  RETURN (1 )
 END ;Subroutine
 SUBROUTINE  get_srv_routine_arg_value (name )
  CALL echo ("Entering get_srv_routine_arg_value..." )
  SET routine_args = trim (get_srv_esoinfo_string ("routine_args" ) )
  DECLARE strvalue = vc WITH public ,noconstant (" " )
  SET iindex = findstring (name ,routine_args )
  IF (iindex )
   SET iequalidx = findstring ("=" ,routine_args ,(iindex + size (name ) ) )
   IF ((iequalidx > 0 ) )
    SET isemiidx = findstring (";" ,routine_args ,(iequalidx + 1 ) )
    IF ((isemiidx > 0 ) )
     SET strvalue = trim (substring ((iequalidx + 1 ) ,((isemiidx - iequalidx ) - 1 ) ,routine_args
       ) ,3 )
    ELSE
     SET strvalue = trim (substring ((iequalidx + 1 ) ,(size (routine_args ) - iequalidx ) ,
       routine_args ) ,3 )
    ENDIF
   ENDIF
  ENDIF
  RETURN (strvalue )
  CALL echo ("Exiting get_srv_routine_arg_value..." )
 END ;Subroutine
 CALL echo ("<===== ESO_COMMON_SRV_ROUTINES.INC End =====>" )
 IF ((validate (lstatus ) = 0 ) )
  DECLARE lstatus = i4 WITH noconstant (0 )
 ENDIF
 IF ((validate (mstable_name ) = 0 ) )
  DECLARE mstable_name = vc WITH noconstant ("" )
 ENDIF
 DECLARE lcount = i4 WITH noconstant (0 )
 DECLARE days_to_keep = i4 WITH noconstant (0 )
 DECLARE sparse = vc WITH noconstant ("" )
 DECLARE messageid = i4
 DECLARE que_idx = i4 WITH noconstant (0 )
 DECLARE que_cnt = i4 WITH noconstant (0 )
 DECLARE hold_queue_id_temp = f8 WITH private ,noconstant (0.0 )
 DECLARE iret = i4 WITH private ,noconstant (0 )
 DECLARE strbinding = vc WITH public ,noconstant ("" )
 IF ((validate (reply ) = 0 ) )
  RECORD reply (
    1 status_data
      2 status = c1
      2 subeventstatus [1 ]
        3 operationname = c25
        3 operationstatus = c1
        3 targetobjectname = c25
        3 targetobjectvalue = vc
  )
 ENDIF
 FREE RECORD hold_queue
 RECORD hold_queue (
   1 qual [* ]
     2 hold_queue_id = f8
     2 queue_id = f8
     2 trigger_id = f8
 )
 FREE RECORD srvrec
 RECORD srvrec (
   1 qual [* ]
     2 msg_id = i4
     2 hmsg = i4
     2 hreq = i4
     2 hrep = i4
     2 status = i4
 )
 CASE (request->utility_type )
  OF 1 :
   SET days_to_keep = request->days_to_keep
   EXECUTE fsi_purge_cqm_hold
  OF 2 :
   EXECUTE eso_hold_reconcile
  OF 3 :
   SET days_to_keep = request->days_to_keep
   EXECUTE fsi_purge_cqm_eso
  OF 4 :
   CALL manual_release (null )
 ENDCASE
 CALL checkerror (true )
 SUBROUTINE  manual_release (null )
  SET que_idx = 0
  SET que_cnt = 0
  SET messageid = 1215000
  SET lcount = 0
  CASE (request->release_type )
   OF "HOLD_RULE" :
    SET sparse = concat ("hq.hold_rule_id = " ,cnvtstring (request->release_id ,12 ,1 ) )
   OF "HOLD_QUEUE" :
    SET sparse = concat ("hq.hold_queue_id = " ,cnvtstring (request->release_id ,12 ,1 ) )
   OF "ORDER" :
    SET sparse = concat ("hq.order_id = " ,cnvtstring (request->release_id ,12 ,1 ) )
   OF "PERSON" :
    SET sparse = concat ("hq.person_id = " ,cnvtstring (request->release_id ,12 ,1 ) )
   OF "ENCOUNTER" :
    SET sparse = concat ("hq.encntr_id = " ,cnvtstring (request->release_id ,12 ,1 ) )
  ENDCASE
  SELECT INTO "nl:"
   FROM (hold_queue hq )
   WHERE parser (sparse )
   DETAIL
    lcount = (lcount + 1 ) ,
    stat = alterlist (hold_queue->qual ,lcount ) ,
    hold_queue->qual[lcount ].hold_queue_id = hq.hold_queue_id ,
    hold_queue->qual[lcount ].queue_id = hq.queue_id ,
    hold_queue->qual[lcount ].trigger_id = hq.trigger_id
   WITH nocounter
  ;end select
  IF ((lcount > 0 ) )
   SET que_cnt = size (hold_queue->qual ,5 )
   CALL init_srv_stuff (messageid ,1 ,1 )
   FOR (que_idx = 1 TO que_cnt )
    SET hold_queue_id_temp = hold_queue->qual[que_idx ].hold_queue_id
    DELETE FROM (hold_queue_condition hqc )
     WHERE (hqc.hold_queue_id = value (hold_queue_id_temp ) )
     WITH nocounter
    ;end delete
    DELETE FROM (hold_queue hq )
     WHERE (hq.hold_queue_id = value (hold_queue_id_temp ) )
     WITH nocounter
    ;end delete
    IF ((hold_queue->qual[que_idx ].trigger_id <= 0.0 ) )
     SET stat = uar_srvsetlong (srvrec->qual[1 ].hreq ,"Msg_Id" ,messageid )
     SET stat = uar_srvsetlong (srvrec->qual[1 ].hreq ,"Process_Status_Flag" ,10 )
     SET stat = uar_srvsetstring (srvrec->qual[1 ].hreq ,"Subtype_Detail" ,"1" )
     UPDATE FROM (cqm_fsieso_que q )
      SET q.process_status_flag = 10
      WHERE (q.queue_id = hold_queue->qual[que_idx ].queue_id )
      WITH nocounter
     ;end update
     COMMIT
     SELECT INTO "nl:"
      q.queue_id ,
      q.priority ,
      q.class ,
      q.type ,
      q.subtype ,
      q.subtype_detail ,
      q.debug_ind ,
      q.verbosity_flag
      FROM (cqm_fsieso_que q )
      WHERE (q.queue_id = hold_queue->qual[que_idx ].queue_id )
      DETAIL
       stat = uar_srvsetdouble (srvrec->qual[1 ].hreq ,"Queue_Id" ,q.queue_id ) ,
       stat = uar_srvsetlong (srvrec->qual[1 ].hreq ,"Priority" ,q.priority ) ,
       stat = uar_srvsetstring (srvrec->qual[1 ].hreq ,"Class" ,nullterm (trim (q.class ,3 ) ) ) ,
       stat = uar_srvsetstring (srvrec->qual[1 ].hreq ,"Type" ,nullterm (trim (q.type ,3 ) ) ) ,
       stat = uar_srvsetstring (srvrec->qual[1 ].hreq ,"Subtype" ,nullterm (trim (q.subtype ,3 ) ) )
       ,stat = uar_srvsetstring (srvrec->qual[1 ].hreq ,"Subtype_Detail" ,nullterm (trim (q
          .subtype_detail ,3 ) ) ) ,
       stat = uar_srvsetlong (srvrec->qual[1 ].hreq ,"Debug_Ind" ,q.debug_ind ) ,
       stat = uar_srvsetlong (srvrec->qual[1 ].hreq ,"Verbosity_Flag" ,q.verbosity_flag ) ,
       stat = uar_srvsetstring (srvrec->qual[1 ].hreq ,"trig_module_identifier" ,nullterm (trim (q
          .trig_module_identifier ,3 ) ) )
      WITH nocounter
     ;end select
     CALL echo ("Begin uar_SrvExecute()..." )
     SET iret = uar_srvexecute (srvrec->qual[1 ].hmsg ,srvrec->qual[1 ].hreq ,srvrec->qual[1 ].hrep
      )
     CASE (iret )
      OF 0 :
       CALL echo ("Successful uar_SrvExecute() " )
      OF 1 :
       CALL echo ("uar_SrvExecute() failed - Communication Error - CQM Server may be down" )
      OF 2 :
       IF ((messageid = 0 ) )
        CALL echo ("TDB Message Id is zero..." )
       ELSE
        CALL echo ("SrvSelectMessage failed -- May need to perform CCLSECLOGIN" )
       ENDIF
      OF 3 :
       CALL echo ("Failed to allocate either the Request or Reply Handle" )
     ENDCASE
    ELSE
     UPDATE FROM (cqm_fsieso_tr_1 c )
      SET c.process_status_flag = 10
      WHERE (c.trigger_id = hold_queue->qual[que_idx ].trigger_id )
      WITH nocounter
     ;end update
     SELECT INTO "nl:"
      hq.hold_queue_id
      FROM (hold_queue hq )
      WHERE (hq.queue_id = hold_queue->qual[que_idx ].queue_id )
      WITH nocounter
     ;end select
     IF ((curqual <= 0 ) )
      UPDATE FROM (cqm_fsieso_que c )
       SET c.process_status_flag = 90
       WHERE (c.queue_id = hold_queue->qual[que_idx ].queue_id )
       WITH nocounter
      ;end update
     ENDIF
     COMMIT
     SET hmsg = uar_srvselectmessage (1210001 )
     SET hreq = uar_srvcreaterequest (hmsg )
     SELECT INTO "nl:"
      tr1.* ,
      clc.listener_alias
      FROM (cqm_fsieso_tr_1 tr1 ),
       (cqm_listener_config clc )
      PLAN (tr1
       WHERE (tr1.trigger_id = hold_queue->qual[que_idx ].trigger_id ) )
       JOIN (clc
       WHERE (clc.listener_id = tr1.listener_id ) )
      DETAIL
       strbinding = trim (clc.listener_alias ) ,
       stat = uar_srvsetlong (hreq ,"MSG_ID" ,1210001 ) ,
       stat = uar_srvsetdouble (hreq ,"trigger_id" ,tr1.trigger_id ) ,
       stat = uar_srvsetdouble (hreq ,"queue_id" ,tr1.queue_id ) ,
       stat = uar_srvsetlong (hreq ,"process_status_flag" ,tr1.process_status_flag ) ,
       stat = uar_srvsetlong (hreq ,"priority" ,tr1.priority ) ,
       stat = uar_srvsetlong (hreq ,"debug_ind" ,tr1.debug_ind ) ,
       stat = uar_srvsetlong (hreq ,"verbosity_flag" ,tr1.verbosity_flag ) ,
       stat = uar_srvsetdouble (hreq ,"eso_trigger_id" ,tr1.eso_trigger_id )
      WITH nocounter
     ;end select
     SET hmsg = uar_srvselectmessage (1210000 )
     SET hrep = uar_srvcreatereply (hmsg )
     SET iret = uar_srvexecuteas (hmsg ,hreq ,hrep ,nullterm (strbinding ) )
     CASE (iret )
      OF 0 :
       CALL echo ("Successful uar_SrvExecute() " )
      OF 1 :
       CALL echo ("uar_SrvExecute() failed - Communication Error - Load Server may be down." )
      OF 2 :
       CALL echo ("SrvSelectMessage failed - May need to perform CCLSECLOGIN" )
      OF 3 :
       CALL echo ("Failed to allocate either the Request of the Reply handle." )
     ENDCASE
     CALL uar_srvdestroyinstance (hreq )
     CALL uar_srvdestroyinstance (hrep )
    ENDIF
   ENDFOR
   CALL cleanup_srv_stuff (1 )
  ENDIF
 END ;Subroutine
 SUBROUTINE  checkerror (nfailed )
  IF ((nfailed = true ) )
   SET reply->status_data.status = "S"
   SET reqinfo->commit_ind = true
   RETURN (true )
  ELSE
   CASE (nfailed )
    OF gen_nbr_error :
     SET reply->status_data.subeventstatus[1 ].operationname = "GEN_NBR"
    OF insert_error :
     SET reply->status_data.subeventstatus[1 ].operationname = "INSERT"
    OF update_error :
     SET reply->status_data.subeventstatus[1 ].operationname = "UPDATE"
    OF replace_error :
     SET reply->status_data.subeventstatus[1 ].operationname = "REPLACE"
    OF delete_error :
     SET reply->status_data.subeventstatus[1 ].operationname = "DELETE"
    OF undelete_error :
     SET reply->status_data.subeventstatus[1 ].operationname = "UNDELETE"
    OF remove_error :
     SET reply->status_data.subeventstatus[1 ].operationname = "REMOVE"
    OF attribute_error :
     SET reply->status_data.subeventstatus[1 ].operationname = "ATTRIBUTE"
    OF lock_error :
     SET reply->status_data.subeventstatus[1 ].operationname = "LOCK"
    OF none_found :
     SET reply->status_data.subeventstatus[1 ].operationname = "NONE FOUND"
    OF select_error :
     SET reply->status_data.subeventstatus[1 ].operationname = "SELECT"
    ELSE
     SET reply->status_data.subeventstatus[1 ].operationname = "UNKNOWN"
   ENDCASE
   IF ((nfailed != none_found ) )
    SET reply->status_data.subeventstatus[1 ].operationstatus = "F"
    SET reply->status_data.subeventstatus[1 ].targetobjectname = "TABLE"
    SET reply->status_data.subeventstatus[1 ].targetobjectvalue = mstable_name
    SET reqinfo->commit_ind = false
   ELSE
    SET reply->status_data.subeventstatus[1 ].operationstatus = "S"
    SET reply->status_data.subeventstatus[1 ].targetobjectname = "TABLE"
    SET reply->status_data.subeventstatus[1 ].targetobjectvalue = mstable_name
    SET reqinfo->commit_ind = true
   ENDIF
   RETURN (false )
  ENDIF
 END ;Subroutine
#end_program
END GO
1)

190412:075048 B134316_DVD1              Cost 0.00 Cpu 0.02 Ela 0.02 Dio   0 O0M0R0 P1R0