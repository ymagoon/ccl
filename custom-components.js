
function TypeError(object, method, actual, expected) {
	this.message = "Error: Called {0} on {1} with type {2}, expected {3}".replace("{0}", method).replace("{1}", object).replace("{2}", actual).replace("{3}", expected);
}

TypeError.prototype = new Error();
TypeError.prototype.constructor = Error; 
/*Custom Component source code*/
MPage.namespace("cerner");

/*Quick Links example*/
cernerLinksOptions1 = {
	searchLabel: "Customizable Search Label",
	searchLinks:[
		{
			label: "Google",
			url: "http://www.google.com/search?btnG=1&pws=0&q={0}"
		},
		{
			label: "Bing",
			url: "http://www.bing.com/search?q={0}&go="
		}
	],
	linksLabel: "Customizable Links Label",
	links:[
		{
			label: "CDC",
			url: "http://www.cdc.gov"
		},
		{
			label: "Wikipedia",
			url: "http://www.wikipedia.org"
		}
	]
};

cernerLinksOptions2 = {
	searchLabel: "Quick Searches",
	searchLinks:[
		{
			label: "Google",
			url: "http://www.google.com/search?btnG=1&pws=0&q={0}"
		},
		{
			label: "Bing",
			url: "http://www.bing.com/search?q={0}&go="
		}
	],
	linksLabel: "Quick Links",
	links:[
		{
			label: "Google",
			url: "http://www.google.com"
		},
		{
			label: "Yahoo",
			url: "http://www.yahoo.com"
		},
		{
			label: "Bing",
			url: "http://www.bing.com"
		}
	]
};

cerner.quick_links = function(){};
cerner.quick_links.prototype = new MPage.Component();
cerner.quick_links.prototype.constructor = MPage.Component;
cerner.quick_links.prototype.base = MPage.Component.prototype;
cerner.quick_links.prototype.name = "cerner.quick_links";
cerner.quick_links.prototype.render = function(){
	var options;
	var searchLabel;
	var searches;
	var linksLabel;
	var links;
	var x;
	var searchHTML = [];
	var linksHTML = [];
	var compId;
	var target = this.getTarget();
	
	if(this.options){
		options = this.options;
		compId = options.id;
	}
	else{
		throw(new Error("No options object defined for this component"));
	}
	
	if(options.searchLinks && options.searchLinks.length){
		searchLabel = options.searchLabel || "Search";
		searches = options.searchLinks;
		//Create the container
		searchHTML.push('<div><div class="cerner_ql_heading">', searchLabel, '</div><div><select id="quick_links_ComboBox', compId,'" class="cerner_ql_search_combo">');
		for(x = 0; x < searches.length; x++){
			searchHTML.push('<option value="', searches[x].url,'">', searches[x].label,'</option>');
		}
		searchHTML.push('</select><input type="text" id="quick_links_SearchBox', compId, '" class="cerner_ql_search_box"/><button id="quick_links_Search', compId,'"type="button" class="cerner_ql_search_button">Go</button></div></div>');
	}
	
	if(options.links && options.links.length){
		linksLabel = options.linksLabel || "Links";
		links = options.links;
		linksHTML.push('<div><div class="cerner_ql_heading">', linksLabel,'</div>');
		for(x = 0; x < links.length; x++){
			linksHTML.push('<div class="cerner_ql_links"><a onclick="javascript:cerner.quick_links.openLink(\'', links[x].url,'\')">', links[x].label,'</a></div>');
		}		
		linksHTML.push('</div>');
	}
	target.innerHTML = searchHTML.join("") + "" + linksHTML.join("");
	
	/*Add the functionality to the textbox and search button*/
	var searchBox = document.getElementById('quick_links_Search' + compId);
	searchBox.onclick = function(evt){
		var searchBox = document.getElementById('quick_links_SearchBox' + compId);
		if(searchBox.value !== ""){
			var combo = document.getElementById('quick_links_ComboBox' + compId);
			var url = combo.value;
			url = url.replace("{0}", searchBox.value);
			cerner.quick_links.openLink(url);
		}
	};
};
cerner.quick_links.openLink = function(url){
	if(APPLINK){
		APPLINK(100, url, "");
	}
};

/*Allergies example*/
cerner.allergies_example = function(){};
cerner.allergies_example.prototype = new MPage.Component();
cerner.allergies_example.prototype.constructor = MPage.Component;
cerner.allergies_example.prototype.base = MPage.Component.prototype;
cerner.allergies_example.prototype.name = "Cerner.allergies_example";
cerner.allergies_example.prototype.cclProgram = "mp_justin_links";
cerner.allergies_example.prototype.cclParams = "";
cerner.allergies_example.prototype.cclDataType = "JSON";
cerner.allergies_example.prototype.init = function(options){
	var params = [];
	params.push("mine");
	params.push(this.getProperty("personId"));
	this.cclParams = params;
};

cerner.allergies_example.prototype.render = function(){
	//Takes the data in this.data and loads it into target
	var element = this.getTarget();
	var alHTML = [];
	var alJSON = this.data.ALLERGIES;
	var alCnt = alJSON.ALLERGY.length;
	var tableHTML = [];
	var reacHTML = [];
	var onsetHTML = [];
	var severityHTML = [];
	var tdClass;
	var onset;
	var allergyObj;
	var reaction;
	var x;
	var y;
	var severeClass;
	
	tableHTML.push("<table class='cerner_all_table'><th>Allergy</th><th>Reaction</th>");
	//tableHTML.push("<table class='cerner_all'>");
	for(x = 0; x < alCnt; x++){
		alHTML = [];
		reacHTML = [];
		onsetHTML = [];
		severityHTML = [];
		tableHTML.push("<tr>");
		tdClass = (x % 2 === 1)? "cerner_all_even": "";
		
		allergyObj = alJSON.ALLERGY[x];
		severeClass = (allergyObj.SEVERE_IND)? "cerner_all_severe":"";
		//Allergy HTML creation
		alHTML.push("<td class='", tdClass," cerner_all ", severeClass, "'><span>"+allergyObj.ALLERGY_NAME+"</span></td>");
		
		//Reaction HTMl creation
		reacHTML.push("<td class='", tdClass," cerner_all_reac ", severeClass, "'><span>");
		if(allergyObj.REACTION_CNT > 0){
			for(y = 0; y < allergyObj.REACTION_CNT; y++){
				reactionObj = allergyObj.REACTIONS[y];
				reacHTML.push(reactionObj.REACTION, ", ");
			}
			reacHTML.pop();
		}
		else{
			reacHTML.push("--");
		}
		reacHTML.push("</span></td>");
		
		//Onset date time
		onsetHTML.push("<td class='", tdClass," cerner_all_onset ", severeClass, "'><span>Onset: " + allergyObj.ONSET_DATE + "</span></td>");
		
		//Severity
		severityHTML.push("<td class='", tdClass," cerner_all_severity ", severeClass, "'><span>Severity: " + allergyObj.SEVERITY + "</span></td>");
		
		tableHTML.push("<tr>");
		tableHTML.push(alHTML.join("") + reacHTML.join(""));
		tableHTML.push("</tr><tr>");
		tableHTML.push(onsetHTML.join("") + severityHTML.join(""));
		tableHTML.push("</tr>");
	}
	
	if(alCnt === 0){
		tableHTML.pop();
		tableHTML.push("<table class='cerner_all_table'><th>No allergies recorded</th></table>");
	}
	else{
		tableHTML.push("</table>");
	}
	element.innerHTML = tableHTML.join("");
};


/*Custom Component Harness for Component Standard 1.0*/
var customCompOptions1 = {
	cclProgram: "mp_justin_links",
	cclParams: ["mine", "personId", "userId", "encounterId", "pprCd"]
};

var customCompOptions2 = {
	cclProgram: "mp_justin_links2",
	cclParams: ["mine", "personId", "userId", "encounterId", "pprCd"]
};

var customCompOptions3 = {
	cclProgram: "mp_justin_links3",
	cclParams: ["mine", "personId", "userId", "encounterId", "pprCd"]
};
var customCompOptions5 = {
	cclProgram: "mp_justin_links4",
	cclParams: ["mine", "personId", "userId", "encounterId", "pprCd"]
};
var customCompOptions6 = {
	cclProgram: "mp_justin_links5",
	cclParams: ["mine", "personId", "userId", "encounterId", "pprCd"]
};
MPage.namespace("cerner");
cerner.custom_component = function(){};
cerner.custom_component.prototype = new MPage.Component();
cerner.custom_component.prototype.constructor = MPage.Component;
cerner.custom_component.prototype.base = MPage.Component.prototype;
cerner.custom_component.name = "Cerner.custom_component";
cerner.custom_component.prototype.init = function(options){
	var params = [];
	var paramList;
	var tempProp;
	var x, x1;
	
	this.cclProgram = this.options['cclProgram'];
	this.cclDataType = "TEXT";
	paramList = this.options['cclParams'];
	for(x = 0, x1 = paramList.length; x < x1; x++){
		tempProp = this.getProperty(paramList[x]);
		if(tempProp != 'undefined'){
			params.push(tempProp);
		}
		else{
			alert("property " + paramList[x] + " is not currently available");
		}
	}
	this.cclParams = params;
	this.data = "";
};
cerner.custom_component.prototype.render = function(){
	//Takes the data in this.data and loads it into target
	var element = this.getTarget();
	element.innerHTML = this.data;
};



/*Custom Component source code Core Measures*/
MPage.namespace("cerner");

//sl014066:  These are options that are loaded into the components option structure and can be accessable through getOption() and setOption()
var customCompOptions4 = {
	encntrFilter: 2,
	lookbackNum: 2,
	lookbackUnit: 2,
	conditionId: 0.0
};


MPage.namespace("cerner");
cerner.lh_quality_measures = function(){};
cerner.lh_quality_measures.prototype = new MPage.Component();
cerner.lh_quality_measures.prototype.constructor = MPage.Component;
cerner.lh_quality_measures.prototype.base = MPage.Component.prototype;
cerner.lh_quality_measures.prototype.name = "cerner.lh_quality_measures";
//sl014066:  This is where you can define the script to use when your component loads
cerner.lh_quality_measures.prototype.cclProgram = "lh_mp_get_quality_measures";
//sl014066;  You can have predefined parameters here, but most likely you will load the in the init() function
cerner.lh_quality_measures.prototype.cclParams = [];
//sl014066:  The custom component framework will create a JavaScript object automagically for you if you set this variable to JSON.  Same deal with XML.
cerner.lh_quality_measures.prototype.cclDataType = "JSON";
cerner.lh_quality_measures.prototype.init = function(options){
	var params = [];
	
	params.push("mine");
	//sl014066:  Use the getPorperty methods to get properties made accassable through the architecture
	//Those properties inclue; id, parentComp, personId, userId, encounterId, pprCd, staticContent, positionCd, categoryMean, viewableEncounters, headerTitle, headerOverflowState
	params.push(this.getProperty("personId"));
	params.push(this.getProperty("encounterId"));
	params.push(this.getProperty("userId"));
	params.push(this.getProperty("positionCd"));
	params.push(this.getProperty("pprCd"));
	//sl014066:  These are the options defined in the customCompOptions1 variable above.
	//params.push(0);
	params.push(this.getOption("encntrFilter"));
	params.push(this.getOption("lookbackNum"));
	params.push(this.getOption("lookbackUnit"));
	//params.push(this.getOption("conditionId"));
	params.push(0.0);
	
	this.cclParams = params;
	
};

cerner.lh_quality_measures.prototype.render = function(){
	//Takes the data in this.data and loads it into target
	var element = this.getTarget();
	var ar=[];
	var comp = this;
	var compId = this.getComponentUid();
	
	try{
		//sl014066:  No need to parse any JSON since the architecture does it for us
		var jsonObj = this.data;
    	var recordData = jsonObj.RECORD_DATA;
		//sl014066:  If you want to show the total outcomes as a count in the subheader you can use component.setProperty("headerSubTitle", "("+totalOutcomes+")").  See three lines below
		var totalOutcomes=recordData.OUTCOMES_COMPLETE.length+recordData.OUTCOMES_INCOMPLETE.length;
		var custComp = this;
		custComp.setProperty("headerSubTitle", "("+totalOutcomes+")");
		ar.push("<div class='content-body scrollable'>");

		//Show all Qualifying Conditions in drop down list
		ar.push("<div class='qm-cbo'><form><span class='qm-cond-lbl'>", recordData.FILTERDISPLAY, "</span><select id='qmTask",compId,"'>");
			
		//Debugging
		//ar.push("<option value='testing condition 1 id' selected='selected'>testing 1</option>");
		//ar.push("<option value='testing condition 2 id'>testing 2</option>");
					
		for(var i=0;i<recordData.CONDITIONS.length;i++){
			if(recordData.CONDITIONS[i].CONDITION_ID==recordData.SELECTED_CONDITION_ID)
			{
				ar.push("<option value="+recordData.CONDITIONS[i].CONDITION_ID
						+" selected='selected'>"+recordData.CONDITIONS[i].CONDITION_NAME+"</option>");
			}else{
			ar.push("<option value="+recordData.CONDITIONS[i].CONDITION_ID+">"
					+recordData.CONDITIONS[i].CONDITION_NAME+"</option>");
			}
		}
			
		ar.push("</select></form></div>");	
		
		//DIV for Incomplete and Compelete
		ar.push("<div id='condID",compId,"'>");
		
		//Incomplete Section
		ar.push("<div id='incomp" + compId + "' class='sub-sec'>");
			
			ar.push("<h3 class='sub-sec-hd'><span class='sub-sec-hd-tgl' title=",i18n.HIDE_SECTION,">-</span><span class='sub-sec-title'>"
					,i18n.QM_INCOMPLETE," (",recordData.OUTCOMES_INCOMPLETE.length,")</span></h3>");			
			
			ar.push("<div class='sub-sec-content'>");

			if(recordData.OUTCOMES_INCOMPLETE.length>0)
			{
				for(var j=0;j<recordData.OUTCOMES_INCOMPLETE.length;j++){
										
					//*Create new section for each outcome (ex:VTE Overlap Therapy)
					ar.push("<div class='sub-sub-sec-content'>"); //*001 New class
											
						var tip = "Tip" + j; 
										
						var hoverDisplay = "";
						hoverDisplay = recordData.OUTCOMES_INCOMPLETE[j].HOVERDISPLAY;
											
							//Hover Div								
							ar.push("<div id= ",tip," style='position:absolute; z-index:1;background-color:#FFC;border:1px solid #000; visibility: hidden;'>"
							,hoverDisplay,"</div>");										
											
						//*Create Outcome header with toggle
						ar.push("<h3 class='sub-sec-hd-test'><span class='sub-sec-hd-tgl' title=",i18n.HIDE_SECTION
							,">-</span><span class='sub-sec-title' onmouseover='cerner.lh_quality_measures.prototype.ShowHover(\"" + recordData.OUTCOMES_INCOMPLETE[j].HOVERDISPLAY + "\"," + j + ");' onmouseout='cerner.lh_quality_measures.prototype.HideHover(",j,");'>"
							,recordData.OUTCOMES_INCOMPLETE[j].OUTCOME_NAME,"</span></h3>");
											
						ar.push("<div class='sub-sec-content'>");
												
							//Loop through each Measure
							for(var k=0;k<recordData.OUTCOMES_INCOMPLETE[j].MEASURES.length;k++){
													
								//Reset for each Measure 
								firstTaskFound = 0;
												
								//Create each Measures (ex:Warfarin)
								ar.push("<dl class='qm-info'>");
								ar.push("<dt><span>measure</span></dt><dd class='qm-ic-name'><span>"
								,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].NAME,"</span></dd>");
								ar.push("</dl>");
													
														
								//Create each Measures Data (ex:Order Administer Reconcile)
								ar.push("<dl class='qm-info'>");
								ar.push("<dt>");
								ar.push("<dd class='qm-ic-name-grp'>"); //* New Class 001										
												
								//If ORDERS is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERSETIND == 1){
													
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERPRESENTIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayInOrder'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERINCOMPLETEDISPLAY,"</span>");
									} else {
										if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERTASKIND == 1){
											ar.push("<a id = 'openInOrder' onclick='cerner.lh_quality_measures.prototype.OpenQMOrderWindow(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ORDERDISPLAY,"</a>");
										} else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERTASKIND == 2){
											ar.push("<a id = 'openInOrder' onclick='cerner.lh_quality_measures.prototype.OpenQMOrderProfileWindow(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ORDERDISPLAY,"</a>");
										}
															
									}
									firstTaskFound = 1;
								
								} 
													
								//If COLLECT is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLSETIND == 1){
													
									if (firstTaskFound == 1){	
										ar.push(" | ");
									}			
												
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLPRESENTIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayInCol'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].OCOLINCOMPLETEDISPLAY,"</span>");
									} else {
										if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTASKIND == 3){
											ar.push("<a id = 'openInColForm' onclick='cerner.lh_quality_measures.prototype.OpenQMForm("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + "," +recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLFORMID +")'>",recordData.COLDISPLAY,"</a>");
										}
													
									}
									
									firstTaskFound = 1;
								}									
													
													
								//If ADMINISTER is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINSETIND == 1){
													
									if (firstTaskFound == 1){	
										ar.push(" | ");
									}
											
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINPRESENTIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayInAdmin'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMININCOMPLETEDISPLAY,"</span>");
									} else{
										if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTASKIND == 2){ //MAR
					
											ar.push("<a id = 'openInAdminMAR' onclick='cerner.lh_quality_measures.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ADMINDISPLAY,"</a>");
										}
										if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTASKIND == 3){ //PowerForm
											ar.push("<a id = 'openInAdminForm' onclick='cerner.lh_quality_measures.prototype.OpenQMForm("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + "," +recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINFORMID +")'>",recordData.ADMINDISPLAY,"</a>");
										}
										if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTASKIND == 4){ //IView
											ar.push("<a id = 'openInAdminView' onclick='cerner.lh_quality_measures.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ADMINDISPLAY,"</a>");
										}
															
									}	
				
									firstTaskFound = 1;
								}
													
													
								//If PRESCRIBE is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESSETIND == 1){		
									if (firstTaskFound == 1){	
										ar.push(" | ");
									}
							
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESPRESENTIND == 1){	
										ar.push("<span class = 'qm-ic-name-display' id = 'displayInPres'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESINCOMPLETEDISPLAY,"</span>");				
									} else{
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERACEIPRESIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERPRESAMIIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.PRESDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERARBPRESIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERPRESAMIIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.PRESDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESTASKIND == 1){ //MOEW
											ar.push("<a id = 'openInPresOrder' onclick='cerner.lh_quality_measures.prototype.OpenQMOrderWindow("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.PRESDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESTASKIND == 6){ //MedsRec
											ar.push("<a id = 'openInPresRec' onclick='cerner.lh_quality_measures.prototype.OpenQMMedsRec("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.PRESDISPLAY,"</a>");
										}
									}
									
									firstTaskFound = 1;
								}
													
													
								//If DOCUMENT is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCSETIND == 1){	
									
									if (firstTaskFound == 1){	
										ar.push(" | ");
									}							
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCPRESENTIND == 1){	
										
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DELAYDITHERIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].VANCOPRESIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
					
										else {			
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>" //* New Class 001
											,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCINCOMPLETEDISPLAY,"</span>");				
										}
									} else{
															
										if (recordData.OUTCOMES_INCOMPLETE[j].ADMINMETIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].CONTRAIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");	
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].PRESMETIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].CONTRAIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");	
										}	
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DELAYDITHERIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].VANCOPRESIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 1){ //MOEW
											ar.push("<a id = 'openInDocOrder' onclick='cerner.lh_quality_measures.prototype.OpenQMOrderWindow(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 3){ //PowerForm
											 
											ar.push("<a id = 'openInDocForm' onclick='cerner.lh_quality_measures.prototype.OpenQMForm(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + "," + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCFORMID +")'>",recordData.DOCDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 4){ //IVIEW
											ar.push("<a id = 'openInDocView' onclick='cerner.lh_quality_measures.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");
										}																	
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 5){ //PowerNote
																
											ar.push("<a id = 'openInDocNote' onclick='cerner.lh_quality_measures.prototype.OpenQMPowerNote(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTABNAME + "\"," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");
										}
												
									}	
						
									firstTaskFound = 1;	
								}								
																					
								ar.push("</dd>");
								ar.push("</dt>");
								ar.push("</dl>");
													
							} //for(var k=0;k<recordData.OUTCOMES_INCOMPLETE[j].MEASURES.length;k++){ , Loop through each measure
											
												
						ar.push("</div>");//ar.push("<div class='sub-sec-content'>");	
								
						//*Close DIV for Outcome
						ar.push("</div>"); //ar.push("<div class='sub-sub-sec-content'>"); //*001 New class
										
						//*Shows docuemnt icon on mouseover* ar.push("<dl class='qm-info' onmouseover='CERN_QUALITY_MEASURES_O1.ShowIcon(this)' onmouseout='CERN_QUALITY_MEASURES_O1.HideIcon(this)'>");
						//*Prints outcome name* ar.push("<dt><span>measure</span></dt><dd class='qm-ic-name'><span>"+recordData.OUTCOMES_INCOMPLETE[j].OUTCOME_NAME+"</span></dd>");
						//*Lauches specific Powerform for outcome* ar.push("<dt><span>measure</span></dt><dd class='qm-doc'><span class='cmp-doc' onclick='CERN_QUALITY_MEASURES_O1.OpenQMDoc("+recordData.OUTCOMES_INCOMPLETE[j].FORM_REF_ID+","+recordData.OUTCOMES_INCOMPLETE[j].FORM_ACT_ID+")'>&nbsp;</span></dd>");
						//*Close dl* ar.push("</dl>");
									
					} //for(var j=0;j<recordData.OUTCOMES_INCOMPLETE.length;j++){ , Loop through each outcome
									
									
				}else{ //(recordData.OUTCOMES_INCOMPLETE.length>0)
					ar.push("<span class='res-none'>",i18n.NO_RESULTS_FOUND,"</span>");
				}			
		
			ar.push("</div>"); //ar.push("<div class='sub-sec-content'>");
		ar.push("</div>");	//ar.push("<div class='sub-sec'>");, Incomplete Section
		
		//Complete Section
		ar.push("<div id='comp" + compId + "' class='sub-sec'>");
				
			ar.push("<h3 class='sub-sec-hd'><span class = 'sub-sec-hd-tgl' title="+i18n.HIDE_SECTION+"></span><span class='sub-sec-title'>"
				+i18n.QM_COMPLETE+" (",recordData.OUTCOMES_COMPLETE.length,")</span></h3>");
			
			//ar.push("<h3 class='sub-sec-hd'><span class = 'expAll' title="+i18n.SHOW_SECTION+">+</span><span class='sub-sec-title'>"
        //+i18n.QM_COMPLETE+" (",recordData.OUTCOMES_COMPLETE.length,")</span></h3>");
					
				ar.push("<div class='sub-sec-content'>");	
	
				if(recordData.OUTCOMES_COMPLETE.length>0){
							
					for(var j=0;j<recordData.OUTCOMES_COMPLETE.length;j++){
										
						//*Create new section for each outcome (ex:VTE Overlap Therapy)
						ar.push("<div class='sub-sub-sec-content'>"); //*001 New class
								
						var tip2 = "TipA" + j; 
										
						var hover2Display = "";
						hover2Display = recordData.OUTCOMES_COMPLETE[j].HOVERDISPLAY;
											
						//Hover Div								
						ar.push("<div id= ",tip2," style='position:absolute; z-index:1;background-color:#FFC;border:1px solid #000; visibility: hidden;'>"
							,hover2Display,"</div>");
									
						//*Create Outcome header with toggle
						ar.push("<h3 class='sub-sec-hd-test'><span class='sub-sec-hd-tgl' title=",i18n.HIDE_SECTION
						,">-</span><span class='sub-sec-title' onmouseover='cerner.lh_quality_measures.prototype.ShowHoverComplete(\"" + recordData.OUTCOMES_COMPLETE[j].HOVERDISPLAY + "\"," + j + ");' onmouseout='cerner.lh_quality_measures.prototype.HideHoverComplete(",j,");'>"
						,recordData.OUTCOMES_COMPLETE[j].OUTCOME_NAME,"</span></h3>");
										
						ar.push("<div class='sub-sec-content'>");
												
						//Loop through each Measure
						for(var k=0;k<recordData.OUTCOMES_COMPLETE[j].MEASURES.length;k++){	
													
							//Reset for each Measure 
							firstTaskFound = 0;
									
							//Create each Measures (ex:Warfarin)
							ar.push("<dl class='qm-info'>");
							ar.push("<dt><span>measure</span></dt><dd class='qm-ic-name'><span>"
								,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].NAME,"</span></dd>");
							ar.push("</dl>");
														
													
							//Create each Measures Data (ex:Order Administer Reconcile)
							ar.push("<dl class='qm-info'>");
							ar.push("<dt>");
							ar.push("<dd class='qm-ic-name-grp'>"); //* New Class 001
									
							//If ORDERS is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ORDERSETIND == 1){
										
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ORDERPRESENTIND == 1){
									ar.push("<span class = 'qm-ic-name-display' id = 'displayOrder'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ORDERCOMPLETEDISPLAY,"</span>");
								} else{
									ar.push("<span class = 'qm-ic-name-display' id = 'displayOrder'>",recordData.ORDERDISPLAY,"</span>");
								}				
								
								firstTaskFound = 1;
							}
			
							//If Collect is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].COLSETIND == 1){
										
								if (firstTaskFound == 1){	
									ar.push(" | ");
								}
										
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].COLPRESENTIND == 1){
									ar.push("<span class = 'qm-ic-name-display' id = 'displayCol'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].COLCOMPLETEDISPLAY,"</span>");
								} else{
									ar.push("<span class = 'qm-ic-name-display' id = 'displayCol'>",recordData.COLDISPLAY,"</span>");
								}	
								
								firstTaskFound = 1;
							}							
														
							//If ADMINISTER is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ADMINSETIND == 1){
								if (firstTaskFound == 1){	
									ar.push(" | ");
								}
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ADMINPRESENTIND == 1){
									ar.push("<span class = 'qm-ic-name-display' id = 'displayAdmin'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ADMINCOMPLETEDISPLAY,"</span>");
								} else {
									ar.push("<span class = 'qm-ic-name-display' id = 'displayAdmin'>",recordData.ADMINDISPLAY,"</span>");
								}
								
								firstTaskFound = 1;
							}
													
							//If PRESCRIBE is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].PRESSETIND == 1){		
								if (firstTaskFound == 1){	
									ar.push(" | ");
								}							
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].PRESPRESENTIND == 1){
									ar.push("<span class = 'qm-ic-name-display' id = 'displayPres'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].PRESCOMPLETEDISPLAY,"</span>");	
								} else{
									ar.push("<span class = 'qm-ic-name-display' id = 'displayPres'>",recordData.PRESDISPLAY,"</span>");	
								}			
								
								firstTaskFound = 1;
							}
													
							//If DOCUMENT is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DOCSETIND == 1){	
								if (firstTaskFound == 1){	
									ar.push(" | ");
								}							
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DOCPRESENTIND == 1){
									
									if (recordData.OUTCOMES_COMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DELAYDITHERIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.DOCDISPLAY,"</span>");							
									} 
									else if (recordData.OUTCOMES_COMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_COMPLETE[j].MEASURES[k].VANCOPRESIND == 1) {
										ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.DOCDISPLAY,"</span>");
									}
									
									else{
											
										ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DOCCOMPLETEDISPLAY,"</span>");	
									}
												
								} else{
									ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>",recordData.DOCDISPLAY,"</span>");	
								}
							
								firstTaskFound = 1;
							} 								
													
							ar.push("</dd>");
							ar.push("</dt>");
							ar.push("</dl>");											
									
									
						} //for(var k=0;k<recordData.OUTCOMES_COMPLETE[j].MEASURES.length;k++){	, Loop through each measure
							
						ar.push("</div>"); //ar.push("<div class='sub-sec-content'>");	
											
											
						//*Close DIV for Outcome
						ar.push("</div>"); //ar.push("<div class='sub-sub-sec-content'>");
										
							
					} //for(var j=0;j<recordData.OUTCOMES_COMPLETE.length;j++){, Loop through each outcome
				}else{
					if(recordData.OUTCOMES_COMPLETE.length===0){
						ar.push("<span class='res-none'>",i18n.NO_RESULTS_FOUND,"</span>");		
					}
				}		
							
				ar.push("</div>"); //ar.push("<div class='sub-sec-content'>");
				
		ar.push("</div>"); //ar.push("<div class='sub-sec'>");, Complete Section
		
		ar.push("</div>"); //ar.push("<div id='condID",compId,"'>");, DIV for Incomplete and Compelete
		ar.push("</div>"); //ar.push("<div class='content-body scrollable'>");
				
	
		}catch(err){
						
						alert("error in QM" + err);
				
		}
	element.innerHTML = ar.join("");
	
	//Add selection events to the drop down box
	//sl014066:  You have to add selection event after the HTML elements have been created because there is no way to pass objects otherwise.
	var dropDown = document.getElementById("qmTask"+compId);
	
	dropDown.onchange = function(element){
		comp.LoadCondition(this.options[this.selectedIndex], comp);
	};
	
	//Init subsection toggles
	//NOTE this will not work outside of Cerner's architecture
	
	MP_Util.Doc.InitSubToggles(element, 'sub-sec-hd-tgl');
		
	//Util.Style.acss(element, 'closed');
}; 


//sl014066: Gloabl function needs to be added to the component's prototype
//sl014066:  As soon as you switch these to prototypes they will no longer work for you because they will be out of scope.  
//I can give you some suggestions on how they should be called and accessed***.
cerner.lh_quality_measures.prototype.ShowHoverComplete = function(strHoverText, idValue){
	var x = "";
	var y = "";
	var tmpID = "TipA" + idValue; 
	var tDIV = document.getElementById(tmpID);
					
	x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
	x = parseInt(x) - parseInt(800);
	y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;
	y = parseInt(y) - parseInt(800);
								
	tDIV.style.left = x;
	tDIV.style.top = y;
	tDIV.style.width = "250px";
	//tDIV.style.cursor = "hand";
	tDIV.style.visibility = "visible";	
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures.prototype.ShowHover = function(strHoverText, idValue){
	var x = "";
	var y = "";
	var tmpID = "Tip" + idValue; 
	var tDIV = document.getElementById(tmpID);
					
	x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
	x = parseInt(x) - parseInt(800);
	y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;
	y = parseInt(y) - parseInt(800);
					
	tDIV.style.left = x;
	tDIV.style.top = y;
	tDIV.style.width = "250px";
	tDIV.style.cursor = "hand";
	tDIV.style.visibility = "visible";	
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures.prototype.HideHoverComplete = function(valueHide){
	var tmpID = "TipA" + valueHide;
	var tDIV = document.getElementById(tmpID);
	tDIV.style.visibility = "hidden";
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures.prototype.HideHover = function(valueHide){
	var tmpID = "Tip" + valueHide;
	var tDIV = document.getElementById(tmpID);
	tDIV.style.visibility = "hidden";	
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures.prototype.OpenQMOrderWindow = function(qmpersonId, qmencntrID){
	
	var orderWindowString = qmpersonId + "|" + qmencntrID + "|";
	orderWindowString += "{ORDER|0|0|0|0|0}";
	orderWindowString += "|24|{2|127}{3|127}|8";
	MP_Util.LogMpagesEventInfo(null,"ORDERS",orderWindowString,"qualitymeasures.js","OpenQMOrderWindow");
	MPAGES_EVENT("Orders",orderWindowString);	
	
};

cerner.lh_quality_measures.prototype.OpenQMOrderProfileWindow = function(qmpersonId, qmencntrID){

	var mrObject = {};
	mrObject = window.external.DiscernObjectFactory("ORDERS");
	mrObject.PersonId = qmpersonId;
 	mrObject.EncntrId = qmencntrID;
 	mrObject.reconciliationMode = 0;
	MP_Util.LogMpagesEventInfo(null,"ORDERS","OpenQMMedsRec","qualitymeasures.js","OpenQMMedsRec");        	
	mrObject.LaunchOrdersMode(0, 0, 0); //2 -  Meds Rec			
	
};	

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures.prototype.OpenQMForm = function(qmpersonId, qmencntrID, formID){

	
	var dPersonId = qmpersonId;
	var dEncounterId = qmencntrID;
	var activityId = 0.0;
	var chartMode = 0;
	var mpObj = window.external.DiscernObjectFactory("POWERFORM");
	mpObj.OpenForm(dPersonId, dEncounterId, formID, activityId, chartMode);		
	
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures.prototype.OpenChartTab = function(tabName, qmpersonId, qmencntrID){
	
	var alink = "";
	var jlink = "";
	var strAppXe = "";
					
	//Verify if the global variable is empty. 
	if (strAppXe == "")
	{
		//Set the default application to PowerChart.exe. This is necessarily for the external Assess window.
		strAppXe = "powerchart.exe";
	}
						
	alink = 'javascript:APPLINK(0,"' + strAppXe + '","/PERSONID=' + qmpersonId + ' /ENCNTRID=' + qmencntrID + ' /FIRSTTAB=^' + tabName + '^");';
						
	if(document.getElementById("hrefLaunchTab"))
	{
		document.body.removeChild(document.getElementById("hrefLaunchTab"));
	}
	jlink =  document.createElement("<a>");
	jlink.id = "hrefLaunchTab";
	jlink.href = alink;
	document.body.appendChild(jlink);
	document.getElementById("hrefLaunchTab").click();
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures.prototype.OpenQMPowerNote = function(noteName, qmpersonId, qmencntrID){
	
	var person_id = qmpersonId;
	var encounter_id = qmencntrID;
	var noteset = "";
	noteset = person_id + "|" + encounter_id + "|";
			
	noteset += noteName;
	noteset += "|0";
	
	var noteXmlStr = MPAGES_EVENT("POWERNOTE", noteset);
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures.prototype.OpenQMMedsRec = function(qmpersonId, qmencntrID){
	
	var mrObject = {};
	mrObject = window.external.DiscernObjectFactory("ORDERS");
	mrObject.PersonId = qmpersonId;
 	mrObject.EncntrId = qmencntrID;
 	mrObject.reconciliationMode = 3;
	MP_Util.LogMpagesEventInfo(null,"ORDERS","OpenQMMedsRec","qualitymeasures.js","OpenQMMedsRec");        	
	mrObject.LaunchOrdersMode(2, 0, 0); //2 -  Meds Rec		
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures.prototype.InitSubToggles = function(par, tog){
	 var i18nCore = i18n.discernabu;
		    var toggleArray = Util.Style.g(tog, par, "span");
		    for (var k=0; k<toggleArray.length; k++) {
		        Util.addEvent(toggleArray[k], "click", MP_Util.Doc.ExpandCollapse);
		        var checkClosed = Util.gp(Util.gp(toggleArray[k]));
		        if (Util.Style.ccss(checkClosed, "closed")) {
		            toggleArray[k].innerHTML = "+";
		            toggleArray[k].title = i18nCore.SHOW_SECTION;
		        }
		    }
};

cerner.lh_quality_measures.prototype.LoadCondition = function(element,comp){
	
	//Get the value selected in the drop down
	var selectedValue = element.value;
	var params = [];
	
	//Create the callback function
	var callback = function(compReference){
		compReference.render();
	}
	
	//Update the cclParams value
	params.push("mine");
	params.push(comp.getProperty("personId"));
	params.push(comp.getProperty("encounterId"));
	params.push(comp.getProperty("userId"));
	params.push(comp.getProperty("positionCd"));
	params.push(comp.getProperty("pprCd"));
	params.push(comp.getOption("encntrFilter"));
	params.push(comp.getOption("lookbackNum"));
	params.push(comp.getOption("lookbackUnit"));
	params.push(selectedValue);
	
	comp.cclParams = params;
	
	//Update the cclProgram value if needed
	//comp.cclProgram = "lh_mp_get_filtered_qual"
	
	comp.setProperty("headerSubTitle", "Loading...");
	
	//call the loadData function which will make the CCL call and load its response into the component.
	comp.loadData(callback);
	
};

MPage.namespace("cerner");
cerner.qm_single_person = function(){};
cerner.qm_single_person.prototype = new MPage.Component();
cerner.qm_single_person.prototype.constructor = MPage.Component;
cerner.qm_single_person.prototype.base = MPage.Component.prototype;
cerner.qm_single_person.prototype.name = "cerner.qm_single_person";
// Set CCL
cerner.qm_single_person.prototype.cclProgram = "qm_single_person_mpage";
cerner.qm_single_person.prototype.cclParams = ["MINE"];
cerner.qm_single_person.prototype.cclDataType = "JSON";

cerner.qm_single_person.prototype.render = function(){
  // Get a handle to the div that is assigned to our component by the mPage framework
  var target = this.getTarget();
  
  // DECLARED FUNCTIONS - BEGIN
  
  // Define the error function - used for CCL error scenarios and failure to connect to Quality Management App
  var displayError = function (errorText) {
    var error = '<div id="qm-mpage-error-page">' +
        '<h3>Quality Management was unable to load successfully.</h3>' +
        '<p>If the problem persists please contact your system administrator.</p><p>Click the Details button for more information.</p>' +
        '<input id="qm-mpage-error-details-btn" type="button" value="Details"></input>' +
        '<div id="qm-mpage-error-details">' + errorText + '</div>' +
        '</div>';

    target.innerHTML = error;

    $("#qm-mpage-error-details-btn").click(function() {
        $("#qm-mpage-error-details").toggle();
    });
  
    $("#qm-mpage-error-details").toggle();
  };

  // Builds an error message for invalid http response and displays it
  var displayHttpError = function (url, request) {
    var errorText = '<dl>' +
                    '<dt>Request URL:</dt><dd>' + url + '</dd>' +
                    '<dt>Request Headers:</dt><dd>' + request.getAllResponseHeaders().replace(/\n/g, '<br>') + '</dd>' +
                    '<dt>Response Status Code:</dt><dd>' + request.status + '</dd>' +
                    '<dt>Response:</dt><dd id="qm-mpage-error-response"></dd>' +
                    '</dl>';
    displayError(errorText);
    $("#qm-mpage-error-response").text(request.responseText);
  };
  
  // Function to submit the OpenId response from Idp to Social Auth
  // The response must be the final view (single person), otherwise error page
  var submitOpenIdResponse = function (url, params) {
    var request = new XMLHttpRequest();
    request.open('POST', url, true);
    request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    request.onreadystatechange = function (eventObj) {
      if (request.readyState === 4) {
        if (request.status === 200) {
          var $response = $(request.responseText);
          // Got the single person view. Render it.
          if ($response.attr('id') === 'popman-mpage-container') {
            renderSinglePerson($response, request.responseText);
          }
          // Response was 200 but not the single person view. Error Out.
          else {
            displayHttpError(url, request);
          }
        }
        // Response was not a 200. Error out.
        else {
            displayHttpError(url, request);
        }
      }
    };
    request.send(params);
  };
  
  // Function to submit the OpenId request generated by Social Auth to the IdP
  // The response will be tje OpenId Response from the IdP
  var performOpenIdRequest = function (url, params) {
    var request = new XMLHttpRequest();
    request.open('POST', url, true);
    request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    
    request.onreadystatechange = function (eventObj) {
      if (request.readyState === 4) {
        if (request.status === 200) {
          // Got an Open Id Response. Need to submit that to social auth
          var formContainer = document.createElement('div'),
          formInputs = null,
          postParams = '',
          actionUrl = null;
          
          formContainer.innerHTML = request.responseText;
          var $form = $(formContainer).find('form');
          actionUrl = $form.attr('action');
          // Either the response did not get a form or the form is invalid
          if (!actionUrl) {
            displayHttpError(url, request);
          }
          formInputs = $form.find('input[type="hidden"]');
          for (var index = 0; index < formInputs.length; index++) {
            postParams = postParams.concat(encodeURIComponent(formInputs[index].name), '=', encodeURIComponent(formInputs[index].value), '&');
          }
          submitOpenIdResponse(actionUrl, postParams);
        }
        //Response was not a 200. Error out.
        else {
            displayHttpError(url, request);
        }
      }
    };
    
    request.send(params);
  };
  
  // Render the single person view.
  // 1) Load css manually (IE will not load CSS after page load)
  // 2) Load js manually
  // 3) Render our single person template inside the mPage component
  var renderSinglePerson = function($response, responseText) {
    // Render single person view in mPage component
    target.innerHTML = responseText;
    
    //Load css
    var css = $response.find('link');
    for (var index = 0; index < css.length; index++) {
      if (document.createStyleSheet) {
        document.createStyleSheet(css[index].href);
      }
      else {
        $("head").append($("<link rel='stylesheet' href='" + css[index].href + "' type='text/css' media='screen/projection' />"));
      }
    }
    
    // Load js - We really should be able to use $response to find script tags. But there seems to
    // be some weird behavior with jQuery where it removes or ignores script tags.
    var scripts = $(target).find('script');
    for (var index = 0; index < scripts.length; index++) {
      $("head").append($("<script src='" + scripts[index].src + "'></script>"));
    }
  };
  
  // DECLARED FUNCTIONS - END
  
  // If errorMsg is populated the CCL script failed (or returned with error) for some reason
  if (this.data.errorMsg !== undefined) {
    displayError(this.data.errorMsg);
    return;
  }
 
  var rootUrl = "https://www.cernercare.com/quality-management/";
  // For non-PROD, the root url is usually configured
  if (this.data.rootUrl !== undefined) {
    rootUrl = this.data.rootUrl;
  }
  
  // Build the Healthe Intent personId
  var personId = "urn:cerner:mid:erm.person:" + this.data.canonicalName + ":" + this.getProperty("personId");
  var url = rootUrl + "mpage/components/singleperson_embedded/?" 
            + "person_id=" + encodeURIComponent(personId)
            + "&millennium_instance=" + encodeURIComponent(this.data.systemAccountId)
            + "&identity_token="  + encodeURIComponent(this.data.identityToken);

  // Make a request to Single Person Embedded View
  var request = new XMLHttpRequest();
  request.open('GET', url, true);
  request.onreadystatechange = function (eventObj) {
    if (request.readyState === 4) {
      if (request.status === 200) {
        var $response = $(request.responseText);
        // If the response is single person view, user is already authenticated. Render the template.
        if ($response.attr('id') === 'popman-mpage-container') {
          renderSinglePerson($response, request.responseText);
        }
        // The response was the open id request generated by social auth. Lets authenticate..
        else if ($response.attr('id') === 'openid_message') {
          var postParams = '',
            actionUrl = $response.attr('action');
            formInputs = $response.find('input[type="hidden"]');
          
          for (var index = 0; index < formInputs.length; index++) {
            postParams = postParams.concat(encodeURIComponent(formInputs[index].name), '=', encodeURIComponent(formInputs[index].value), '&');
          }
          performOpenIdRequest(actionUrl, postParams);
        }
        // We got a 200, but the response was not single person view or open id request. Error out.
        else {
          displayHttpError(url, request);
        }
      }
      // Response code was not 200, error out
      else {
          displayHttpError(url, request);
      }
    }
  };
  request.send(null);
};

/*Custom Component source code Core Measures*/
/*Updateing for 4.2 CCL script*/
MPage.namespace("cerner");

//sl014066:  These are options that are loaded into the components option structure and can be accessable through getOption() and setOption()
var customCompOptions7 = {
	encntrFilter: 2,
	lookbackNum: 2,
	lookbackUnit: 2,
	conditionId: 0.0
};

var Windowstorage = {
    cache: null,
    
    get: function(key){
        if (window.name.length > 0) {
	//    alert(window.name);
            this.cache =  {};
        }
        else {
            this.cache = {};
        }
        return unescape(this.cache[key]);
    },
    
    encodeString: function(value){
        return encodeURIComponent(value).replace(/'/g, "'");
    },
    set: function(key, value){
        this.get();
        if (typeof key != "undefined" && typeof value != "undefined") {
            this.cache[key] = value;
        }
        var jsonString = "{";
        var itemCount = 0;
        for (var item in this.cache) {
            if (itemCount > 0) {
                jsonString += ", ";
            }
            jsonString += "'" + this.encodeString(item) + "':'" + this.encodeString(this.cache[item]) + "'";
            itemCount++;
        }
        jsonString += "}";
        window.name = jsonString;
    },
    del: function(key){
        this.get();
        delete this.cache[key];
        this.serialize(this.cache);
    },
    clear: function(){
        window.name = "";
    }
};

var strStoredIdx = Windowstorage.get("StoredIndex");

MPage.namespace("cerner");
cerner.lh_quality_measures_42 = function(){};
cerner.lh_quality_measures_42.prototype = new MPage.Component();
cerner.lh_quality_measures_42.prototype.constructor = MPage.Component;
cerner.lh_quality_measures_42.prototype.base = MPage.Component.prototype;
cerner.lh_quality_measures_42.prototype.name = "cerner.lh_quality_measures_42"; //Version 4.2
//sl014066:  This is where you can define the script to use when your component loads
cerner.lh_quality_measures_42.prototype.cclProgram = "lh_mp_get_quality_measures_42"; //4.2 ccl script
//sl014066;  You can have predefined parameters here, but most likely you will load the in the init() function
cerner.lh_quality_measures_42.prototype.cclParams = [];
//sl014066:  The custom component framework will create a JavaScript object automagically for you if you set this variable to JSON.  Same deal with XML.
cerner.lh_quality_measures_42.prototype.cclDataType = "JSON";
cerner.lh_quality_measures_42.prototype.init = function(options){
	var params = [];
	
	params.push("mine");
	//sl014066:  Use the getPorperty methods to get properties made accassable through the architecture
	//Those properties inclue; id, parentComp, personId, userId, encounterId, pprCd, staticContent, positionCd, categoryMean, viewableEncounters, headerTitle, headerOverflowState
	params.push(this.getProperty("personId"));
	params.push(this.getProperty("encounterId"));
	params.push(this.getProperty("userId"));
	params.push(this.getProperty("positionCd"));
	params.push(this.getProperty("pprCd"));
	//sl014066:  These are the options defined in the customCompOptions1 variable above.
	//params.push(0);
	params.push(this.getOption("encntrFilter"));
	params.push(this.getOption("lookbackNum"));
	params.push(this.getOption("lookbackUnit"));
	//params.push(this.getOption("conditionId"));
	
	if (!isNaN(strStoredIdx))
	{
		params.push(strStoredIdx);
	}
	else
	{
		params.push(0.0);
	}
	
	this.cclParams = params;
//}
	
};

cerner.lh_quality_measures_42.prototype.render = function(){
	//Takes the data in this.data and loads it into target
	var element = this.getTarget();
	var ar=[];
	var comp = this;
	var compId = this.getComponentUid();
	
	try{
		//sl014066:  No need to parse any JSON since the architecture does it for us
		var jsonObj = this.data;
    	var recordData = jsonObj.RECORD_DATA;
		//sl014066:  If you want to show the total outcomes as a count in the subheader you can use component.setProperty("headerSubTitle", "("+totalOutcomes+")").  See three lines below
		var totalOutcomes=recordData.OUTCOMES_COMPLETE.length+recordData.OUTCOMES_INCOMPLETE.length;
		var custComp = this;
		custComp.setProperty("headerSubTitle", "("+totalOutcomes+")");
		ar.push("<div class='content-body scrollable'>");

		//Show all Qualifying Conditions in drop down list
		ar.push("<div class='qm-cbo'><form><span class='qm-cond-lbl'>", recordData.FILTERDISPLAY, "</span><select id='qmTask",compId,"'>");
			
		//Debugging
		//ar.push("<option value='testing condition 1 id' selected='selected'>testing 1</option>");
		//ar.push("<option value='testing condition 2 id'>testing 2</option>");
		
		var strAlarmClock = "";
		var path = this.getProperty("staticContent");
		var strAlarmIcon = "'" + path + "\\custom-components\\img\\4798_16.png'";
		
		for(var i=0;i<recordData.CONDITIONS.length;i++){
			if(recordData.CONDITIONS[i].CONDITION_ID==recordData.SELECTED_CONDITION_ID)
			{
				ar.push("<option value="+recordData.CONDITIONS[i].CONDITION_ID
						+" selected='selected'>"+recordData.CONDITIONS[i].CONDITION_NAME+"</option>");
			}else{
			ar.push("<option value="+recordData.CONDITIONS[i].CONDITION_ID+">"
					+recordData.CONDITIONS[i].CONDITION_NAME+"</option>");
			}
		}
			
		ar.push("</select></form></div>");	
		
		//DIV for Incomplete and Compelete
		ar.push("<div id='condID",compId,"'>");
		
		//Incomplete Section
		ar.push("<div id='incomp" + compId + "' class='sub-sec'>");
			
			ar.push("<h3 class='sub-sec-hd'><span class='sub-sec-hd-tgl' title=",i18n.HIDE_SECTION,">-</span><span class='sub-sec-title'>"
					,i18n.QM_INCOMPLETE," (",recordData.OUTCOMES_INCOMPLETE.length,")</span></h3>");			
			
			ar.push("<div class='sub-sec-content'>");

			if(recordData.OUTCOMES_INCOMPLETE.length>0)
			{
				for(var j=0;j<recordData.OUTCOMES_INCOMPLETE.length;j++){
										
					//*Create new section for each outcome (ex:VTE Overlap Therapy)
					ar.push("<div class='sub-sub-sec-content'>"); //*001 New class
											
						var tip = "Tip" + j; 
										
						var hoverDisplay = "";
						hoverDisplay = recordData.OUTCOMES_INCOMPLETE[j].HOVERDISPLAY;
	
							//Hover Div								
							ar.push("<div id= ",tip," left='' top='' style='position:absolute; z-index:1000;background-color:#FFC;border:1px solid #000;padding:5px; visibility: hidden;'>"
							,hoverDisplay,"</div>");
							
						//*Create Outcome header with toggle
						
						strAlarmClock = "";
						if (recordData.OUTCOMES_INCOMPLETE[j].SHOWICONIND == '1')
						{
							strAlarmClock += "<span>&nbsp;&nbsp;&nbsp;";
							strAlarmClock += "<img src=" + strAlarmIcon + "/>" ;
							strAlarmClock += "</span>"
						}

						ar.push("<h3 class='sub-sec-hd-test'><span class='sub-sec-hd-tgl' title=",i18n.HIDE_SECTION
							,">-</span><span class='sub-sec-title' onmouseover='cerner.lh_quality_measures_42.prototype.ShowHover(\"" + recordData.OUTCOMES_INCOMPLETE[j].HOVERDISPLAY + "\"," + j + "," + 0 + "," + -15 + ");' onmouseout='cerner.lh_quality_measures_42.prototype.HideHover(",j,");'>"
							,recordData.OUTCOMES_INCOMPLETE[j].OUTCOME_NAME,"</span>",strAlarmClock,"</h3>");
						ar.push("<div class='sub-sec-content'>");
												
							//Loop through each Measure
							for(var k=0;k<recordData.OUTCOMES_INCOMPLETE[j].MEASURES.length;k++){
													
								//Reset for each Measure 
								firstTaskFound = 0;
												
								//Create each Measures (ex:Warfarin)
								ar.push("<dl class='qm-info'>");
								ar.push("<dt><span>measure</span></dt><dd class='qm-ic-name'><span>"
								,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].NAME,"</span></dd>");
								ar.push("</dl>");
													
														
								//Create each Measures Data (ex:Order Administer Reconcile)
								ar.push("<dl class='qm-info'>");
								ar.push("<dt>");
								ar.push("<dd class='qm-ic-name-grp'>"); //* New Class 001								
												
								//If ORDERS is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERSETIND == 1){
													
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERPRESENTIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayInOrder'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERINCOMPLETEDISPLAY,"</span>");
									} else {
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERMEASUREIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERMEASUREIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.ORDERDISPLAY,"</span>");
										} 
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERTASKIND == 1){
											ar.push("<a id = 'openInOrder' onclick='cerner.lh_quality_measures_42.prototype.OpenQMOrderWindow(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ORDERDISPLAY,"</a>");
										} 
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERTASKIND == 2){
											ar.push("<a id = 'openInOrder' onclick='cerner.lh_quality_measures_42.prototype.OpenQMOrderProfileWindow(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ORDERDISPLAY,"</a>");
										}
															
									}
									firstTaskFound = 1;
								
								} 
													
								//If COLLECT is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLSETIND == 1){
													
									if (firstTaskFound == 1){	
										ar.push(" | ");
									}			
												
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLPRESENTIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayInCol'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].OCOLINCOMPLETEDISPLAY,"</span>");
									} else {
										if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTASKIND == 3){
											ar.push("<a id = 'openInColForm' onclick='cerner.lh_quality_measures_42.prototype.OpenQMForm("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + "," +recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLFORMID +")'>",recordData.COLDISPLAY,"</a>");
										}
													
									}
									
									firstTaskFound = 1;
								}									
													
													
								//If ADMINISTER is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINSETIND == 1){
													
									if (firstTaskFound == 1){	
										ar.push(" | ");
									}
											
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINPRESENTIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayInAdmin'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMININCOMPLETEDISPLAY,"</span>");
									} else{
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERMEASUREIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERMEASUREIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.ADMINDISPLAY,"</span>");
										} 
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTASKIND == 2){ //MAR
											ar.push("<a id = 'openInAdminMAR' onclick='cerner.lh_quality_measures_42.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ADMINDISPLAY,"</a>");
										} 
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTASKIND == 3){ //PowerForm
											ar.push("<a id = 'openInAdminForm' onclick='cerner.lh_quality_measures_42.prototype.OpenQMForm("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + "," +recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINFORMID +")'>",recordData.ADMINDISPLAY,"</a>");
										} 
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTASKIND == 4){ //IView
											ar.push("<a id = 'openInAdminView' onclick='cerner.lh_quality_measures_42.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ADMINDISPLAY,"</a>");
										}
															
									}	
				
									firstTaskFound = 1;
								}
													
													
								//If PRESCRIBE is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESSETIND == 1){		
									if (firstTaskFound == 1){	
										ar.push(" | ");
									}
							
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESPRESENTIND == 1){	
										ar.push("<span class = 'qm-ic-name-display' id = 'displayInPres'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESINCOMPLETEDISPLAY,"</span>");				
									} else{
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERACEIPRESIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERPRESAMIIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.PRESDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERARBPRESIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERPRESAMIIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.PRESDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERMEASUREIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERMEASUREIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.PRESDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESTASKIND == 1){ //MOEW
											ar.push("<a id = 'openInPresOrder' onclick='cerner.lh_quality_measures_42.prototype.OpenQMOrderWindow("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.PRESDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESTASKIND == 6){ //MedsRec
											ar.push("<a id = 'openInPresRec' onclick='cerner.lh_quality_measures_42.prototype.OpenQMMedsRec("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.PRESDISPLAY,"</a>");
										}
									}
									
									firstTaskFound = 1;
								}
													
													
								//If DOCUMENT is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCSETIND == 1){	
									
									if (firstTaskFound == 1){	
										ar.push(" | ");
									}							
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCPRESENTIND == 1){	
										
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DELAYDITHERIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].VANCOPRESIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										//PCI Delay = 2
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 2 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DELAYDITHERIND == 2){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else {			
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>" //* New Class 001
											,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCINCOMPLETEDISPLAY,"</span>");				
										}
									} else{
										
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERMEASUREIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERMEASUREIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										} //VTE Oral Factor Xa
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 3 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORALFACTORDITHER == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");	
										}									
										else if (recordData.OUTCOMES_INCOMPLETE[j].ADMINMETIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].CONTRAIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");	
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].PRESMETIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].CONTRAIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");	
										}	
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DELAYDITHERIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].VANCOPRESIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 1){ //MOEW
											ar.push("<a id = 'openInDocOrder' onclick='cerner.lh_quality_measures_42.prototype.OpenQMOrderWindow(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 3){ //PowerForm
											 
											ar.push("<a id = 'openInDocForm' onclick='cerner.lh_quality_measures_42.prototype.OpenQMForm(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + "," + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCFORMID +")'>",recordData.DOCDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 4){ //IVIEW
											ar.push("<a id = 'openInDocView' onclick='cerner.lh_quality_measures_42.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");
										}																	
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 5){ //PowerNote
																
											ar.push("<a id = 'openInDocNote' onclick='cerner.lh_quality_measures_42.prototype.OpenQMPowerNote(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTABNAME + "\"," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");
										}
												
									}	
						
									firstTaskFound = 1;	
								}								
																					
								ar.push("</dd>");
								ar.push("</dt>");
								ar.push("</dl>");
													
							} //for(var k=0;k<recordData.OUTCOMES_INCOMPLETE[j].MEASURES.length;k++){ , Loop through each measure
											
												
						ar.push("</div>");//ar.push("<div class='sub-sec-content'>");	
								
						//*Close DIV for Outcome
						ar.push("</div>"); //ar.push("<div class='sub-sub-sec-content'>"); //*001 New class
										
						//*Shows docuemnt icon on mouseover* ar.push("<dl class='qm-info' onmouseover='CERN_QUALITY_MEASURES_O1.ShowIcon(this)' onmouseout='CERN_QUALITY_MEASURES_O1.HideIcon(this)'>");
						//*Prints outcome name* ar.push("<dt><span>measure</span></dt><dd class='qm-ic-name'><span>"+recordData.OUTCOMES_INCOMPLETE[j].OUTCOME_NAME+"</span></dd>");
						//*Lauches specific Powerform for outcome* ar.push("<dt><span>measure</span></dt><dd class='qm-doc'><span class='cmp-doc' onclick='CERN_QUALITY_MEASURES_O1.OpenQMDoc("+recordData.OUTCOMES_INCOMPLETE[j].FORM_REF_ID+","+recordData.OUTCOMES_INCOMPLETE[j].FORM_ACT_ID+")'>&nbsp;</span></dd>");
						//*Close dl* ar.push("</dl>");
									
					} //for(var j=0;j<recordData.OUTCOMES_INCOMPLETE.length;j++){ , Loop through each outcome
									
									
				}else{ //(recordData.OUTCOMES_INCOMPLETE.length>0)
					ar.push("<span class='res-none'>",i18n.NO_RESULTS_FOUND,"</span>");
				}			
		
			ar.push("</div>"); //ar.push("<div class='sub-sec-content'>");
		ar.push("</div>");	//ar.push("<div class='sub-sec'>");, Incomplete Section
		
		//Complete Section
		ar.push("<div id='comp" + compId + "' class='sub-sec'>");
				
			ar.push("<h3 class='sub-sec-hd'><span class = 'sub-sec-hd-tgl' title="+i18n.HIDE_SECTION+"></span><span class='sub-sec-title'>"
				+i18n.QM_COMPLETE+" (",recordData.OUTCOMES_COMPLETE.length,")</span></h3>");
			
				ar.push("<div class='sub-sec-content'>");	
	
				if(recordData.OUTCOMES_COMPLETE.length>0){
							
					for(var j=0;j<recordData.OUTCOMES_COMPLETE.length;j++){
										
						//*Create new section for each outcome (ex:VTE Overlap Therapy)
						ar.push("<div class='sub-sub-sec-content'>"); //*001 New class
								
						var tip2 = "TipA" + j; 
										
						var hover2Display = "";
						hover2Display = recordData.OUTCOMES_COMPLETE[j].HOVERDISPLAY;
											
						//Hover Div								
						ar.push("<div id= ",tip2," style='position:absolute; z-index:1;background-color:#FFC;border:1px solid #000; visibility: hidden;'>"
							,hover2Display,"</div>");
						
						strAlarmClock = "";
						if (recordData.OUTCOMES_COMPLETE[j].SHOWICONIND == '1')
						{
							strAlarmClock += "<span>&nbsp;&nbsp;&nbsp;";
							strAlarmClock += "<img src=" + strAlarmIcon + "/>" ;
							strAlarmClock += "</span>"
						}
									
						//*Create Outcome header with toggle
						ar.push("<h3 class='sub-sec-hd-test'><span class='sub-sec-hd-tgl' title=",i18n.HIDE_SECTION
						,">-</span><span class='sub-sec-title' onmouseover='cerner.lh_quality_measures_42.prototype.ShowHoverComplete(\"" + recordData.OUTCOMES_COMPLETE[j].HOVERDISPLAY + "\"," + j + ");' onmouseout='cerner.lh_quality_measures_42.prototype.HideHoverComplete(",j,");'>"
						,recordData.OUTCOMES_COMPLETE[j].OUTCOME_NAME,"</span>",strAlarmClock,"</h3>");
										
						ar.push("<div class='sub-sec-content'>");
												
						//Loop through each Measure
						for(var k=0;k<recordData.OUTCOMES_COMPLETE[j].MEASURES.length;k++){	
													
							//Reset for each Measure 
							firstTaskFound = 0;
									
							//Create each Measures (ex:Warfarin)
							ar.push("<dl class='qm-info'>");
							ar.push("<dt><span>measure</span></dt><dd class='qm-ic-name'><span>"
								,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].NAME,"</span></dd>");
							ar.push("</dl>");
														
													
							//Create each Measures Data (ex:Order Administer Reconcile)
							ar.push("<dl class='qm-info'>");
							ar.push("<dt>");
							ar.push("<dd class='qm-ic-name-grp'>"); //* New Class 001
									
							//If ORDERS is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ORDERSETIND == 1){
										
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ORDERPRESENTIND == 1){
									ar.push("<span class = 'qm-ic-name-display' id = 'displayOrder'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ORDERCOMPLETEDISPLAY,"</span>");
								} else{
									ar.push("<span class = 'qm-ic-name-display' id = 'displayOrder'>",recordData.ORDERDISPLAY,"</span>");
								}				
								
								firstTaskFound = 1;
							}
			
							//If Collect is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].COLSETIND == 1){
										
								if (firstTaskFound == 1){	
									ar.push(" | ");
								}
										
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].COLPRESENTIND == 1){
									ar.push("<span class = 'qm-ic-name-display' id = 'displayCol'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].COLCOMPLETEDISPLAY,"</span>");
								} else{
									ar.push("<span class = 'qm-ic-name-display' id = 'displayCol'>",recordData.COLDISPLAY,"</span>");
								}	
								
								firstTaskFound = 1;
							}							
														
							//If ADMINISTER is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ADMINSETIND == 1){
								if (firstTaskFound == 1){	
									ar.push(" | ");
								}
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ADMINPRESENTIND == 1){
									ar.push("<span class = 'qm-ic-name-display' id = 'displayAdmin'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ADMINCOMPLETEDISPLAY,"</span>");
								} else {
									ar.push("<span class = 'qm-ic-name-display' id = 'displayAdmin'>",recordData.ADMINDISPLAY,"</span>");
								}
								
								firstTaskFound = 1;
							}
													
							//If PRESCRIBE is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].PRESSETIND == 1){		
								if (firstTaskFound == 1){	
									ar.push(" | ");
								}							
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].PRESPRESENTIND == 1){
									ar.push("<span class = 'qm-ic-name-display' id = 'displayPres'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].PRESCOMPLETEDISPLAY,"</span>");	
								} else{
									ar.push("<span class = 'qm-ic-name-display' id = 'displayPres'>",recordData.PRESDISPLAY,"</span>");	
								}			
								
								firstTaskFound = 1;
							}
													
							//If DOCUMENT is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DOCSETIND == 1){	
								if (firstTaskFound == 1){	
									ar.push(" | ");
								}							
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DOCPRESENTIND == 1){
									
									if (recordData.OUTCOMES_COMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DELAYDITHERIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.DOCDISPLAY,"</span>");							
									} 
									else if (recordData.OUTCOMES_COMPLETE[j].DITHERDOCIND == 2 && recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DELAYDITHERIND == 2){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.DOCDISPLAY,"</span>");							
									} 
									else if (recordData.OUTCOMES_COMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_COMPLETE[j].MEASURES[k].VANCOPRESIND == 1) {
										ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.DOCDISPLAY,"</span>");
									}
									
									else{
											
										ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DOCCOMPLETEDISPLAY,"</span>");	
									}
												
								} else{
									ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>",recordData.DOCDISPLAY,"</span>");	
								}
							
								firstTaskFound = 1;
							} 								
													
							ar.push("</dd>");
							ar.push("</dt>");
							ar.push("</dl>");											
									
									
						} //for(var k=0;k<recordData.OUTCOMES_COMPLETE[j].MEASURES.length;k++){	, Loop through each measure
							
						ar.push("</div>"); //ar.push("<div class='sub-sec-content'>");	
											
											
						//*Close DIV for Outcome
						ar.push("</div>"); //ar.push("<div class='sub-sub-sec-content'>");
										
							
					} //for(var j=0;j<recordData.OUTCOMES_COMPLETE.length;j++){, Loop through each outcome
				}else{
					if(recordData.OUTCOMES_COMPLETE.length===0){
						ar.push("<span class='res-none'>",i18n.NO_RESULTS_FOUND,"</span>");		
					}
				}		
							
				ar.push("</div>"); //ar.push("<div class='sub-sec-content'>");
				
		ar.push("</div>"); //ar.push("<div class='sub-sec'>");, Complete Section
		
		ar.push("</div>"); //ar.push("<div id='condID",compId,"'>");, DIV for Incomplete and Compelete
		ar.push("</div>"); //ar.push("<div class='content-body scrollable'>");
				
	
		}catch(err){
						
						alert("error in QM" + err);
				
		}
	element.innerHTML = ar.join("");
	
	//Add selection events to the drop down box
	//sl014066:  You have to add selection event after the HTML elements have been created because there is no way to pass objects otherwise.
	var dropDown = document.getElementById("qmTask"+compId);
	
	dropDown.onchange = function(element){
		Windowstorage.set("StoredIndex",this.value);
		comp.LoadCondition(this.options[this.selectedIndex], comp);
	};
	
	//Init subsection toggles
	//NOTE this will not work outside of Cerner's architecture
	
	MP_Util.Doc.InitSubToggles(element, 'sub-sec-hd-tgl');
		
	//Util.Style.acss(element, 'closed');
}; 


//sl014066: Gloabl function needs to be added to the component's prototype
//sl014066:  As soon as you switch these to prototypes they will no longer work for you because they will be out of scope.  
//I can give you some suggestions on how they should be called and accessed***.
cerner.lh_quality_measures_42.prototype.ShowHoverComplete = function(strHoverText, idValue){
	var x = "";
	var y = "";
	var tmpID = "TipA" + idValue; 
	var tDIV = document.getElementById(tmpID);
			
	x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
	x = parseInt(x) - parseInt(800);
	y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;
	y = parseInt(y) - parseInt(800);
								
	tDIV.style.left = x;
	tDIV.style.top = y;
	tDIV.style.width = "250px";
	//tDIV.style.cursor = "hand";
	tDIV.style.visibility = "visible";	
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_42.prototype.ShowHover = function(strHoverText, idValue, xOffSet, yOffSet){
	var x = "";
	var y = "";
	var tmpID = "Tip" + idValue; 
	var tDIV = document.getElementById(tmpID);

	x = tDIV.getAttribute('left')
	y = tDIV.getAttribute('top')
	
	var curleft = tDIV.offsetLeft;
	var curtop = tDIV.offsetTop;
	
	if (x == '' && y == '')
	{
		x = curleft;
		tDIV.setAttribute('left',x);
		y = curtop;
		tDIV.setAttribute('top',y);
	}
	else
	{
		x = parseInt(x);
		y = parseInt(y);
	}
	
	x = parseInt(x) - parseInt(xOffSet);
	y = parseInt(y) - parseInt(yOffSet);

	tDIV.style.left = x;
	tDIV.style.top = y;
	
	tDIV.style.width = "250px";
	tDIV.style.cursor = "hand";
	tDIV.style.visibility = "visible";	
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_42.prototype.HideHoverComplete = function(valueHide){
	var tmpID = "TipA" + valueHide;
	var tDIV = document.getElementById(tmpID);
	tDIV.style.visibility = "hidden";
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_42.prototype.HideHover = function(valueHide){
	var tmpID = "Tip" + valueHide;
	var tDIV = document.getElementById(tmpID);
	tDIV.style.visibility = "hidden";	
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_42.prototype.OpenQMOrderWindow = function(qmpersonId, qmencntrID){
	
	var orderWindowString = qmpersonId + "|" + qmencntrID + "|";
	orderWindowString += "{ORDER|0|0|0|0|0}";
	orderWindowString += "|24|{2|127}{3|127}|8";
	MP_Util.LogMpagesEventInfo(null,"ORDERS",orderWindowString,"qualitymeasures.js","OpenQMOrderWindow");
	MPAGES_EVENT("Orders",orderWindowString);	
	
};

cerner.lh_quality_measures_42.prototype.OpenQMOrderProfileWindow = function(qmpersonId, qmencntrID){

	var mrObject = {};
	mrObject = window.external.DiscernObjectFactory("ORDERS");
	mrObject.PersonId = qmpersonId;
 	mrObject.EncntrId = qmencntrID;
 	mrObject.reconciliationMode = 0;
	MP_Util.LogMpagesEventInfo(null,"ORDERS","OpenQMMedsRec","qualitymeasures.js","OpenQMMedsRec");        	
	mrObject.LaunchOrdersMode(0, 0, 0); //2 -  Meds Rec			
	
};	

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_42.prototype.OpenQMForm = function(qmpersonId, qmencntrID, formID){

	
	var dPersonId = qmpersonId;
	var dEncounterId = qmencntrID;
	var activityId = 0.0;
	var chartMode = 0;
	var mpObj = window.external.DiscernObjectFactory("POWERFORM");
	mpObj.OpenForm(dPersonId, dEncounterId, formID, activityId, chartMode);		
	
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_42.prototype.OpenChartTab = function(tabName, qmpersonId, qmencntrID){
	
	var alink = "";
	var jlink = "";
	var strAppXe = "";
					
	//Verify if the global variable is empty. 
	if (strAppXe == "")
	{
		//Set the default application to PowerChart.exe. This is necessarily for the external Assess window.
		strAppXe = "powerchart.exe";
	}
						
	alink = 'javascript:APPLINK(0,"' + strAppXe + '","/PERSONID=' + qmpersonId + ' /ENCNTRID=' + qmencntrID + ' /FIRSTTAB=^' + tabName + '^");';
						
	if(document.getElementById("hrefLaunchTab"))
	{
		document.body.removeChild(document.getElementById("hrefLaunchTab"));
	}
	jlink =  document.createElement("<a>");
	jlink.id = "hrefLaunchTab";
	jlink.href = alink;
	document.body.appendChild(jlink);
	document.getElementById("hrefLaunchTab").click();
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_42.prototype.OpenQMPowerNote = function(noteName, qmpersonId, qmencntrID){
	
	var person_id = qmpersonId;
	var encounter_id = qmencntrID;
	var noteset = "";
	noteset = person_id + "|" + encounter_id + "|";
			
	noteset += noteName;
	noteset += "|0";
	
	var noteXmlStr = MPAGES_EVENT("POWERNOTE", noteset);
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_42.prototype.OpenQMMedsRec = function(qmpersonId, qmencntrID){
	
	var mrObject = {};
	mrObject = window.external.DiscernObjectFactory("ORDERS");
	mrObject.PersonId = qmpersonId;
 	mrObject.EncntrId = qmencntrID;
 	mrObject.reconciliationMode = 3;
	MP_Util.LogMpagesEventInfo(null,"ORDERS","OpenQMMedsRec","qualitymeasures.js","OpenQMMedsRec");        	
	mrObject.LaunchOrdersMode(2, 0, 0); //2 -  Meds Rec		
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_42.prototype.InitSubToggles = function(par, tog){
	 var i18nCore = i18n.discernabu;
		    var toggleArray = Util.Style.g(tog, par, "span");
		    for (var k=0; k<toggleArray.length; k++) {
		        Util.addEvent(toggleArray[k], "click", MP_Util.Doc.ExpandCollapse);
		        var checkClosed = Util.gp(Util.gp(toggleArray[k]));
		        if (Util.Style.ccss(checkClosed, "closed")) {
		            toggleArray[k].innerHTML = "+";
		            toggleArray[k].title = i18nCore.SHOW_SECTION;
		        }
		    }
};

cerner.lh_quality_measures_42.prototype.LoadCondition = function(element,comp){
	
	//Get the value selected in the drop down
	var selectedValue = element.value;
	var params = [];
	
	//Create the callback function
	var callback = function(compReference){
		compReference.render();
	}
	
	//Update the cclParams value
	params.push("mine");
	params.push(comp.getProperty("personId"));
	params.push(comp.getProperty("encounterId"));
	params.push(comp.getProperty("userId"));
	params.push(comp.getProperty("positionCd"));
	params.push(comp.getProperty("pprCd"));
	params.push(comp.getOption("encntrFilter"));
	params.push(comp.getOption("lookbackNum"));
	params.push(comp.getOption("lookbackUnit"));
	params.push(selectedValue);
	
	comp.cclParams = params;
	
	//Update the cclProgram value if needed
	//comp.cclProgram = "lh_mp_get_filtered_qual"
	
	comp.setProperty("headerSubTitle", "Loading...");
	
	//call the loadData function which will make the CCL call and load its response into the component.
	comp.loadData(callback);
	
};

////////////////////// MDA custom components
/**
 * Options for the Provide/MDA domains
 * 
 * Contains eventset codes 
 */
cerner.options = {};

cerner.options.Pathology = {};

cerner.options.Pathology.mda = {
	"lookbackUnit" : 6,	// amount
	"lookbackType" : 4,	// Flag  1 = Hours, 2 = Days, 3 = Weeks, 4 = Months , 5 = Years
	"document" : {
		// Pathology Reports event set	4003743.0
		"eventCode" : 4003743.0
	},
	"resultsToShow" : ["result1", "result2", "result3"],
	"result1" : {
		// estrogen receptor (er)	ec: 22972693.0
		"eventCode" : 22972693.0
	},
	"result2" : {
		// progesterone receptor (pr)	ec: 22972700.0
		"eventCode" : 22972700.0
	},
	"result3" : {
		// human epid growth factor rec 2 (her2) ec: 22972706.0
		"eventCode" : 22972706.0
	}
};

cerner.options.Pathology.provide = {
	"lookbackUnit" : 6,	// amount
	"lookbackType" : 4,	// Flag  1 = Hours, 2 = Days, 3 = Weeks, 4 = Months , 5 = Years
	"document" : {
		"eventCode" : 14883671.0
	},
	"resultsToShow" : ["result1", "result2", "result3"],
	"result1" : {
		"eventCode" : 2520063167.0
	},
	"result2" : {
		"eventCode" : 2520063173.0
	},
	"result3" : {
		"eventCode" : 12003819.0
	}
};


/********************************************************************
 * Pathology component
 * 
 * @returns {cerner.Pathology}
 */
cerner.Pathology = function(){};
cerner.Pathology.prototype = new MPage.Component();
cerner.Pathology.prototype.constructor = MPage.Component;
cerner.Pathology.prototype.base = MPage.Component.prototype;
cerner.Pathology.name = "cerner.Pathology";

cerner.Pathology.prototype.init = function (options) {
	this.data = {};
};

/**
 * Override load data to call custom methods for retrieving data
 * 
 * @param callback
 */
cerner.Pathology.prototype.loadData = function (callback) {
	var self = this;
	var componentData = this.data;
    //callback(component);
	this.getDocuments(['document'], function (data) {
		var prop;
		for (prop in data) {
			componentData[prop] = data[prop];
		}
		
		var dochtml = self.renderDoc('document');
		$(self.getTarget()).find('.document.content-body').html(dochtml);
	});
	
	this.getResults(self.options.resultsToShow, function (data) {
		var prop;
		for (prop in data) {
			componentData[prop] = data[prop];
		}
		
		var html = self.renderResults(self.options.resultsToShow);
		$(self.getTarget()).find('.results.content-body').html(html);
	}, 2);
	
	
	callback(this);
};

cerner.Pathology.prototype.render = function () {
	var component = this;
	var element = this.getTarget();
	
	$(this.getTarget()).addClass('myPathology');

	//var dochtml = this.renderDoc(this.data['document']);
	//var resultsHtml = [];
	
	element.innerHTML = '<div class="document content-body"></div><div class="results content-body"></div>';
};

cerner.Pathology.prototype.renderDoc = function (dataName) {
	var component = this;
	var docData = this.data[dataName];
	
	//This function will generate an HTML string for each document with its detail info (hover detail)
	function singleRowDocHTML(docData)
	{	
		if (!docData) {
			// no documents found
			return '<dl class="doc-info"><dd class="doc-cat"><span class="res-none">No documents found</span></dd><dd class="doc-auth"><span>&nbsp;</span></dd><dd class="doc-dt"><span class="date-time">&nbsp;</span></dd><dd class="doc-image">&nbsp;</dd></dl>';
		}

		var compNS = "doc";
		var DocI18n = i18n.discernabu.documents_o1;
		var df = new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
		var jsHTML = [];
	
		var dtHvr = "", lastPrsnl = "";
		var author = DocI18n.UNKNOWN;
		var authorID = 0.0;
		var docObj = docData;
		//recordRawDataArray.push(docObj);
		var patId = docObj.PERSON_ID + ".0";
		var enctrId = docObj.ENCNTR_ID + ".0";
		var evntId = docObj.EVENT_ID + ".0";
		var docStatus = docObj.RESULT_STATUS_CD_MEAN;
		var doc = docObj.EVENT_CD_DISP;
		var parentEventId = docObj.PARENT_EVENT_ID + ".0";
		var viewerType = docObj.VIEWER_TYPE;	
		var dateOfService = null;
		var withinDateDos = null;
		var dateTime = new Date();

		//FACE UP DATE
		if(docObj.EFFECTIVE_DT_TM) {
			dateTime.setISO8601(docObj.EFFECTIVE_DT_TM);
			dateOfService = MP_Util.DisplayDateByOption(component,dateTime);
			withinDateDos = MP_Util.CalcWithinTime(dateTime);
		}
		else {
			dateOfService = DocI18n.UNKNOWN;
			withinDateDos = DocI18n.UNKNOWN;
		}

		//info related to participation
		var recentPart = getLatestParticipation(docObj);
		var authorPart = getAuthorParticipant(docObj);
		if(authorPart) {
			author = authorPart.PRSNL_NAME;
			authorID = authorPart.PRSNL_ID;
		}
		if(recentPart && recentPart.PRSNL_NAME !== "") {
			lastPrsnl = recentPart.PRSNL_NAME;
			var dtTm = new Date();
			if(recentPart.DATE !== "") {
				dtTm.setISO8601(recentPart.DATE);
				dtHvr = df.format(dtTm, mp_formatter.DateTimeFormatter.FULL_DATE_TIME_4YEAR);
			}
			else {
				dtHvr = DocI18n.UNKNOWN;
			}
		}
		else {
			lastPrsnl = DocI18n.UNKNOWN;
			dtHvr = DocI18n.UNKNOWN;
		}
		
		jsHTML.push("<dl class='", compNS, "-info'><dd class='", compNS + "-cat'><span>", MP_Util.CreateClinNoteLink(patId, enctrId, evntId, doc, viewerType, parentEventId), "</span>");
		if(docStatus === "MODIFIED" || docStatus === "ALTERED") 
		{
			jsHTML.push("<span class='res-modified'>&nbsp;</span>");
		}
		jsHTML.push("</dd>");
		jsHTML.push("<dd class='", compNS, "-auth'><span>", author, "</span></dd>");
		if(component.getDateFormat() == 3) {//1 = date only,2= date/time and 3 = elapsed time
			jsHTML.push("<dd class='", compNS, "-dt'><span class='date-time'>", withinDateDos, "</span></dd>");
		}
		else {
			jsHTML.push("<dd class='", compNS, "-dt'><span class='date-time'>", dateOfService, "</span></dd>");
		}
		//retrieve document images
		jsHTML.push("<dd class='", compNS, "-image'>");
		if(docObj.IMAGE_URL !== "") {
			var urlParam = 'javascript:MPAGES_SVC_EVENT("' + docObj.IMAGE_URL + '",^MINE,$PAT_PersonId$^)';
			jsHTML.push("<a class='", compNS, "-image-found' href='", urlParam, "'>&nbsp;</a>");
		}
		else {
			jsHTML.push("&nbsp;");
		}
		jsHTML.push("</dd></dl>");
		
		//Build the hover
		//jsHTML.push("<h4 class='det-hd'><span>", DocI18n.DOCUMENTATION_DETAILS, "</span></h4><div class='hvr'><dl class='", compNS, "-det'><dt><span>", DocI18n.NAME, ":</span></dt><dd class='", compNS, "-det-name'><span>", doc, "</span></dd><dt><span>", DocI18n.SUBJECT, ":</span></dt><dd class='", compNS, "-det-subj'><span>", docObj.SUBJECT, "</span></dd><dt><span>", DocI18n.STATUS, ":</span></dt><dd class='", compNS, "-det-status'><span>", docObj.RESULT_STATUS_CD_DISP, "</span></dd><dt><span>", DocI18n.LAST_UPDATED, ":</span></dt><dd class='", compNS, "-det-dt'><span>", dtHvr, "</span></dd><dt><span>", DocI18n.LAST_UPDATED_BY, ":</span></dt><dd class='", compNS, "-det-dt'><span>", lastPrsnl, "</span></dd></dl></div>");

		return jsHTML.join('');
	}
	
	function getLatestParticipation(doc) {
		var returnPart = null;
		for(var x = doc.ACTION_PROVIDERS.length; x--; ) {
			var part = doc.ACTION_PROVIDERS[x];
			if(!returnPart || part.DATE > returnPart.DATE) {
				returnPart = part;
			}
		}
		return (returnPart);
	}

	function getAuthorParticipant(doc) {
		//the author of a document, according to doc services, will be on the Contribution object.  Its the PERFORM action in the participation list.
		var returnPart = null, type_cd = null, status_cd = null, part = null, strPerform = "PERFORM", strCompleted = "COMPLETED";
		for(var y = doc.ACTION_PROVIDERS.length; y--; ) {
			part = doc.ACTION_PROVIDERS[y];
			type_cd = part.TYPE_CD_MEANING;
			status_cd = part.STATUS_CD_MEANING;
			if((type_cd === strPerform) && (status_cd === strCompleted)) {
				returnPart = part;
				break;
			}
		}
		return (returnPart);
	}

	return singleRowDocHTML(docData);
};


cerner.Pathology.prototype.renderResults = function (resultNames) {
	var component = this;
	
	var html = [];
		
	var i;
	var measurement;
	for (i = 0; i < resultNames.length; i++) {
		measurement = this.data[resultNames[i]];

		// borrowing styles from pathology
		html.push('<dl class="path-info ' , (i)%2 === 0 ? 'even' : 'odd' ,'">');
		
		if (measurement && measurement.length) {
			html.push('<dd class="path-cat">');
			html.push(measurement ? measurement[0].getEventCode().display : '-');
			html.push('</dd>');
			
			html.push('<dd class="path-dt">');
			// MP_Util.Measurement.GetNormalcyResultDisplay(troponinResults[t], false)
			//html.push(this.getResultString(measurement.getResult()));
			html.push(measurement ? MP_Util.Measurement.GetNormalcyResultDisplay(measurement[0], false) : '-');
			html.push('</dd>');
	
			html.push('<dd class="path-dt">');
			html.push(measurement ? MP_Util.Measurement.GetNormalcyResultDisplay(measurement[1], false) : '-');
			html.push('</dd>');
		} else {
			html.push('<dd class="path-cat">');
			html.push(measurement ? measurement.getEventCode().display : '-');
			html.push('</dd>');
			
			html.push('<dd class="path-dt">');
			html.push(measurement ? MP_Util.Measurement.GetNormalcyResultDisplay(measurement, false) : '-');
			html.push('</dd>');

			html.push('<dd class="path-dt">');
			html.push('-');
			html.push('</dd>');

		}
		
		html.push('</dl>');
	}
	
	return html.join('');
};

/**
 * 
 * @param result
 * 		the object from Measurement.getResult()
 * @returns
 */
cerner.Pathology.prototype.getResultString = function (result) {
	if (!result) {
		return "-";
	}
	
	return result.toString();
};


/**
 * Gets clinical results based on the list of names of the clinical results to bring back.
 * 
 * Event codes/sets are looked based on the supplied names, and are used to find clinical results.
 * So these names must match the attributes in the custom component options object.
 * 
 * @param namesList
 * 		an array of names of clinical results to get. the names much be the same as the attributes in the custom component options object.
 * 
 * @param callback
 * 		a callback function for handling the response... where callback = function(respons) {...};
 *
 * @param resultCount
 * 		number of results to bring back for each item in the namesList
 */
cerner.Pathology.prototype.getResults = function (namesList, callback, resultCount) {
	var i,
		options = this.options,
		optionsAttribute,
		eventCodes = [],
		eventSets = [];
	
	var reverseLookup = {};
	
	// default resultCount to 1 if unspecified
	if (!resultCount) {
		resultCount = 1;
	}
	
	// have to separate the event codes from the event set.
	// the mp_retrieve_n_results_json script doesn't like being supplied with both event codes and set (so we have to split them and make 2 calls)
	for (i = 0; i < namesList.length; i++) {
		optionsAttribute = options[namesList[i]];
		if (optionsAttribute.eventCode) {
			eventCodes.push(optionsAttribute.eventCode);
			reverseLookup[optionsAttribute.eventCode] = namesList[i];
		} else {
			eventSets.push(optionsAttribute.eventSetCode);
			reverseLookup[optionsAttribute.eventSetCode] = namesList[i];
		}
	}
	
	/**
	 * Handles the replies from the ccl call and molds the data to a more relevant and easier to use format
	 * before passing the data onto the callback.
	 * 
	 */
	var repliesHandler = function (replies) {
		var data = {};
		var j, k;
		var optionsAttribute;
		var code;
 
		for (j = 0; j < replies.length; j++) {
			if (replies[j].getStatus() === "S") {
				var codeArray = MP_Util.LoadCodeListJSON(replies[j].getResponse().CODES);
			    var results = replies[j].getResponse().RESULTS;
			    for (var i = 0, il = results.length; i < il; i++) {
			    	var result = results[i];
			        if (result.CLINICAL_EVENTS.length > 0) {
		                var meas = result.CLINICAL_EVENTS[0];
		                var measurements = [];
		                
		                for (k = 0; k < meas.MEASUREMENTS.length; k++) {
		                    var measurement = new MP_Core.Measurement();
		                    measurement.initFromRec(meas.MEASUREMENTS[k], codeArray);
		                    measurement.normalizedCode = result.EVENT_CD ? result.EVENT_CD : result.EVENT_SET_CD;
		                    
		                    measurements.push(measurement);
		                }
		                
		                data[reverseLookup[measurement.normalizedCode]] = measurements.length === 1? measurements[0] : measurements;
			        }
		        }
		    }
		}
		
		callback(data);
	};

    var component = this;
    var mgr = new MP_Core.XMLCCLRequestThreadManager(repliesHandler, component, false);
    var programName = "MP_RETRIEVE_N_RESULTS_JSON";

    var criterion = this.getCriterion();
    var lookbackUnit = options.lookbackUnit;
    var lookbackType = options.lookbackType;
    
    var sEventCodes = MP_Util.CreateParamArray(eventCodes,1);
    var sEventSets = MP_Util.CreateParamArray(eventSets,1);
    var eventCodeArgs = [];
    var eventSetArgs = [];
    var requestEC, requestES;
    
    if (eventCodes.length) {
        eventCodeArgs.push("^MINE^", criterion.person_id + ".0", "0.0", criterion.provider_id + ".0", 
                criterion.ppr_cd + ".0", resultCount, "^^", "0.0", sEventCodes, lookbackUnit, lookbackType, 1, "^^","^^",0);

        requestEC = new MP_Core.ScriptRequest(component, "ENG:MPG.MEASBASE.O1 - load advisor ec");
        requestEC.setProgramName(programName);
        requestEC.setParameters(eventCodeArgs);
        requestEC.setAsync(true);
        
        thread = new MP_Core.XMLCCLRequestThread("Advisor Event Codes", component, requestEC);
        mgr.addThread(thread);    	
    }
    
    if (eventSets.length) {
	    eventSetArgs.push("^MINE^", criterion.person_id + ".0", "0.0", criterion.provider_id + ".0", 
	            criterion.ppr_cd + ".0", 1, "^^", sEventSets, "0.0", lookbackUnit, lookbackType, 1, "^^","^^",0);
	
	    requestES = new MP_Core.ScriptRequest(component, "ENG:MPG.MEASBASE.O1 - load advisor es");
	    requestES.setProgramName(programName);
	    requestES.setParameters(eventSetArgs);
	    requestES.setAsync(true);
	    
	    thread = new MP_Core.XMLCCLRequestThread("Advisor Event Set", component, requestES);
	    mgr.addThread(thread);
    }

	mgr.begin();
	
};

/**
 * 
 * @param namesList
 * @param callback
 */
cerner.Pathology.prototype.getDocuments = function (namesList, callback, docCount) {
	var i,
	options = this.options,
	optionsAttribute,
	eventCodes = [];
	
	// default docCount to 1 if unspecified
	if (!docCount) {
		docCount = 1;
	}	

	var reverseLookup = {};
	
	// have to separate the event codes from the event set.
	// the mp_retrieve_n_results_json script doesn't like being supplied with both event codes and set (so we have to split them and make 2 calls)
	for (i = 0; i < namesList.length; i++) {
		optionsAttribute = options[namesList[i]];
		if (optionsAttribute.eventCode) {
			eventCodes.push(optionsAttribute.eventCode);
			reverseLookup[optionsAttribute.eventCode] = namesList[i];
		}
	}
	
	
	/**
	 * Handles the replies from the ccl call and molds the data to a more relevant and easier to use format
	 * before passing the data onto the callback.
	 * 
	 */
	var repliesHandler = function (replies) {
		var data = {};
		var countText = "";
		
		for(var repCnt = replies.length; repCnt--; ) {
			var reply = replies[repCnt];
			var repStatus = reply.getStatus();
			if(repStatus == "F") {
				errMsg.push(reply.getError());
				MP_Util.Doc.FinalizeComponent(MP_Util.HandleErrorResponse(component.getStyles().getNameSpace(), errMsg.join("<br />")), component, "");
			}
			else {
				if(repStatus == "S") {
					var recordData = reply.getResponse();

					// sort array based on date, decending/most recent order
					recordData.DOCS.sort(function(a, b) {
						if (a.UPDATE_DT_TM < b.UPDATE_DT_TM) {
							return 1;
						}

						if (a.UPDATE_DT_TM > b.UPDATE_DT_TM) {
							return -1;
						}
						// a must be equal to b
						return 0;
					});
					
					if (docCount === 1) {
						data[namesList[0]] = recordData.DOCS[0];
					} else {
						// typeof recordData.DOCS[0].UPDATE_DT_TM = string
						var i;
						var docs = [];
						for (i = 0; i < docCount; i++) {
							docs.push(recordData.DOCS[i]);
						}

						data[namesList[0]] = docs;
					}
				}
				else {
					// TODO: remove
					// MP_Util.Doc.FinalizeComponent(MP_Util.HandleNoDataResponse(component.getStyles().getNameSpace()), component, countText);
				}
			}
		}
		
		callback(data);
	};
	
	var component = this;
	var mgr = new MP_Core.XMLCCLRequestThreadManager(repliesHandler, component, false);
	var programName = "MP_RETRIEVE_DOCUMENTS_JSON_DP";
	
	var criterion = this.getCriterion();
	var lookbackUnit = options.lookbackUnit;
	var lookbackType = options.lookbackType;
	
	var sEventCodes = MP_Util.CreateParamArray(eventCodes,1);
	var eventCodeArgs = [];
	var requestEC, requestES;
	
	/**
	 * 			sendAr.push("^MINE^", criterion.person_id + ".0", encntrOption, criterion.provider_id + ".0", component.getLookbackUnits());
			sendAr.push(MP_Util.CreateParamArray(events, 1));
			sendAr.push(MP_Util.CreateParamArray(results, 1));
			sendAr.push(criterion.ppr_cd + ".0", unitType);

	 */
	
	if (eventCodes.length) {
	    eventCodeArgs.push("^MINE^", criterion.person_id + ".0", "0.0", criterion.provider_id + ".0", 
	            lookbackUnit, MP_Util.CreateParamArray(eventCodes, 1), MP_Util.CreateParamArray([], 1),
	            criterion.ppr_cd + ".0", lookbackType);
	
	    requestEC = new MP_Core.ScriptRequest(component, "ENG:MPG.MEASBASE.O1 - load advisor ec");
	    requestEC.setProgramName(programName);
	    requestEC.setParameters(eventCodeArgs);
	    requestEC.setAsync(true);
	    
	    thread = new MP_Core.XMLCCLRequestThread("Custom Path Event Codes", component, requestEC);
	    mgr.addThread(thread);    	
	}
	
	mgr.begin();
};


/* make things happy */
cerner.Pathology.prototype.getCriterion = function () {
	return this.options.parentComp.criterion;
};

/// added these to keep MP_Core.XMLCCLRequestCallBack(...) happy
cerner.Pathology.prototype.getLabel = function() {
	return "MyPathology";
};
cerner.Pathology.prototype.getComponentId = function() {
	// or this.options.id.substring(4);
	return this.options.parentComp.m_componentId;
};

/// added to keep rendering happy
cerner.Pathology.prototype.getDateFormat = function() {
	/*
	 *  DisplayDateByOption: function(component, date) {
			var df = MP_Util.GetDateFormatter();
			var dtFormatted = "";
			switch (component.getDateFormat()) {
			case 1:
			return (df.format(date, mp_formatter.DateTimeFormatter.FULL_DATE_2YEAR));
			case 2:
			return (df.format(date, mp_formatter.DateTimeFormatter.FULL_DATE_TIME_2YEAR));
			case 3:
			return (MP_Util.CalcWithinTime(date));
			case 4:
			//Display No Date. Additional logic will need to be applied to hide column.
			return ("&nbsp");
			default:
			return df.format(date, mp_formatter.DateTimeFormatter.FULL_DATE_TIME_2YEAR); 
	 */
	
	return 2;
};

//keep thread manager happy
cerner.Pathology.prototype.isLineNumberIncluded = function () {
	return false;
};


cerner.Pathology.prototype.getScope = function () {
	// 2 = current encounter
	return 1;
};


cerner.Pathology.prototype.getLookbackUnits = function () {
	return this.options.lookbackUnit;
};

cerner.Pathology.prototype.getLookbackUnitTypeFlag = function () {
	return this.options.lookbackType;
};

cerner.Pathology.prototype.isPlusAddEnabled = function () {
	return false;
};

cerner.Pathology.prototype.getPowerNoteFavInd = function () {
	return false;
};

cerner.Pathology.prototype.getComponentRenderTimerName = function () {
	return "custom pathology prototype";
};

cerner.Pathology.prototype.getStyles = function () {
	return new DocumentComponentStyle();
};

cerner.Pathology.prototype.isScrollingEnabled = function () {
	return false;
};

cerner.Pathology.prototype.getScrollNumber = function () {
	return 10;
};

cerner.Pathology.prototype.getRootComponentNode = function () {
	return $(this.getTarget()).parent()[0];
};

cerner.Pathology.prototype.getSectionContentNode = function () {
	return this.getTarget();
};

cerner.Pathology.prototype.isEditMode = function () {
	return false;
};

/* Blood Bank/Transfusion */

cerner.options.BloodTransfusion = {};
cerner.options.BloodTransfusion.mda = {
	"lookbackUnit" : 6,	// amount
	"lookbackType" : 4,	// Flag  1 = Hours, 2 = Days, 3 = Weeks, 4 = Months , 5 = Years
	"document" : {
		// 
		"eventCode" : 22996865.0
	},
	/*
	"document2" : {
		// 
		"eventCode" : 4002384.0
	},
	*/
	"resultsToShow" : ["aborh", "antibody", "crossmatch"],
	"aborh" : {
		// 
		"eventCode" : 20136583.0
	},
	"antibody" : {
		// 
		"eventCode" : 21810623.0
	},
	"crossmatch" : {
		// Crossmatch ES: 3995564.0
		// xm is interp 21810625.0	xm extended	21810627.0
		"eventSetCode" : 3995564.0
	}
};

cerner.options.BloodTransfusion.provide = {
	"lookbackUnit" : 6,	// amount
	"lookbackType" : 4,	// Flag  1 = Hours, 2 = Days, 3 = Weeks, 4 = Months , 5 = Years
	"document" : {
		"eventCode" : 14883671.0
	},
	/*
	"document2" : {
		"eventCode" : 13688600.0
	},
	*/
	"resultsToShow" : ["aborh", "antibody", "crossmatch"],
	"aborh" : {
		"eventCode" : 2520063167.0
	},
	"antibody" : {
		"eventCode" : 2520063173.0
	},
	"crossmatch" : {
		"eventSetCode" : 12003819.0
	}
};

/* MD Anderson Blood Bank Information */
cerner.BloodTransfusion = function(){};
cerner.BloodTransfusion.prototype = new cerner.Pathology();
cerner.BloodTransfusion.prototype.constructor = cerner.Pathology;
cerner.BloodTransfusion.prototype.base = cerner.Pathology.prototype;
cerner.BloodTransfusion.prototype.init = function (options) {
	this.data = {};
};

cerner.BloodTransfusion.prototype.getLabel = function() {
	return "BloodTransfusion";
};

cerner.BloodTransfusion.prototype.loadData = function (callback) {
	var self = this;
	var componentData = this.data;

	this.getResults(self.options.resultsToShow, function (data) {
		var prop;

		for (prop in data) {
			componentData[prop] = data[prop];			
		}
		
		var html = self.renderResults(self.options.resultsToShow);
		$(self.getTarget()).find('.results.content-body').html(html);
		
	}, 2);
	
	this.getBloodSpecimens(function (data) {
		var specimens = data['bloodSpecimens'];
		
		var specimenHtml = specimens ? self.renderBloodSpecimens(specimens) : '<span class="res-none">No available specimens found</span>';
		$(self.getTarget()).find('.specimens.content-body').html(specimenHtml);
	});
	
	this.getBloodProducts(function (data) {
		var products = data['bloodProducts'];
		var availableHtml = products? self.renderAvailableProducts(products) : '<span class="res-none">No available products found</span>';
		var transfusedHtml = products? self.renderTransfusedProducts(products) : '<span class="res-none">No transfused products found</span>';
			
		$(self.getTarget()).find('.available.content-body').html(availableHtml);
		
		$(self.getTarget()).find('.transfused.content-body').html(transfusedHtml);
	});
	
	callback(self);
};

cerner.BloodTransfusion.prototype.render = function(){
	var component = this;
	var element = this.getTarget();

	$(this.getTarget()).addClass('bloodTransfusion');
	
	element.innerHTML = '<h3 class="sub-sec-hd"><span class="sub-sec-title">Available Specimens</span></h3><div class="specimens content-body"></div>';
	element.innerHTML += '<h3 class="sub-sec-hd"><span class="sub-sec-title">Type and Screen</span></h3><div class="results content-body"></div>';
	element.innerHTML += '<h3 class="sub-sec-hd"><span class="sub-sec-title">Available Products</span></h3><div class="available content-body"></div>';
	element.innerHTML += '<h3 class="sub-sec-hd"><span class="sub-sec-title">Transfused Products</span></h3><div class="transfused content-body"></div>';
};


/**
 * 
 * @param namesList
 * @param callback
 */
cerner.BloodTransfusion.prototype.getBloodProducts = function (callback) {
	var i;
	
	/**
	 * Handles the replies from the ccl call and molds the data to a more relevant and easier to use format
	 * before passing the data onto the callback.
	 * 
	 */
	var repliesHandler = function (replies) {
		var data = {};
		var countText = "";
		
		for(var repCnt = replies.length; repCnt--; ) {
			var reply = replies[repCnt];
			var repStatus = reply.getStatus();
			if(repStatus == "F") {
				errMsg.push(reply.getError());
				MP_Util.Doc.FinalizeComponent(MP_Util.HandleErrorResponse(component.getStyles().getNameSpace(), errMsg.join("<br />")), component, "");
			}
			else {
				if(repStatus == "S") {
					var recordData = reply.getResponse();

					data["bloodProducts"] = recordData.BLOOD_PRODUCTS;
				}
				else {
					// TODO: remove
					// MP_Util.Doc.FinalizeComponent(MP_Util.HandleNoDataResponse(component.getStyles().getNameSpace()), component, countText);
				}
			}
		}
		
		callback(data);
	};
	
	var component = this;
	var mgr = new MP_Core.XMLCCLRequestThreadManager(repliesHandler, component, false);
	var programName = "mp_get_blood_products";
	
	var criterion = this.getCriterion();
	var args = [];
	var request;
	
	/**
	 * 			sendAr.push("^MINE^", criterion.person_id + ".0", encntrOption, criterion.provider_id + ".0", component.getLookbackUnits());
			sendAr.push(MP_Util.CreateParamArray(events, 1));
			sendAr.push(MP_Util.CreateParamArray(results, 1));
			sendAr.push(criterion.ppr_cd + ".0", unitType);

	 */
	

	args.push("^MINE^", criterion.person_id);

	request = new MP_Core.ScriptRequest(component, "ENG:MPG.MEASBASE.O1 - load blood products");
	request.setProgramName(programName);
	request.setParameters(args);
	request.setAsync(true);
    
    thread = new MP_Core.XMLCCLRequestThread("Custom Blood Products", component, request);
    mgr.addThread(thread);    	
	
	mgr.begin();
};


/**
 * 
 * @param namesList
 * @param callback
 */
cerner.BloodTransfusion.prototype.getBloodSpecimens = function (callback) {
	/**
	 * Handles the replies from the ccl call and molds the data to a more relevant and easier to use format
	 * before passing the data onto the callback.
	 * 
	 */
	var repliesHandler = function (replies) {
		var data = {};
		var countText = "";
		
		for(var repCnt = replies.length; repCnt--; ) {
			var reply = replies[repCnt];
			var repStatus = reply.getStatus();
			if(repStatus == "F") {
				errMsg.push(reply.getError());
				MP_Util.Doc.FinalizeComponent(MP_Util.HandleErrorResponse(component.getStyles().getNameSpace(), errMsg.join("<br />")), component, "");
			}
			else {
				if(repStatus == "S") {
					var recordData = reply.getResponse();

					data["bloodSpecimens"] = recordData.BLOOD_SPECIMENS;
				}
				else {
					// TODO: remove
					// MP_Util.Doc.FinalizeComponent(MP_Util.HandleNoDataResponse(component.getStyles().getNameSpace()), component, countText);
				}
			}
		}
		
		callback(data);
	};
	
	var component = this;
	var mgr = new MP_Core.XMLCCLRequestThreadManager(repliesHandler, component, false);
	var programName = "mp_get_blood_specimens";
	
	var criterion = this.getCriterion();
	var args = [];
	var request;
	
	/**
	 * 			sendAr.push("^MINE^", criterion.person_id + ".0", encntrOption, criterion.provider_id + ".0", component.getLookbackUnits());
			sendAr.push(MP_Util.CreateParamArray(events, 1));
			sendAr.push(MP_Util.CreateParamArray(results, 1));
			sendAr.push(criterion.ppr_cd + ".0", unitType);

	 */
	
	args.push("^MINE^", criterion.person_id);

	request = new MP_Core.ScriptRequest(component, "ENG:MPG.MEASBASE.O1 - load blood specimens");
	request.setProgramName(programName);
	request.setParameters(args);
	request.setAsync(true);
    
    thread = new MP_Core.XMLCCLRequestThread("Custom Blood Specimens", component, request);
    mgr.addThread(thread);    	
	
	mgr.begin();
};

/**
 * 
 */
cerner.BloodTransfusion.prototype.renderBloodSpecimens = function (specimens) {
	var component = this;
	var df = new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
	var html = [];

	html.push('<dl class="path-info hdr">');
	
	html.push('<dd class="path-cat">');
	html.push('Collected Date/Time');
	html.push('</dd>');
	
	html.push('<dd class="path-dt">');
	html.push('Order(s)');
	html.push('</dd>');

	var expirationDate = new Date();
	html.push('<dd class="path-dt">');
	html.push('Expiration Date/Time');	
	html.push('</dd>');
	
	html.push('</dl>');

	var i;
	var specimen;
	for (i = 0; i < specimens.length; i++) {
		specimen = specimens[i];

		var collectionDate = new Date();
		collectionDate.setISO8601(specimen.DRAWN_DT_TM);

		var expirationDate = new Date();
		if (specimen.EXPIRATION_DT_TM.indexOf('0000-00-00') === -1) {
			expirationDate.setISO8601(specimen.EXPIRATION_DT_TM);
		} else {
			expirationDate.setISO8601(specimen.DRAWN_DT_TM);
			// expiration date is 3 days from collection date
			expirationDate.setDate(collectionDate.getDate() + 3);			
		}

		if (expirationDate.getTime() > (new Date()).getTime()) {

			// borrowing styles from pathology
			html.push('<dl class="path-info ' , (i)%2 === 0 ? 'even' : 'odd' ,'">');
			
			html.push('<dd class="path-cat">');
			html.push(df.format(collectionDate, mp_formatter.DateTimeFormatter.FULL_DATE_TIME_4YEAR));
			html.push('</dd>');
			
			html.push('<dd class="path-dt">');
			var j;
			for (j = 0; j < specimen.ORDERS.length; j++) {
				html.push(specimen.ORDERS[j].ORDER_MNEMONIC);
				if (j < specimen.ORDERS.length-1)
					html.push(', ');
			}
			html.push('</dd>');
	
			html.push('<dd class="path-dt">');
			html.push(df.format(expirationDate, mp_formatter.DateTimeFormatter.FULL_DATE_TIME_4YEAR));
			
			html.push('</dd>');
			
			html.push('</dl>');
		}
	}
	
	return html.join('');
};

/**
 * 
 */
cerner.BloodTransfusion.prototype.renderAvailableProducts = function (products) {
	var component = this;
	var df = new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
	var html = [];
		
	var i;
	var product;
	for (i = 0; i < products.length; i++) {
		product = products[i];

		if (product.EVENT_TYPE_KEY === "ASSIGNED" || product.EVENT_TYPE_KEY === "CROSSMATCHED") {
			// borrowing styles from pathology
			html.push('<dl class="path-info ' , (i+1)%2 === 0 ? 'even' : 'odd' ,'">');

			html.push('<dd class="path-cat">');
			html.push(product.PRODUCT_DISPLAY);
			html.push('</dd>');
			
			html.push('<dd class="path-dt">');
			html.push(product.EVENT_TYPE_DISPLAY);
			html.push('</dd>');
	
			var date = new Date();
			date.setISO8601(product.EVENT_DT_TM);
			html.push('<dd class="path-dt">');
			html.push(df.format(date, mp_formatter.DateTimeFormatter.FULL_DATE_TIME_4YEAR));
			html.push('</dd>');

			html.push('</dl>');
		}
	}
	
	return html.join('');
};

/**
 * 
 */
cerner.BloodTransfusion.prototype.renderTransfusedProducts = function (products) {
	var component = this;
	var df = new mp_formatter.DateTimeFormatter(MPAGE_LOCALE);
	var html = [];
		
	var i;
	var product;
	for (i = 0; i < products.length; i++) {
		product = products[i];
		
		if (product.EVENT_TYPE_KEY === "TRANSFUSED") {
			// borrowing styles from pathology
			html.push('<dl class="path-info ' , (i+1)%2 === 0 ? 'even' : 'odd' ,'">');

			html.push('<dd class="path-cat">');
			html.push(product.PRODUCT_DISPLAY);
			html.push('</dd>');
			
			html.push('<dd class="path-dt">');
			html.push(product.EVENT_TYPE_DISPLAY);
			html.push('</dd>');
	
			var date = new Date();
			date.setISO8601(product.EVENT_DT_TM);
			html.push('<dd class="path-dt">');
			html.push(df.format(date, mp_formatter.DateTimeFormatter.FULL_DATE_TIME_4YEAR));
			html.push('</dd>');
		
			html.push('</dl>');
		}
	}
	
	return html.join('');
};

/*Custom Component source code Core Measures*/
/*Updateing for 4.2 CCL script*/
MPage.namespace("cerner");

//sl014066:  These are options that are loaded into the components option structure and can be accessable through getOption() and setOption()
var customCompOptions1 = {
	encntrFilter: 2,
	lookbackNum: 2,
	lookbackUnit: 2,
	conditionId: 0.0
};

var Windowstorage = {
    cache: null,

    get: function(key){
        if (window.name.length > 0) {
            this.cache = ("(" + window.name + ")");
        }
        else {
            this.cache = {};
        }
        return unescape(this.cache[key]);
    },

    encodeString: function(value){
        return encodeURIComponent(value).replace(/'/g, "'");
    },
    set: function(key, value){
        this.get();
        if (typeof key != "undefined" && typeof value != "undefined") {
            this.cache[key] = value;
        }
        var jsonString = "{";
        var itemCount = 0;
        for (var item in this.cache) {
            if (itemCount > 0) {
                jsonString += ", ";
            }
            jsonString += "'" + this.encodeString(item) + "':'" + this.encodeString(this.cache[item]) + "'";
            itemCount++;
        }
        jsonString += "}";
        window.name = jsonString;
    },
    del: function(key){
        this.get();
        delete this.cache[key];
        this.serialize(this.cache);
    },
    clear: function(){
        window.name = "";
    }
};

var strStoredIdx = Windowstorage.get("StoredIndex");

MPage.namespace("cerner");
cerner.lh_quality_measures_43 = function(){};
cerner.lh_quality_measures_43.prototype = new MPage.Component();
cerner.lh_quality_measures_43.prototype.constructor = MPage.Component;
cerner.lh_quality_measures_43.prototype.base = MPage.Component.prototype;
cerner.lh_quality_measures_43.prototype.name = "cerner.lh_quality_measures_43"; //Version 4.2
//sl014066:  This is where you can define the script to use when your component loads
cerner.lh_quality_measures_43.prototype.cclProgram = "lh_mp_get_quality_measures_42"; //4.2 ccl script
//sl014066;  You can have predefined parameters here, but most likely you will load the in the init() function
cerner.lh_quality_measures_43.prototype.cclParams = [];
//sl014066:  The custom component framework will create a JavaScript object automagically for you if you set this variable to JSON.  Same deal with XML.
cerner.lh_quality_measures_43.prototype.cclDataType = "JSON";
cerner.lh_quality_measures_43.prototype.init = function(options){
	var params = [];

	params.push("mine");
	//sl014066:  Use the getPorperty methods to get properties made accassable through the architecture
	//Those properties inclue; id, parentComp, personId, userId, encounterId, pprCd, staticContent, positionCd, categoryMean, viewableEncounters, headerTitle, headerOverflowState
	params.push(this.getProperty("personId"));
	params.push(this.getProperty("encounterId"));
	params.push(this.getProperty("userId"));
	params.push(this.getProperty("positionCd"));
	params.push(this.getProperty("pprCd"));
	//sl014066:  These are the options defined in the customCompOptions1 variable above.
	//params.push(0);
	params.push(this.getOption("encntrFilter"));
	params.push(this.getOption("lookbackNum"));
	params.push(this.getOption("lookbackUnit"));
	//params.push(this.getOption("conditionId"));

	if (!isNaN(strStoredIdx))
	{
		params.push(strStoredIdx);
	}
	else
	{
		params.push(0.0);
	}

	this.cclParams = params;
//}

};

cerner.lh_quality_measures_43.prototype.render = function(){
	//Takes the data in this.data and loads it into target
	var element = this.getTarget();
	var ar=[];
	var comp = this;
	var compId = this.getComponentUid();

	try{
		//sl014066:  No need to parse any JSON since the architecture does it for us
		var jsonObj = this.data;
    	var recordData = jsonObj.RECORD_DATA;
		//sl014066:  If you want to show the total outcomes as a count in the subheader you can use component.setProperty("headerSubTitle", "("+totalOutcomes+")").  See three lines below
		var totalOutcomes=recordData.OUTCOMES_COMPLETE.length+recordData.OUTCOMES_INCOMPLETE.length;
		var custComp = this;
		custComp.setProperty("headerSubTitle", "("+totalOutcomes+")");
		ar.push("<div class='content-body scrollable'>");

		//Show all Qualifying Conditions in drop down list
		ar.push("<div class='qm-cbo'><form><span class='qm-cond-lbl'>", recordData.FILTERDISPLAY, "</span><select id='qmTask",compId,"'>");

		//Debugging
		//ar.push("<option value='testing condition 1 id' selected='selected'>testing 1</option>");
		//ar.push("<option value='testing condition 2 id'>testing 2</option>");

		var strAlarmClock = "";
		var path = this.getProperty("staticContent");
		var strAlarmIcon = "'" + path + "\\custom-components\\img\\4798_16.png'";

		for(var i=0;i<recordData.CONDITIONS.length;i++){
			if(recordData.CONDITIONS[i].CONDITION_ID==recordData.SELECTED_CONDITION_ID)
			{
				ar.push("<option value="+recordData.CONDITIONS[i].CONDITION_ID
						+" selected='selected'>"+recordData.CONDITIONS[i].CONDITION_NAME+"</option>");
			}else{
			ar.push("<option value="+recordData.CONDITIONS[i].CONDITION_ID+">"
					+recordData.CONDITIONS[i].CONDITION_NAME+"</option>");
			}
		}

		ar.push("</select></form></div>");

		//DIV for Incomplete and Compelete
		ar.push("<div id='condID",compId,"'>");

		//Incomplete Section
		ar.push("<div id='incomp" + compId + "' class='sub-sec'>");

			ar.push("<h3 class='sub-sec-hd'><span class='sub-sec-hd-tgl' title=",i18n.HIDE_SECTION,">-</span><span class='sub-sec-title'>"
					,i18n.QM_INCOMPLETE," (",recordData.OUTCOMES_INCOMPLETE.length,")</span></h3>");

			ar.push("<div class='sub-sec-content'>");

			if(recordData.OUTCOMES_INCOMPLETE.length>0)
			{
				for(var j=0;j<recordData.OUTCOMES_INCOMPLETE.length;j++){

					//*Create new section for each outcome (ex:VTE Overlap Therapy)
					ar.push("<div class='sub-sub-sec-content'>"); //*001 New class

						var tip = "Tip" + j;

						var hoverDisplay = "";
						hoverDisplay = recordData.OUTCOMES_INCOMPLETE[j].HOVERDISPLAY;

							//Hover Div
							ar.push("<div id= ",tip," left='' top='' style='position:absolute; z-index:1000;background-color:#FFC;border:1px solid #000;padding:5px; visibility: hidden;'>"
							,hoverDisplay,"</div>");

						//*Create Outcome header with toggle

						strAlarmClock = "";
						if (recordData.OUTCOMES_INCOMPLETE[j].SHOWICONIND == '1')
						{
							strAlarmClock += "<span>&nbsp;&nbsp;&nbsp;";
							strAlarmClock += "<img src=" + strAlarmIcon + "/>" ;
							strAlarmClock += "</span>"
						}

						ar.push("<h3 class='sub-sec-hd-test'><span class='sub-sec-hd-tgl' title=",i18n.HIDE_SECTION
							,">-</span><span class='sub-sec-title' onmouseover='cerner.lh_quality_measures_43.prototype.ShowHover(\"" + recordData.OUTCOMES_INCOMPLETE[j].HOVERDISPLAY + "\"," + j + "," + 0 + "," + -15 + ");' onmouseout='cerner.lh_quality_measures_43.prototype.HideHover(",j,");'>"
							,recordData.OUTCOMES_INCOMPLETE[j].OUTCOME_NAME,"</span>",strAlarmClock,"</h3>");
						ar.push("<div class='sub-sec-content'>");

							//Loop through each Measure
							for(var k=0;k<recordData.OUTCOMES_INCOMPLETE[j].MEASURES.length;k++){

								//Reset for each Measure
								firstTaskFound = 0;

								//Create each Measures (ex:Warfarin)
								ar.push("<dl class='qm-info'>");
								ar.push("<dt><span>measure</span></dt><dd class='qm-ic-name'><span>"
								,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].NAME,"</span></dd>");
								ar.push("</dl>");


								//Create each Measures Data (ex:Order Administer Reconcile)
								ar.push("<dl class='qm-info'>");
								ar.push("<dt>");
								ar.push("<dd class='qm-ic-name-grp'>"); //* New Class 001

								//If ORDERS is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERSETIND == 1){

									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERPRESENTIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayInOrder'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERINCOMPLETEDISPLAY,"</span>");
									} else {
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERMEASUREIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERMEASUREIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.ORDERDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERTASKIND == 1){
											ar.push("<a id = 'openInOrder' onclick='cerner.lh_quality_measures_43.prototype.OpenQMOrderWindow(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ORDERDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERTASKIND == 2){
											ar.push("<a id = 'openInOrder' onclick='cerner.lh_quality_measures_43.prototype.OpenQMOrderProfileWindow(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ORDERDISPLAY,"</a>");
										}

									}
									firstTaskFound = 1;

								}

								//If COLLECT is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLSETIND == 1){

									if (firstTaskFound == 1){
										ar.push(" | ");
									}
 
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLPRESENTIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayInCol'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLINCOMPLETEDISPLAY,"</span>");
									} else {
										if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTASKIND == 1){ //MOEW
											ar.push("<a id = 'openInPresOrder' onclick='cerner.lh_quality_measures_43.prototype.OpenQMOrderWindow("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.COLDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTASKIND == 3){ // POWERFORM
											ar.push("<a id = 'openInColForm' onclick='cerner.lh_quality_measures_43.prototype.OpenQMForm("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + "," +recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLFORMID +")'>",recordData.COLDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTASKIND == 4){ //IVIEW
											ar.push("<a id = 'openInDocView' onclick='cerner.lh_quality_measures_43.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.COLDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTASKIND == 5){ //PowerNote
										
											//support old powernote as well
											if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTABNAME.indexOf("!") > 0)
												{ar.push("<a id = 'openInDocNote' onclick='cerner.lh_quality_measures_43.prototype.OpenQMPowerNote(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTABNAME + "\"," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.COLDISPLAY,"</a>");}
											else
												{ar.push("<a id = 'openInDocNote' onclick='cerner.lh_quality_measures_43.prototype.AddEPByCKI(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTABNAME + "\"," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.COLDISPLAY,"</a>");}

										}

									}

									firstTaskFound = 1;
								}


								//If ADMINISTER is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINSETIND == 1){

									if (firstTaskFound == 1){
										ar.push(" | ");
									}

									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINPRESENTIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayInAdmin'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMININCOMPLETEDISPLAY,"</span>");
									} else{
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERMEASUREIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERMEASUREIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.ADMINDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTASKIND == 2){ //MAR
											ar.push("<a id = 'openInAdminMAR' onclick='cerner.lh_quality_measures_43.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ADMINDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTASKIND == 3){ //PowerForm
											ar.push("<a id = 'openInAdminForm' onclick='cerner.lh_quality_measures_43.prototype.OpenQMForm("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + "," +recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINFORMID +")'>",recordData.ADMINDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTASKIND == 4){ //IView
											ar.push("<a id = 'openInAdminView' onclick='cerner.lh_quality_measures_43.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ADMINDISPLAY,"</a>");
										}

									}

									firstTaskFound = 1;
								}


								//If PRESCRIBE is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESSETIND == 1){
									if (firstTaskFound == 1){
										ar.push(" | ");
									}

									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESPRESENTIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayInPres'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESINCOMPLETEDISPLAY,"</span>");
									} else{
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERACEIPRESIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERPRESAMIIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.PRESDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERARBPRESIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERPRESAMIIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.PRESDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERMEASUREIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERMEASUREIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.PRESDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESTASKIND == 1){ //MOEW
											ar.push("<a id = 'openInPresOrder' onclick='cerner.lh_quality_measures_43.prototype.OpenQMOrderWindow("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.PRESDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESTASKIND == 6){ //MedsRec
											ar.push("<a id = 'openInPresRec' onclick='cerner.lh_quality_measures_43.prototype.OpenQMMedsRec("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.PRESDISPLAY,"</a>");
										}
									}

									firstTaskFound = 1;
								}


								//If DOCUMENT is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCSETIND == 1){

									if (firstTaskFound == 1){
										ar.push(" | ");
									}
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCPRESENTIND == 1){

										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DELAYDITHERIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].VANCOPRESIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										//PCI Delay = 2
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 2 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DELAYDITHERIND == 2){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else {
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>" //* New Class 001
											,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCINCOMPLETEDISPLAY,"</span>");
										}
									} else{

										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERMEASUREIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERMEASUREIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										} //VTE Oral Factor Xa
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 3 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORALFACTORDITHER == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].ADMINMETIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].CONTRAIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].PRESMETIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].CONTRAIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DELAYDITHERIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].VANCOPRESIND == 1){
											ar.push("<span class = 'qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}

										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 1){ //MOEW
											ar.push("<a id = 'openInDocOrder' onclick='cerner.lh_quality_measures_43.prototype.OpenQMOrderWindow(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 3){ //PowerForm

											ar.push("<a id = 'openInDocForm' onclick='cerner.lh_quality_measures_43.prototype.OpenQMForm(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + "," + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCFORMID +")'>",recordData.DOCDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 4){ //IVIEW
											ar.push("<a id = 'openInDocView' onclick='cerner.lh_quality_measures_43.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 5){ //PowerNote
												//support old powernote as well
												if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTABNAME.indexOf("!") > 0)
													{ar.push("<a id = 'openInDocNote' onclick='cerner.lh_quality_measures_43.prototype.OpenQMPowerNote(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTABNAME + "\"," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");}
												else
													{ar.push("<a id = 'openInDocNote' onclick='cerner.lh_quality_measures_43.prototype.AddEPByCKI(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTABNAME + "\"," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");}
											
										}

									}

									firstTaskFound = 1;
								}

								ar.push("</dd>");
								ar.push("</dt>");
								ar.push("</dl>");

							} //for(var k=0;k<recordData.OUTCOMES_INCOMPLETE[j].MEASURES.length;k++){ , Loop through each measure


						ar.push("</div>");//ar.push("<div class='sub-sec-content'>");

						//*Close DIV for Outcome
						ar.push("</div>"); //ar.push("<div class='sub-sub-sec-content'>"); //*001 New class

						//*Shows docuemnt icon on mouseover* ar.push("<dl class='qm-info' onmouseover='CERN_QUALITY_MEASURES_O1.ShowIcon(this)' onmouseout='CERN_QUALITY_MEASURES_O1.HideIcon(this)'>");
						//*Prints outcome name* ar.push("<dt><span>measure</span></dt><dd class='qm-ic-name'><span>"+recordData.OUTCOMES_INCOMPLETE[j].OUTCOME_NAME+"</span></dd>");
						//*Lauches specific Powerform for outcome* ar.push("<dt><span>measure</span></dt><dd class='qm-doc'><span class='cmp-doc' onclick='CERN_QUALITY_MEASURES_O1.OpenQMDoc("+recordData.OUTCOMES_INCOMPLETE[j].FORM_REF_ID+","+recordData.OUTCOMES_INCOMPLETE[j].FORM_ACT_ID+")'>&nbsp;</span></dd>");
						//*Close dl* ar.push("</dl>");

					} //for(var j=0;j<recordData.OUTCOMES_INCOMPLETE.length;j++){ , Loop through each outcome


				}else{ //(recordData.OUTCOMES_INCOMPLETE.length>0)
					ar.push("<span class='res-none'>",i18n.NO_RESULTS_FOUND,"</span>");
				}

			ar.push("</div>"); //ar.push("<div class='sub-sec-content'>");
		ar.push("</div>");	//ar.push("<div class='sub-sec'>");, Incomplete Section

		//Complete Section
		ar.push("<div id='comp" + compId + "' class='sub-sec'>");

			ar.push("<h3 class='sub-sec-hd'><span class = 'sub-sec-hd-tgl' title="+i18n.HIDE_SECTION+"></span><span class='sub-sec-title'>"
				+i18n.QM_COMPLETE+" (",recordData.OUTCOMES_COMPLETE.length,")</span></h3>");

				ar.push("<div class='sub-sec-content'>");

				if(recordData.OUTCOMES_COMPLETE.length>0){

					for(var j=0;j<recordData.OUTCOMES_COMPLETE.length;j++){

						//*Create new section for each outcome (ex:VTE Overlap Therapy)
						ar.push("<div class='sub-sub-sec-content'>"); //*001 New class

						var tip2 = "TipA" + j;

						var hover2Display = "";
						hover2Display = recordData.OUTCOMES_COMPLETE[j].HOVERDISPLAY;

						//Hover Div
						ar.push("<div id= ",tip2," style='position:absolute; z-index:1;background-color:#FFC;border:1px solid #000; visibility: hidden;'>"
							,hover2Display,"</div>");

						strAlarmClock = "";
						if (recordData.OUTCOMES_COMPLETE[j].SHOWICONIND == '1')
						{
							strAlarmClock += "<span>&nbsp;&nbsp;&nbsp;";
							strAlarmClock += "<img src=" + strAlarmIcon + "/>" ;
							strAlarmClock += "</span>"
						}

						//*Create Outcome header with toggle
						ar.push("<h3 class='sub-sec-hd-test'><span class='sub-sec-hd-tgl' title=",i18n.HIDE_SECTION
						,">-</span><span class='sub-sec-title' onmouseover='cerner.lh_quality_measures_43.prototype.ShowHoverComplete(\"" + recordData.OUTCOMES_COMPLETE[j].HOVERDISPLAY + "\"," + j + ");' onmouseout='cerner.lh_quality_measures_43.prototype.HideHoverComplete(",j,");'>"
						,recordData.OUTCOMES_COMPLETE[j].OUTCOME_NAME,"</span>",strAlarmClock,"</h3>");

						ar.push("<div class='sub-sec-content'>");

						//Loop through each Measure
						for(var k=0;k<recordData.OUTCOMES_COMPLETE[j].MEASURES.length;k++){

							//Reset for each Measure
							firstTaskFound = 0;

							//Create each Measures (ex:Warfarin)
							ar.push("<dl class='qm-info'>");
							ar.push("<dt><span>measure</span></dt><dd class='qm-ic-name'><span>"
								,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].NAME,"</span></dd>");
							ar.push("</dl>");


							//Create each Measures Data (ex:Order Administer Reconcile)
							ar.push("<dl class='qm-info'>");
							ar.push("<dt>");
							ar.push("<dd class='qm-ic-name-grp'>"); //* New Class 001

							//If ORDERS is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ORDERSETIND == 1){

								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ORDERPRESENTIND == 1){
									ar.push("<span class = 'qm-ic-name-display' id = 'displayOrder'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ORDERCOMPLETEDISPLAY,"</span>");
								} else{
									ar.push("<span class = 'qm-ic-name-display' id = 'displayOrder'>",recordData.ORDERDISPLAY,"</span>");
								}

								firstTaskFound = 1;
							}

							//If Collect is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].COLSETIND == 1){

								if (firstTaskFound == 1){
									ar.push(" | ");
								}

								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].COLPRESENTIND == 1){
									ar.push("<span class = 'qm-ic-name-display' id = 'displayCol'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].COLCOMPLETEDISPLAY,"</span>");
								} else{
									ar.push("<span class = 'qm-ic-name-display' id = 'displayCol'>",recordData.COLDISPLAY,"</span>");
								}

								firstTaskFound = 1;
							}

							//If ADMINISTER is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ADMINSETIND == 1){
								if (firstTaskFound == 1){
									ar.push(" | ");
								}
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ADMINPRESENTIND == 1){
									ar.push("<span class = 'qm-ic-name-display' id = 'displayAdmin'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ADMINCOMPLETEDISPLAY,"</span>");
								} else {
									ar.push("<span class = 'qm-ic-name-display' id = 'displayAdmin'>",recordData.ADMINDISPLAY,"</span>");
								}

								firstTaskFound = 1;
							}

							//If PRESCRIBE is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].PRESSETIND == 1){
								if (firstTaskFound == 1){
									ar.push(" | ");
								}
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].PRESPRESENTIND == 1){
									ar.push("<span class = 'qm-ic-name-display' id = 'displayPres'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].PRESCOMPLETEDISPLAY,"</span>");
								} else{
									ar.push("<span class = 'qm-ic-name-display' id = 'displayPres'>",recordData.PRESDISPLAY,"</span>");
								}

								firstTaskFound = 1;
							}

							//If DOCUMENT is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DOCSETIND == 1){
								if (firstTaskFound == 1){
									ar.push(" | ");
								}
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DOCPRESENTIND == 1){

									if (recordData.OUTCOMES_COMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DELAYDITHERIND == 1){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.DOCDISPLAY,"</span>");
									}
									else if (recordData.OUTCOMES_COMPLETE[j].DITHERDOCIND == 2 && recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DELAYDITHERIND == 2){
										ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.DOCDISPLAY,"</span>");
									}
									else if (recordData.OUTCOMES_COMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_COMPLETE[j].MEASURES[k].VANCOPRESIND == 1) {
										ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.DOCDISPLAY,"</span>");
									}

									else{

										ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DOCCOMPLETEDISPLAY,"</span>");
									}

								} else{
									ar.push("<span class = 'qm-ic-name-display' id = 'displayDoc'>",recordData.DOCDISPLAY,"</span>");
								}

								firstTaskFound = 1;
							}

							ar.push("</dd>");
							ar.push("</dt>");
							ar.push("</dl>");


						} //for(var k=0;k<recordData.OUTCOMES_COMPLETE[j].MEASURES.length;k++){	, Loop through each measure

						ar.push("</div>"); //ar.push("<div class='sub-sec-content'>");


						//*Close DIV for Outcome
						ar.push("</div>"); //ar.push("<div class='sub-sub-sec-content'>");


					} //for(var j=0;j<recordData.OUTCOMES_COMPLETE.length;j++){, Loop through each outcome
				}else{
					if(recordData.OUTCOMES_COMPLETE.length===0){
						ar.push("<span class='res-none'>",i18n.NO_RESULTS_FOUND,"</span>");
					}
				}

				ar.push("</div>"); //ar.push("<div class='sub-sec-content'>");

		ar.push("</div>"); //ar.push("<div class='sub-sec'>");, Complete Section

		ar.push("</div>"); //ar.push("<div id='condID",compId,"'>");, DIV for Incomplete and Compelete
		ar.push("</div>"); //ar.push("<div class='content-body scrollable'>");


		}catch(err){

						alert("error in QM" + err);

		}
	element.innerHTML = ar.join("");

	//Add selection events to the drop down box
	//sl014066:  You have to add selection event after the HTML elements have been created because there is no way to pass objects otherwise.
	var dropDown = document.getElementById("qmTask"+compId);

	dropDown.onchange = function(element){
		Windowstorage.set("StoredIndex",this.value);
		comp.LoadCondition(this.options[this.selectedIndex], comp);
	};

	//Init subsection toggles
	//NOTE this will not work outside of Cerner's architecture

	MP_Util.Doc.InitSubToggles(element, 'sub-sec-hd-tgl');

	//Util.Style.acss(element, 'closed');
};

cerner.lh_quality_measures_43.prototype.AddEPByCKI = function(noteName,qmpersonId, qmencntrID){
//function AddEPByCKI(qmpersonId, qmencntrID){

	var m_dPersonId = qmpersonId;
    var m_dEncounterId = qmencntrID;
    var m_bstrEPCKISource = "CKI";
    var m_bstrEPCKIIdentifier = noteName;

	var PowerNoteMPageUtils = window.external.DiscernObjectFactory("POWERNOTE");
	PowerNoteMPageUtils.BeginNoteFromEncounterPathway(m_dPersonId, m_dEncounterId, m_bstrEPCKISource, m_bstrEPCKIIdentifier);
	
}


//sl014066: Gloabl function needs to be added to the component's prototype
//sl014066:  As soon as you switch these to prototypes they will no longer work for you because they will be out of scope.
//I can give you some suggestions on how they should be called and accessed***.
cerner.lh_quality_measures_43.prototype.ShowHoverComplete = function(strHoverText, idValue){
	var x = "";
	var y = "";
	var tmpID = "TipA" + idValue;
	var tDIV = document.getElementById(tmpID);

	x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
	x = parseInt(x) - parseInt(800);
	y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;
	y = parseInt(y) - parseInt(800);

	tDIV.style.left = x;
	tDIV.style.top = y;
	tDIV.style.width = "250px";
	//tDIV.style.cursor = "hand";
	tDIV.style.visibility = "visible";
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_43.prototype.ShowHover = function(strHoverText, idValue, xOffSet, yOffSet){
	var x = "";
	var y = "";
	var tmpID = "Tip" + idValue;
	var tDIV = document.getElementById(tmpID);

	x = tDIV.getAttribute('left')
	y = tDIV.getAttribute('top')

	var curleft = tDIV.offsetLeft;
	var curtop = tDIV.offsetTop;

	if (x == '' && y == '')
	{
		x = curleft;
		tDIV.setAttribute('left',x);
		y = curtop;
		tDIV.setAttribute('top',y);
	}
	else
	{
		x = parseInt(x);
		y = parseInt(y);
	}

	x = parseInt(x) - parseInt(xOffSet);
	y = parseInt(y) - parseInt(yOffSet);

	tDIV.style.left = x;
	tDIV.style.top = y;

	tDIV.style.width = "250px";
	tDIV.style.cursor = "hand";
	tDIV.style.visibility = "visible";
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_43.prototype.HideHoverComplete = function(valueHide){
	var tmpID = "TipA" + valueHide;
	var tDIV = document.getElementById(tmpID);
	tDIV.style.visibility = "hidden";
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_43.prototype.HideHover = function(valueHide){
	var tmpID = "Tip" + valueHide;
	var tDIV = document.getElementById(tmpID);
	tDIV.style.visibility = "hidden";
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_43.prototype.OpenQMOrderWindow = function(qmpersonId, qmencntrID){

	var orderWindowString = qmpersonId + "|" + qmencntrID + "|";
	orderWindowString += "{ORDER|0|0|0|0|0}";
	orderWindowString += "|24|{2|127}{3|127}|8";
	MP_Util.LogMpagesEventInfo(null,"ORDERS",orderWindowString,"qualitymeasures.js","OpenQMOrderWindow");
	MPAGES_EVENT("Orders",orderWindowString);

};

cerner.lh_quality_measures_43.prototype.OpenQMOrderProfileWindow = function(qmpersonId, qmencntrID){

	var mrObject = {};
	mrObject = window.external.DiscernObjectFactory("ORDERS");
	mrObject.PersonId = qmpersonId;
 	mrObject.EncntrId = qmencntrID;
 	mrObject.reconciliationMode = 0;
	MP_Util.LogMpagesEventInfo(null,"ORDERS","OpenQMMedsRec","qualitymeasures.js","OpenQMMedsRec");
	mrObject.LaunchOrdersMode(0, 0, 0); //2 -  Meds Rec

};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_43.prototype.OpenQMForm = function(qmpersonId, qmencntrID, formID){


	var dPersonId = qmpersonId;
	var dEncounterId = qmencntrID;
	var activityId = 0.0;
	var chartMode = 0;
	var mpObj = window.external.DiscernObjectFactory("POWERFORM");
	mpObj.OpenForm(dPersonId, dEncounterId, formID, activityId, chartMode);

};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_43.prototype.OpenChartTab = function(tabName, qmpersonId, qmencntrID){

	var alink = "";
	var jlink = "";

	//jw014069: Changed applink from being hardcoded to powerchart.exe to instead use variable containing currently running clone
	alink = 'javascript:APPLINK(0,"$APP_AppName$","/PERSONID=' + qmpersonId + ' /ENCNTRID=' + qmencntrID + ' /FIRSTTAB=^' + tabName + '^");';

	if(document.getElementById("hrefLaunchTab"))
	{
		document.body.removeChild(document.getElementById("hrefLaunchTab"));
	}
	jlink =  document.createElement("<a>");
	jlink.id = "hrefLaunchTab";
	jlink.href = alink;
	document.body.appendChild(jlink);
	document.getElementById("hrefLaunchTab").click();
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_43.prototype.OpenQMPowerNote = function(noteName, qmpersonId, qmencntrID){

	var person_id = qmpersonId;
	var encounter_id = qmencntrID;
	var noteset = "";
	noteset = person_id + "|" + encounter_id + "|";

	noteset += noteName;
	noteset += "|0";

	var noteXmlStr = MPAGES_EVENT("POWERNOTE", noteset);
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_43.prototype.OpenQMMedsRec = function(qmpersonId, qmencntrID){

	var mrObject = {};
	mrObject = window.external.DiscernObjectFactory("ORDERS");
	mrObject.PersonId = qmpersonId;
 	mrObject.EncntrId = qmencntrID;
 	mrObject.reconciliationMode = 3;
	MP_Util.LogMpagesEventInfo(null,"ORDERS","OpenQMMedsRec","qualitymeasures.js","OpenQMMedsRec");
	mrObject.LaunchOrdersMode(2, 0, 0); //2 -  Meds Rec
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_43.prototype.InitSubToggles = function(par, tog){
	 var i18nCore = i18n.discernabu;
		    var toggleArray = Util.Style.g(tog, par, "span");
		    for (var k=0; k<toggleArray.length; k++) {
		        Util.addEvent(toggleArray[k], "click", MP_Util.Doc.ExpandCollapse);
		        var checkClosed = Util.gp(Util.gp(toggleArray[k]));
		        if (Util.Style.ccss(checkClosed, "closed")) {
		            toggleArray[k].innerHTML = "+";
		            toggleArray[k].title = i18nCore.SHOW_SECTION;
		        }
		    }
};

cerner.lh_quality_measures_43.prototype.LoadCondition = function(element,comp){

	//Get the value selected in the drop down
	var selectedValue = element.value;
	var params = [];

	//Create the callback function
	var callback = function(compReference){
		compReference.render();
	}

	//Update the cclParams value
	params.push("mine");
	params.push(comp.getProperty("personId"));
	params.push(comp.getProperty("encounterId"));
	params.push(comp.getProperty("userId"));
	params.push(comp.getProperty("positionCd"));
	params.push(comp.getProperty("pprCd"));
	params.push(comp.getOption("encntrFilter"));
	params.push(comp.getOption("lookbackNum"));
	params.push(comp.getOption("lookbackUnit"));
	params.push(selectedValue);

	comp.cclParams = params;

	//Update the cclProgram value if needed
	//comp.cclProgram = "lh_mp_get_filtered_qual"

	comp.setProperty("headerSubTitle", "Loading...");

	//call the loadData function which will make the CCL call and load its response into the component.
	comp.loadData(callback);

};

/*Intermountain Maternity Charging Custom Component*/
MPage.namespace("cerner");

cerner.MaternityChargingComponent = function(){

};

cerner.MaternityChargingComponent.prototype = new MPage.Component();
cerner.MaternityChargingComponent.prototype.constructor = cerner.MaternityChargingComponent;
cerner.MaternityChargingComponent.prototype.base = MPage.Component.prototype;
cerner.MaternityChargingComponent.name = "cerner.MaternityChargingComponent";

cerner.MaternityChargingComponent.prototype.getCriterion = function(){
    //Using this temporarily
    var js_criterion = JSON.parse(m_criterionJSON);
    return MP_Util.GetCriterion(js_criterion, CERN_static_content);
};

cerner.MaternityChargingComponent.prototype.finalizeComponent = function(html){
    var target = this.getTarget();
    target.innerHTML = html;
	var i18nCore = i18n.discernabu;
	var toggleArray = Util.Style.g("sub-sec-hd-tgl", document.getElementById(this.getComponentUid()+"storkDetails"), "span");
	for (var k = 0; k < toggleArray.length; k++) {
		Util.addEvent(toggleArray[k], "click", MP_Util.Doc.ExpandCollapse);
		var checkClosed = Util.gp(Util.gp(toggleArray[k]));
		if (Util.Style.ccss(checkClosed, "closed")) {
			toggleArray[k].innerHTML = "+";
			toggleArray[k].title = i18nCore.SHOW_SECTION;
		}
	}

	var self = this;
	$("#" + this.getComponentUid()+"chargesButton").click(function(){
        self.submitCharge();
	});
	
	var checkBoxForm = document.getElementById(this.getComponentUid()+"inputForm");
	var formLength = checkBoxForm.length;
	var i = 0;

	for(i = 0; i < formLength;i++){
		if(checkBoxForm.elements[i].type ==="checkbox"){
			if(checkBoxForm.elements[i].checked){
				$("#" + this.getComponentUid()+"checkBox"+i).click(function(){
					self.checkEvent();
				});
			}
		}
	}
};

cerner.MaternityChargingComponent.prototype.render = function(){
    this.retrieveComponentData();
};

cerner.MaternityChargingComponent.prototype.retrieveComponentData = function(){
    var self = this;
    var sendAr = [];
    var scriptRequest = new ScriptRequest();

    sendAr.push(
        "^MINE^"
        , this.getCriterion().encntr_id + ".0"
    );

    scriptRequest.setProgramName("ihc_storkbytes");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(true);
    scriptRequest.setResponseHandler(function(scriptReply){
        self.handleDataRetrievalReply(scriptReply.getResponse());
    });
    scriptRequest.performRequest();
};

cerner.MaternityChargingComponent.prototype.handleDataRetrievalReply = function(response){
    this.renderComponent(response);
};


cerner.MaternityChargingComponent.prototype.submitCharge = function(){	
	MP_Util.LoadSpinner(this.getComponentUid()+"inputForm");
	var checkBoxForm = document.getElementById(this.getComponentUid()+"inputForm");
	var formLength = checkBoxForm.length;
	var chargesJSON = "{'CHARGES':{'QUAL':[";
	var i = 0;
	var x= 0;
	for(i = 0; i < formLength;i++){
		if(checkBoxForm.elements[i].type ==="checkbox"){
			if(checkBoxForm.elements[i].checked){
				var eventRow = document.getElementById(this.getComponentUid()+"storkEventRow"+i);
				//eventRow.setAttribute("class","disabled");
				//eventRow.setAttribute("title","Charge has already been dropped");
				//checkBoxForm.elements[i].disabled = true;
				//checkBoxForm.elements[i].setAttribute("style","background:grey;");
				if(x == 0){
					chargesJSON += "{'code':'"+checkBoxForm.elements[i].value+"',";
					x++;
				}else{
					chargesJSON += ",{'code':'"+checkBoxForm.elements[i].value+"',";
				}
				chargesJSON += "'service_date_time':'"+document.getElementById(this.getComponentUid()+"storkDateRow"+i).innerHTML+"',";
				chargesJSON += "'quantity':"+document.getElementById(this.getComponentUid()+"storkDurRow"+i).innerHTML+"}";
			}
		}
	}
	chargesJSON += "]}}";
	
	var self = this;
    var sendAr = [];
    var scriptRequest = new ScriptRequest();

    sendAr.push(
        "^MINE^"
        , this.getCriterion().encntr_id + ".0"
		, this.getCriterion().provider_id + ".0"
		,"^0^" //this is 0 since we use the date attached to each event now
		,"^DISCERN ABU^" //this doesn't really matter
		,"^{'DX_ITEMS':{'dxList':[]}}^" //sending in blank diagnosis list since we don't need them
		,"^"+chargesJSON+"^"
		,"^CDM^"
		,0 //leaving performing location 0 for now
    );

    scriptRequest.setProgramName("ihc_mp_submit_charges_by_code");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(true);
    scriptRequest.setResponseHandler(function(scriptReply){
		dummy = setTimeout(function(){self.handleSubmissionReply(scriptReply.getResponse())},2000);
    });
    scriptRequest.performRequest();
	
};

cerner.MaternityChargingComponent.prototype.handleSubmissionReply = function(response){
	this.render();
};

cerner.MaternityChargingComponent.prototype.checkEvent = function (){
	var checkBoxForm = document.getElementById(this.getComponentUid()+"inputForm");
	var formLength = checkBoxForm.length;
	var checkedFlag = 0;
	var i = 0;
	for(i = 0; i < formLength;i++){
		if(checkBoxForm.elements[i].type ==="checkbox"){
			if(checkBoxForm.elements[i].checked){
				checkedFlag = 1;
				break;
			}
		}
	}
	var button = document.getElementById(this.getComponentUid()+"chargesButton");
	if(checkedFlag === 0){
		button.setAttribute("disabled","true");	
	}else{
		button.removeAttribute("disabled");	
	}
};

cerner.MaternityChargingComponent.prototype.renderComponent = function(response){
    var html = "";
	var criterion = this.getCriterion();
    var qual = response.QUAL || [];
    var qLen = qual.length;
    var i;
	var messageText="";
	var iList = response.INFO || [];
    var iLen = iList.length;
    for (i = 0; i < iLen; i++){
		if(i==0){
			messageText = iList[i].MSG;
		}else{
			messageText += " - "+iList[i].MSG;
		}
	}
	html += "<form id = '"+this.getComponentUid()+"inputForm' >";
    html += "<table style='margin-bottom:10px;'>";
    html += "<tr>";
    html += "<th title ='"+messageText+"'>" + "Event" + "</td>";
	html += "<th>" + "Event duration (Minutes)" + "</td>";
    html += "<th>" + "Charge Codes" + "</td>";
    html += "<th>" + "Event Start Date/Time" + "</td>";
    html += "<th>" + "Event End Date/Time" + "</th>";
    html += "</tr>";
	var diabledCount = 0;
    for (i = 0; i < qLen; i++){
        var row = qual[i];
        html += "<tr>";
		if(row.DISABLE_IND == 1){
			html += "<td title='"+row.DISABLE_REASON+"' class='disabled'><input style = 'background:grey;' type='checkbox' name='event' value='"+row.EVENT_CHARGE_NUMBER+"' disabled> " + row.EVENT + "</td>";
			diabledCount++;
		}else{
			html += "<td id='"+this.getComponentUid()+"storkEventRow"+i+"'><input id='"+this.getComponentUid()+"checkBox"+i+"' class='activeCheckbox' type='checkbox' name='event' value='"+row.EVENT_CHARGE_NUMBER+"' checked> " + row.EVENT + "</td>";
		}
        html += "<td id='"+this.getComponentUid()+"storkDurRow"+i+"'>" + row.EVENT_DUR_MIN + "</td>";
        html += "<td>" + row.EVENT_CHARGE_NUMBER + "</td>";
        html += "<td id = '"+this.getComponentUid()+"storkDateRow"+i+"'>" + row.EVENT_START_DT_TM_STR + "</td>";
        html += "<td>" + row.EVENT_STOP_DT_TM_STR + "</td>";
        html += "</tr>";
    }
    html += "</table>";
	if(diabledCount == qLen){
		html += "<input id='"+this.getComponentUid()+"chargesButton' class = 'button' type='button' value='Submit Charges' disabled>";
	}else{
		html += "<input id='"+this.getComponentUid()+"chargesButton' class = 'button' type='button' value='Submit Charges'>";
	}
	html += "</form><br/>";
	html +="<div class='sub-sec closed' id='"+this.getComponentUid()+"storkDetails'><h3 class='sub-sec-hd maternity-charging-sec-height'><span class='sub-sec-hd-tgl' title='hide section'>-</span><span class='sub-sec-title'>Details </span></h3>";
	html += "<div class='sub-sec-content'><div>";
    html += "<table style='margin-bottom:10px;'>";
    html += "<tr>";
    html += "<th>" + "Event" + "</th>";
    html += "<th>" + "Event Start Date Time" + "</td>";
    html += "</tr>";
    var elist = response.ELIST || [];
    var eLen = elist.length;
    for (i = 0; i < eLen; i++){
        var item = elist[i];
        html += "<tr>";
        html += "<td>" + item.EVENT + "</td>";
        html += "<td>" + item.START_DT_TM_STR + "</td>";
        html += "</tr>";
    }
    html += "</table>";
	html += "</div></div></div>";

    this.finalizeComponent(html);

};

/***
GLUCOSE PROTOCOL Start
*****/
/*
Component i18n
 */
if (typeof i18n == "undefined"){
    var i18n = {};
}

if (typeof i18n.discernabu == "undefined"){
    i18n.discernabu = {};
}

i18n.discernabu.glucose_protocol_o1 = {
    CURRENT_GLUCOSE: "Current Glucose"
    , INSULIN_DRIP: "Insulin Drip"
    , INSULIN_DRIP_DT_TM: "Insulin Date/Time"
    , WEIGHT: "Weight"
    , GLUCOMETER_NUMBER: "Glucometer Number"
    , DRAW_DT_TM: "Draw Date/Time"
    , CURRENT_ENTERAL_RATE: "Current Enteral Rate"
    , CALORIC_TARGET: "24hr Caloric Target"
    , GLUCOSE_CALORIES: "Is patient receiving glucose calories?"
    , BOLUS_CALORIES: "Is patient receiving bolus calories?"
    , YES: "Yes"
    , NO: "No"
    , ALL_DATA_VERIFIED: "All data verified as accurate"
    , SIGN: "Sign"
    , GET_INSTRUCTIONS: "Get Instructions"
    , CANCEL: "Cancel"
    , RESET: "Reset"
    , ORDERS: "Orders"
    , INSTRUCTIONS: "Instructions"
    , ACCEPT: "Accept"
    , DECLINE: "Decline"
    , NOT_ON_PROTOCOL: "Patient not on glucose protocol."
    , GLUCOSE_CALORIES_REF_TITLE: "A patient is considered to be receiving glucose calories if they are receiving any of the following"
    , GLUCOSE_CALORIES_REF_ITEMS: [
        "infusion of D5W at or greater than 100 ml/hr"
        , "enteral feeding at or greater than 50% of the target rate"
        , "TPN at any rate"
    ]
    , BOLUS_CALORIES_REF_TITLE: "Bolus Calories are carbohydrate calories given intermittently over short period of time (minutes to a few hours)."
    , BOLUS_CALORIES_REF_CONTENT: "Most problematic is the situation where the patient eats a meal or a snack."
    , REFERENCE_TEXT: "Reference Text"
    , CLOSE: "Close"
    , PREVIOUS_GLUCOSE : "Previous Glucose"
    , PREVIOUS_GLUCOSE_UNIT_KEY : "Previous Unit Key"
    , PREVIOUSE_GLUCOSE_UNIT : "Previous Unit"
    , PREVIOUS_GLUCOSE_DATE : "Previous Date/Time"
};

var GP1_MOCK = {
    RECORD_DATA:{
        "PROTOCOL_HIGH_IND": 0
        , "PROTOCOL_LOW_IND": 1
        , "GLUCOSE": "88"
        , "GLUCOSE_UNIT_KEY": "MGDL"
        , "GLUCOSE_UNIT": "mg/L"
        , "GLUCOSE_DATE": ""
        , "PREVIOUS_GLUCOSE": ""
        , "PREVIOUS_GLUCOSE_UNIT_KEY": "MGDL"
        , "PREVIOUS_GLUCOSE_UNIT": ""
        , "PREVIOUS_GLUCOSE_DATE": ""
        , "ENTERAL_RATE": 10
        , "ENTERAL_RATE_UNIT_KEY": "MLHR"
        , "ENTERAL_RATE_UNIT": "ml/hr"
        , "CALORIC_TARGET": "2180"
        , "WEIGHT": "120"
        , "WEIGHT_UNIT_KEY": "KG"
        , "WEIGHT_UNIT": "kg"
        , "INSULIN": ""
        , "INSULIN_UNIT_KEY": ""
        , "INSULIN_UNIT": ""
        , "STATUS_DATA": {
            "STATUS": "S"
            , "SUBEVENTSTATUS": [
                {
                    "OPERATIONNAME": ""
                    , "OPERATIONSTATUS": ""
                    , "TARGETOBJECTNAME": ""
                    , "TARGETOBJECTVALUE": ""
                }
            ]
        }
    }
};

var GP1_INSTRUCTIONS_MOCK = {
    RECORD_DATA: {
        DOCUMENT_CD: 63193097
        , INSULIN: [
            {
                VALUE: "90"
                , UNIT: "MGDL"
            }
        ]
        , D50W: [
            {
                VALUE: "20"
                , UNIT: "g"
            }
        ]
        , GLUCOSE: [
            {
                VALUE: "88"
                , UNIT: "MGDL"
            }
        ]
        , ALERTS: [
            {
                MEANING: "TEST"
                , MESSAGE: "This is a test alert"
                , VALUE: [
                    {
                        VALUE: "88"
                        , UNIT: "MGDL"
                    }
                ]
            }
        ]
        , ORDERS: [
            {
                TEXT: "Insulin Drip: 1.8 units."
            }
        ]
        , INSTRUCTIONS: [
            {
                TEXT: "Set insulin drip to 1.8 units."
            }
            , {
                TEXT: "Calculations based on current charted insulin drip value that is 0.0 units."
            }
            , {
                TEXT: "Calculations based on current charted glucose value that is 150.0 mg/dL."
            }
            , {
                TEXT: "Next Measurement in 120.0 minutes."
            }
        ]
        , TRANSACTION_STATUS: {
            SUCCESS_IND: 1
            , DEBUG_ERROR_MESSAGE: "NO ERROR"
            , ERROR_DETAILS: [
                {
                    ERROR_DETAIL: "NONE"
                }
            ]
        }
        , "STATUS_DATA": {
            "STATUS": "S"
            , "SUBEVENTSTATUS": [
                {
                    "OPERATIONNAME": ""
                    , "OPERATIONSTATUS": ""
                    , "TARGETOBJECTNAME": ""
                    , "TARGETOBJECTVALUE": ""
                }
            ]
        }
    }
};

var GP1_P351_Options = {
    POWERFORM_ID: 24190667
    , D50W_INFUSED_AMT_ES_CD: 50813357
    , NEXT_DUE_DTTM_ES_CD: 50813363
    , CURRENT_ENTERAL_RATE_ES_CD: 50813369
    , GLUCOMETER_NUM_ES_CD: 50813375
    , INSULIN_DRIP_ES_CD: 50813381
    , WEIGHT_ES_CD: 50813387
    , CAPILLARY_PROTOCOL_ES_CD: 50813393
    , GLUCOSE_RECEIVING_CAL_ES_CD: 135779601
};

function GlucoseProtocolComponentO1(){

    this.m_glucoseResultsObj = null;
    this.m_pendingGlucoseResultsObj = null;
    this.m_instructionsData = null;
    this.m_instructionsComponentTable = null;
    this.m_additionalMinutes = 0;
    this.m_nextDueDateTime = null;
    this.m_toolTip = null;
    this.m_tooltipTimeout = null;
    this.m_referenceModal = null;
}

GlucoseProtocolComponentO1.prototype = new MPage.Component();
GlucoseProtocolComponentO1.prototype.constructor = GlucoseProtocolComponentO1;
GlucoseProtocolComponentO1.prototype.base = MPage.Component.prototype;
GlucoseProtocolComponentO1.name = "GlucoseProtocolComponentO1";

/*
Methods added to emulate standard components
 */
GlucoseProtocolComponentO1.prototype.getStyles = function(){
    var compId = this.getComponentUid();
    return {
        getId: function(){
            return compId;
        }
        , getNameSpace: function(){
            return "GPO1";
        }
    };
};

GlucoseProtocolComponentO1.prototype.getComponentId = function(){
    return this.getComponentUid();
};

GlucoseProtocolComponentO1.prototype.getCriterion = function(){
    var js_criterion = JSON.parse(m_criterionJSON);
    return MP_Util.GetCriterion(js_criterion, CERN_static_content);
};

GlucoseProtocolComponentO1.prototype.getComponentLoadTimerName = function(){
    return "USR:GLUCOSE.PROTOCOL load component";
};

GlucoseProtocolComponentO1.prototype.getComponentRenderTimerName = function(){
    return "ENG:GLUCOSE_PROTOCOL render component";
};

GlucoseProtocolComponentO1.prototype.finalizeComponent = function(html){
    var target = this.getTarget();
    target.innerHTML = html;
};

/*
Getters/Setters
 */

GlucoseProtocolComponentO1.prototype.getReferenceModal = function(){
    return this.m_referenceModal;
};

GlucoseProtocolComponentO1.prototype.setReferenceModal = function(modal){
    this.m_referenceModal = modal;
};

GlucoseProtocolComponentO1.prototype.createReferenceModal = function(){
    var myi18n = i18n.discernabu.glucose_protocol_o1;
    var modalId = this.getStyles().getId() + "ReferenceModal";
    var modalDialog = new ModalDialog(modalId);
    var closeButton = new ModalButton("GPO1Close");

    closeButton.setText(myi18n.CLOSE).setCloseOnClick(true);
    modalDialog.addFooterButton(closeButton);

    modalDialog.setHeaderTitle(myi18n.REFERENCE_TEXT);
    modalDialog.setLeftMarginPercentage(30);
    modalDialog.setRightMarginPercentage(30);
    modalDialog.setTopMarginPercentage(30);
    modalDialog.setBottomMarginPercentage(30);
    modalDialog.setHeaderCloseFunction(function(){
        MP_ModalDialog.closeModalDialog(modalId);
    });

    MP_ModalDialog.addModalDialogObject(modalDialog);
    return modalDialog;
};

GlucoseProtocolComponentO1.prototype.getToolTip = function(){
    if (!this.m_toolTip){
        this.m_toolTip = new MPageTooltip().setShowDelay(0);
    }
    return this.m_toolTip;
};

GlucoseProtocolComponentO1.prototype.setTooltip = function(tooltip){
    this.m_toolTip = tooltip;
};

GlucoseProtocolComponentO1.prototype.getTooltipTimeout = function(){
    return this.m_tooltipTimeout;
};

GlucoseProtocolComponentO1.prototype.setTooltipTimeout = function(timeout){
    this.m_tooltipTimeout = timeout;
};

GlucoseProtocolComponentO1.prototype.clearTooltip = function(){
    var tooltip = this.getToolTip();
    var tooltipTimeout = this.getTooltipTimeout();
    if (tooltip.getContent()){
        tooltip.getContent().remove();
    }
    if (tooltipTimeout){
        clearTimeout(tooltipTimeout);
        this.setTooltip(null);
    }
};

GlucoseProtocolComponentO1.prototype.getNextDueDateTime = function(){
    return this.m_nextDueDateTime;
};

GlucoseProtocolComponentO1.prototype.setNextDueDateTime = function(dttm){
    this.m_nextDueDateTime = dttm;
};

GlucoseProtocolComponentO1.prototype.getAdditionalMinutes = function(){
    return this.m_additionalMinutes;
};

GlucoseProtocolComponentO1.prototype.setAdditionalMinutes = function(minutes){
    this.m_additionalMinutes = minutes;
};

GlucoseProtocolComponentO1.prototype.getGlucoseResultsObj = function(){
    return this.m_glucoseResultsObj;
};

GlucoseProtocolComponentO1.prototype.setGlucoseResultsObj = function(obj){
    this.m_glucoseResultsObj = obj;
};

GlucoseProtocolComponentO1.prototype.getPendingGlucoseResultsObj = function(){
    return this.m_pendingGlucoseResultsObj;
};

GlucoseProtocolComponentO1.prototype.setPendingGlucoseResultsObj = function(obj){
    this.m_pendingGlucoseResultsObj = obj;
};

GlucoseProtocolComponentO1.prototype.getInstructionsData = function(){
    return this.m_instructionsData;
};

GlucoseProtocolComponentO1.prototype.setInstructionsData = function(instructionsData){
    this.m_instructionsData = instructionsData;
};

GlucoseProtocolComponentO1.prototype.getInstructionsComponentTable = function(){
    return this.m_instructionsComponentTable;
};

GlucoseProtocolComponentO1.prototype.setInstructionsComponentTable = function(table){
    this.m_instructionsComponentTable = table;
};

/*
Kick off component
 */
GlucoseProtocolComponentO1.prototype.render = function(){
    this.retrieveComponentData();
};

/*
Main component methods
 */
GlucoseProtocolComponentO1.prototype.convertToCCLDate = function(dttm){
    if (!dttm){
        return "";
    }
    var monthList = [
        "JAN"
        , "FEB"
        , "MAR"
        , "APR"
        , "MAY"
        , "JUN"
        , "JUL"
        , "AUG"
        , "SEP"
        , "OCT"
        , "NOV"
        , "DEC"
    ];

    //Format: DD-MMM-YYYY
    var cclDate = "";
    cclDate += (dttm.getDate() < 10) ? "0" + dttm.getDate() : dttm.getDate();
    cclDate += ("-" + monthList[dttm.getMonth()] + "-");
    cclDate += dttm.getFullYear();
    cclDate += " ";
    cclDate += (dttm.getHours() + ":");
    cclDate += (dttm.getMinutes() + ":");
    cclDate += (dttm.getSeconds());
    return cclDate;
};

GlucoseProtocolComponentO1.EVENT_SET_TYPES = {
    NUMBER: "NUM"
    , DATE: "DATE"
    , TEXT: "TXT"
};

GlucoseProtocolComponentO1.prototype.generateResultJson = function(eventSetCd, value, type, description){
    var rJson = "";
    if (!eventSetCd || !type || !value){
        return "";
    }

    rJson += "{";
    rJson +=   "^type^:^" + type + "^";
    rJson +=   ",^event_set_cd^:" + eventSetCd + ".0";
    rJson +=   ",^string_result^:^" + value + "^";
    rJson +=   ",^description^:^" + (description || "") + "^";
    rJson +=   ",^action^:^AUTH^";
    rJson += "}";

    return rJson;
};

GlucoseProtocolComponentO1.prototype.generatePendingJson = function(){
    //Get the original and pending JSONs
    var originalResults = this.getGlucoseResultsObj();
    var pendingResults = this.getPendingGlucoseResultsObj();
    var sJson = "";
    var count = 0;
    var configJson = "";
    var tempJson;
    var eventSetTypes = GlucoseProtocolComponentO1.EVENT_SET_TYPES;
    var tempDate;

    if (!originalResults || !pendingResults){
        return "";
    }

    //Check for Glucose Calories
    if (originalResults.GLUCOSE_CALS !== pendingResults.GLUCOSE_CALS){
        tempJson = this.generateResultJson(this.getOption("GLUCOSE_RECEIVING_CAL_ES_CD"), pendingResults.GLUCOSE_CALS, eventSetTypes.TEXT, "Glucose Calories");
        if (tempJson){
            configJson += tempJson;
            count++;
        }
    }

    tempJson = this.generateResultJson(this.getOption("NEXT_DUE_DTTM_ES_CD"), this.convertToCCLDate(this.getNextDueDateTime()), eventSetTypes.DATE, "Next Due Date Time");
    if (tempJson){
        configJson += tempJson;
        count++;
    }


    tempJson = this.generateResultJson(this.getOption("CURRENT_ENTERAL_RATE_ES_CD"), pendingResults.ENTERAL_RATE, eventSetTypes.NUMBER, "Current Enteral Rate");
    if (tempJson){
        configJson += tempJson;
        count++;
    }


    tempJson = this.generateResultJson(this.getOption("GLUCOMETER_NUM_ES_CD"), pendingResults.GLUCOMETER_NUM, eventSetTypes.NUMBER, "Glucometer Number");
    if (tempJson){
        configJson += tempJson;
        count++;
    }


    tempJson = this.generateResultJson(this.getOption("INSULIN_DRIP_ES_CD"), pendingResults.INSULIN, eventSetTypes.NUMBER, "Insulin Drip");
    if (tempJson){
        configJson += tempJson;
        count++;
    }


    tempJson = this.generateResultJson(this.getOption("WEIGHT_ES_CD"), pendingResults.WEIGHT, eventSetTypes.NUMBER, "Weight");
    if (tempJson){
        configJson += tempJson;
        count++;
    }

    tempJson = this.generateResultJson(this.getOption("CAPILLARY_PROTOCOL_ES_CD"), pendingResults.GLUCOSE, eventSetTypes.NUMBER, "Blood Glucose, Capillary Protocol");
    if (tempJson){
        configJson += tempJson;
        count++;
    }

    sJson += "~{";
    sJson +=   "^events_config^:{";
    sJson +=       "^config^:[";
    sJson +=           configJson;
    sJson +=       "]";
    sJson +=       ",^count^:" + count;
    sJson +=   "}";
    sJson += "}~";

    return sJson;
};

GlucoseProtocolComponentO1.prototype.saveClinicalEvents = function(){
    var self = this;
    //Get the original and pending JSONs
    var criterion = this.getCriterion();
    var sendAr = [];

    var eventsJson = this.generatePendingJson();

    sendAr.push(
        "^MINE^"
        , criterion.person_id + ".0"
        , criterion.encntr_id + ".0"
        , criterion.provider_id + ".0"
        , "^POWERCHART^"
        , eventsJson
    );

    MP_Util.LogError("mp_save_clinical_event - request<br />" + sendAr.join(","));

    var scriptRequest = new ScriptRequest();
    scriptRequest.setProgramName("mp_save_clinical_event");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(false);
    scriptRequest.setName("saveClinicalData");
    scriptRequest.setResponseHandler(function(scriptReply){
        var status;
        if (!scriptReply){
            status = 'F';
        } else {
            status = scriptReply.getStatus();
            MP_Util.LogError("mp_save_clinical_event - response<br />" + JSON.stringify(scriptReply.getResponse()));
        }

        if (status !== 'S'){
            alert("Failed to save data")
        }

    });
    scriptRequest.performRequest();
};

GlucoseProtocolComponentO1.prototype.retrieveComponentData = function(){
    var self = this;
    var sendAr = [];
    var scriptRequest = new ScriptRequest();
    var criterion = this.getCriterion();

    sendAr.push(
        "^MINE^"
        , criterion.person_id + ".0"
        , criterion.encntr_id + ".0"
    );

    MP_Util.LogError("ihc_glucose_results - request<br />" + sendAr.join(","));

    scriptRequest.setProgramName("ihc_glucose_results");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(true);
    scriptRequest.setName("getGlucoseResults");
    scriptRequest.setResponseHandler(function(scriptReply){
        var response;
        if (!scriptReply){
            self.finalizeComponent(MP_Util.HandleErrorResponse(self.getStyles().getNameSpace(), "Component Data Retrieval Failed"));
            return;
        }

        MP_Util.LogError("ihc_glucose_results - reply<br />" + JSON.stringify(scriptReply.getResponse()));
        var status = scriptReply.getStatus();

        if (status === 'S'){
            response = scriptReply.getResponse();
            self.processResultsData(response);
            var isEnrolled = (response.PROTOCOL_HIGH_IND || response.PROTOCOL_LOW_IND);
            if (isEnrolled){
                self.renderComponent();
            } else {
                var noProtocolText = i18n.discernabu.glucose_protocol_o1.NOT_ON_PROTOCOL;
                self.finalizeComponent("<span class='res-none'>" + noProtocolText + "</span>")
            }
        } else {
            self.finalizeComponent(MP_Util.HandleErrorResponse(self.getStyles().getNameSpace(), "Component Data Retrieval Failed"));
        }
    });
    scriptRequest.performRequest();

    //Will have to call ihc_glucose_results
//    this.setGlucoseResultsObj(GP1_MOCK.RECORD_DATA);
//    this.processResultsData(GP1_MOCK.RECORD_DATA);
//    this.renderComponent();
};

GlucoseProtocolComponentO1.prototype.processResultsData = function(resultsData){
    //Create a copy
    if (!resultsData || typeof resultsData !== 'object'){
        return;
    }
    var tempDate;
    var tempDateInMsUtc = 0;
    //Need to add date fields
    if (resultsData.GLUCOSE_DATE){
        tempDate = new Date();
        tempDate.setISO8601(resultsData.GLUCOSE_DATE);
        tempDateInMsUtc = tempDate.getTime();
    } else if (!resultsData.GLUCOSE_DATE && !resultsData.GLUCOSE){
        tempDate = new Date();
        tempDateInMsUtc = tempDate.getTime();
    }
    resultsData.GLUCOSE_DATE_IN_MS_UTC = tempDateInMsUtc;
    tempDateInMsUtc = 0;

    if (resultsData.PREVIOUS_GLUCOSE_DATE){
        tempDate = new Date();
        tempDate.setISO8601(resultsData.PREVIOUS_GLUCOSE_DATE);
        tempDateInMsUtc = tempDate.getTime();
    }
    resultsData.PREVIOUS_GLUCOSE_DATE_IN_MS_UTC = tempDateInMsUtc;
    tempDateInMsUtc = 0;

    if (resultsData.LAST_DOCUMENT_DT_TM){
        tempDate = new Date();
        tempDate.setISO8601(resultsData.LAST_DOCUMENT_DT_TM);
        tempDateInMsUtc = tempDate.getTime();
    }
    resultsData.LAST_DOCUMENT_DATE_IN_MS_UTC = tempDateInMsUtc;
    tempDateInMsUtc = 0;

    if (resultsData.NEXT_DUE_DATE){
        tempDate = new Date();
        tempDate.setISO8601(resultsData.NEXT_DUE_DATE);
        tempDateInMsUtc = tempDate.getTime();
    }
    resultsData.NEXT_DUE_DATE_IN_MS_UTC = tempDateInMsUtc;
    tempDateInMsUtc = 0;

    if (resultsData.INSULIN_DATE){
        tempDate = new Date();
        tempDate.setISO8601(resultsData.INSULIN_DATE);
        tempDateInMsUtc = tempDate.getTime();
    } else if (!resultsData.INSULIN_DATE && !resultsData.INSULIN){
        tempDate = new Date();
        tempDateInMsUtc = tempDate.getTime();
    }
    resultsData.INSULIN_DATE_IN_MS_UTC = tempDateInMsUtc;

    if (!resultsData.GLUCOMETER_NUM){
        resultsData.GLUCOMETER_NUM = 0;
    }

    //Check for RADIO button fields
    if (!resultsData.GLUCOSE_CALS){
        resultsData.GLUCOSE_CALS = "NULL";
    }

    if (!resultsData.BOLUS_CALS){
        resultsData.BOLUS_CALS = "NULL";
    }

    var pendingObj = jQuery.extend({}, resultsData);
    this.setGlucoseResultsObj(resultsData);
    this.setPendingGlucoseResultsObj(pendingObj);
};

GlucoseProtocolComponentO1.prototype.createNewDocument = function(didAccept){
    var self = this;
    var sendAr = [];
    var scriptRequest = new ScriptRequest();
    var criterion = this.getCriterion();

    var instructionsData = this.getInstructionsData() || {};
    var documentCd = instructionsData.DOCUMENT_CD;
    //We don't have a document event code, so can't create the document
    if (!documentCd){
        alert("Document could not be created at this time.");
        return; //Throw alert!
    }

    sendAr.push(
        "^MINE^"
        , criterion.person_id + ".0"
        , criterion.provider_id + ".0"
        , criterion.encntr_id + ".0"
        , documentCd + ".0"
        , "^Glucose Protocol Instructions^"
        , "^" + this.generateDocumentContent(didAccept) + "^"
        , criterion.ppr_cd + ".0"
    );

    MP_Util.LogError("mp_add_document - request<br />" + sendAr.join(","));

    scriptRequest.setProgramName("mp_add_document_v2");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(false);
    scriptRequest.setName("addDocument");
    scriptRequest.setResponseHandler(function(scriptReply){
        MP_Util.LogError("mp_add_document - reply<br />" + JSON.stringify(scriptReply.getResponse()));
        var status = scriptReply.getStatus();
        if (status !== 'S'){
            alert("Document could not be created at this time.");
        } else {
            alert("Document created successfully.");
        }
    });
    scriptRequest.performRequest();
};

GlucoseProtocolComponentO1.prototype.launchPowerform = function(){
    var criterion = this.getCriterion();
    var powerformId = this.getOption("POWERFORM_ID");
    var powerformObj;

    if (!window.external || !window.external.DiscernObjectFactory){
        return;
    }

    powerformObj = window.external.DiscernObjectFactory("POWERFORM");
    powerformObj.OpenForm(criterion.person_id, criterion.encntr_id, powerformId, 0, 0);
};

GlucoseProtocolComponentO1.prototype.calculateNextDueDate = function(additionalMinutes){
    var currentDate = new Date();
    currentDate.setMinutes(currentDate.getMinutes() + additionalMinutes);
    return currentDate;
};

GlucoseProtocolComponentO1.prototype.getGlucoseCaloryInd = function(){
    var originalResultsObj = this.getGlucoseResultsObj();
    var pendingResultsObj = this.getPendingGlucoseResultsObj();
    if (originalResultsObj.GLUCOSE_CALS === "YES" && pendingResultsObj.GLUCOSE_CALS === "NO"){
        return 1;
    }
    return 0;
};

GlucoseProtocolComponentO1.prototype.retrieveGlucoseInstructionsData = function(){
    var self = this;
    var sendAr = [];
    var scriptRequest = new ScriptRequest();

    //Grab the pending object, and if it doesn't exist, we'll attempt to use the original results obj
    var glucoseResultsObj = this.getPendingGlucoseResultsObj() || this.getGlucoseResultsObj();

    //Sanity check
    if (!glucoseResultsObj){
        return;
    }

    //Need to gather all the necessary parts
    /*
        OUTPUT
        WEIGHT <string>
        WEIGHT UNIT <string>
        current glucose <string>
        current glucose unit <string>
        current glucose date <float>
        previous glucose <string>
        previous glucose unit <string>
        previous glucose date <float>
        insulin drip <string>
        insulin drip unit <string>
        insulin drip date <float>
        high ind <int>
        low ind <int>
        glucose calories <int>
        bolus calories <int>
     */

    sendAr.push(
        "^MINE^"
        , "^" + glucoseResultsObj.WEIGHT + "^"
        , "^" + glucoseResultsObj.WEIGHT_UNIT_KEY + "^"
        , "^" + glucoseResultsObj.GLUCOSE + "^"
        , "^" + glucoseResultsObj.GLUCOSE_UNIT_KEY + "^"
        , glucoseResultsObj.GLUCOSE_DATE_IN_MS_UTC + ".0"
        , "^" + glucoseResultsObj.PREVIOUS_GLUCOSE + "^"
        , "^" + glucoseResultsObj.PREVIOUS_GLUCOSE_UNIT_KEY + "^"
        , glucoseResultsObj.PREVIOUS_GLUCOSE_DATE_IN_MS_UTC + ".0"
        , "^" + glucoseResultsObj.INSULIN + "^"
        , "^" + glucoseResultsObj.INSULIN_UNIT_KEY + "^"
        , glucoseResultsObj.INSULIN_DATE_IN_MS_UTC + ".0"
        , glucoseResultsObj.PROTOCOL_HIGH_IND
        , glucoseResultsObj.PROTOCOL_LOW_IND
        , this.getGlucoseCaloryInd()
    );

    MP_Util.LogError("ihc_glucose_instructions - request<br />" + sendAr.join(","));

    scriptRequest.setProgramName("ihc_glucose_instructions");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(false);
    scriptRequest.setName("getInstructions");
    scriptRequest.setResponseHandler(function(scriptReply){
        MP_Util.LogError("ihc_glucose_instructions - reply<br />" + JSON.stringify(scriptReply.getResponse()));
        var status = scriptReply.getStatus();
        if (status === 'S' || status === 'Z'){
            self.setInstructionsData(scriptReply.getResponse());
            //get the 'next minutes' field
            var response = scriptReply.getResponse();
            var alerts = response.ALERTS || [];
            var aLen = alerts.length;
            var i;
            var minutes = 0;
            for (i = 0; i < aLen; i++){
                var alert = alerts[i];
                if (alert.MEANING === "MEASUREMENT_REMINDER"){
                    //Check the value
                    if (alert.VALUE && alert.VALUE.length){
                        minutes = parseFloat(alert.VALUE[0].VALUE);
                    }
                    break;
                }
            }
            self.setAdditionalMinutes(minutes);
            //Calculate next due date
            self.setNextDueDateTime(self.calculateNextDueDate(minutes));
            self.renderInstructionsSection();
        } else {
            alert("Unable to retrieve instructions.");
        }
    });
    scriptRequest.performRequest();
//    this.setInstructionsData(GP1_INSTRUCTIONS_MOCK.RECORD_DATA);
//    this.renderInstructionsSection(GP1_INSTRUCTIONS_MOCK.RECORD_DATA);

};

GlucoseProtocolComponentO1.prototype.renderInstructionsSection = function(){
    var compId = this.getStyles().getId();
    var myi18n = i18n.discernabu.glucose_protocol_o1;
    var html = "";
    var jqInstructionsSection = $("#" + compId + "InstructionSectionCont");
    html += this.buildInstructionsComponentTable().render();

    //Create button section
    html += "<div id='" + compId + "InstructionSecBtnCont' class='gpo1-inst-sec-btn-cont'>";
    html +=     "<input type='button' id='" + compId + "InstructionAcceptBtn' class='gpo1-btn' value='" + myi18n.ACCEPT + "' />";
    html +=     "<input type='button' id='" + compId + "InstructionDeclineBtn' class='gpo1-btn' value='" + myi18n.DECLINE + "' />";
    html += "</div>";

    jqInstructionsSection.html(html);
};

GlucoseProtocolComponentO1.prototype.renderComponent = function(){
    var compId = this.getStyles().getId();
    var html = "";

    //Build alert section
    html += "<div id='" + compId + "AlertsContainer' class='gpo1-alert-container'></div>";
    //Build results display section
    html += "<div id='" + compId + "ResultsSectionCont'>";
    html += this.buildResultsDisplaySectionHtml();
    html += "</div>";
    html += "<div id='" + compId + "InstructionSectionCont' class='gpo1-instruction-section-cont'></div>";

    this.finalizeComponent(html);

    this.attachEventListeners();
    this.initializeDatepicker();

    var glucoseResultsObj = this.getGlucoseResultsObj();
    var lastDocumentedGlucoseDate = new Date(glucoseResultsObj.LAST_DOCUMENT_DATE_IN_MS_UTC);
    var nextGlucoseDate = new Date(glucoseResultsObj.NEXT_DUE_DATE_IN_MS_UTC);
    var currentDate = new Date();
    var notificationManager = this.getNotificationManager();
    notificationManager.setJqContainer($("#" + compId + "AlertsContainer"));
    notificationManager.clearNotifications();
    if(this.isTimeDifferenceLessThan(currentDate.getTime(), lastDocumentedGlucoseDate.getTime(), 600000)){
        notificationManager.appendNotification("LESS_THAN_10", {PRIMARY: "You must wait at least 10 minutes until the next assessment to get accurate instructions."}, 4);
        $("#" + this.getStyles().getId() + "SignBtn").prop("disabled", true);
    }
    else if(this.isTimeDifferenceLessThan(currentDate.getTime(), lastDocumentedGlucoseDate.getTime(), 2400000)){
        notificationManager.appendNotification("LESS_THAN_40", {PRIMARY : "Calculation of instructions will be influenced by the short interval between measurements and may not be clinically appropriate.  Consider waiting."}, 4);
    }
    if(currentDate.getTime() - nextGlucoseDate.getTime() > 1800000){
        notificationManager.appendNotification("GREATER_THAN_30", {PRIMARY: "Attention", SECONDARY: "Late to chart glucose.  Please do it now."}, notificationManager.NOTIFICATION_TYPES.ERROR);
    }
};

GlucoseProtocolComponentO1.prototype.buildCaloricReferenceHtml = function(){
    var myi18n = i18n.discernabu.glucose_protocol_o1;
    var html = "";
    html += "<div class='gpo1-tooltip'>";
    html += "<div>" + myi18n.GLUCOSE_CALORIES_REF_TITLE + ":&nbsp;</div>";

    var items = myi18n.GLUCOSE_CALORIES_REF_ITEMS || [];
    var iLen = items.length;
    var i;
    html += "<ul>";
    for (i = 0; i < iLen; i++){
        html += "<li>" + items[i] + "</li>";
    }
    html += "</ul>";
    html += "</div>";
    return html;
};

GlucoseProtocolComponentO1.prototype.buildBolusReferenceHtml = function(){
    var myi18n = i18n.discernabu.glucose_protocol_o1;
    var html = "";
    html += "<div class='gpo1-tooltip'>";
    html += "<div>" + myi18n.BOLUS_CALORIES_REF_TITLE + "</div><br />";
    html += "<div>" + myi18n.BOLUS_CALORIES_REF_CONTENT + "</div>";

    html += "</div>";
    return html;
};

GlucoseProtocolComponentO1.prototype.buildBolusAlertHtml = function(){
    var html = "";
    html += "<div class='gpo1-tooltip'>";
    html += "<div>eProtocol insulin is not designed to treat patients receiving bolus calories.  Consider treating with a subcutaneous insulin regimen.</div>";
    html += "</div>";
    return html;
};

GlucoseProtocolComponentO1.prototype.buildResultsDisplaySectionHtml = function(){
    var compId = this.getStyles().getId();
    var glucoseResultsObj = this.getGlucoseResultsObj();
    var myi18n = i18n.discernabu.glucose_protocol_o1;
    var dateFormatter = MP_Util.GetDateFormatter();
    var fullDate4Year = mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR;
    var time24Hour = mp_formatter.DateTimeFormatter.TIME_24HOUR_NO_SECONDS;
    var glucoseDateStr = "";
    var glucoseTimeStr = "";
    var insulinDateStr = "";
    var insulinTimeStr = "";
    var prevGlucoseDatestr = "";
    var prevGlucoseTimestr = "";
    var html = "";

    if (!glucoseResultsObj){
        return "";
    }

    if (glucoseResultsObj.GLUCOSE_DATE_IN_MS_UTC){
        //populate date/time strings
        var glucoseDate = new Date(glucoseResultsObj.GLUCOSE_DATE_IN_MS_UTC);
        //glucoseDate.setISO8601(glucoseResultsObj.GLUCOSE_DATE);
        glucoseDateStr = dateFormatter.format(glucoseDate, fullDate4Year);
        glucoseTimeStr = dateFormatter.format(glucoseDate, time24Hour);
    }

    if (glucoseResultsObj.INSULIN_DATE_IN_MS_UTC){
        var insulinDate = new Date(glucoseResultsObj.INSULIN_DATE_IN_MS_UTC);
        //insulinDate.setISO8601(glucoseResultsObj.INSULIN_DATE);
        insulinDateStr = dateFormatter.format(insulinDate, fullDate4Year);
        insulinTimeStr = dateFormatter.format(insulinDate, time24Hour);
    }

    if(glucoseResultsObj.PREVIOUS_GLUCOSE_DATE_IN_MS_UTC){
        var prevGlucoseDate = new Date(glucoseResultsObj.PREVIOUS_GLUCOSE_DATE_IN_MS_UTC);
        prevGlucoseDatestr = dateFormatter.format(prevGlucoseDate, fullDate4Year);
        prevGlucoseTimestr = dateFormatter.format(prevGlucoseDate, time24Hour);
    }

    html += "<div id='" + compId + "ResultsDispCont' class='gpo1-results-disp-cont' >";
    //Weight Row
    html +=     "<div class='gpo1-results-disp-row'>";
    html +=         "<span class='gpo1-results-disp-lbl'>" + myi18n.WEIGHT + ":</span>";
    html +=         "<span class='gpo1-results-disp-input'><input class='gpo1-numeric-field' type='text' id='" + compId + "WeightInput' value='" + (glucoseResultsObj.WEIGHT || "") + "' />";
    html +=             "<span class='gpo1-results-disp-uom'>" + (glucoseResultsObj.WEIGHT_UNIT || "") + "</span>";
    html +=         "</span>";
    html +=     "</div>";
    //Current Glucose Row
    html +=     "<div class='gpo1-results-disp-row'>";
    html +=         "<span class='gpo1-results-disp-lbl'>" + myi18n.CURRENT_GLUCOSE + ":</span>";
    html +=         "<span class='gpo1-results-disp-input'><input class='gpo1-numeric-field' type='text' id='" + compId + "CurrentGlucoseInput' value='" + (glucoseResultsObj.GLUCOSE || "") + "' />";
    html +=             "<span class='gpo1-results-disp-uom'>" + (glucoseResultsObj.GLUCOSE_UNIT || "") + "</span>";
    html +=         "</span>";
    html +=     "</div>";
    //Glucometer Number (Physical # on the device)
    html +=     "<div class='gpo1-results-disp-row'>";
    html +=         "<span class='gpo1-results-disp-lbl'>" + myi18n.GLUCOMETER_NUMBER + ":</span>";
    html +=         "<span class='gpo1-results-disp-input'><input type='text' class='gpo1-numeric-field' id='" + compId + "GlucometerInput' value='" + (glucoseResultsObj.GLUCOMETER_NUM || "") + "' /></span>";
    html +=     "</div>";
    //Draw Dt/tm (Glucose)
    html +=     "<div class='gpo1-results-disp-row'>";
    html +=         "<span class='gpo1-results-disp-lbl'>" + myi18n.DRAW_DT_TM + ":</span>";
    html +=         "<span class='gpo1-results-disp-input'>";
    html +=             "<input type='text' id='" + compId + "DrawDateInput' value='" + glucoseDateStr + "' />";
    html +=             "<input class='gpo1-time-field' type='text' id='" + compId + "DrawTimeInput' value='" + glucoseTimeStr + "' />";
    html +=         "</span>";
    html +=     "</div>";
    //Insulin Drip
    html +=     "<div class='gpo1-results-disp-row'>";
    html +=         "<span class='gpo1-results-disp-lbl'>" + myi18n.INSULIN_DRIP + ":</span>";
    html +=         "<span class='gpo1-results-disp-input'><input class='gpo1-numeric-field' type='text' id='" + compId + "InsulinDripInput' value='" + (glucoseResultsObj.INSULIN || "") + "' />";
    html +=             "<span class='gpo1-results-disp-uom'>" + (glucoseResultsObj.INSULIN_UNIT || "") + "</span>";
    html +=         "</span>";
    html +=     "</div>";
    //Insulin Dt/tm
//    html +=     "<div class='gpo1-results-disp-row'>";
//    html +=         "<span class='gpo1-results-disp-lbl'>" + myi18n.INSULIN_DRIP_DT_TM + ":</span>";
//    html +=         "<span class='gpo1-results-disp-input'>";
//    html +=             "<input type='text' id='" + compId + "InsulinDateInput' value='" + insulinDateStr + "' />";
//    html +=             "<input class='gpo1-time-field' type='text' id='" + compId + "InsulinTimeInput' value='" + insulinTimeStr + "' />";
//    html +=         "</sp
//    html +=     "</div>";
    //Enteral Rate
    html +=     "<div class='gpo1-results-disp-row'>";
    html +=         "<span class='gpo1-results-disp-lbl'>" + myi18n.CURRENT_ENTERAL_RATE + ":</span>";
    html +=         "<span class='gpo1-results-disp-input'><input class='gpo1-numeric-field' type='text' id='" + compId + "EnteralRateInput' value='" + (glucoseResultsObj.ENTERAL_RATE || "") + "' />";
    html +=             "<span class='gpo1-results-disp-uom'>" + (glucoseResultsObj.ENTERAL_RATE_UNIT || "") + "</span>";
    html +=         "</span>";
    html +=     "</div>";
    //Previous Glucose
    html +=     "<div class='gpo1-results-disp-row'>";
    html +=         "<span class='gpo1-results-disp-lbl'>" + myi18n.PREVIOUS_GLUCOSE + ":</span>";
    html +=         "<span class='gpo1-results-disp-input'><input class='gpo1-numeric-field' type='text' id='" + compId + "PreviousGlucoseInput' value='" + (glucoseResultsObj.PREVIOUS_GLUCOSE || "") + "' />";
    html +=             "<span class='gpo1-results-disp-uom'>" + (glucoseResultsObj.GLUCOSE_UNIT || "") + "</span>";
    html +=         "</span>";
    html +=     "</div>";
    //Previous Glucose Date
    //Draw Dt/tm (Glucose)
    html +=     "<div class='gpo1-results-disp-row'>";
    html +=         "<span class='gpo1-results-disp-lbl'>" + myi18n.PREVIOUS_GLUCOSE_DATE + ":</span>";
    html +=         "<span class='gpo1-results-disp-input'>";
    html +=             "<input type='text' id='" + compId + "PreviousDrawDateInput' value='" + prevGlucoseDatestr + "' />";
    html +=             "<input class='gpo1-time-field' type='text' id='" + compId + "PreviousDrawTimeInput' value='" + prevGlucoseTimestr + "' />";
    html +=         "</span>";
    html +=     "</div>";
    //Caloric Target
    /*
    html +=     "<div class='gpo1-results-disp-row'>";
    html +=         "<span class='gpo1-results-disp-lbl'>" + myi18n.CALORIC_TARGET + ":</span>";
    html +=         "<span class='gpo1-results-disp-input'><input class='gpo1-numeric-field' type='text' id='" + compId + "CaloricTargetInput' value='" + (glucoseResultsObj.CALORIC_TARGET || "") + "' /></span>";
    html +=     "</div>";
    */
    html += "</div>";
    html += "<div id='" + compId + "ReferenceDispCont'>";

    //glucose calorie question
    html +=     "<div class='gpo1-results-disp-row'>";
    html +=         "<a id='" + compId + "CaloricLabel' class='gpo1-results-disp-lbl'>" + myi18n.GLUCOSE_CALORIES + "*</a>";
    html +=         "<span class='gpo1-results-disp-input'>";
    html +=             "<label><input type='radio' name='" + compId + "glucosecalories' id='" + compId + "GlucoseCaloriesYesInput' value='" + myi18n.YES + "' " + (glucoseResultsObj.GLUCOSE_CALS === "YES" ? "checked" : "") + " />" + myi18n.YES + "</label>";
    html +=             "<label><input type='radio' name='" + compId + "glucosecalories' id='" + compId + "GlucoseCaloriesNoInput' value='" + myi18n.NO + "' " + (glucoseResultsObj.GLUCOSE_CALS === "NO" ? "checked" : "") + "/>" + myi18n.NO + "</label>";
    html +=         "</span>";
    html +=     "</div>";
    //bolus calorie question
    html +=     "<div class='gpo1-results-disp-row'>";
    html +=         "<a id='" + compId + "BolusLabel' class='gpo1-results-disp-lbl'>" + myi18n.BOLUS_CALORIES + "*</a>";
    html +=         "<span class='gpo1-results-disp-input'>";
    html +=             "<label><input type='radio' name='" + compId + "boluscalories' id='" + compId + "BolusCaloriesYesInput' value='" + myi18n.YES + "' />" + myi18n.YES + "</label>";
    html +=             "<label><input type='radio' name='" + compId + "boluscalories' id='" + compId + "BolusCaloriesNoInput' value='" + myi18n.NO + "' />" + myi18n.NO + "</label>";
    html +=         "</span>";
    html +=     "</div>";

    //Sign/Cancel buttons
    html +=     "<div id='" + compId + "ResultsBtnCont' class='gpo1-results-disp-btn-cont'>";
    html +=         "<input type='button' id='" + compId + "SignBtn' class='gpo1-btn' value='" + myi18n.GET_INSTRUCTIONS + "' />";
    html +=         "<input type='button' id='" + compId + "CancelBtn' class='gpo1-btn' value='" + myi18n.RESET + "' />";
    html +=     "</div>";

    html +=     "<div class='gpo1-results-disp-disclaimer secondary-text'>*" + myi18n.ALL_DATA_VERIFIED + "</div>";

    html += "</div>";

    // Add Alerts To Results View

    return html;
};

GlucoseProtocolComponentO1.prototype.buildInstructionsComponentTable = function(){
    var compId = this.getStyles().getId();
    var myi18n = i18n.discernabu.glucose_protocol_o1;
    var instructionsData = this.getInstructionsData();

    var table = new ComponentTable();
    table.setNamespace(compId + "InstructionTable");
    table.setCustomClass("gpo1-instruction-table");
    table.setIsHeaderEnabled(false);

    var column = new TableColumn();
    column.setColumnId("VALUE");
    column.setCustomClass("gpo1-instruction-col");
    column.setRenderTemplate('${TEXT}');
    table.addColumn(column);

    //Create Orders Group
    var ordersGroup = new TableGroup();
    ordersGroup.setGroupId("ORDERS");
    ordersGroup.setKey("ORDERS");
    ordersGroup.setDisplay(myi18n.ORDERS);
    ordersGroup.setCanCollapse(false);
    ordersGroup.bindData(instructionsData.ORDERS);
    table.addGroup(ordersGroup);

    //Create Instructions Group
    var instructionsGroup = new TableGroup();
    instructionsGroup.setGroupId("INSTRUCTIONS");
    instructionsGroup.setKey("INSTRUCTIONS");
    instructionsGroup.setDisplay(myi18n.INSTRUCTIONS);
    instructionsGroup.setCanCollapse(false);
    instructionsGroup.bindData(instructionsData.INSTRUCTIONS);
    table.addGroup(instructionsGroup);

    this.setInstructionsComponentTable(table);
    return table;
};

GlucoseProtocolComponentO1.prototype.initializeDatepicker = function(){
    var self = this;
    var compId = this.getStyles().getId();
    var jqResultsSectionContainer = $("#" + compId + "ResultsSectionCont");

    //Add datepicker
    var jqDateField = $("#" + compId + "DrawDateInput");
    jqDateField.datepicker({
        onClose: function(dateStr, inst){
            self.enableInstructionsButton();
            var pendingResultsObj = self.getPendingGlucoseResultsObj();
            if (!pendingResultsObj){
                return;
            }
            if (!dateStr){
                jqDateField.addClass("gpo1-validation-fail");
                return;
            }

            var curGlucoseDate = new Date(pendingResultsObj.GLUCOSE_DATE_IN_MS_UTC || 0);
            var pendingGlucoseDate = new Date(inst.selectedYear, inst.selectedMonth, inst.selectedDay, curGlucoseDate.getHours(), curGlucoseDate.getMinutes());
            pendingResultsObj.GLUCOSE_DATE_IN_MS_UTC = pendingGlucoseDate.getTime();
            jqDateField.removeClass("gpo1-validation-fail");
            //Determine if there are invalid fields
            //var jqInvalidInputFields = jqResultsSectionContainer.find("input.gpo1-validation-fail");
            //var invalidFieldsExist = (!!jqInvalidInputFields.length);

            //Disable/enable instructions button
            //$("#" + compId + "SignBtn").prop("disabled", invalidFieldsExist);
        }
    });
    
    var jqPrevGlucoseDateField = $("#" + compId + "PreviousDrawDateInput");
    jqPrevGlucoseDateField.datepicker({
        onClose: function(dateStr, inst){
            var pendingResultsObj = self.getPendingGlucoseResultsObj();
            if(!pendingResultsObj){
                return;
            }
            if(!dateStr){
                jqPrevGlucoseDateField.addClass("gpo1-validation-fail");
            }

            var curPrevGlucoseDate = new Date(pendingResultsObj.PREVIOUS_GLUCOSE_DATE_IN_MS_UTC || 0);
            var pendingPrevGlucoseDate = new Date(inst.selectedYear, inst.selectedMonth, inst.selectedDay, curPrevGlucoseDate.getHours(), curPrevGlucoseDate.getMinutes());
            pendingResultsObj.PREVIOUS_GLUCOSE_DATE_IN_MS_UTC = pendingPrevGlucoseDate.getTime();
            jqPrevGlucoseDateField.removeClass("gpo1-validation-fail");
        }
    });

    //Add insulin datePicker
    var jqInsulinDateField = $("#" + compId + "InsulinDateInput");
    jqInsulinDateField.datepicker({
        onClose: function(dateStr, inst){
            var pendingResultsObj = self.getPendingGlucoseResultsObj();
            if (!pendingResultsObj){
                return;
            }
            if (!dateStr){
                jqDateField.addClass("gpo1-validation-fail");
                return;
            }

            var curInsulinDate = new Date(pendingResultsObj.INSULIN_DATE_IN_MS_UTC || 0);
            var pendingInsulinDate = new Date(inst.selectedYear, inst.selectedMonth, inst.selectedDay, curInsulinDate.getHours(), curInsulinDate.getMinutes());
            pendingResultsObj.INSULIN_DATE_IN_MS_UTC = pendingInsulinDate.getTime();
            jqInsulinDateField.removeClass("gpo1-validation-fail");
            //Determine if there are invalid fields
            //var jqInvalidInputFields = jqResultsSectionContainer.find("input.gpo1-validation-fail");
            //var invalidFieldsExist = (!!jqInvalidInputFields.length);

            //Disable/enable instructions button
            //$("#" + compId + "SignBtn").prop("disabled", invalidFieldsExist);
        }
    });
};

GlucoseProtocolComponentO1.prototype.enableInstructionsButton = function(){
    /*
    600000 milliseconds = 10 minutes
    */
    var glucoseResultsObj = this.getGlucoseResultsObj();
    var dateTime = new Date(glucoseResultsObj.LAST_DOCUMENT_DATE_IN_MS_UTC);
    var currentDate = new Date();
    if(!this.isTimeDifferenceLessThan(currentDate.getTime(), dateTime.getTime(), 600000)){
        $("#" + this.getStyles().getId() + "SignBtn").prop("disabled", false);
    }
};

/*
* Determines if the difference of the two dates in milliseconds is less than a number in milliseconds
*/
GlucoseProtocolComponentO1.prototype.isTimeDifferenceLessThan = function(startDate, endDate, milliseconds){
    return startDate-endDate<milliseconds;
};

GlucoseProtocolComponentO1.prototype.attachEventListeners = function(){
    var self = this;
    var compId = this.getStyles().getId();
    var myi18n = i18n.discernabu.glucose_protocol_o1;

    function routeTask(event){
        var jqCurrentTarget = $(event.currentTarget);
        var id = event.currentTarget.id;
        var pendingResultsObj = self.getPendingGlucoseResultsObj();
        var curGlucoseDate;
        var prevGlucoseDate;
        var type = event.type;
        var timeout = null;
        var modalDialog = null;

        var numericVal;
        if (jqCurrentTarget.hasClass("gpo1-numeric-field")){
            numericVal = jqCurrentTarget.val();
            //Replace characters
            jqCurrentTarget.val(numericVal.replace(/[^0-9\.]/ig, ""));
            numericVal = self.validateNumericField(numericVal);
            if (numericVal === false){
                jqCurrentTarget.addClass("gpo1-validation-fail");
            } else {
                jqCurrentTarget.val(numericVal);
                jqCurrentTarget.removeClass("gpo1-validation-fail");
            }
        }

        var timeObj;
        if (jqCurrentTarget.hasClass("gpo1-time-field")){
            timeObj = self.validateTimeField(jqCurrentTarget.val());
            if (!timeObj){
                jqCurrentTarget.addClass("gpo1-validation-fail");
            } else {
                jqCurrentTarget.removeClass("gpo1-validation-fail");
            }
        }

        //Determine if there are invalid fields
        //var jqInvalidInputFields = jqResultsSectionContainer.find("input.gpo1-validation-fail");
        //var invalidFieldsExist = (!!jqInvalidInputFields.length);

        //Disable/enable instructions button
        //$("#" + compId + "SignBtn").prop("disabled", invalidFieldsExist);


        if (id === compId + "SignBtn"){
            //if (!invalidFieldsExist){
            jqCurrentTarget.prop("disabled", true);
            setTimeout(function(){
                self.retrieveGlucoseInstructionsData();
            }, 0);

            //}
        } else if (id === compId + "InstructionAcceptBtn"){
            self.saveClinicalEvents();
            self.createNewDocument(true);
        } else if (id === compId + "InstructionDeclineBtn"){
            self.saveClinicalEvents();
            self.launchPowerform();
            self.createNewDocument(false);
        } else if (id === compId + "CancelBtn"){
            self.resetResultsSection();
        } else if (id === compId + "WeightInput"){
            pendingResultsObj.WEIGHT = numericVal;
        } else if (id === compId + "CurrentGlucoseInput"){
            pendingResultsObj.GLUCOSE = numericVal;
        } else if (id === compId + "EnteralRateInput"){
            pendingResultsObj.ENTERAL_RATE = numericVal;
        } else if (id === compId + "CaloricTargetInput"){
            pendingResultsObj.CALORIC_TARGET = numericVal;
        } else if (id === compId + "DrawTimeInput" && timeObj){
            curGlucoseDate = new Date(pendingResultsObj.GLUCOSE_DATE_IN_MS_UTC || 0);
            var pendingGlucoseDate = new Date(curGlucoseDate.getFullYear(), curGlucoseDate.getMonth(), curGlucoseDate.getDate(), timeObj.HOURS, timeObj.MINUTES);
            pendingResultsObj.GLUCOSE_DATE_IN_MS_UTC = pendingGlucoseDate.getTime();
        } else if (id === compId + "InsulinTimeInput" && timeObj){
            var curInsulinDate = new Date(pendingResultsObj.INSULIN_DATE_IN_MS_UTC || 0);
            var pendingInsulinDate = new Date(curInsulinDate.getFullYear(), curInsulinDate.getMonth(), curInsulinDate.getDate(), timeObj.HOURS, timeObj.MINUTES);
            pendingResultsObj.INSULIN_DATE_IN_MS_UTC = pendingInsulinDate.getTime();
        } else if (id === compId + "InsulinDripInput"){
            pendingResultsObj.INSULIN = numericVal;
        } else if (id === compId + "GlucometerInput"){
            pendingResultsObj.GLUCOMETER_NUM = numericVal;
        } else if (id === compId + "PreviousDrawDateInput" && timeObj){
            prevGlucoseDate = new Date(pendingResultsObj.PREVIOUS_GLUCOSE_DATE_IN_MS_UTC || 0);
            var pendingPrevGlucoseDate = new Date(prevGlucoseDate.getFullYear(), prevGlucoseDate.getMonth(), prevGlucoseDate.getDate(), timeObj.HOURS, timeObj.MINUTES);
            pendingResultsObj.PREVIOUS_GLUCOSE_DATE_IN_MS_UTC = pendingGlucoseDate.getTime();
        } else if (id === compId+"PreviousGlucoseInput"){
            pendingResultsObj.PREVIOUS_GLUCOSE = numericVal;
        } else if (id === compId + "CaloricLabel" && type === "click"){
            modalDialog = self.getReferenceModal();
            if (!modalDialog){
                modalDialog = self.createReferenceModal();
                self.setReferenceModal(modalDialog);
            }
            //Show modal
            modalDialog.setHeaderTitle(myi18n.GLUCOSE_CALORIES);
            MP_ModalDialog.showModalDialog(modalDialog.getId());
            modalDialog.setBodyHTML(self.buildCaloricReferenceHtml());
        } else if (id === compId + "BolusLabel" && type === "click"){
            modalDialog = self.getReferenceModal();
            if (!modalDialog){
                modalDialog = self.createReferenceModal();
                self.setReferenceModal(modalDialog);
            }
            //Show modal
            modalDialog.setHeaderTitle(myi18n.BOLUS_CALORIES);
            MP_ModalDialog.showModalDialog(modalDialog.getId());
            modalDialog.setBodyHTML(self.buildBolusReferenceHtml());
        } else if (id === compId + "GlucoseCaloriesYesInput" && type === "change"){
            pendingResultsObj.GLUCOSE_CALS = "YES";
        } else if (id === compId + "GlucoseCaloriesNoInput" && type === "change"){
            pendingResultsObj.GLUCOSE_CALS = "NO";
        } else if (id === compId + "BolusCaloriesYesInput" && type === "change"){
            modalDialog = self.getReferenceModal();
            if (!modalDialog){
                modalDialog = self.createReferenceModal();
                self.setReferenceModal(modalDialog);
            }
            modalDialog.setHeaderTitle("Bolus Calories - Yes");
            MP_ModalDialog.showModalDialog(modalDialog.getId());
            modalDialog.setBodyHTML(self.buildBolusAlertHtml());
            pendingResultsObj.BOLUS_CALS = "YES";
        } else if (id === compId + "BolusCaloriesNoInput" && type === "change"){
            pendingResultsObj.BOLUS_CALS = "NO";
        }

        /* else if (id === compId + "CaloricLabel" && type === "mouseenter"){
            self.clearTooltip();
            timeout = setTimeout(function(){
                var content = self.buildCaloricReferenceHtml();
                var tooltip = self.getToolTip();
                var posX = event.pageX;
                var posY = event.pageY;
                tooltip.setX(posX).setY(posY).setAnchor(jqCurrentTarget.get(0)).setContent(content);
                tooltip.show();
            }, 500);
            self.setTooltipTimeout(timeout);
        } else if ((id === compId + "CaloricLabel" || id === compId + "BolusLabel") && type === "mouseleave"){
            self.clearTooltip();
        } else if (id === compId + "BolusLabel" && type === "mouseenter"){
            self.clearTooltip();
            timeout = setTimeout(function(){
                var content = self.buildBolusReferenceHtml();
                var tooltip = self.getToolTip();
                var posX = event.pageX;
                var posY = event.pageY;
                tooltip.setX(posX).setY(posY).setAnchor(jqCurrentTarget.get(0)).setContent(content);
                tooltip.show();
            }, 500);
            self.setTooltipTimeout(timeout);
        }*/
    }

    var jqResultsSectionContainer = $("#" + compId + "ResultsSectionCont");
    jqResultsSectionContainer.on("click", "input.gpo1-btn", function(event){
        routeTask(event);
    });

    jqResultsSectionContainer.on("blur", "input.gpo1-numeric-field", function(event){
        self.enableInstructionsButton();
        routeTask(event);
    });

    jqResultsSectionContainer.on("blur", "input.gpo1-time-field", function(event){
        self.enableInstructionsButton();
        routeTask(event);
    });

    var jqInstructionsContainer = $("#" + compId + "InstructionSectionCont");
    jqInstructionsContainer.on("click", "input.gpo1-btn", function(event){
        routeTask(event);
    });

    jqResultsSectionContainer.on("click", "a.gpo1-results-disp-lbl", function(event){
        routeTask(event);
    });

    var jqReferenceSectionContainer = $("#" + compId + "ReferenceDispCont");
    jqReferenceSectionContainer.on("change", "input[type='radio']", function(event){
        routeTask(event);
    });
};

GlucoseProtocolComponentO1.prototype.generateDocumentContent = function(didAccept){
    var docContent = "";
    var rtfFormat = {
        rhead: "{\\rtf1\\ansi \\deff0{\\fonttbl{\\f0\\fswiss MS Sans Serif;}{\\colortbl; \\red255\\green0\\blue0;" +
            " \\red0\\green0\\blue255; \\red0\\green255\\blue0; \\red255\\green0\\blue0; \\red85\\green26\\blue139;}}\\plain \\f0 \\fs18 "
        , wbr: " \\plain \\f0 \\cf1 \\fs18 \\b "
        , wr: " \\plain \\f0 \\fs18 "
        , Reol: " \\par "
        , Rtab: " \\tab "
    };

    var dateFormatter = MP_Util.GetDateFormatter();
    var fullDateTime4Year = mp_formatter.DateTimeFormatter.FULL_DATE_TIME_4YEAR;

    var resultsObj = this.getPendingGlucoseResultsObj() || this.getGlucoseResultsObj() || {};
    var instructionsObj = this.getInstructionsData() || {};

    docContent += rtfFormat.rhead;

    var ordersList = instructionsObj.ORDERS || [];
    var instructionsList = instructionsObj.INSTRUCTIONS || [];
    var oLen = ordersList.length;
    var iLen = instructionsList.length;
    var i;

    var statusMessage = (didAccept) ? "Instructions Accepted" : "Instructions Rejected";
    var glucoseMessage = "";
    var bolusMessage = "";

    if (resultsObj.GLUCOSE_CALS === "YES"){
        glucoseMessage = "Patient is receiving additional glucose calories.";
    } else if (resultsObj.GLUCOSE_CALS === "NO"){
        glucoseMessage = "Patient is not receiving additional glucose calories.";
    }

    if (resultsObj.BOLUS_CALS === "YES"){
        bolusMessage = "Patient is receiving bolus calories.";
    } else if (resultsObj.BOLUS_CALS === "NO"){
        bolusMessage = "Patient is not receiving bolus calories.";
    }


    docContent += (rtfFormat.wr + statusMessage + rtfFormat.Reol);
    docContent += (glucoseMessage ? (rtfFormat.wr + glucoseMessage + rtfFormat.Reol) : glucoseMessage);
    docContent += (bolusMessage ? (rtfFormat.wr + bolusMessage + rtfFormat.Reol) : bolusMessage);
    docContent += (rtfFormat.wr + "Next Due Date Time: " + dateFormatter.format(this.getNextDueDateTime(), fullDateTime4Year) + rtfFormat.Reol);

    docContent += (rtfFormat.wr + "Blood Glucose, Capillary: " + (resultsObj.GLUCOSE || "") + " " + (resultsObj.GLUCOSE_UNIT || "") + rtfFormat.Reol);

    docContent += (rtfFormat.wr + "Current Enteral Rate: " + (resultsObj.ENTERAL_RATE || "") + " " + (resultsObj.ENTERAL_RATE_UNIT || "") + rtfFormat.Reol);

    docContent += (rtfFormat.wr + "Glucometer Number: " + (resultsObj.GLUCOMETER_NUM || "") + rtfFormat.Reol);

    docContent += (rtfFormat.wr + "Insulin Drip: " + (resultsObj.INSULIN || "") + " " + (resultsObj.INSULIN_UNIT || "") + rtfFormat.Reol);

    docContent += (rtfFormat.wr + "Weight: " + (resultsObj.WEIGHT || "") + " " + (resultsObj.WEIGHT_UNIT) + rtfFormat.Reol);

    docContent += (rtfFormat.wr + rtfFormat.Reol);
    docContent += (rtfFormat.wr + "Instructions:" + rtfFormat.Reol);

    //Loop through ordersList
    for (i = 0; i < oLen; i++){
        docContent += (rtfFormat.wr + ordersList[i].TEXT + rtfFormat.Reol);
    }

    //Loop through instructionsList
    for (i = 0; i < iLen; i++){
        docContent += (rtfFormat.wr + instructionsList[i].TEXT + rtfFormat.Reol);
    }

    //Close the RTF
    docContent += "}";

    return docContent;
};

GlucoseProtocolComponentO1.prototype.resetResultsSection = function(){
    var compId = this.getStyles().getId();
    var originalResultsObj = this.getGlucoseResultsObj();
    var pendingResultsobj = jQuery.extend({}, originalResultsObj);
    this.setPendingGlucoseResultsObj(pendingResultsobj);

    //Update html
    var jqResultsSectionCont = $("#" + compId + "ResultsSectionCont");
    jqResultsSectionCont.html(this.buildResultsDisplaySectionHtml());
    this.initializeDatepicker();

    var glucoseResultsObj = this.getGlucoseResultsObj();
    var lastDocumentedGlucoseDate = new Date(glucoseResultsObj.LAST_DOCUMENT_DATE_IN_MS_UTC);
    var currentDate = new Date();
    if(this.isTimeDifferenceLessThan(currentDate.getTime(), lastDocumentedGlucoseDate.getTime(), 600000)){
        $("#" + this.getStyles().getId() + "SignBtn").prop("disabled", true);
    }
};

/*
Field Validation fields
 */

GlucoseProtocolComponentO1.prototype.validateTimeField = function(timeVal){
    var timeObj = {};
    var timeRegex = /^(\d{1,2}):(\d{2})$/;
    var matches;

    if (!timeVal){
        timeObj.HOURS = 0;
        timeObj.MINUTES = 0;
    }

    matches = timeVal.match(timeRegex);
    if (!matches || matches.length < 2){
        return null;
    }
    //Check hours
    if (matches[1] > 23){
        return null;
    }
    //Check minutes
    if (matches[2] > 59){
        return null;
    }

    timeObj.HOURS = matches[1];
    timeObj.MINUTES = matches[2];

    return timeObj;
};

GlucoseProtocolComponentO1.prototype.validateNumericField = function(numVal){
    var numericVal;
    numVal = $.trim(numVal);
    if (numVal === ''){
        return "";
    }

    numVal = numVal.replace(/[^0-9\.]/ig, "");
    //Check for extra periods
    var nLen = numVal.length;
    var i;
    var periodCount = 0;
    for (i = 0; i < nLen; i++){
        if (numVal.charAt(i) === '.'){
            periodCount++;
        }
        if (periodCount > 1){
            return false;
        }
    }
    numericVal = parseFloat(numVal);
    if (!isFinite(numericVal)){
        return false;
    }

    return numericVal;
};
/*
* Notification Manager
*/
(function (baseComponent) {

    if (typeof i18n == "undefined") {
        var i18n = {};
    }

    if (typeof i18n.discernabu == "undefined") {
        i18n.discernabu = {};
    }

    i18n.discernabu.notification_manager = {
        WARNING: "Warning"
        , ERROR: "Error"
        , ALERT: "Alert"
        , INFO: "Info"
    };

    /**
     * Object that controls the display of visual notifications.
     * @param {string|number} id - Needs to be a unique identifier
     * @constructor
     */
    function NotificationManager(id) {
        this.m_jqContainer = null;
        this.m_id = id;
        this.m_typeToIdMap = null;
        this.m_uniqueCount = 0;
    }

    /**
     * Enumerates the type of notifications that can show.
     * @type {{ERROR: number, WARNING: number}}
     */
    NotificationManager.prototype.NOTIFICATION_TYPES = {
        ERROR: 1
        , ALERT: 2
        , WARNING: 3
        , INFO: 4
    };

    /**
     * Gets the Notification Manager's id.
     * @returns {string|number} - id
     */
    NotificationManager.prototype.getId = function () {
        return this.m_id;
    };

    /**
     * Gets the jQuery container the Notification Manager uses to display alerts.
     * @returns {jQuery object} - jQuery object that acts as a container for notifications
     */
    NotificationManager.prototype.getJqContainer = function () {
        return this.m_jqContainer;
    };

    /**
     * Sets the jQuery container the Notification Manager uses to display alerts.
     * @param {jQuery object|null} jqCont - jQuery container to display alerts in.
     */
    NotificationManager.prototype.setJqContainer = function (jqCont) {
        this.m_jqContainer = jqCont;
    };

    /**
     * Gets the notification identifiers to html ids map.
     * @returns {Object} - identifier to html ids map
     */
    NotificationManager.prototype.getTypeToIdMap = function () {
        if (!this.m_typeToIdMap) {
            this.m_typeToIdMap = {};
        }
        return this.m_typeToIdMap;
    };

    /**
     * Sets the notification identifiers to html ids map.
     * Expected use-case is to null the existing map.
     * @param map {null|Object} - null or an existing map.
     */
    NotificationManager.prototype.setTypeToIdMap = function (map) {
        this.m_typeToIdMap = map;
    };

    /**
     * Builds the HTML for a Notification.
     * @param {{PRIMARY: string, SECONDARY: string}} message - message object to populate alert.
     * @param {number} flag - NotificationManager.prototype.NOTIFICATION_TYPES enumeration.
     * @returns {string} - notification html
     */
    NotificationManager.prototype.buildNotificationHTML = function (message, flag) {
        var myi18n = i18n.discernabu.notification_manager;
        var alertTypes = this.NOTIFICATION_TYPES;
        var alertCSS = "";
        var alertSecondaryCSS = "";
        var alertIconTitle = "";
        var html = "";

        switch (flag) {
            case alertTypes.ERROR:
                alertCSS = "notification-mgr-error-section";
                alertIconTitle = myi18n.ERROR;
                break;
            case alertTypes.ALERT:
                alertCSS = "notification-mgr-alert-section";
                alertIconTitle = myi18n.ALERT;
                break;
            case alertTypes.WARNING:
                alertCSS = "notification-mgr-warning-section";
                alertIconTitle = myi18n.WARNING;
                alertSecondaryCSS = "secondary-text";
                break;
            case alertTypes.INFO:
                alertCSS = "notification-mgr-info-section";
                alertIconTitle = myi18n.INFO;
                alertSecondaryCSS = "secondary-text";
                break;
            default:
                break;
        }

        html += "<div class='" + alertCSS + "'>";
        html += "<span class='notification-mgr-alert-icon' title='" + alertIconTitle + "'></span>";
        html += "<span class='notification-mgr-alert-message'>";

        if (typeof message.PRIMARY === 'string') {
            html += "<span class='notification-mgr-alert-primary'>" + message.PRIMARY + "</span>";
        }
        if (typeof message.SECONDARY === 'string') {
            html += "<span class='" + alertSecondaryCSS + "'>" + message.SECONDARY + "</span>";
        }
        html += "</span>";
        html += "</div>";

        return html;
    };

    /**
     * Visually appends an alert in the Notification Manager's jQuery Container.
     * If the identifier passed in already exists, then the existing notification will be updated.
     * @param {string} identifier - Identifier for a type of alert.
     * @param {{PRIMARY: string, SECONDARY: string}} message - message object to populate alert.
     * @param {number} flag - NotificationManager.prototype.NOTIFICATION_TYPES enumeration.
     */
    NotificationManager.prototype.appendNotification = function (identifier, message, flag) {
        var id = this.getId() || "";
        var jqContainer = this.getJqContainer();
        var typeToIdMap = this.getTypeToIdMap();
        var alertId;
        var html = "";

        if (!jqContainer || !jqContainer.length) {
            return;
        }

        //Check if alert already exists
        alertId = typeToIdMap[identifier];
        if (alertId) {
            //Update current alert
            html += this.buildNotificationHTML(message, flag);
            $("#" + alertId).html(html);
            return;
        }

        //Create new container div
        alertId = id + "Alert" + (++this.m_uniqueCount);
        html += "<div id='" + alertId + "' class='notification-mgr-section'>";
        html += this.buildNotificationHTML(message, flag);
        html += "</div>";

        //Append the alert
        jqContainer.append(html);
        typeToIdMap[identifier] = alertId;
    };

    /**
     * Visually removes an alert in the NotificationManager Manager's jQuery Container.
     * @param {string} identifier - Identifier for a type of notification.
     */
    NotificationManager.prototype.removeNotification = function (identifier) {
        var typeToIdMap = this.getTypeToIdMap();
        var alertId = typeToIdMap[identifier];

        if (!alertId) {
            return;
        }

        //Remove alert
        $("#" + alertId).remove();
        typeToIdMap[identifier] = null;
    };

    /**
     * Visually removes ALL notifications in the Notification Manager's jQuery Container.
     */
    NotificationManager.prototype.clearNotifications = function () {
        this.setTypeToIdMap(null);
        var jqContainer = this.getJqContainer();
        if (!jqContainer || !jqContainer.length) {
            return;
        }

        jqContainer.html("");
    };

    baseComponent.NotificationManager = NotificationManager;
})(GlucoseProtocolComponentO1); //Replace {} with Component constructor

GlucoseProtocolComponentO1.prototype.getNotificationManager = function(){
    if(!this.m_notificationManager){
        this.m_notificationManager = new GlucoseProtocolComponentO1.NotificationManager(this.getStyles().getId());
    }
    return this.m_notificationManager;
};
/*****
GLUCOSE PROTOCOL END
*****/




/***
BLOODBANK Code START
******/
if (typeof i18n == "undefined"){
    var i18n = {};
}

if (typeof i18n.lab == "undefined"){
    i18n.lab = {};
}

i18n.lab.bbt_products_o1 = {
    ABORH: "Product ABO/Rh",
    ASSIGNED: "Assigned",
    COOLER: "Cooler",
    CROSSMATCHED: "Crossmatched",
    CROSSMATCH_EXPIRATION: "Crossmatch Expiration",
    DEVICE: "Device",
    DISPENSED: "Dispensed",
    DISPENSED_TO: "Dispensed to",
    LAST_3_MONTHS: "Products Transfused within past 3 months",
    PRODUCT_EXPIRATION: "Product Expiration",
    PRODUCT_NAME: "Product Name",
    PRODUCT_NUMBER: "Product Number",
    QUANTITY_SHORT: "Qty",
    STATUS_DATE_TIME: "Status Date/Time",
    TRANSFUSED: "Transfused"
};

/**
 * Create the component style object which will be used to style various aspects
 * of our component. Please refer to
 * https://wiki.ucern.com/pages/viewpage.action?pageId=32221071 for better
 * implementation of table. This is now not being implemented due to lack of
 * time
 */
function BBProductsComponentCustStyle() {
    this.initByNamespace("bbp");
}

BBProductsComponentCustStyle.inherits(ComponentStyle);

/**
 * @constructor Initialize the blood bank Product Availability component
 * @param {Criterion}
 *            criterion : The Criterion object which contains information needed
 *            to render the component.
 */
function BBProductsComponentCust(criterion) {
    //this.setCriterion(criterion);
    //this.setStyles(new BBProductsComponentCustStyle());
    // Set the timer names so the architecture will create the correct timers
    // for our use
    //this.setComponentLoadTimerName("USR:MPG.BBPRODUCTS.O1 - load component");
    //this.setComponentRenderTimerName("ENG:MPG.BBPRODUCTS.O1 - render component");

    // Make sure the architecture includes the result count when creating the
    // count text
    //this.setIncludeLineNumber(true);

    // Set the flag to always show this component as expanded
    //this.setAlwaysExpanded(true);
}

/**
 * Setup the prototype and constructor to inherit from the base MPageComponent
 * object
 */
//BBProductsComponentCust.prototype = new MPageComponent();
//BBProductsComponentCust.prototype.constructor = MPageComponent;
BBProductsComponentCust.prototype = new MPage.Component();
BBProductsComponentCust.prototype.constructor = BBProductsComponentCust;
BBProductsComponentCust.prototype.base = MPage.Component.prototype;
BBProductsComponentCust.name = "BloodBankTransfusionCustomComponent";

/*
Custom methods
 */
BBProductsComponentCust.prototype.getStyles = function(){
    var compId = this.getComponentUid();
    return {
        getId: function(){
            return compId;
        }
        , getNameSpace: function(){
            return "bbp";
        }
    };
};

/* Main rendering functions */

BBProductsComponentCust.prototype.getComponentId = function(){
    return this.getComponentUid();
};

BBProductsComponentCust.prototype.getCriterion = function(){
    var js_criterion = JSON.parse(m_criterionJSON);
    return MP_Util.GetCriterion(js_criterion, CERN_static_content);
};

BBProductsComponentCust.prototype.getComponentLoadTimerName = function(){
    return "USR:BB.PRODUCTS load component";
};

BBProductsComponentCust.prototype.getComponentRenderTimerName = function(){
    return "ENG:BB.PRODUCTS render component";
};

BBProductsComponentCust.prototype.getRootComponentNode = function(){
    return this.options.parentComp.getRootComponentNode();
};

BBProductsComponentCust.prototype.getSectionContentNode = function(){
    return this.getTarget();
};

BBProductsComponentCust.prototype.initHovers = MPageComponent.prototype.initHovers;
BBProductsComponentCust.prototype.getScrollNumber = MPageComponent.prototype.getScrollNumber;

BBProductsComponentCust.prototype.finalizeComponent = function(html, count){
    var target = this.getTarget();
    target.innerHTML = html;
    //MPageComponent.finalizeComponent.apply(this, [html, count]);
};


BBProductsComponentCust.prototype.render = function(){
    this.retrieveComponentData();
};
/**
 * This is the BBProductsComponentCust implementation of the retrieveComponentData
 * function. It creates the necessary parameter array for the data acquisition
 * script call and the associated Request object.
 */
BBProductsComponentCust.prototype.retrieveComponentData = function() {
    var self = this;

    // Create the parameter array for our script call
    var criterion = this.getCriterion();
    var sendAr = ["^MINE^", criterion.person_id + ".0"];

    var request = new MP_Core.ScriptRequest(this, this.getComponentLoadTimerName());
    request.setProgramName("ihc_bb_products");
    request.setParameters(sendAr);
    request.setAsync(true);

    MP_Core.XMLCCLRequestCallBack(this, request, function(reply) {
        self.renderComponent(reply);
    });
};

/**
 * function to internationalize the date time.
 */
BBProductsComponentCust.prototype.productI18nDateTime = function(bbpDateTime) {
    // null date time would be all zero's as represented instead of null
    if (bbpDateTime === "\/Date(0000-00-00T00:00:00.000+00:00)\/") {
        return null;
    }
    var resultDtTm = new Date();
    resultDtTm.setISO8601(bbpDateTime);
    return resultDtTm.format("longDateTime3");
};

/*
 * function to set the window size and scroll size in order for the overflow to
 * to be set to auto if the number of products in greater than 10
 */

BBProductsComponentCust.prototype.getOverflowProperty = function(recLen) {
return "overflow:auto;";
    // Each section defaults to size 10 in BB components
    if (recLen <= 10) {
        return null;
    }
    // allow the outer component to scroll
    if (recLen > 10) {
        return "overflow:auto;";
    }
};

/* function to set the dynamic height for expand and collapse */
BBProductsComponentCust.prototype.bbpgetHeight = function(recLen) {
    if (recLen <= 10) {
        return (recLen * 18) + 2;
    }
    if (recLen > 10) {
        return 180 + 2;
    }
};


///* function to display the hover for each date and id has to be unique */
BBProductsComponentCust.prototype.createEventHandlers = function() {
    // $('a.abbphover').mouseover(function(event) {
        // // specimen availability table id
        // var concatId = "satab-" + event.target.id;
        // $("#" + concatId + "").removeClass("hidden");
        // // get the relative position of the cursor to display the hover
        // var posx = event.clientX;
        // var posy = event.clientY;
        // $("#" + concatId + "").css({
            // top : posy + 10,
            // left : posx + 20
        // });
    // })
        // /* function to hide the hover when cursor moved away and id has to be unique */.mouseout(function(event) {
            // var concatId = "satab-" + event.target.id;
            // $("#" + concatId + "").addClass("hidden");
        // });
    // expand and collapse
    $("span.expandcollapse").click(function(event) {
        var getId = event.target.id;
        var idArray = getId.split(" ");
        var t = document.getElementById(idArray[2]);
        var len = t.rows.length;
        var ainnerdiv = document.getElementById(idArray[1]);
        var aouterdiv = document.getElementById(idArray[0]);
        var recLen    = idArray[3];
        var im = document.getElementById(getId);
        for ( i = 1; i < len; i++) {
            if (t.rows[i].style.display == "none") {
                if (recLen < 10) {
                    ainnerdiv.style.height = (recLen * 18) + 2 + "px";
                    aouterdiv.style.height = (recLen * 18) + 2 + "px";
                } else {
                    ainnerdiv.style.height = "182px";
                    aouterdiv.style.height = "182px";
                }
                t.rows[i].style.display = "";
                im.className = "bbp-expand";
            } else {
                aouterdiv.style.height = "0px";
                t.rows[i].style.display = "none";
                // this sets the image
                im.className = "bbp-collapse";
            }
        }
    });

};

/**
 * This is the BBProductsComponentCust implementation of the renderComponent
 * function. It takes the information retrieved from the script call and renders
 * the component's visuals. There is no check on the status of the script call's
 * reply since that is handled in the call to XMLCCLRequestWrapper.
 *
 * @param {MP_Core.ScriptReply}
 *            The ScriptReply object returned from the call to
 *            MP_Core.XMLCCLRequestCallBack function in the
 *            retrieveComponentData function of this object.
 */
BBProductsComponentCust.prototype.renderComponent = function(reply) {
    var compId = this.getComponentId();
    var productHoverId = compId;
    var self = this;
    var countText = "";
    var errMsg = [];
    var timerRenderComponent = null;
    /*
     * prodHover will be used to display the hover content for each of the
     * products
     */
    var prodHover = null;

    try {
        // Create the render timer
        timerRenderComponent = MP_Util.CreateTimer(this.getComponentRenderTimerName());

        // Check to see if the component script call returned successfully. If
        // not handle the response appropriately
        var replyStatus = reply.getStatus();
        if (replyStatus !== "S") {
            if (replyStatus == "F") {
                errMsg.push(reply.getError());
                this.finalizeComponent(MP_Util.HandleErrorResponse(this.getStyles().getNameSpace(), errMsg.join("<br />")), "");
            } else {
                this.finalizeComponent(MP_Util.HandleNoDataResponse(this.getStyles().getNameSpace()), "(0)");
            }
        }

        // Create the actual content body for the component
        var recordData = reply.getResponse();
        var setHeight = 180;
        var bbpArray = [];
        var autoProp = "";

        /* Length of the specified list */
        var AssignRecLen     = recordData.ASSIGNEDLIST.length;
        var CrossMatchRecLen = recordData.CROSSMATCHEDLIST.length;
        var DispRecLen       = recordData.DISPENSEDLIST.length;
        var TransRecLen      = recordData.TRANSFUSEDLIST.length;
        var prodCount        = AssignRecLen + CrossMatchRecLen + DispRecLen + TransRecLen;

        bbpArray.push("<div class='content-body'>");

        /***********************************************************************
         * //post the Assigned List
         **********************************************************************/
            // start of the table header
        bbpArray.push("<table class='five-col col4'>");
        bbpArray.push("<th class='content-hdr bbp_prod-number'>" + i18n.lab.bbt_products_o1.PRODUCT_NUMBER + "</th>");
        bbpArray.push("<th class='content-hdr bbp_prod-name'>" + i18n.lab.bbt_products_o1.PRODUCT_NAME + "</th>");
        bbpArray.push("<th class='content-hdr bbp_prod-abo'>" + i18n.lab.bbt_products_o1.ABORH + "</th>");
        //bbpArray.push("<th class='content-hdr bbp_qty'>" + i18n.lab.bbt_products_o1.QUANTITY_SHORT + "</th>");
        bbpArray.push("<th class='content-hdr bbp_prd-datetime'>" + i18n.lab.bbt_products_o1.STATUS_DATE_TIME + "</th>");
        bbpArray.push("</table>");

        // get the window size and overflow property depending on the total
        // count
        setHeight = self.bbpgetHeight(AssignRecLen);
        autoProp = self.getOverflowProperty(AssignRecLen);

        // make all the id's unique by adding the component id
        var AssignOuter = "AssignOuter" + compId;
        var AssignInner = "AssignInner" + compId;
        var Assigntbl = "Assigntbl" + compId;
        // use assignsum as the id for the image click that can be sent to the Jquery to bind
        var assignsum = AssignOuter + " " + AssignInner + " " + Assigntbl +" "+AssignRecLen;
        bbpArray.push("<div id='" + AssignOuter + "' class='bbp_outerdiv' style='height:" + setHeight + "px;'><div class='bbp_inner' id='" + AssignInner + "' style='height:" + setHeight + "px;" + autoProp + "'>");
        bbpArray.push("<table id='" + Assigntbl + "' class='sub-sec-hd'>");
        bbpArray.push("<tr class='bbp_width-extend'>");

        // Create a variable to create the expandable row for the section
        var assignOnclick = "<td colspan='5' class='sub-sec-hd bbp_prod-table'>";
        assignOnclick += "<span class='expandcollapse'><span id='" + assignsum + "' class='bbp-expand' type='image'></span></span>" + i18n.lab.bbt_products_o1.ASSIGNED + "(" + AssignRecLen + ")</td>";

        bbpArray.push(assignOnclick);
        bbpArray.push("</tr>");
        // zebra pattern for rows
        for (var i = 0, allLen = AssignRecLen; i < allLen; i++) {
            if (i % 2 == 1) {
                bbpArray.push("<tr class='bbp_evenrow'>");
            } else {
                bbpArray.push("<tr class='bbp_oddrow'>");
            }
            // increment hover id so that each hover is unique
            productHoverId = productHoverId + 1;
            bbpArray.push("<td class='bbp_prod-number bbp_proddisplay'>", recordData.ASSIGNEDLIST[i].PRODUCT_NUMBER, "</td>");
            bbpArray.push("<td class='bbp_prod-name bbp_proddisplay'>", recordData.ASSIGNEDLIST[i].PRODUCT, "</td>");
            bbpArray.push("<td class='bbp_prod-abo bbp_proddisplay'>", recordData.ASSIGNEDLIST[i].PRODUCT_GRP, "</td>");
            // if (recordData.ASSIGNEDLIST[i].QUANTITY > 0) {
                // bbpArray.push("<td class='bbp_qty bbp_proddisplay'>", recordData.ASSIGNEDLIST[i].QUANTITY, "</td>");
            // } else {
                // bbpArray.push("<td class='bbp_qty bbp_proddisplay'></td>");
            // }
            /* Jquery handles the hover event */
            bbpArray.push("<td class='bbp_prd-datetime bbp_proddisplay' id='td" + productHoverId + "'>" + self.productI18nDateTime(recordData.ASSIGNEDLIST[i].PE_EVENT_DT_TM) + "</td>");
            bbpArray.push("</tr>");

            /* before for loop ends get the individual hover information, with the unique div id*/
            prodHover = prodHover + "<div id='satab-" + productHoverId + "' class='bbphover'><table><tr><td class='bbp_specimenheader'>" + i18n.lab.bbt_products_o1.PRODUCT_EXPIRATION + "&nbsp;&nbsp;</td><td>" + "  " + self.productI18nDateTime(recordData.ASSIGNEDLIST[i].PR_EXPIRE_DT_TM) + "</td></tr></table></div>";

        }// end for

        bbpArray.push("</table>");
        bbpArray.push("</div></div>");
        // add for scrolling

        /***********************************************************************
         * //post the CrossMatched List
         **********************************************************************/
        setHeight = self.bbpgetHeight(CrossMatchRecLen);
        autoProp = self.getOverflowProperty(CrossMatchRecLen);

        // make all the id's unique by adding the component id
        var CMatchOuter = "CMatchOuter" + compId;
        var CMatchInner = "CMatchInner" + compId;
        var CMatchtbl   = "CMatchtbl" + compId;
        var xmatchsum   = CMatchOuter + " " + CMatchInner + " " + CMatchtbl + " "+CrossMatchRecLen;
        bbpArray.push("<div id='" + CMatchOuter + "' class='bbp_outerdiv' style='height:" + setHeight + "px;'><div id='" + CMatchInner + "' class='bbp_inner' style='height:" + setHeight + "px;" + autoProp + "'>");

        bbpArray.push("<table id='" + CMatchtbl + "' class='sub-sec-hd'>");
        bbpArray.push("<tr class='bbp_width-extend'>");

        // Create a variable to create the expandable row for the section
        var xmatchOnclick = "<td colspan='5' class='sub-sec-hd bbp_prod-table'>";
        xmatchOnclick += "<span class='expandcollapse'><span id='" + xmatchsum + "' class='bbp-expand' type='image'></span></span>" + i18n.lab.bbt_products_o1.CROSSMATCHED + "(" + CrossMatchRecLen + ")</td>";

        bbpArray.push(xmatchOnclick);
        bbpArray.push("</tr>");

        for (var i = 0, allLen = CrossMatchRecLen; i < allLen; i++) {
            if (i % 2 == 1) {
                bbpArray.push("<tr class='bbp_evenrow'>");
            } else {
                bbpArray.push("<tr class='bbp_oddrow'>");
            }
            productHoverId = productHoverId + 1;
            bbpArray.push("<td class='bbp_prod-number bbp_proddisplay'>", recordData.CROSSMATCHEDLIST[i].PRODUCT_NUMBER, "</td>");
            bbpArray.push("<td class='bbp_prod-name bbp_proddisplay'>", recordData.CROSSMATCHEDLIST[i].PRODUCT, "</td>");
            bbpArray.push("<td class='bbp_prod-abo bbp_proddisplay'>", recordData.CROSSMATCHEDLIST[i].PRODUCT_GRP, "</td>");
            //bbpArray.push("<td class='bbp_qty bbp_proddisplay'></td>");
            // jquery handles the hover on the date
            bbpArray.push("<td class='bbp_prd-datetime bbp_proddisplay' id='td" + productHoverId + "'>" + self.productI18nDateTime(recordData.CROSSMATCHEDLIST[i].PE_EVENT_DT_TM) + "</td>");
            bbpArray.push("</tr>");
            prodHover = prodHover + "<div id='satab-" + productHoverId + "' class='bbphover'><table><tr><td class='bbp_specimenheader'>" + i18n.lab.bbt_products_o1.CROSSMATCH_EXPIRATION + "&nbsp;&nbsp;</td><td>" + self.productI18nDateTime(recordData.CROSSMATCHEDLIST[i].XM_EXPIRE_DT_TM) + "</td></tr><tr><td class='bbp_specimenheader'>" + i18n.lab.bbt_products_o1.PRODUCT_EXPIRATION + "&nbsp;&nbsp;</td><td>" + self.productI18nDateTime(recordData.CROSSMATCHEDLIST[i].PR_EXPIRE_DT_TM) + "</td></table></div>";
        }// end for

        bbpArray.push("</table>");
        bbpArray.push("</div></div>");
        // add for scrolling
        /***********************************************************************
         * //post the DispensedList
         **********************************************************************/
        setHeight = self.bbpgetHeight(DispRecLen);
        autoProp = self.getOverflowProperty(DispRecLen);

        // make all the id's unique by adding the component id
        var DispenseOuter = "DispenseOuter" + compId;
        var DispenseInner = "DispenseInner" + compId;
        var Dispensetbl   = "Dispensetbl" + compId;
        var dispensesum   = DispenseOuter + " " + DispenseInner + " " + Dispensetbl +" "+DispRecLen;
        bbpArray.push("<div id='DispenseOuter" + compId + "' class='bbp_outerdiv' style='height:" + setHeight + "px;'><div id='" + DispenseInner + "' class='bbp_inner' style='height:" + setHeight + "px;" + autoProp + "'>");
        bbpArray.push("<table id='" + Dispensetbl + "' class='sub-sec-hd'>");
        bbpArray.push("<tr class='bbp_width-extend'>");
        var dispenseOnclick = "<td colspan='5' class='sub-sec-hd bbp_prod-table'>";
        dispenseOnclick += "<span class='expandcollapse'><span id='" + dispensesum + "' class='bbp-expand' type='image'></span></span>" + i18n.lab.bbt_products_o1.DISPENSED + "(" + DispRecLen + ")</td>";

        bbpArray.push(dispenseOnclick);
        bbpArray.push("</tr>");

        for (var i = 0, allLen = DispRecLen; i < allLen; i++) {
            if (i % 2 == 1) {
                bbpArray.push("<tr class='bbp_evenrow'>");
            } else {
                bbpArray.push("<tr class='bbp_oddrow'>");
            }
            // unique id for each hover generated
            productHoverId = productHoverId + 1;
            bbpArray.push("<td class='bbp_prod-number bbp_proddisplay'>", recordData.DISPENSEDLIST[i].PRODUCT_NUMBER, "</td>");
            bbpArray.push("<td class='bbp_prod-name bbp_proddisplay'>", recordData.DISPENSEDLIST[i].PRODUCT, "</td>");
            bbpArray.push("<td class='bbp_prod-abo bbp_proddisplay'>", recordData.DISPENSEDLIST[i].PRODUCT_GRP, "</td>");
            // Display only if there is quantity specified
            // if (recordData.DISPENSEDLIST[i].QUANTITY > 0) {
                // bbpArray.push("<td class='bbp_qty bbp_proddisplay'>", recordData.DISPENSEDLIST[i].QUANTITY, "</td>");
            // } else {
                // bbpArray.push("<td class='bbp_qty bbp_proddisplay'></td>");
            // }
            // display hover only if device or cooler exits
            if (recordData.DISPENSEDLIST[i].COOLER != "" || recordData.DISPENSEDLIST[i].DEVICE != "") {
                bbpArray.push("<td class='bbp_prd-datetime bbp_proddisplay' id='td" + productHoverId + "'>" + self.productI18nDateTime(recordData.DISPENSEDLIST[i].PE_EVENT_DT_TM) + "</td>");
                prodHover = prodHover + "<div id='satab-" + productHoverId + "'class='bbphover'><table><tr class='bbp_specimenheader'><td>" + i18n.lab.bbt_products_o1.DISPENSED_TO + "  " + "</td></tr>";
                if (recordData.DISPENSEDLIST[i].DEVICE != "") {
                    prodHover = prodHover + "<tr><td class='bbp_specimenheader'>" + i18n.lab.bbt_products_o1.DEVICE + "&nbsp;&nbsp;</td><td>" + recordData.DISPENSEDLIST[i].DEVICE + "</td></tr>";
                }
                // add if the cooler exists
                if (recordData.DISPENSEDLIST[i].COOLER != "") {
                    prodHover = prodHover + "<tr><td class='bbp_specimenheader'>" + i18n.lab.bbt_products_o1.COOLER + "&nbsp;&nbsp;</td><td>" + recordData.DISPENSEDLIST[i].COOLER + "</td></tr></table></div>";
                }
            } else {
                bbpArray.push("<td class='bbp_prd-datetime bbp_proddisplay'>" + self.productI18nDateTime(recordData.DISPENSEDLIST[i].PE_EVENT_DT_TM), "</td>");
            }
            bbpArray.push("</tr>");
            // add the device if it exists
        }// end for

        bbpArray.push("</table>");
        bbpArray.push("</div></div>");
        // add for scrolling

        /***********************************************************************
         * //post the Transfused List
         **********************************************************************/
        setHeight = self.bbpgetHeight(TransRecLen);
        autoProp = self.getOverflowProperty(TransRecLen);

        // make all the id's unique by adding the component id
        var TransfuseOuter = "TransfuseOuter" + compId;
        var TransfuseInner = "TransfuseInner" + compId;
        var Transfusetbl   = "Transfusetbl" + compId;
        var transfusesum   = TransfuseOuter + " " + TransfuseInner + " " + Transfusetbl +" "+TransRecLen;
        /* Outer height is 0 because default is collapsed, the collapse class needs to be set to default*/
        bbpArray.push("<div id='" + TransfuseOuter + "' class='bbp_outerdiv bbp-zeroheight'><div id='" + TransfuseInner + "' class='bbp_inner' style='height:" + setHeight + "px;" + autoProp + "'>");
        bbpArray.push("<table id='" + Transfusetbl + "' class='sub-sec-hd'>");
        bbpArray.push("<tr class='bbp_width-extend'>");

        var transfuseOnclick = "<td colspan='5' class='sub-sec-hd bbp_prod-table'>";
        transfuseOnclick += "<span class='expandcollapse'><span id='" + transfusesum + "' class='bbp-collapse' type='image'></span></span>" + i18n.lab.bbt_products_o1.TRANSFUSED + "(" + TransRecLen + ")</td>";

        bbpArray.push(transfuseOnclick);
        bbpArray.push("</tr>");
        for (var i = 0, allLen = TransRecLen; i < allLen; i++) {
            if (i % 2 == 1) {
                bbpArray.push("<tr class='bbp_evenrow'>");
            } else {
                bbpArray.push("<tr class='bbp_oddrow'>");
            }
            bbpArray.push("<td class='bbp_prod-number bbp_proddisplay'>", recordData.TRANSFUSEDLIST[i].PRODUCT_NUMBER, "</td>");
            bbpArray.push("<td class='bbp_prod-name bbp_proddisplay'>", recordData.TRANSFUSEDLIST[i].PRODUCT, "</td>");
            bbpArray.push("<td class='bbp_prod-abo bbp_proddisplay'>", recordData.TRANSFUSEDLIST[i].PRODUCT_GRP, "</td>");
            // if (recordData.TRANSFUSEDLIST[i].QUANTITY > 0) {
                // bbpArray.pushd("<td class='bbp_qty bbp_proddisplay'>", recordData.TRANSFUSEDLIST[i].QUANTITY, "</td>");
            // } else {
                // bbpArray.push("<td class='bbp_qty bbp_proddisplay'></td>");
            // }
            bbpArray.push("<td class='bbp_prd-datetime bbp_proddisplay'>", self.productI18nDateTime(recordData.TRANSFUSEDLIST[i].PE_EVENT_DT_TM), "</td>");

            bbpArray.push("</tr>");
        }// end for
        bbpArray.push("</table>");
        bbpArray.push("</div></div>");
        // add for scrolling
        bbpArray.push("</div>");
        /* adding all the hover content to the body for each individual product */
        $('body').append(prodHover);
        // Create the component count text
        countText = "(" + prodCount + ")";//MP_Util.CreateTitleText(this, prodCount);
        // Load the html into the component and initialize hovers and other
        // elements
        this.finalizeComponent(bbpArray.join(""), countText);
        // bind the events to the expand/ collapse and hover after the component is finalized
        this.createEventHandlers();
    } catch (err) {
        if (timerRenderComponent) {
            timerRenderComponent.Abort();
            timerRenderComponent = null;
        }
        MP_Util.LogJSError(this, err, "mp_bbt_products.js", "renderComponent");
        // Throw the error to the architecture
        throw (err);
    } finally {
        if (timerRenderComponent) {
            timerRenderComponent.Stop();
        }
    }
};

if (typeof i18n == "undefined"){
    var i18n = {};
}

if (typeof i18n.lab == "undefined"){
    i18n.lab = {};
}

i18n.lab.bbt_overview_o1 = {
    ANTIBODIES: "Antibodies",
    ANTIBODY_SCREEN: "Antibody Screen",
    ANTIGENS: "Antigens",
    BLOOD_GROUP: "ABO/Rh Type",
    NO_ANTIBODIES: "No Antibodies on record.",
    NO_BLOOD_GROUP: "No confirmed blood type on record.",
    NO_TRANS_REQ: "No Transfusion Requirements on record.",
    NO_ANTIGENS: "No Antigens on record.",
    NO_SPECIMEN: "No Current Specimen Available",
    SPECIMEN_AVAILABILITY: "Specimen Availability",
    TRANSFUSION_REQUIREMENTS: "Transfusion Requirements",
    CURRENT_UNTIL: "Expires on"
    , FETAL_HEMORRHAGE: "Fetal Maternal Hemorrhage Screen"
    , FETAL_HEMOGLOBIN: "Fetal Hemoglobin Stain"
    , TRANSFUSION_COMMENT: "Transfusion Comments"
    , DAT: "DAT"
    , POLYSPECIFIC: "Polyspecific"
    , CORD: "Cord"
    , COMPLEMENT: "Complement"
    , IGG: "IgG"
    , NO_FETAL_HEMORRHAGE: "No Fetal Maternal Hemorrhage Screens on record."
    , NO_FETAL_HEMOGLOBIN: "No Fetal Hemoglobin Stains on record."
    , NO_TRANSFUSION_COMMENT: "No Transfusion Comments."
    , NO_RECORDS: "No records found."
    , ABO: "ABO"
    , RH_TYPE: "Rh Type"
    , ANTIBODY_TITER: "Antibody Titer"
    , ANTIBODY_ID: "Antibody ID"
    , RHIG_ELIGIBILITY: "RhIG Eligibility"
    , NO_RH: "No Rh Type on record."
    , ANTIBODY_ID: "Antibody ID"
    , PACKAGE: "Package (IRL)"
    , COLD: "Cold"
    , ELUTION: "Elution"
    , ENZYME: "Enzyme"
    , WARM: "Warm"
    , SOLID_PHASE: "Solid Phase"
	, TITER: "titer"
	, ABO_CORD: "ABO/Rh Type - Cord"
};

/**
 * Create the component style object which will be used to style various aspects
 * of our component
 */
function BBOverviewComponentCustStyle() {
    this.initByNamespace("bbo");
}

BBOverviewComponentCustStyle.inherits(ComponentStyle);

/**
 * @constructor Initialize the Blood BankOverview component
 * @param {Criterion}
 *            criterion : The Criterion object which contains information needed
 *            to render the component.
 */
function BBOverviewComponentCust(criterion) {

    // These are the bb Orderbale codes for the orders that should be be
    // considered for specimen availability
    this.m_bbOrderableCodes = [];
    //this.setCriterion(criterion);
    //this.setStyles(new BBOverviewComponentCustStyle());

    // Set the timer names so the architecture will create the timers and can be used for the lights on network
    //this.setComponentLoadTimerName("USR:MPG.BBOVERVIEW.O1 - load component");
    //this.setComponentRenderTimerName("ENG:MPG.BBOVERVIEW.O1 - render component");

    // set the line number display to false in the header 
    //this.setIncludeLineNumber(false);

    // Set the flag to always show this component as expanded
    //this.setAlwaysExpanded(true);
}

/**
 * Setup the prototype and constructor to inherit from the base MPageComponent
 * object
 */
//BBOverviewComponentCust.prototype = new MPageComponent();
//BBOverviewComponentCust.prototype.constructor = MPageComponent;
BBOverviewComponentCust.prototype = new MPage.Component();
BBOverviewComponentCust.prototype.constructor = BBOverviewComponentCust;
BBOverviewComponentCust.prototype.base = MPage.Component.prototype;
BBOverviewComponentCust.name = "BloodBankTransfusionOverviewCustom";

/*
 Custom methods
 */
BBOverviewComponentCust.prototype.getStyles = function(){
    var compId = this.getComponentUid();
    return {
        getId: function(){
            return compId;
        }
        , getNameSpace: function(){
            return "bbo";
        }
    };
};

/* Main rendering functions */

BBOverviewComponentCust.prototype.getComponentId = function(){
    return this.getComponentUid();
};

BBOverviewComponentCust.prototype.getCriterion = function(){
    var js_criterion = JSON.parse(m_criterionJSON);
    return MP_Util.GetCriterion(js_criterion, CERN_static_content);
};

BBOverviewComponentCust.prototype.getComponentLoadTimerName = function(){
    return "USR:BB.OVERVIEW load component";
};

BBOverviewComponentCust.prototype.getComponentRenderTimerName = function(){
    return "ENG:BB.OVERVIEW render component";
};

BBOverviewComponentCust.prototype.getRootComponentNode = function(){
    return this.options.parentComp.getRootComponentNode();
};

BBOverviewComponentCust.prototype.getSectionContentNode = function(){
    return this.getTarget();
};

BBOverviewComponentCust.prototype.initHovers = MPageComponent.prototype.initHovers;
BBOverviewComponentCust.prototype.getScrollNumber = MPageComponent.prototype.getScrollNumber;

BBOverviewComponentCust.prototype.finalizeComponent = function(html, count){
    var target = this.getTarget();
    target.innerHTML = html;
    //MPageComponent.finalizeComponent.apply(this, [html, count]);
};


BBOverviewComponentCust.prototype.render = function(){
    this.retrieveComponentData();
};

/* Supporting functions */
/**
 * Sets the bb Orderable codes for the orders that should be be considered for
 * specimen availability.
 *
 * @param {[float]}
 *            cbbOrderableCodes : An array of BB Orderable codes that will be
 *            used when determining specimen availability.
 */
BBOverviewComponentCust.prototype.setBBOrderableCodes = function(bbOrderableCodes) {
    this.m_bbOrderableCodes = bbOrderableCodes;
};

/**
 * Retrieves the array of bb Orderable codes for the orders that should be be
 * considered for specimen availability.
 *
 * @return {[float]} An array of BB Orderable codes that will be used when
 *         determining specimen availability.
 */
BBOverviewComponentCust.prototype.getBBOrderableCodes = function() {
    return this.m_bbOrderableCodes;
};

/* Main rendering functions */

/**
 * Creates the filterMappings that will be used when loading the component's
 * bedrock settings
 */
BBOverviewComponentCust.prototype.loadFilterMappings = function() {

    // Add the filter mapping object for the BB Orderable Type Codes
    this.addFilterMappingObject("BB_ORDERS", {
        setFunction : this.setBBOrderableCodes,
        type : "ARRAY",
        field : "PARENT_ENTITY_ID"
    });
};

/**
 * function to internationalize the date time.
 */
BBOverviewComponentCust.prototype.overviewI18nDateTime = function(bboDateTime) {
    var resultDtTm = new Date();
    resultDtTm.setISO8601(bboDateTime);
    return resultDtTm.format("longDateTime3");
};

/**
 * This is the BBOverviewComponentCust implementation of the retrieveComponentData
 * function. It creates the necessary parameter array for the data acquisition
 * script call and the associated Request object.
 */
BBOverviewComponentCust.prototype.retrieveComponentData = function() {
    var self = this;
    var criterion = this.getCriterion();
    var sendAr = ["^MINE^", criterion.person_id + ".0", criterion.encntr_id + ".0", MP_Util.CreateParamArray(this.getBBOrderableCodes(), 1) ];
    var request = new MP_Core.ScriptRequest(this, this.getComponentLoadTimerName());
    request.setProgramName("mxh_bbsum_overview");
    request.setParameters(sendAr);
    request.setAsync(true);
    MP_Core.XMLCCLRequestCallBack(this, request, function(reply) {
        self.renderComponent(reply);
    });
};

/**
 * This is the BBOverviewComponentCust implementation of the renderComponent
 * function. It takes the information retrieved from the script call and renders
 * the component's visuals. There is no check on the status of the script call's
 * reply since that is handled in the call to XMLCCLRequestWrapper.
 *
 * @param {MP_Core.ScriptReply}
 *            The ScriptReply object returned from the call to
 *            MP_Core.XMLCCLRequestCallBack function in the
 *            retrieveComponentData function of this object.
 */

BBOverviewComponentCust.prototype.renderComponent = function(reply) {
    //null expire date. requires global scope
    var nullDateTime           = "\/Date(0000-00-00T00:00:00.000+00:00)\/";
    // Error message
    var errMsg                 = [];
    var replyStatus            = "";
    var timerRenderComponent   = null;
    var html = "";
    var myi18n = i18n.lab.bbt_overview_o1;
    try {

        // Create the render timer
        timerRenderComponent = MP_Util.CreateTimer(this.getComponentRenderTimerName());

        // Check to see if the component script call returned successfully. If
        // not handle the response appropriately
        replyStatus = reply.getStatus();
        if (replyStatus !== "S") {
            if (replyStatus === "F") {
                errMsg.push(reply.getError());
                this.finalizeComponent(MP_Util.HandleErrorResponse(this.getStyles().getNameSpace(), errMsg.join("<br />")), "");
            } else {
                this.finalizeComponent(MP_Util.HandleNoDataResponse(this.getStyles().getNameSpace()), "(0)");
            }
            return;
        }

        // Create the actual content body for the component
        var recordData = reply.getResponse();
        var bboArray = [];


        bboArray.push("<div class='content-body'><table>");
        /*
        ABO
         */
        html = "";
        html += "<tr class='bbo-oddrow'>";
        html +=     "<td>" + myi18n.ABO + "</td>";
        //Get list
        var abo = recordData.ABO || "";
        if (!abo){
            html += "<td class='bbo_noresult'>" + myi18n.NO_BLOOD_GROUP + "</td>";
        } else {
            html += "<td class='bbo-result-col'>" + abo + "</td>";
        }
        html += "</tr>";
        bboArray.push(html);
        /*
         Rh Type
         */
        html = "";
        html += "<tr class='bbo-evenrow'>";
        html +=     "<td>" + myi18n.RH_TYPE + "</td>";
        //Get list
        var rh = recordData.RH || "";
        if (!rh){
            html += "<td class='bbo_noresult'>" + myi18n.NO_BLOOD_GROUP + "</td>";
        } else {
            html += "<td class='bbo-result-col'>" + rh + "</td>";
        }
        html += "</tr>";
        bboArray.push(html);
        /*
         * post the Blood Group
         */
        bboArray.push("<tr class='bbo-oddrow'><td>" + i18n.lab.bbt_overview_o1.BLOOD_GROUP + "</td>");
        if (recordData.BLOOD_GROUP_CNT < 1) {
            bboArray.push("<td class='bbo_noresult'>" + i18n.lab.bbt_overview_o1.NO_BLOOD_GROUP);
        } else {
            bboArray.push("<td>", recordData.BLOOD_GROUP);
        }
        bboArray.push("</td></tr>");

		/*
		ABO Cord
		*/
		html = "";
        html += "<tr class='bbo-evenrow'>";
        html +=     "<td>" + myi18n.ABO_CORD + "</td>";
        //Get list
        var abocord = recordData.ABORHCORD || "";
        if (!abocord){
            html += "<td class='bbo_noresult'>" + myi18n.NO_BLOOD_GROUP + "</td>";
        } else {
            html += "<td class='bbo-result-col'>" + abocord + "</td>";
        }
        html += "</tr>";
        bboArray.push(html);
        /*
         Antibody Screen
         */
        html = "";
        html += "<tr class='bbo-oddrow'>";
        html +=     "<td>" + myi18n.ANTIBODY_SCREEN + "</td>";
        //Get list
        var asList = recordData.ASCREEN || [];
        var aLen = asList.length;
        if (!aLen){
            html += "<td class='bbo_noresult'>" + myi18n.NO_RECORDS + "</td>";
        } else {
            html += "<td class='bbo-result-col'>";
            for (i = 0; i < aLen; i++){
                if (i > 0){
                    html += ", ";
                }
                html += asList[i].DISPLAY || "";
            }
            html += "</td>";
        }
        html += "</tr>";
        bboArray.push(html);

        /*
         * post the Antibody List
         */
        bboArray.push("<tr class='bbo-evenrow'><td>" + myi18n.ANTIBODY_ID + " [" + myi18n.TITER + "]</td>");
        var ABRecLen = recordData.ANTIBODYIDLIST.length;
        if (ABRecLen === 0) {
            bboArray.push("<td class='bbo_noresult'>" + myi18n.NO_ANTIBODIES);
        } else {
            bboArray.push("<td>");
            for (var i = 0, allLen = ABRecLen; i < allLen; i++) {
                bboArray.push(recordData.ANTIBODYIDLIST[i].ANTIBODY_CHART_NAME);
                if (i < ABRecLen - 1) {
                    bboArray.push(", ");
                }
            }
        }
        bboArray.push("</td></tr>");

        /*
         * post the Antibody Package List
         */
        bboArray.push("<tr class='bbo-oddrow'><td>" + myi18n.ANTIBODY_ID + " - " + myi18n.PACKAGE + "</td>");
        ABRecLen = recordData.ANTIBODYPACKAGELIST.length;
        if (ABRecLen === 0) {
            bboArray.push("<td class='bbo_noresult'>" + myi18n.NO_ANTIBODIES);
        } else {
            bboArray.push("<td>");
            for (var i = 0, allLen = ABRecLen; i < allLen; i++) {
                bboArray.push(recordData.ANTIBODYPACKAGELIST[i].ANTIBODY_CHART_NAME);
                if (i < ABRecLen - 1) {
                    bboArray.push(", ");
                }
            }
        }
        bboArray.push("</td></tr>");
        /*
         * post the Antibody COLD List
         */
        bboArray.push("<tr class='bbo-evenrow'><td>" + myi18n.ANTIBODY_ID + " - " + myi18n.COLD + "</td>");
        var ABRecLen = recordData.ANTIBODYCOLDLIST.length;
        if (ABRecLen === 0) {
            bboArray.push("<td class='bbo_noresult'>" + myi18n.NO_ANTIBODIES);
        } else {
            bboArray.push("<td>");
            for (var i = 0, allLen = ABRecLen; i < allLen; i++) {
                bboArray.push(recordData.ANTIBODYCOLDLIST[i].ANTIBODY_CHART_NAME);
                if (i < ABRecLen - 1) {
                    bboArray.push(", ");
                }
            }
        }
        bboArray.push("</td></tr>");
        /*
         * post the Antibody ELUTION List
         */
        bboArray.push("<tr class='bbo-oddrow'><td>" + myi18n.ANTIBODY_ID + " - " + myi18n.ELUTION + "</td>");
        var ABRecLen = recordData.ANTIBODYELUTIONLIST.length;
        if (ABRecLen === 0) {
            bboArray.push("<td class='bbo_noresult'>" + myi18n.NO_ANTIBODIES);
        } else {
            bboArray.push("<td>");
            for (var i = 0, allLen = ABRecLen; i < allLen; i++) {
                bboArray.push(recordData.ANTIBODYELUTIONLIST[i].ANTIBODY_CHART_NAME);
                if (i < ABRecLen - 1) {
                    bboArray.push(", ");
                }
            }
        }
        bboArray.push("</td></tr>");
        /*
         * post the Antibody ENZYME List
         */
        bboArray.push("<tr class='bbo-evenrow'><td>" + myi18n.ANTIBODY_ID + " - " + myi18n.ENZYME + "</td>");
        var ABRecLen = recordData.ANTIBODYENZYMELIST.length;
        if (ABRecLen === 0) {
            bboArray.push("<td class='bbo_noresult'>" + myi18n.NO_ANTIBODIES);
        } else {
            bboArray.push("<td>");
            for (var i = 0, allLen = ABRecLen; i < allLen; i++) {
                bboArray.push(recordData.ANTIBODYENZYMELIST[i].ANTIBODY_CHART_NAME);
                if (i < ABRecLen - 1) {
                    bboArray.push(", ");
                }
            }
        }
        bboArray.push("</td></tr>");
        /*
         * post the Antibody WARM List
         */
        bboArray.push("<tr class='bbo-oddrow'><td>" + myi18n.ANTIBODY_ID + " - " + myi18n.WARM + "</td>");
        var ABRecLen = recordData.ANTIBODYWARMLIST.length;
        if (ABRecLen === 0) {
            bboArray.push("<td class='bbo_noresult'>" + myi18n.NO_ANTIBODIES);
        } else {
            bboArray.push("<td>");
            for (var i = 0, allLen = ABRecLen; i < allLen; i++) {
                bboArray.push(recordData.ANTIBODYWARMLIST[i].ANTIBODY_CHART_NAME);
                if (i < ABRecLen - 1) {
                    bboArray.push(", ");
                }
            }
        }
        bboArray.push("</td></tr>");
        /*
         * post the Antibody SP List
         */
        bboArray.push("<tr class='bbo-evenrow'><td>" + myi18n.ANTIBODY_ID + " - " + myi18n.SOLID_PHASE + "</td>");
        var ABRecLen = recordData.ANTIBODYSPLIST.length;
        if (ABRecLen === 0) {
            bboArray.push("<td class='bbo_noresult'>" + myi18n.NO_ANTIBODIES);
        } else {
            bboArray.push("<td>");
            for (var i = 0, allLen = ABRecLen; i < allLen; i++) {
                bboArray.push(recordData.ANTIBODYSPLIST[i].ANTIBODY_CHART_NAME);
                if (i < ABRecLen - 1) {
                    bboArray.push(", ");
                }
            }
        }
        bboArray.push("</td></tr>");

        /*
         Antibody Titer

        html = "";
        html += "<tr class='bbo-evenrow'>";
        html +=     "<td>" + myi18n.ANTIBODY_TITER + "</td>";
        //Get list
        var atList = recordData.ATITER || [];
        aLen = atList.length;
        if (!aLen){
            html += "<td class='bbo_noresult'>" + myi18n.NO_RECORDS + "</td>";
        } else {
            html += "<td class='bbo-result-col'>";
            for (i = 0; i < aLen; i++){
                if (i > 0){
                    html += ", ";
                }
                html += atList[i].DISPLAY || "";
            }
            html += "</td>";
        }
        html += "</tr>";
        bboArray.push(html);
        */
        /*
         * post the Transfusion requirements List
         */
        // bboArray.push("<tr><td>" + i18n.lab.bbt_overview_o1.TRANSFUSION_REQUIREMENTS + "</td>");
        // var TRRecLen = recordData.TRANSREQLIST.length;
        // if (TRRecLen === 0) {
        // bboArray.push("<td class='bbo_noresult'>" + i18n.lab.bbt_overview_o1.NO_TRANS_REQ);
        // } else {
        // bboArray.push("<td>");
        // for (var i = 0, allLen = TRRecLen; i < allLen; i++) {
        // bboArray.push(recordData.TRANSREQLIST[i].REQUIREMENT_DISP);

        // if (i < TRRecLen - 1) {
        // bboArray.push(", ");
        // }
        // }
        // }
        // bboArray.push("</td></tr>");

        /*
         * Post the Antigen list
         */
        bboArray.push("<tr class='bbo-oddrow'><td>" + i18n.lab.bbt_overview_o1.ANTIGENS + " </td>");
        var ANGenLen = recordData.ANTIGENLIST.length;
        if (ANGenLen === 0) {
            bboArray.push("<td class='bbo_noresult'>" + i18n.lab.bbt_overview_o1.NO_ANTIGENS);
        } else {
            bboArray.push("<td>");
            for (var i = 0, GLen = ANGenLen; i < GLen; i++) {
                bboArray.push(recordData.ANTIGENLIST[i].DISPLAY);
                if (i < ANGenLen - 1) {
                    bboArray.push(", ");
                }
            }
        }
        bboArray.push("</td></tr>");

        /*
         * Posting the Specimen Availability
         */
        // bboArray.push("<tr><td>" + i18n.lab.bbt_overview_o1.SPECIMEN_AVAILABILITY + "</td>");

        // // Check if there is any specimen available
        // if (recordData.EXPIRY_DT_TM === nullDateTime) {
        // bboArray.push("<td class='bbo_noresult'>" + i18n.lab.bbt_overview_o1.NO_SPECIMEN + "</td></tr></table></div>");
        // }
        // // Display the expire date if specimen available
        // else {
        // bboArray.push("<td>" + i18n.lab.bbt_overview_o1.CURRENT_UNTIL + ": "
        // + this.overviewI18nDateTime(recordData.EXPIRY_DT_TM) + "</td></tr></table></div>");
        // }
        // Create the component count text

        /*
         Transfusion Comment List
         */
        html = "";
        html += "<tr class='bbo-evenrow'>";
        html +=     "<td>" + i18n.lab.bbt_overview_o1.TRANSFUSION_COMMENT + "</td>";
        //Get list
        var transCommentList = recordData.TC || [];
        var fLen = transCommentList.length;
        if (!fLen){
            html += "<td class='bbo_noresult'>" + i18n.lab.bbt_overview_o1.NO_TRANSFUSION_COMMENT + "</td>";
        } else {
            html += "<td class='bbo-result-col'>";
            for (i = 0; i < fLen; i++){
                if (i > 0){
                    html += "<br />";
                }
                html += transCommentList[i].DISPLAY || "";
            }
            html += "</td>";
        }
        html += "</tr>";
        bboArray.push(html);
        /*
         POLYSPECIFIC List
         */
        var myi18n = i18n.lab.bbt_overview_o1;
        html = "";
        html += "<tr class='bbo-oddrow'>";
        html +=     "<td>" + myi18n.DAT + " - " + myi18n.POLYSPECIFIC + "</td>";
        //Get list
        var datPList = recordData.DATP || [];
        var fLen = datPList.length;
        if (!fLen){
            html += "<td class='bbo_noresult'>" + myi18n.NO_RECORDS + "</td>";
        } else {
            html += "<td class='bbo-result-col'>";
            for (i = 0; i < fLen; i++){
                if (i > 0){
                    html += ", ";
                }
                html += datPList[i].DISPLAY || "";
            }
            html += "</td>";
        }
        html += "</tr>";
        bboArray.push(html);
        /*
         CORD List
         */
        html = "";
        html += "<tr class='bbo-evenrow'>";
        html +=     "<td>" + myi18n.DAT + " - " + myi18n.CORD + "</td>";
        //Get list
        var datCBList = recordData.DATCB || [];
        var fLen = datCBList.length;
        if (!fLen){
            html += "<td class='bbo_noresult'>" + myi18n.NO_RECORDS + "</td>";
        } else {
            html += "<td class='bbo-result-col'>";
            for (i = 0; i < fLen; i++){
                if (i > 0){
                    html += ", ";
                }
                html += datCBList[i].DISPLAY || "";
            }
            html += "</td>";
        }
        html += "</tr>";
        bboArray.push(html);
        /*
         COMPLEMENT List
         */
        html = "";
        html += "<tr class='bbo-oddrow'>";
        html +=     "<td>" + myi18n.DAT + " - " + myi18n.COMPLEMENT + "</td>";
        //Get list
        var datCList = recordData.DATC || [];
        var fLen = datCList.length;
        if (!fLen){
            html += "<td class='bbo_noresult'>" + myi18n.NO_RECORDS + "</td>";
        } else {
            html += "<td class='bbo-result-col'>";
            for (i = 0; i < fLen; i++){
                if (i > 0){
                    html += ", ";
                }
                html += datCList[i].DISPLAY || "";
            }
            html += "</td>";
        }
        html += "</tr>";
        bboArray.push(html);
        /*
         IGG List
         */
        html = "";
        html += "<tr class='bbo-evenrow'>";
        html +=     "<td>" + myi18n.DAT + " - " + myi18n.IGG + "</td>";
        //Get list
        var datIList = recordData.DATI || [];
        var fLen = datIList.length;
        if (!fLen){
            html += "<td class='bbo_noresult'>" + myi18n.NO_RECORDS + "</td>";
        } else {
            html += "<td class='bbo-result-col'>";
            for (i = 0; i < fLen; i++){
                if (i > 0){
                    html += ", ";
                }
                html += datIList[i].DISPLAY || "";
            }
            html += "</td>";
        }
        bboArray.push(html);
        /*
         Fetal Hemorrhage list
         */
        html = "";
        html += "<tr class='bbo-oddrow'>";
        html +=     "<td>" + i18n.lab.bbt_overview_o1.FETAL_HEMORRHAGE + "</td>";
        //Get list
        var fHemorrhageList = recordData.FMHS || [];
        var fLen = fHemorrhageList.length;
        if (!fLen){
            html += "<td class='bbo_noresult'>" + i18n.lab.bbt_overview_o1.NO_FETAL_HEMORRHAGE + "</td>";
        } else {
            html += "<td class='bbo-result-col'>";
            for (i = 0; i < fLen; i++){
                if (i > 0){
                    html += ", ";
                }
                html += fHemorrhageList[i].DISPLAY || "";
            }
            html += "</td>";
        }
        html += "</tr>";
        bboArray.push(html);
        /*
         Fetal Hemoglobin list
         */
        html = "";
        html += "<tr class='bbo-evenrow'>";
        html +=     "<td>" + i18n.lab.bbt_overview_o1.FETAL_HEMOGLOBIN + "</td>";
        //Get list
        var gHemoList = recordData.FMS || [];
        var fLen = gHemoList.length;
        if (!fLen){
            html += "<td class='bbo_noresult'>" + i18n.lab.bbt_overview_o1.NO_FETAL_HEMOGLOBIN + "</td>";
        } else {
            html += "<td class='bbo-result-col'>";
            for (i = 0; i < fLen; i++){
                if (i > 0){
                    html += ", ";
                }
                html += gHemoList[i].DISPLAY || "";
            }
            html += "</td>";
        }
        html += "</tr>";
        bboArray.push(html);
        /*
         rhig eligibility
         */
        html = "";
        html += "<tr class='bbo-oddrow'>";
        html +=     "<td>" + myi18n.RHIG_ELIGIBILITY + "</td>";
        //Get list
        var rhigList = recordData.RHIG || [];
        var rLen = rhigList.length;
        if (!rLen){
            html += "<td class='bbo_noresult'>" + myi18n.NO_RECORDS + "</td>";
        } else {
            html += "<td class='bbo-result-col'>";
            for (i = 0; i < rLen; i++){
                if (i > 0){
                    html += ", ";
                }
                html += rhigList[i].DISPLAY || "";
            }
            html += "</td>";
        }
        html += "</tr>";
        html += "</tr></table></div>";
        bboArray.push(html);
        var countText = "";//MP_Util.CreateTitleText(this, 0);

        // Load the html into the component and initialize hovers and other
        // elements
        this.finalizeComponent(bboArray.join(""), countText);
    } catch (err) {
        if (timerRenderComponent) {
            timerRenderComponent.Abort();
            timerRenderComponent = null;
        }
        MP_Util.LogJSError(this, err, "mp_bbsum_overview.js", "renderComponent");
        // Throw the error to the architecture
        throw (err);
        // end the timer
    } finally {
        if (timerRenderComponent) {
            timerRenderComponent.Stop();
        }
    }
};
/***
BLOOD BANK END
****/
/****
ANTICOAG Start
*****/
if (typeof i18n == "undefined") {
    var i18n = {};
}

if (typeof i18n.discernabu == "undefined") {
    i18n.discernabu = {};
}

i18n.discernabu.anticoagchronic_o1 = {
    NEXT_INR_DATE: "Next INR Date"
    , RECALCULATE: "Update Daily Dose"
    , RECALC_TOOL_TIP: "� Clicking the Update Daily Dose button will recalculate the daily doses if a new weekly dose is supplied.\n � If daily doses are changed, this button will warn you if there is a mismatch between daily dose values and the weekly dose total."
    , RESET: "Reset"
    , RESET_TOOL_TIP: "Clicking the Reset button will reset all the daily dose values and the weekly dose total to previous values."
    , SIGN: "Sign"
    , SIGN_TOOL_TIP: "Sign"
    , WEEKLY: "Weekly"
    , PILL_STRENGTH: "Pill Strength"
    , WEEKLY_INSTRUCTIONS: "Weekly dosing instructions"
    , TABS: "tablets"
    //Days
    , SUNDAY: "Sun"
    , MONDAY: "Mon"
    , TUESDAY: "Tue"
    , WEDNESDAY: "Wed"
    , THURSDAY: "Thu"
    , FRIDAY: "Fri"
    , SATURDAY: "Sat"
    //GREEN ZONE
    , GREEN_ZONE_ENROLLMENT: "If no aberrancy in routine anticoagulation management has occurred, then this patient may be considered for q12 week INR checks"
    , ACCEPTED: "Start q12 week protocol when criteria are met"
    , DENIED: "Declined"
    //Alerts
    , WARNING: "Warning"
    , ERROR: "Error"
};

var ACC_B351_OPTIONS = {
    SCHEDULED_INR_ES_CD: 24513685
    , WEEKLY_DOSE_ES_CD: 35387155
    , PILL_STRENGTH_ES_CD: 35387149
    , SUNDAY_DOSE_ES_CD: 36755541
    , MONDAY_DOSE_ES_CD: 36755549
    , TUESDAY_DOSE_ES_CD: 36755563
    , WEDNESDAY_DOSE_ES_CD: 36755577
    , THURSDAY_DOSE_ES_CD: 36755605
    , FRIDAY_DOSE_ES_CD: 36755627
    , SATURDAY_DOSE_ES_CD: 36755633
    , LONG_GREEN_ZONE_ES_CD: 36863109
    , CHRONIC_PROTOCOL_CATALOG_CD: 24504381
};

var ACC_P351_OPTIONS = {
   SCHEDULED_INR_ES_CD: 24513685
    , WEEKLY_DOSE_ES_CD: 35387155
    , PILL_STRENGTH_ES_CD: 35387149
    , SUNDAY_DOSE_ES_CD: 36755541
    , MONDAY_DOSE_ES_CD: 36755549
    , TUESDAY_DOSE_ES_CD: 36755563
    , WEDNESDAY_DOSE_ES_CD: 36755577
    , THURSDAY_DOSE_ES_CD: 36755605
    , FRIDAY_DOSE_ES_CD: 36755627
    , SATURDAY_DOSE_ES_CD: 36755633
    , LONG_GREEN_ZONE_ES_CD: 36863109
    , CHRONIC_PROTOCOL_CATALOG_CD: 24504381
};

MPage.namespace("cerner");
cerner.AntiCoagChronicComponentO1 = function () {
    this.m_chronicProtocolEnabbled = false;
    this.m_dailyDoseList = null;
    this.m_dailyDoseMap = null;
    this.m_nextSuggestedINRDate = null;
    this.m_nextSuggestedINREventId = 0;
    this.m_workingINRDate = null;
    this.m_weeklyDose = 0;
    this.m_weeklyDoseEventId = 0;
    this.m_workingWeeklyDose = null;
    this.m_pillStrength = 0;
    this.m_pillStrengthColor = "";
    this.m_longGreenZoneSetting = "";
    this.m_workingLongGreenZoneSetting = "";
    this.m_alteredDailyDoseList = null;
    this.m_alteredDailyDoseMap = null;
    this.m_workingDailyDoseMap = null;
    this.m_inputToDayMap = null;
    //The order the days appear in this list is the order they will appear face-up
    this.m_daysList = ["SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY"];
    this.m_jqElementsMap = null;
    this.m_notificationManager = null;
};

cerner.AntiCoagChronicComponentO1.prototype = new MPage.Component();
cerner.AntiCoagChronicComponentO1.prototype.constructor = cerner.AntiCoagChronicComponentO1;
cerner.AntiCoagChronicComponentO1.prototype.base = MPage.Component.prototype;
cerner.AntiCoagChronicComponentO1.name = "cerner.AntiCoagChronicComponentO1";

cerner.AntiCoagChronicComponentO1.LONG_GREEN_ZONE_ENUMS = {
    ACCEPTED: "Accepted"
    , DENIED: "Denied"
};

/*
 this method is a hack to mimic the behavior we would see in a standard component.  May end up removing
 */
cerner.AntiCoagChronicComponentO1.prototype.getStyles = function () {
    var compId = this.getComponentUid();
    return {
        getId: function () {
            return compId;
        }
        , getNameSpace: function(){
            return "ACCO1";
        }
    };
};

cerner.AntiCoagChronicComponentO1.prototype.getComponentId = function () {
    return this.getComponentUid();
};

cerner.AntiCoagChronicComponentO1.prototype.getCriterion = function () {
    //Using this temporarily
    var js_criterion = JSON.parse(m_criterionJSON);
    return MP_Util.GetCriterion(js_criterion, CERN_static_content);
};

cerner.AntiCoagChronicComponentO1.prototype.getComponentLoadTimerName = function () {
    return "USR:ANTI.COAG.CHRONIC_load component";
};

cerner.AntiCoagChronicComponentO1.prototype.getComponentRenderTimerName = function () {
    return "ENG:ANTI.COAG.CHRONIC_render component";
};

/*
 Getters and Setters
 */
cerner.AntiCoagChronicComponentO1.prototype.isChronicProtocolEnabled = function () {
    return this.m_chronicProtocolEnabbled;
};

cerner.AntiCoagChronicComponentO1.prototype.setIsChronicProtocolEnabled = function (flag) {
    this.m_chronicProtocolEnabbled = !!flag;
};

cerner.AntiCoagChronicComponentO1.prototype.getWeeklyDose = function () {
    return this.m_weeklyDose;
};

cerner.AntiCoagChronicComponentO1.prototype.setWeeklyDose = function (dose) {
    this.m_weeklyDose = dose;
};

cerner.AntiCoagChronicComponentO1.prototype.getWeeklyDoseEventId = function () {
    return this.m_weeklyDoseEventId;
};

cerner.AntiCoagChronicComponentO1.prototype.setWeeklyDoseEventId = function (id) {
    this.m_weeklyDoseEventId = id;
};

cerner.AntiCoagChronicComponentO1.prototype.getWorkingWeeklyDose = function () {
    return this.m_workingWeeklyDose;
};

cerner.AntiCoagChronicComponentO1.prototype.setWorkingWeeklyDose = function (dose) {
    this.m_workingWeeklyDose = dose;
};

cerner.AntiCoagChronicComponentO1.prototype.getPillStrength = function () {
    return this.m_pillStrength;
};

cerner.AntiCoagChronicComponentO1.prototype.setPillStrength = function (pillStrengthInMg) {
    this.m_pillStrength = pillStrengthInMg;
};

cerner.AntiCoagChronicComponentO1.prototype.getPillStrengthColor = function () {
    return this.m_pillStrengthColor;
};

cerner.AntiCoagChronicComponentO1.prototype.setPillStrengthColor = function (pillInfo) {
    this.m_pillStrengthColor = pillInfo;
};

cerner.AntiCoagChronicComponentO1.prototype.getLongGreenZoneSetting = function () {
    return this.m_longGreenZoneSetting;
};

cerner.AntiCoagChronicComponentO1.prototype.setLongGreenZoneSetting = function (setting) {
    this.m_longGreenZoneSetting = setting;
};

cerner.AntiCoagChronicComponentO1.prototype.getWorkingLongGreenZoneSetting = function () {
    return this.m_workingLongGreenZoneSetting;
};

cerner.AntiCoagChronicComponentO1.prototype.setWorkingLongGreenZoneSetting = function (setting) {
    this.m_workingLongGreenZoneSetting = setting;
};

cerner.AntiCoagChronicComponentO1.prototype.getNextSuggestedINRDate = function () {
    return this.m_nextSuggestedINRDate;
};

cerner.AntiCoagChronicComponentO1.prototype.setNextSuggestedINRDate = function (dt) {
    this.m_nextSuggestedINRDate = dt;
};

cerner.AntiCoagChronicComponentO1.prototype.getWorkingINRDate = function () {
    return this.m_workingINRDate;
};

cerner.AntiCoagChronicComponentO1.prototype.setWorkingINRDate = function (dt) {
    this.m_workingINRDate = dt;
};

cerner.AntiCoagChronicComponentO1.prototype.getNextSuggestedINREventId = function () {
    return this.m_nextSuggestedINREventId
};

cerner.AntiCoagChronicComponentO1.prototype.setNextSuggestedINREventId = function (eventId) {
    this.m_nextSuggestedINREventId = eventId;
};

cerner.AntiCoagChronicComponentO1.prototype.getDailyDoseList = function () {
    if (!this.m_dailyDoseList) {
        this.m_dailyDoseList = [];
    }
    return this.m_dailyDoseList;
};

cerner.AntiCoagChronicComponentO1.prototype.setDailyDoseList = function (list) {
    this.m_dailyDoseList = list;
};

cerner.AntiCoagChronicComponentO1.prototype.getAlteredDailyDoseList = function () {
    if (!this.m_alteredDailyDoseList) {
        this.m_alteredDailyDoseList = [];
    }
    return this.m_alteredDailyDoseList;
};

cerner.AntiCoagChronicComponentO1.prototype.setAlteredDailyDoseList = function (list) {
    this.m_alteredDailyDoseList = list;
};

cerner.AntiCoagChronicComponentO1.prototype.getDailyDoseMap = function () {
    if (!this.m_dailyDoseMap) {
        this.m_dailyDoseMap = {};
    }
    return this.m_dailyDoseMap;
};

cerner.AntiCoagChronicComponentO1.prototype.setDailyDoseMap = function (map) {
    this.m_dailyDoseMap = map;
};

cerner.AntiCoagChronicComponentO1.prototype.getAlteredDailyDoseMap = function () {
    if (!this.m_alteredDailyDoseMap) {
        this.m_alteredDailyDoseMap = {};
    }
    return this.m_alteredDailyDoseMap;
};

cerner.AntiCoagChronicComponentO1.prototype.setAlteredDailyDoseMap = function (map) {
    this.m_alteredDailyDoseMap = map;
};

cerner.AntiCoagChronicComponentO1.prototype.getWorkingDailyDoseMap = function () {
    if (!this.m_workingDailyDoseMap) {
        this.m_workingDailyDoseMap = {};
    }
    return this.m_workingDailyDoseMap;
};

cerner.AntiCoagChronicComponentO1.prototype.setWorkingDailyDoseMap = function (map) {
    this.m_workingDailyDoseMap = map;
};

cerner.AntiCoagChronicComponentO1.prototype.getInputToDayMap = function () {
    if (!this.m_inputToDayMap) {
        this.m_inputToDayMap = {};
    }
    return this.m_inputToDayMap;
};

cerner.AntiCoagChronicComponentO1.prototype.setInputToDayMap = function (map) {
    this.m_inputToDayMap = map;
};

cerner.AntiCoagChronicComponentO1.prototype.getDaysList = function () {
    return this.m_daysList;
};

cerner.AntiCoagChronicComponentO1.prototype.getJqElementsMap = function () {
    if (!this.m_jqElementsMap) {
        this.m_jqElementsMap = {};
    }
    return this.m_jqElementsMap;
};

cerner.AntiCoagChronicComponentO1.prototype.setJqElementsMap = function (map) {
    this.m_jqElementsMap = map;
};

cerner.AntiCoagChronicComponentO1.prototype.getNotificationManager = function () {
    if (!this.m_notificationManager) {
        this.m_notificationManager = new cerner.AntiCoagChronicComponentO1.NotificationManager(this.getStyles().getId());
    }
    return this.m_notificationManager;
};

cerner.AntiCoagChronicComponentO1.prototype.setNotificationManager = function (mgr) {
    this.m_notificationManager = mgr;
};

cerner.AntiCoagChronicComponentO1.prototype.getOriginalDailyDoseMap = function () {
    function isEmpty(obj) {
        if (!obj) {
            return true;
        }
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                return false;
            }
        }
        return true;
    }

    return isEmpty(this.getAlteredDailyDoseMap()) ? this.getDailyDoseMap() : this.getAlteredDailyDoseMap();
};

cerner.AntiCoagChronicComponentO1.prototype.finalizeComponent = function (html) {
    var target = this.getTarget();
    target.innerHTML = html;
};

cerner.AntiCoagChronicComponentO1.prototype.render = function () {
    this.retrieveComponentData();
};

cerner.AntiCoagChronicComponentO1.prototype.retrieveComponentData = function () {
    var self = this;
    var criterion = this.getCriterion();
    var sendAr = [];
    var scriptRequest = new ScriptRequest();

    var prsnlInfo = criterion.getPersonnelInfo();
    var encntrs = prsnlInfo.getViewableEncounters();
    var encountersParam = (encntrs) ? "value(" + encntrs + ")" : "0.0";

    var dailyEventSets = [];
    dailyEventSets.push(
        this.getOption("SUNDAY_DOSE_ES_CD")
        , this.getOption("MONDAY_DOSE_ES_CD")
        , this.getOption("TUESDAY_DOSE_ES_CD")
        , this.getOption("WEDNESDAY_DOSE_ES_CD")
        , this.getOption("THURSDAY_DOSE_ES_CD")
        , this.getOption("FRIDAY_DOSE_ES_CD")
        , this.getOption("SATURDAY_DOSE_ES_CD")
    );

    var chronicProtocolCatalogCd = this.getOption("CHRONIC_PROTOCOL_CATALOG_CD");

    sendAr.push(
        "^MINE^"
        , criterion.person_id + ".0"
        , encountersParam
        , criterion.provider_id + ".0"
        , criterion.ppr_cd + ".0"
        , this.getOption("SCHEDULED_INR_ES_CD") + ".0"
        , this.getOption("WEEKLY_DOSE_ES_CD") + ".0"
        , this.getOption("PILL_STRENGTH_ES_CD") + ".0"
        , this.getOption("LONG_GREEN_ZONE_ES_CD") + ".0"
        , MP_Util.CreateParamArray(dailyEventSets, 1)
        , 400 //Result Count
        , chronicProtocolCatalogCd + ".0"
    );

    MP_Util.LogError("mp_get_cac_chronic_data - request<br />" + sendAr.join(","));

    scriptRequest.setProgramName("mp_get_cac_chronic_data");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(true);
    scriptRequest.setName("getAnticoagChronicData");
    scriptRequest.setResponseHandler(function (scriptReply) {
        self.handleDataRetrievalResponse(scriptReply);
    });
    scriptRequest.performRequest();
};

cerner.AntiCoagChronicComponentO1.prototype.handleDataRetrievalResponse = function (reply) {
    var response;
    if (!reply) {
        this.finalizeComponent(MP_Util.HandleErrorResponse(this.getStyles().getNameSpace(), "Component Data Retrieval Failed"), "");
        return;
    }

    MP_Util.LogError("mp_get_cac_chronic_data - response<br />" + JSON.stringify(reply.getResponse()));

    if (reply.getStatus() === 'S') {
        response = reply.getResponse();
        this.processData(response);
        this.renderComponent();
    } else if (reply.getStatus() === 'Z') {
        this.finalizeComponent("<span class='res-none'>Patient currently not enrolled in Anticoagulation Chronic Protocol</span>");
    } else {
        this.finalizeComponent(MP_Util.HandleErrorResponse(this.getStyles().getNameSpace(), "Component Data Retrieval Failed"), "");
    }
};

cerner.AntiCoagChronicComponentO1.prototype.processData = function (reply) {
    if (!reply) {
        return;
    }
    var dailyDose;
    var dailyDoseMap = this.getDailyDoseMap();
    var dailyDoseList = reply.DAILY_DOSE || [];
    var dLen = dailyDoseList.length;
    var i;
    this.setDailyDoseList(dailyDoseList);

    //Get the calculated daily dose values
    for (i = 0; i < dLen; i++) {
        dailyDose = dailyDoseList[i];
        dailyDoseMap[dailyDose.DAY] = dailyDose.NUM_OF_TABLETS;
    }

    //Get the previously saved daily dose values (altered by user)
    var alteredDoseMap = this.getAlteredDailyDoseMap();
    var alteredDoseList = reply.ALTERED_DAILY_DOSE || [];
    var aLen = alteredDoseList.length;
    this.setAlteredDailyDoseList(alteredDoseList);
    if (aLen === 0) {
        this.setAlteredDailyDoseMap(null);
    } else {
        for (i = 0; i < aLen; i++) {
            dailyDose = alteredDoseList[i];
            alteredDoseMap[dailyDose.DAY] = dailyDose.NUM_OF_TABLETS;
        }
    }

    //Get next suggested INR date
    var inrDate = reply.NEXT_INR_DATE || "";
    if (inrDate) {
        var dateTime = new Date();
        dateTime.setISO8601(inrDate);
        this.setNextSuggestedINRDate(dateTime);
        this.setWorkingINRDate(dateTime);
        this.setNextSuggestedINREventId(reply.NEXT_INR_EVENT_ID || 0);
    }

    //Set weekly dose
    this.setWeeklyDose(reply.WEEKLY_DOSE || 0);
    this.setWeeklyDoseEventId(reply.WEEKLY_DOSE_EVENT_ID || 0);
    this.setPillStrength(reply.PILL_STRENGTH_VAL || 0);
    this.setPillStrengthColor(reply.PILL_STRENGTH || "");
    this.setLongGreenZoneSetting(reply.LONG_GREEN_ZONE || "");
};

cerner.AntiCoagChronicComponentO1.prototype.renderComponent = function () {
    var notificationManager = this.getNotificationManager();
    var html = "";

    html += this.buildAlertContainerHTML();
    html += this.buildNextSuggestedINRHTML();
    html += this.buildWeeklyDosingInstructionHTML();
    html += this.buildGreenZoneSettingHTML();
    html += this.buildFooterButtonsHTML();

    this.finalizeComponent(html);

    //Cache important jQuery elements
    this.captureJqElements();
    //Set container on the alert manager
    notificationManager.setJqContainer(this.getJqElementsMap()["alert_container"]);
    //Anything that requires attaching event handlers needs to be done after finalizeComponent
    this.attachDatePicker();
    this.attachDailyDosageEventListeners();
    this.attachButtonsEventListeners();

    //Validate existing fields to trigger alerts
    this.validateFields();

};

cerner.AntiCoagChronicComponentO1.prototype.buildNextSuggestedINRHTML = function () {
    var compId = this.getStyles().getId();
    var myi18n = i18n.discernabu.anticoagchronic_o1;
    var dateFormatter = MP_Util.GetDateFormatter();
    var fullDate4Year = mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR;
    var nextINRDate = this.getNextSuggestedINRDate();
    var inrDateStr = "";

    if (nextINRDate) {
        inrDateStr = dateFormatter.format(nextINRDate, fullDate4Year);
    }

    var html = "";

    html += "<div class='acco1-inr-date-container'>";
    html += "<span class='acco1-inr-date-lbl'>" + myi18n.NEXT_INR_DATE + ": </span>";
    html += "<input type='text' id='" + compId + "INRTextBox' class='acco1-inr-date-textbox' maxlength='10' size='10' value='" + inrDateStr + "' />";
    html += "</div><br/>";

    return html;
};

cerner.AntiCoagChronicComponentO1.prototype.buildWeeklyDosingInstructionHTML = function () {
    var myi18n = i18n.discernabu.anticoagchronic_o1;
    var compId = this.getStyles().getId();
    var html = "";

    //Initial Label
    html += "<div class='acco1-weekly-dose-lbl'>" + myi18n.WEEKLY_INSTRUCTIONS + "</div>";

    //Generate 'table'
    html += "<div id='" + compId + "DosageTable' class='acco1-doseage-table'>";
    html += "<div class='acco1-dossage-table-row'>";
    html += this.buildDailyDosingHeaderColumnsHTML();
    html += "</div>";
    html += "<div class='acco1-dossage-table-row'>";
    html += this.buildDailyDosingValueColumnsHTML();
    html += "</div>";
    html += "</div>";

    return html;
};

cerner.AntiCoagChronicComponentO1.prototype.buildDailyDosingHeaderColumnsHTML = function () {
    var myi18n = i18n.discernabu.anticoagchronic_o1;
    var html = "";
    //Days will be in the same order as this list
    var dayList = this.getDaysList();
    var daysLen = dayList.length;
    var i;

    //TODO: Add logic to auto-calculate (should probably just automatically be returned by initial script
    for (i = 0; i < daysLen; i++) {
        html += "<span class='acco1-dosage-table-header-cell'>" + myi18n[dayList[i]] + "</span>";
    }

    html += "<span class='acco1-dosage-table-header-cell'>" + myi18n.WEEKLY + "</span>";
    html += "<span class='acco1-dosage-table-header-cell'>" + myi18n.PILL_STRENGTH + "</span>";

    return html;
};

cerner.AntiCoagChronicComponentO1.prototype.buildDailyDosingValueColumnsHTML = function () {
    function isEmpty(obj) {
        if (!obj) {
            return true;
        }
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                return false;
            }
        }
        return true;
    }

    var compId = this.getStyles().getId();
    var myi18n = i18n.discernabu.anticoagchronic_o1;
    var dailyDoseMap = isEmpty(this.getAlteredDailyDoseMap()) ? this.getDailyDoseMap() : this.getAlteredDailyDoseMap();
    var html = "";
    //Days will be in the same order as this list
    this.setInputToDayMap(null);
    var inputToDayMap = this.getInputToDayMap();
    var workingDoseMap = this.getWorkingDailyDoseMap();
    var dayList = this.getDaysList();
    var daysLen = dayList.length;
    var i;

    //TODO: Add logic to auto-calculate (should probably just automatically be returned by initial script
    for (i = 0; i < daysLen; i++) {
        var inputId = compId + "DoseInput" + i;
        html += "<span class='acco1-dosage-table-value-cell'><input id='" + inputId + "' class='acco1-dosage-table-value-txtbox acco1-daily-dose-input' type='text' value='" + dailyDoseMap[dayList[i]] + "' /><span class='acco1-dosage-table-val-uom secondary-text'>" + myi18n.TABS + "</span></span>";
        inputToDayMap[inputId] = dayList[i];
        workingDoseMap[dayList[i]] = dailyDoseMap[dayList[i]];
    }

    html += "<span class='acco1-dosage-table-value-cell'><input id='" + compId + "InputWeeklyDose' class='acco1-dosage-table-value-txtbox acco1-weekly-dose-input' type='text' value='" + this.getWeeklyDose() + "' /><span class='acco1-dosage-table-val-uom secondary-text'>mg</span></span>";
    html += "<span class='acco1-dosage-table-value-cell'>" + this.getPillStrengthColor() + "</span>";

    return html;
};

cerner.AntiCoagChronicComponentO1.prototype.buildGreenZoneSettingHTML = function () {
    var compId = this.getStyles().getId();
    var html = "";

    //container
    html += "<fieldset id='" + compId + "GreenZoneContainer' class='acco1-green-zone-container'>";
    //Moved contents generation into own method so we can use jQuery to easily update later on (i.e. when we click 'Reset')
    html += this.buildGreenZoneRadioButtonsHTML();
    html += "</fieldset>";

    return html;
};

cerner.AntiCoagChronicComponentO1.prototype.buildGreenZoneRadioButtonsHTML = function () {
    var compId = this.getStyles().getId();
    var my18n = i18n.discernabu.anticoagchronic_o1;
    var greenZoneValue = this.getLongGreenZoneSetting();
    var acceptedChecked = "";
    var deniedChecked = "";
    var html = "";

    if (greenZoneValue === cerner.AntiCoagChronicComponentO1.LONG_GREEN_ZONE_ENUMS.ACCEPTED) {
        acceptedChecked = "checked";
    } else if (greenZoneValue === cerner.AntiCoagChronicComponentO1.LONG_GREEN_ZONE_ENUMS.DENIED) {
        deniedChecked = "checked";
    }

    //header
    html += "<br/><legend class='acco1-grn-zone'>" + my18n.GREEN_ZONE_ENROLLMENT + "</legend>";

    html += "<label><input type='radio' name='" + compId + "greenzone' class='acco1-green-zone-radio' value='" + cerner.AntiCoagChronicComponentO1.LONG_GREEN_ZONE_ENUMS.ACCEPTED + "' " + acceptedChecked + " />" + my18n.ACCEPTED + "</label>";
    html += "<label><input type='radio' name='" + compId + "greenzone' class='acco1-green-zone-radio' value='" + cerner.AntiCoagChronicComponentO1.LONG_GREEN_ZONE_ENUMS.DENIED + "' " + deniedChecked + " />" + my18n.DENIED + "</label>";

    return html;
};

cerner.AntiCoagChronicComponentO1.prototype.buildAlertContainerHTML = function () {
    var compId = this.getStyles().getId();
    var html = "";
    html += "<div id='" + compId + "AlertContainer' class='acco1-alert-container'></div>";
    return html;
};

cerner.AntiCoagChronicComponentO1.prototype.buildFooterButtonsHTML = function () {
    var compId = this.getStyles().getId();
    var myi18n = i18n.discernabu.anticoagchronic_o1;
    var html = "";
    //Container first
    html += "<div id='" + compId + "BtnCont' class='acco1-btn-container'>";
    html += "<input id='" + compId + "CalculateBtn' class='acco1-btn' type='button' value='" + myi18n.RECALCULATE + "' title='"+ myi18n.RECALC_TOOL_TIP +"' />";
    html += "<input id='" + compId + "ResetBtn' class='acco1-btn' type='button' value='" + myi18n.RESET + "' title='"+ myi18n.RESET_TOOL_TIP +"' disabled  />";
    html += "<input id='" + compId + "SignBtn' class='acco1-btn' type='button' value='" + myi18n.SIGN + "' title='"+ myi18n.SIGN_TOOL_TIP +"' disabled />";
    html += "</div>";

    return html;
};

cerner.AntiCoagChronicComponentO1.prototype.captureJqElements = function () {
    var compId = this.getStyles().getId();
    var jqElementsMap = this.getJqElementsMap();

    jqElementsMap["date_picker_text_box"] = $("#" + compId + "INRTextBox");
    jqElementsMap["dosage_table"] = $("#" + compId + "DosageTable");
    jqElementsMap["weekly_dose_field"] = $("#" + compId + "InputWeeklyDose");
    jqElementsMap["green_zone_container"] = $("#" + compId + "GreenZoneContainer");
    jqElementsMap["alert_container"] = $("#" + compId + "AlertContainer");
    jqElementsMap["footer_button_container"] = $("#" + compId + "BtnCont");
    jqElementsMap["recalculate_button"] = $("#" + compId + "CalculateBtn");

    jqElementsMap["footer_reset_button"] = $("#" + compId + "ResetBtn");

    jqElementsMap["footer_sign_button"] = $("#" + compId + "SignBtn");

};

cerner.AntiCoagChronicComponentO1.prototype.attachDatePicker = function () {
    var self = this;
    var jqDateBox = this.getJqElementsMap()["date_picker_text_box"];
    if (!jqDateBox || !jqDateBox.length) {
        return;
    }
    jqDateBox.datepicker({
        onClose: function (dateStr, inst) {
            var workingDate = new Date();
			workingDate.setDate(1);
            workingDate.setYear(inst.selectedYear);
            workingDate.setMonth(inst.selectedMonth);
            workingDate.setDate(inst.selectedDay);
            if (!dateStr) {
                //Invalid date
                self.setWorkingINRDate(null);
                self.showNotification("INR_DATE_VALIDATION");
                jqDateBox.addClass("acco1-validation-fail");
            } else {
                self.hideNotification("INR_DATE_VALIDATION");
                jqDateBox.removeClass("acco1-validation-fail");
                self.setWorkingINRDate(workingDate);
            }

            self.updateSignButton();
        }
    });
};

cerner.AntiCoagChronicComponentO1.prototype.attachButtonsEventListeners = function () {
    var self = this;
    var compId = this.getStyles().getId();
    var jqFooterButtonContainer = this.getJqElementsMap()["footer_button_container"];
    var jqGreenZoneContainer = this.getJqElementsMap()["green_zone_container"];

    function routeTask(event) {
        if (!event) {
            return;
        }
        //Get button
        var jqButton = $(event.currentTarget);

        if (jqButton.prop("id") === (compId + "SignBtn")) {

            if (self.validateDailyDoses()) {
                self.hideNotification("DAILY_DOSES_SUM_VALIDATION");
            } else {
                self.showNotification("DAILY_DOSES_SUM_VALIDATION");
            }
            self.submitChanges();
        }
        /*
         Reset Button
         */
        else if (jqButton.prop("id") === (compId + "ResetBtn")) {
            self.resetFields();
        }
        /*
         Radio Button (Change)
         */
        else if (jqButton.hasClass("acco1-green-zone-radio")) {
            self.handleGreenZoneChange(jqButton.val());
        }
        /*
         Recalculate Button
         */
        else if (jqButton.prop("id") === (compId + "CalculateBtn")) {
            self.recalculateDailyDoses();
        }
    }

    if (jqFooterButtonContainer && jqFooterButtonContainer.length) {
        jqFooterButtonContainer.on("click", "input", function (event) {
            routeTask(event);
        });
    }

    if (jqGreenZoneContainer && jqGreenZoneContainer.length) {
        jqGreenZoneContainer.on("change", "input", function (event) {
            routeTask(event);
        });
    }
};

cerner.AntiCoagChronicComponentO1.prototype.attachDailyDosageEventListeners = function () {
    var self = this;
    var jqDosageTable = this.getJqElementsMap()["dosage_table"];

    if (!jqDosageTable || !jqDosageTable.length) {
        return;
    }

    jqDosageTable.on("keyup", "input.acco1-dosage-table-value-txtbox", function (event) {
        if (!event) {
            return;
        }
        var keyCode = event.keyCode;
        var jqInput = $(event.currentTarget);
        self.handleDoseInput(jqInput, keyCode);
    });
    jqDosageTable.on("blur", "input.acco1-dosage-table-value-txtbox", function (event) {
        if (!event) {
            return;
        }
        self.handleDoseInputBlur($(event.currentTarget));
    });

};

cerner.AntiCoagChronicComponentO1.prototype.handleGreenZoneChange = function (val) {
    this.setWorkingLongGreenZoneSetting(val);
    this.updateSignButton();
};

cerner.AntiCoagChronicComponentO1.prototype.resetFields = function () {
    function isEmpty(obj) {
        if (!obj) {
            return true;
        }
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                return false;
            }
        }
        return true;
    }

    var notificationManager = this.getNotificationManager();
    var jqElementsMap = this.getJqElementsMap();

    //Reset INR Date
    var dateFormatter = MP_Util.GetDateFormatter();
    var fullDate4Year = mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR;
    var inrDateStr = "";
    var jqDateTextBox = jqElementsMap["date_picker_text_box"];
    var originalINRDate = this.getNextSuggestedINRDate();
    this.setWorkingINRDate(originalINRDate);
    //Update text box
    if (originalINRDate) {
        inrDateStr = dateFormatter.format(originalINRDate, fullDate4Year);
        this.hideNotification("INR_DATE_VALIDATION");
        jqElementsMap["date_picker_text_box"].removeClass("acco1-validation-fail");
    } else {
        this.showNotification("INR_DATE_VALIDATION");
        jqElementsMap["date_picker_text_box"].addClass("acco1-validation-fail");
    }
    jqDateTextBox.val(inrDateStr);

    //Reset daily doses
    var originalDailyDoseMap = isEmpty(this.getAlteredDailyDoseMap()) ? this.getDailyDoseMap() : this.getAlteredDailyDoseMap();
    var workingDoseMap = this.getWorkingDailyDoseMap();
    var inputToDayMap = this.getInputToDayMap();
    //Loop through input map, as we'll be reverting these input fields
    for (var inputId in inputToDayMap) {
        if (!inputToDayMap.hasOwnProperty(inputId)) {
            continue;
        }
        var day = inputToDayMap[inputId];
        if (originalDailyDoseMap[day] === workingDoseMap[day]) {
            //No changes needed for this day
            continue;
        }
        //Update input field
        $("#" + inputId).val(originalDailyDoseMap[day]).removeClass("acco1-validation-fail");
        workingDoseMap[day] = originalDailyDoseMap[day];
    }

    //Reset weekly dose field
    var originalWeeklyDose = this.getWeeklyDose();
    this.setWorkingWeeklyDose(null);
    //Update field
    var jqWeeklyDoseField = jqElementsMap["weekly_dose_field"];
    jqWeeklyDoseField.val(originalWeeklyDose);

    //Reset Green Zone
    this.setWorkingLongGreenZoneSetting("");
    var jqGreenZoneContainer = jqElementsMap["green_zone_container"];
    jqGreenZoneContainer.html(this.buildGreenZoneRadioButtonsHTML());

    this.validateFields();
    this.updateSignButton();
};

cerner.AntiCoagChronicComponentO1.prototype.isDoseFieldValid = function (value) {
    var valueType = (typeof value);
    if (valueType !== "string" && valueType !== "number") {
        return false;
    }

    var numResult = value;

    if (valueType === "string") {
        //Check for duplicate periods
        var vLen = value.length;
        var i;
        var numPeriods = 0;
        for (i = 0; i < vLen; i++) {
            if (value.charAt(i) === ".") {
                numPeriods++;
            }
            if (numPeriods > 1) {
                return false;
            }
        }
        numResult = parseFloat(value);
    }

    //Make sure we have a finite number (this also check for NaN)
    if (value === "" || !isFinite(numResult)) {
        return false;
    }

    //Made it through the gauntlet!
    return true;
};

cerner.AntiCoagChronicComponentO1.prototype.handleDoseInputBlur = function (jqInput) {
    var self = this;
    var compId = this.getStyles().getId();

    function inputFilter(jqInput) {
        var val = jqInput.val();
        //TODO: Consider converting commas to periods when actually saving
        val = val.replace(/[^0-9\.]/ig, "");

        var isDoseValid = self.isDoseFieldValid(val);

        jqInput.val(val);
        if (!isDoseValid) {
            jqInput.addClass("acco1-validation-fail");
            self.showNotification("DAILY_DOSE_VALUE_VALIDATION");
        } else {
            jqInput.removeClass("acco1-validation-fail");
            //Check for other validation failures before removing the alert
            var jqDailyDosageTable = self.getJqElementsMap()["dosage_table"];
            if (!jqDailyDosageTable.find("input.acco1-validation-fail").length) {
                self.hideNotification("DAILY_DOSE_VALUE_VALIDATION");
            }
            return val;
        }
        return false;
    }

    var dose = inputFilter(jqInput);
    var inputId = jqInput.prop("id");

    //Check if this is the weekly dose field
    if (inputId === (compId + "InputWeeklyDose")) {
        if (this.validateWeeklyDose(this.getPillStrength(), dose)) {
            //Validated...remove the alert
            this.hideNotification("WEEKLY_DOSE_SUM_VALIDATION");
        } else {
            this.showNotification("WEEKLY_DOSE_SUM_VALIDATION");
        }
        this.setWorkingWeeklyDose(parseFloat(dose));
    }
    /*
     Check daily dose fields
     */
    else {
        //update working map
        var workingDoseMap = this.getWorkingDailyDoseMap();
        var inputToDayMap = this.getInputToDayMap();

        //Get the day for the working dose
        workingDoseMap[inputToDayMap[inputId]] = (typeof dose === 'string') ? parseFloat(dose) : dose;
    }

    if (this.validateDailyDoses()) {
        this.hideNotification("DAILY_DOSES_SUM_VALIDATION");
    } else {
        this.showNotification("DAILY_DOSES_SUM_VALIDATION");
    }

    this.updateSignButton();
};

cerner.AntiCoagChronicComponentO1.prototype.handleDoseInput = function (jqInput, code) {
    //Check is enter or spacebar was pressed
    if (code == 32 || code == 13) {
        jqInput.blur();
    }
};

cerner.AntiCoagChronicComponentO1.prototype.showNotification = function (identifier) {
    if (!identifier || typeof identifier !== 'string') {
        return;
    }
    var notificationManager = this.getNotificationManager();
    var alertEnums = notificationManager.NOTIFICATION_TYPES;
    var alertType = null;
    var alertMessage = {};

    switch (identifier) {
        case "DAILY_DOSES_SUM_VALIDATION":
            alertMessage.PRIMARY = "Daily Doses do not add up to Weekly Dose.";
            alertType = alertEnums.WARNING;
            break;
        case "WEEKLY_DOSE_SUM_VALIDATION":
            alertMessage.PRIMARY = "Tablets can not be exactly divvied up using half tablets with this weekly dose.";
            alertType = alertEnums.WARNING;
            break;
        case "DAILY_DOSE_VALUE_VALIDATION":
            alertMessage.PRIMARY = "Validation Error";
            alertMessage.SECONDARY = "Dose fields cannot be blank or contain more than 1 period.";
            alertType = alertEnums.ERROR;
            break;
        case "CALCULATION_FAILURE":
            alertMessage.PRIMARY = "Runtime Error";
            alertMessage.SECONDARY = "Daily dose calculation failed.";
            alertType = alertEnums.ERROR;
            break;
        case "INR_DATE_VALIDATION":
            alertMessage.PRIMARY = "Validation Error";
            alertMessage.SECONDARY = "Invalid 'Next INR Date'.";
            alertType = alertEnums.ERROR;
            break;
        case "SIGN_SUCCEEDED":
            alertMessage.PRIMARY = "Changes successfully saved.";
            alertType = alertEnums.INFO;
            break;
        case "SIGN_FAILED":
            alertMessage.PRIMARY = "Changes could not be saved.";
            alertType = alertEnums.INFO;
            break;
        default:
            return;
    }

    notificationManager.appendNotification(identifier, alertMessage, alertType);
};

cerner.AntiCoagChronicComponentO1.prototype.hideNotification = function (identifier) {
    if (!identifier || typeof identifier !== 'string') {
        return;
    }
    var notificationManager = this.getNotificationManager();
    notificationManager.removeNotification(identifier);
};

cerner.AntiCoagChronicComponentO1.prototype.validateFields = function () {
    if (this.validateDailyDoses()) {
        this.hideNotification("DAILY_DOSES_SUM_VALIDATION");
    } else {
        this.showNotification("DAILY_DOSES_SUM_VALIDATION");
    }
    var dose = (this.getWorkingWeeklyDose() === null) ? this.getWeeklyDose() : this.getWorkingWeeklyDose();
    if (this.validateWeeklyDose(this.getPillStrength(), dose)) {
        //Validated...remove the alert
        this.hideNotification("WEEKLY_DOSE_SUM_VALIDATION");
    } else {
        this.showNotification("WEEKLY_DOSE_SUM_VALIDATION");
    }

    var jqDailyDoseInputs = this.getJqElementsMap()["dosage_table"].find("input");
    var iLen = jqDailyDoseInputs.length;
    var i;

    //Loop through inputs
    for (i = 0; i < iLen; i++) {
        var jqInput = $(jqDailyDoseInputs.get(i));
        //validate field
        if (this.isDoseFieldValid(jqInput.val())) {
            jqInput.removeClass("acco1-validation-fail");
            this.hideNotification("DAILY_DOSE_VALUE_VALIDATION");
        } else {
            jqInput.addClass("acco1-validation-fail");
            this.showNotification("DAILY_DOSE_VALUE_VALIDATION");
        }
    }
};

cerner.AntiCoagChronicComponentO1.prototype.validateWeeklyDose = function (pillStrength, weeklyDose) {
    //We can allow either half tablets or whole tablets
    //If the remainder is 0, that means we can evenly divide up tablets.  We negate the value, since negation of 0 is true, and anything else is false.
    var canEvenlyDivyTablets = !((weeklyDose / pillStrength) % .5);
    return canEvenlyDivyTablets;
};

cerner.AntiCoagChronicComponentO1.prototype.validateDailyDoses = function () {
    var pillStrength = this.getPillStrength();
    var weeklyDose = (this.getWorkingWeeklyDose() !== null) ? this.getWorkingWeeklyDose() : this.getWeeklyDose();
    var totalDose = 0;
    var workingDoseMap = this.getWorkingDailyDoseMap();
    var dayList = this.getDaysList();
    var dLen = dayList.length;
    var i;

    //Need to cycle through each day and make sure daily doses are both valid numbers, and add up correctly
    for (i = 0; i < dLen; i++) {
        //ensure correct types
        var workingDose = parseFloat(workingDoseMap[dayList[i]]);
        if (!this.isDoseFieldValid(workingDose)) {
            return false;
        }
        //workingDose contains the number of tablets
        totalDose = totalDose + (workingDose * pillStrength);
    }
    return (totalDose === weeklyDose);
};

/*
 Methods to check status of updateable fields
 */
cerner.AntiCoagChronicComponentO1.prototype.hasINRDateChanged = function () {
    //Check dates
    var currentINRDate = this.convertToCCLDate(this.getNextSuggestedINRDate());
    var workingINRDate = this.convertToCCLDate(this.getWorkingINRDate());
    return (workingINRDate && workingINRDate !== currentINRDate) || (!workingINRDate && currentINRDate !== "");
};

cerner.AntiCoagChronicComponentO1.prototype.areInputFieldsValid = function () {
    var jqElementsMap = this.getJqElementsMap();
    //Check daily doses (validation)
    var jqDosageTable = jqElementsMap["dosage_table"];
    var jqDateTextField = jqElementsMap["date_picker_text_box"];
    return (!jqDosageTable.find("input.acco1-validation-fail").length && !jqDateTextField.hasClass("acco1-validation-fail"));
};

cerner.AntiCoagChronicComponentO1.prototype.hasWeeklyDoseChanged = function () {
    //Check weekly dose update
    var originalWeeklyDose = this.getWeeklyDose();
    var workingWeeklyDose = this.getWorkingWeeklyDose();
    return (workingWeeklyDose !== null && workingWeeklyDose != originalWeeklyDose);
};

cerner.AntiCoagChronicComponentO1.prototype.haveDailyDosesChanged = function () {
    var dayList = this.getDaysList();
    var originalDailyDoseMap = this.getOriginalDailyDoseMap();
    var workingDailyMap = this.getWorkingDailyDoseMap();
    var dLen = dayList.length;
    var i;
    for (i = 0; i < dLen; i++) {
        var originalDose = originalDailyDoseMap[dayList[i]];
        var workingDose = workingDailyMap[dayList[i]];
        //Need to use implicit type coercion since doses may be a number stored as a string
        if (originalDose !== workingDose) {
            return true;
        }
    }
    return false;
};

cerner.AntiCoagChronicComponentO1.prototype.hasGreenZoneSettingChanged = function () {
    //Check greenzone setting
    var originalGreenZoneSetting = this.getLongGreenZoneSetting();
    var workingGreenZoneSetting = this.getWorkingLongGreenZoneSetting();
    return (workingGreenZoneSetting !== originalGreenZoneSetting);
};

cerner.AntiCoagChronicComponentO1.prototype.updateSignButton = function () {
    var jqElementsMap = this.getJqElementsMap();
    var jqSignBtn = jqElementsMap["footer_sign_button"];
    var jqResetBtn = jqElementsMap["footer_reset_button"];
    var jqRecalculateBtn = jqElementsMap["recalculate_button"];
    var jqWeeklyDose = jqElementsMap["weekly_dose_field"];

    var shouldDisableButton = true;
    var shouldEnableResetButton = false;
    var shouldEnableRecalculateButton = false;

    if (this.isDoseFieldValid(jqWeeklyDose.val())) {
        shouldEnableRecalculateButton = true;
    }

    //Check dates
    var inrDateIsChanged = this.hasINRDateChanged();
    if (inrDateIsChanged) {
        shouldEnableResetButton = true;
    }

    //Check daily doses (validation)
    var validationPassed = this.areInputFieldsValid();

    //Check weekly dose update
    var weeklyDoseIsChanged = this.hasWeeklyDoseChanged();
    if (weeklyDoseIsChanged) {
        shouldEnableResetButton = true;
    }

    //Check if daily doses have changed
    var isDailyDoseChanged = this.haveDailyDosesChanged();
    if (isDailyDoseChanged) {
        shouldEnableResetButton = true;
    }

    //Check greenzone setting
    var isGreenZoneChanged = this.hasGreenZoneSettingChanged();
    if (isGreenZoneChanged) {
        shouldEnableResetButton = true;
    }

    if (validationPassed && (inrDateIsChanged || weeklyDoseIsChanged || isDailyDoseChanged || isGreenZoneChanged)) {
        shouldDisableButton = false;
    }

    //Hide 'save' alert if it is showing
    this.hideNotification("SIGN_SUCCEEDED");
    this.hideNotification("SIGN_FAILED");

    jqSignBtn.prop("disabled", shouldDisableButton);
    jqResetBtn.prop("disabled", !shouldEnableResetButton);
    jqRecalculateBtn.prop("disabled", !shouldEnableRecalculateButton);
};

cerner.AntiCoagChronicComponentO1.prototype.convertToCCLDate = function (dttm) {
    if (!dttm) {
        return "";
    }
    var monthList = [
        "JAN"
        , "FEB"
        , "MAR"
        , "APR"
        , "MAY"
        , "JUN"
        , "JUL"
        , "AUG"
        , "SEP"
        , "OCT"
        , "NOV"
        , "DEC"
    ];

    //Format: DD-MMM-YYYY
    var cclDate = "";
    cclDate += (dttm.getDate() < 10) ? "0" + dttm.getDate() : dttm.getDate();
    cclDate += ("-" + monthList[dttm.getMonth()] + "-");
    cclDate += dttm.getFullYear();
    return cclDate;
};

cerner.AntiCoagChronicComponentO1.prototype.recalculateDailyDoses = function () {
    var self = this;
    var weeklyDose = (this.getWorkingWeeklyDose() !== null) ? this.getWorkingWeeklyDose() : this.getWeeklyDose();
    var pillStrength = this.getPillStrength();

    if (!isFinite(weeklyDose)) {
        return;
    }

    if (!(weeklyDose % 1)) {
        weeklyDose += ".0"
    }
    if (!(pillStrength % 1)) {
        pillStrength += ".0"
    }

    var sendAr = [];
    sendAr.push(
        "^MINE^"
        , pillStrength
        , weeklyDose
    );

    MP_Util.LogError("mp_anticoag_calc_daily_doses - request<br />" + sendAr.join(","));

    var scriptRequest = new ScriptRequest();
    scriptRequest.setProgramName("mp_anticoag_calc_daily_doses");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(false);
    scriptRequest.setName("calculateDailyDoses");
    scriptRequest.setResponseHandler(function (scriptReply) {
        if (!scriptReply || !scriptReply.getStatus()) {
            self.showNotification("CALCULATION_FAILURE");
        }

        MP_Util.LogError("mp_anticoag_calc_daily_doses - response<br />" + JSON.stringify(scriptReply.getResponse()));
        var response = scriptReply.getResponse();
        var status = scriptReply.getStatus();

        if (status === 'S') {
            //Update the working weekly doses
            var inputToDayMap = self.getInputToDayMap();
            var workingDoseMap = self.getWorkingDailyDoseMap();
            var calculatedDoseList = response.DAILY_DOSE || [];
            var cLen = calculatedDoseList.length;
            var jqElementsMap = self.getJqElementsMap();
            var jqDailyDoseInputs = jqElementsMap["dosage_table"].find("input.acco1-daily-dose-input");
            var iLen = jqDailyDoseInputs.length;
            var i;
            var j;

            //Loop through inputs
            for (i = 0; i < iLen; i++) {
                var inputDom = jqDailyDoseInputs.get(i);
                var jqInput = $(inputDom);
                var day = inputToDayMap[inputDom.id];
                if (!day) {
                    continue;
                }
                var dailyDose;
                //Loop through reply to find the right day
                for (j = 0; j < cLen; j++) {
                    var calculatedDoseItem = calculatedDoseList[j];
                    if (calculatedDoseItem && calculatedDoseItem.DAY === day) {
                        dailyDose = calculatedDoseItem.NUM_OF_TABLETS;
                        //update working dose!
                        workingDoseMap[day] = dailyDose;
                        jqInput.val(dailyDose);
                        break;
                    }
                }
            }
            self.updateSignButton();
            self.validateFields();
            self.hideNotification("CALCULATION_FAILURE");
        } else {
            //Alert that we couldn't calculate
            self.showNotification("CALCULATION_FAILURE");
        }

    });
    scriptRequest.performRequest();
};

cerner.AntiCoagChronicComponentO1.prototype.submitChanges = function () {
    var self = this;
    var criterion = this.getCriterion();
    var sendAr = [];

    var inrEventId = this.getNextSuggestedINREventId();
    var inrEventSetCd = this.getOption("SCHEDULED_INR_ES_CD");

    var weeklyDoseEventId = this.getWeeklyDoseEventId();
    var weeklyDoseEventCd = this.getOption("WEEKLY_DOSE_ES_CD");

    var greenZoneEventSetCd = this.getOption("LONG_GREEN_ZONE_ES_CD");

    var dailyEventSets = [];
    dailyEventSets.push(
        this.getOption("SUNDAY_DOSE_ES_CD")
        , this.getOption("MONDAY_DOSE_ES_CD")
        , this.getOption("TUESDAY_DOSE_ES_CD")
        , this.getOption("WEDNESDAY_DOSE_ES_CD")
        , this.getOption("THURSDAY_DOSE_ES_CD")
        , this.getOption("FRIDAY_DOSE_ES_CD")
        , this.getOption("SATURDAY_DOSE_ES_CD")
    );
    var workingDoseMap = this.getWorkingDailyDoseMap();
    var dayList = this.getDaysList();
    var count = 0;

    var configJSON = "~{^events_config^:{";
    configJSON += "^config^:[";

    if (this.haveDailyDosesChanged()) {
        //Loop through daily events
        for (var i = 0, dLen = dayList.length; i < dLen; i++) {
            configJSON += "{";
            configJSON += "^type^:^NUM^";
            configJSON += ",^event_set_cd^:" + dailyEventSets[i] + ".0";
            configJSON += ",^string_result^:^" + workingDoseMap[dayList[i]] + "^";
            configJSON += ",^description^:^" + workingDoseMap[dayList[i]] + "^";
            configJSON += ",^action^:^AUTH^";
            configJSON += "}";
            count++;
        }
    }

    //Check for event id
    if (inrEventId && this.getWorkingINRDate()) {
        if (this.convertToCCLDate(this.getNextSuggestedINRDate()) !== this.convertToCCLDate(this.getWorkingINRDate())) {
            //Let's update
            configJSON += "{";
            configJSON += "^type^:^DATE^";
            configJSON += ",^event_set_cd^:" + inrEventSetCd + ".0";
            configJSON += ",^string_result^:^" + this.convertToCCLDate(this.getWorkingINRDate()) + "^";
            configJSON += ",^description^:^" + this.convertToCCLDate(this.getWorkingINRDate()) + "^";
            configJSON += ",^action^:^MODIFIED^";
            configJSON += ",^event_id^:" + inrEventId + ".0";
            configJSON += "}";
            count++;
        }
    }
    //Let's check for weekly dose
    if (weeklyDoseEventId && this.getWorkingWeeklyDose() !== null && this.getWorkingWeeklyDose() !== this.getWeeklyDose) {
        //Let's update
        configJSON += "{";
        configJSON += "^type^:^NUM^";
        configJSON += ",^event_set_cd^:" + weeklyDoseEventCd + ".0";
        configJSON += ",^string_result^:^" + this.getWorkingWeeklyDose() + "^";
        configJSON += ",^description^:^" + this.getWorkingWeeklyDose() + "^";
        configJSON += ",^action^:^AUTH^";
        configJSON += ",^event_id^:" + weeklyDoseEventId + ".0";
        configJSON += "}";
        count++;
    }

    //Check if GreenZone setting has changed

    var originalGreenZoneSetting = this.getLongGreenZoneSetting();
    var workingGreenZoneSetting = this.getWorkingLongGreenZoneSetting();
    if (workingGreenZoneSetting && (workingGreenZoneSetting != originalGreenZoneSetting)) {
        configJSON += "{";
        configJSON += "^type^:^TXT^";
        configJSON += ",^event_set_cd^:" + greenZoneEventSetCd + ".0";
        configJSON += ",^string_result^:^" + workingGreenZoneSetting + "^";
        configJSON += ",^description^:^" + workingGreenZoneSetting + "^";
        configJSON += ",^action^:^AUTH^";
        configJSON += "}";
        count++;
    }

    configJSON += "]";
    configJSON += ",^count^:" + count;
    configJSON += "}}~";

    sendAr.push(
        "^MINE^"
        , criterion.person_id + ".0"
        , criterion.encntr_id + ".0"
        , criterion.provider_id + ".0"
        , "^POWERCHART^"
        , configJSON
    );

    MP_Util.LogError("mp_save_cac_daily_doses - request<br />" + sendAr.join(","));

    var scriptRequest = new ScriptRequest();
    scriptRequest.setProgramName("mp_save_cac_daily_doses");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(false);
    scriptRequest.setName("setAnticoagChronicData");
    scriptRequest.setResponseHandler(function (scriptReply) {
        MP_Util.LogError("mp_save_cac_daily_doses - response<br />" + JSON.stringify(scriptReply.getResponse()));
        var status = scriptReply.getStatus();
        if (status === "S") {
            self.showNotification("SIGN_SUCCEEDED");
            self.handleSignSuccess();
        } else {
            self.showNotification("SIGN_FAILED");
        }

    });
    scriptRequest.performRequest();
};

cerner.AntiCoagChronicComponentO1.prototype.handleSignSuccess = function () {
    //Need to set the original values of any updated fields to the working version
    var jqElementsMap = this.getJqElementsMap();
    var jqSignBtn = jqElementsMap["footer_sign_button"];
    var jqResetBtn = jqElementsMap["footer_reset_button"];

    //Check dates
    var inrDateIsChanged = this.hasINRDateChanged();
    if (inrDateIsChanged) {
        this.setNextSuggestedINRDate(this.getWorkingINRDate());
    }

    //Check weekly dose update
    var weeklyDoseIsChanged = this.hasWeeklyDoseChanged();
    if (weeklyDoseIsChanged) {
        this.setWeeklyDose(this.getWorkingWeeklyDose());
    }

    //Check if daily doses have changed
    var isDailyDoseChanged = this.haveDailyDosesChanged();
    if (isDailyDoseChanged) {
        this.setAlteredDailyDoseMap(this.getWorkingDailyDoseMap());
    }

    //Check greenzone setting
    var isGreenZoneChanged = this.hasGreenZoneSettingChanged();
    if (isGreenZoneChanged) {
        this.setLongGreenZoneSetting(this.getWorkingLongGreenZoneSetting());
    }

    //Disable reset/sign buttons
    jqSignBtn.prop("disabled", true);
    jqResetBtn.prop("disabled", true);
};
(function (baseComponent) {

    if (typeof i18n == "undefined") {
        var i18n = {};
    }

    if (typeof i18n.discernabu == "undefined") {
        i18n.discernabu = {};
    }

    i18n.discernabu.notification_manager = {
        WARNING: "Warning"
        , ERROR: "Error"
        , ALERT: "Alert"
        , INFO: "Info"
    };

    /**
     * Object that controls the display of visual notifications.
     * @param {string|number} id - Needs to be a unique identifier
     * @constructor
     */
    function NotificationManager(id) {
        this.m_jqContainer = null;
        this.m_id = id;
        this.m_typeToIdMap = null;
        this.m_uniqueCount = 0;
    }

    /**
     * Enumerates the type of notifications that can show.
     * @type {{ERROR: number, WARNING: number}}
     */
    NotificationManager.prototype.NOTIFICATION_TYPES = {
        ERROR: 1
        , ALERT: 2
        , WARNING: 3
        , INFO: 4
    };

    /**
     * Gets the Notification Manager's id.
     * @returns {string|number} - id
     */
    NotificationManager.prototype.getId = function () {
        return this.m_id;
    };

    /**
     * Gets the jQuery container the Notification Manager uses to display alerts.
     * @returns {jQuery object} - jQuery object that acts as a container for notifications
     */
    NotificationManager.prototype.getJqContainer = function () {
        return this.m_jqContainer;
    };

    /**
     * Sets the jQuery container the Notification Manager uses to display alerts.
     * @param {jQuery object|null} jqCont - jQuery container to display alerts in.
     */
    NotificationManager.prototype.setJqContainer = function (jqCont) {
        this.m_jqContainer = jqCont;
    };

    /**
     * Gets the notification identifiers to html ids map.
     * @returns {Object} - identifier to html ids map
     */
    NotificationManager.prototype.getTypeToIdMap = function () {
        if (!this.m_typeToIdMap) {
            this.m_typeToIdMap = {};
        }
        return this.m_typeToIdMap;
    };

    /**
     * Sets the notification identifiers to html ids map.
     * Expected use-case is to null the existing map.
     * @param map {null|Object} - null or an existing map.
     */
    NotificationManager.prototype.setTypeToIdMap = function (map) {
        this.m_typeToIdMap = map;
    };

    /**
     * Builds the HTML for a Notification.
     * @param {{PRIMARY: string, SECONDARY: string}} message - message object to populate alert.
     * @param {number} flag - NotificationManager.prototype.NOTIFICATION_TYPES enumeration.
     * @returns {string} - notification html
     */
    NotificationManager.prototype.buildNotificationHTML = function (message, flag) {
        var myi18n = i18n.discernabu.notification_manager;
        var alertTypes = this.NOTIFICATION_TYPES;
        var alertCSS = "";
        var alertSecondaryCSS = "";
        var alertIconTitle = "";
        var html = "";

        switch (flag) {
            case alertTypes.ERROR:
                alertCSS = "notification-mgr-error-section";
                alertIconTitle = myi18n.ERROR;
                break;
            case alertTypes.ALERT:
                alertCSS = "notification-mgr-alert-section";
                alertIconTitle = myi18n.ALERT;
                break;
            case alertTypes.WARNING:
                alertCSS = "notification-mgr-warning-section";
                alertIconTitle = myi18n.WARNING;
                alertSecondaryCSS = "secondary-text";
                break;
            case alertTypes.INFO:
                alertCSS = "notification-mgr-info-section";
                alertIconTitle = myi18n.INFO;
                alertSecondaryCSS = "secondary-text";
                break;
            default:
                break;
        }

        html += "<div class='" + alertCSS + "'>";
        html += "<span class='notification-mgr-alert-icon' title='" + alertIconTitle + "'></span>";
        html += "<span class='notification-mgr-alert-message'>";

        if (typeof message.PRIMARY === 'string') {
            html += "<span class='notification-mgr-alert-primary'>" + message.PRIMARY + "</span>";
        }
        if (typeof message.SECONDARY === 'string') {
            html += "<span class='" + alertSecondaryCSS + "'>" + message.SECONDARY + "</span>";
        }
        html += "</span>";
        html += "</div>";

        return html;
    };

    /**
     * Visually appends an alert in the Notification Manager's jQuery Container.
     * If the identifier passed in already exists, then the existing notification will be updated.
     * @param {string} identifier - Identifier for a type of alert.
     * @param {{PRIMARY: string, SECONDARY: string}} message - message object to populate alert.
     * @param {number} flag - NotificationManager.prototype.NOTIFICATION_TYPES enumeration.
     */
    NotificationManager.prototype.appendNotification = function (identifier, message, flag) {
        var id = this.getId() || "";
        var jqContainer = this.getJqContainer();
        var typeToIdMap = this.getTypeToIdMap();
        var alertId;
        var html = "";

        if (!jqContainer || !jqContainer.length) {
            return;
        }

        //Check if alert already exists
        alertId = typeToIdMap[identifier];
        if (alertId) {
            //Update current alert
            html += this.buildNotificationHTML(message, flag);
            $("#" + alertId).html(html);
            return;
        }

        //Create new container div
        alertId = id + "Alert" + (++this.m_uniqueCount);
        html += "<div id='" + alertId + "' class='notification-mgr-section'>";
        html += this.buildNotificationHTML(message, flag);
        html += "</div>";

        //Append the alert
        jqContainer.append(html);
        typeToIdMap[identifier] = alertId;
    };

    /**
     * Visually removes an alert in the NotificationManager Manager's jQuery Container.
     * @param {string} identifier - Identifier for a type of notification.
     */
    NotificationManager.prototype.removeNotification = function (identifier) {
        var typeToIdMap = this.getTypeToIdMap();
        var alertId = typeToIdMap[identifier];

        if (!alertId) {
            return;
        }

        //Remove alert
        $("#" + alertId).remove();
        typeToIdMap[identifier] = null;
    };

    /**
     * Visually removes ALL notifications in the Notification Manager's jQuery Container.
     */
    NotificationManager.prototype.clearNotifications = function () {
        this.setTypeToIdMap(null);
        var jqContainer = this.getJqContainer();
        if (!jqContainer || !jqContainer.length) {
            return;
        }

        jqContainer.html("");
    };

    baseComponent.NotificationManager = NotificationManager;
})(cerner.AntiCoagChronicComponentO1);

if (typeof i18n == "undefined") {
    var i18n = {};
}

if (typeof i18n.discernabu == "undefined") {
    i18n.discernabu = {};
}

i18n.discernabu.anticoaginitiation_o1 = {
    NEXT_INR_DATE: "Next INR Date"
    , BASELINE_INR_INSTRUCTIONS: "Baseline INR: (if blank, please input estimated Baseline INR)"
    , ESTIMATED_BASELINE_INR: "Estimated Baseline INR"
    , ADD_PREVIOUS_DOSE: "Add Previous Dose"
    , ENROLL_IN_CHRONIC: "Enroll Patient in Chronic Anticoagulation Protocol"
    , ADD_NEW_COMMENT: "Add new comment"
    , CHARACTERS_LEFT: "{0} characters left"
    , SAVE: "Save"
    , SAVE_TOOL_TIP: "Save the next INR date"
    , RESET: "Reset"
    , RESET_TOOL_TIP: "Clicking the reset button will return the next INR date to the previous value"
    , CANCEL: "Cancel"
    , ADD: "Add"
    , SIGN: "Sign"
    , DATE: "Date"
    , INR_RESULT: "INR Result"
    , CALCULATE: "Calculate"
    , EST_DAILY_DOSE: "Estimated Daily Dose"
    , SUGGESTED_DOSE: "Suggested Dose"
    , PRESCRIBED_DOSE: "Prescribed Dose"
    , ADMINISTERED_DOSE: "Administered Dose"
    , ADMINISTERED_TIME: "Administered Time"
    , COMMENTS: "Comments"
    , PREVIOUS_DOSE_DATE: "Previous dose date"
};

var ACI_B351_OPTIONS = {
    BASELINE_INR_ES_CD: 41523703
    , INR_ES_CD: 31787943
    , PREVIOUS_DOSE_DT_ES_CD: 41523695
    , PRESCRIBED_DOSE_ES_CD: 41523687
    , ADMINISTERED_DOSE_ES_CD: 41523679
    , ADMINISTERED_TIME_ES_CD: 41523671
    , COMMENTS_ES_CD: 41523663
    , EST_DAILY_DOSE_ES_CD: 41523655
    , SUGGESTED_DOSE_ES_CD: 41523647
    , WEIGHT_ES_CD: 4143598
    , HEIGHT_ES_CD: 4180655
    , TARGET_INR_ES_CD: 31787877
    , AMIODARONE_ES_CD: 41523641
    , FLUVA_ES_CD: 41523635
    , SIMVA_ES_CD: 41523629
    , DIABETES_ES_CD: 41523623
    , INGREDIENTS_ES_CD: 31787975
    , INDUCERS_ES_CD: 41523613
    , INITIATION_CATALOG_CD: 29868643
    , CHRONIC_CATALOG_CD: 24504381
};

var ACI_P351_OPTIONS = {
    BASELINE_INR_ES_CD: 39931433
    , INR_ES_CD: 3995078
    , PREVIOUS_DOSE_DT_ES_CD: 39931439
    , PRESCRIBED_DOSE_ES_CD: 39931473
    , ADMINISTERED_DOSE_ES_CD: 39931495
    , ADMINISTERED_TIME_ES_CD: 39931513
    , COMMENTS_ES_CD: 39931523
    , EST_DAILY_DOSE_ES_CD: 39931899
    , SUGGESTED_DOSE_ES_CD: 39931941
    , WEIGHT_ES_CD: 4143598
    , HEIGHT_ES_CD: 4180655
    , TARGET_INR_ES_CD: 31787877
    , AMIODARONE_ES_CD: 40048135
    , FLUVA_ES_CD: 41419841
    , SIMVA_ES_CD: 41419847
    , DIABETES_ES_CD: 41420089
    , INGREDIENTS_ES_CD: 31787975
    , INDUCERS_ES_CD: 41515267
    , INITIATION_CATALOG_CD: 29868643
    , CHRONIC_CATALOG_CD: 24504381
    , SCHEDULED_INR_ES_CD: 24513685

};

MPage.namespace("cerner");
cerner.AntiCoagInitiationComponentO1 = function () {
    this.m_doseRowsList = null;
    this.m_doseTable = null;
    this.m_baselineINR = 0;
    this.m_isEnrolledInChronic = false;

    this.m_doseRowController = null;

    this.m_addPreviousDoseModal = null;
    this.m_workingPreviousDose = null;

    //Previous Dose Field variables
    this.m_workingPreviousDoseDate = null;
    this.m_workingPrescribedDose = null;
    this.m_workingAdministeredDose = null;
    this.m_workingAdministeredTime = null;

    this.m_commentManager = null;

    this.m_eventSetList = null;

    this.m_jqElementsMap = null;

    this.m_notificationManager = null;

    //meds
    this.m_inititaionProtocolSynonym = 0;
    this.m_chronicProtocolSynonym = 0;
    this.m_initiationProtocolOrderId = 0;
    this.m_chronicProtocolOrderId = 0;

    //variables for calculations
    this.m_weight = 0;
    this.m_height = 0;
    this.m_midTargetInr = 0;
    this.m_notificationManager = null;
};

cerner.AntiCoagInitiationComponentO1.prototype = new MPage.Component();
cerner.AntiCoagInitiationComponentO1.prototype.constructor = cerner.AntiCoagInitiationComponentO1;
cerner.AntiCoagInitiationComponentO1.prototype.base = MPage.Component.prototype;
cerner.AntiCoagInitiationComponentO1.name = "cerner.AntiCoagInitiationComponentO1";

/*
 this method is a hack to mimic the behavior we would see in a standard component.  May end up removing
 */
cerner.AntiCoagInitiationComponentO1.prototype.getStyles = function () {
    var compId = this.getComponentUid();
    return {
        getId: function () {
            return compId;
        }
        , getNameSpace: function(){
            return "ACCO1";
        }
    };
};

cerner.AntiCoagInitiationComponentO1.prototype.getComponentId = function () {
    return this.getComponentUid();
};

cerner.AntiCoagInitiationComponentO1.prototype.getCriterion = function () {
    //Using this temporarily
    var js_criterion = JSON.parse(m_criterionJSON);
    return MP_Util.GetCriterion(js_criterion, CERN_static_content);
};

cerner.AntiCoagInitiationComponentO1.prototype.getComponentLoadTimerName = function () {
    return "USR:ANTI.COAG.INITIATION_load component";
};

cerner.AntiCoagInitiationComponentO1.prototype.getComponentRenderTimerName = function () {
    return "ENG:ANTI.COAG.INITIATION_render component";
};

cerner.AntiCoagInitiationComponentO1.prototype.finalizeComponent = function (html) {
    var target = this.getTarget();
    target.innerHTML = html;
};

/* Getters/Setters */
cerner.AntiCoagInitiationComponentO1.prototype.getNotificationManager = function () {
    if (!this.m_notificationManager) {
        this.m_notificationManager = new cerner.AntiCoagInitiationComponentO1.NotificationManager(this.getStyles().getId());
    }
    return this.m_notificationManager;
};

cerner.AntiCoagInitiationComponentO1.prototype.setNotificationManager = function (mgr) {
    this.m_notificationManager = mgr;
};

cerner.AntiCoagInitiationComponentO1.prototype.getInitiationProtocolSynonym = function () {
    return this.m_inititaionProtocolSynonym;
};

cerner.AntiCoagInitiationComponentO1.prototype.setInitiationProtocolSynonym = function (syn) {
    this.m_inititaionProtocolSynonym = syn;
};

cerner.AntiCoagInitiationComponentO1.prototype.getInitiationProtocolOrderId = function () {
    return this.m_initiationProtocolOrderId;
};

cerner.AntiCoagInitiationComponentO1.prototype.setInitiationProtocolOrderId = function (orderId) {
    this.m_initiationProtocolOrderId = orderId;
};

cerner.AntiCoagInitiationComponentO1.prototype.getChronicProtocolSynonym = function () {
    return this.m_chronicProtocolSynonym;
};

cerner.AntiCoagInitiationComponentO1.prototype.setChronicProtocolSynonym = function (syn) {
    this.m_chronicProtocolSynonym = syn;
};

cerner.AntiCoagInitiationComponentO1.prototype.getChronicProtocolOrderId = function () {
    return this.m_chronicProtocolOrderId;
};

cerner.AntiCoagInitiationComponentO1.prototype.setChronicProtocolOrderId = function (orderId) {
    this.m_chronicProtocolOrderId = orderId;
};

cerner.AntiCoagInitiationComponentO1.prototype.getWeight = function () {
    return this.m_weight;
};

cerner.AntiCoagInitiationComponentO1.prototype.setWeight = function (weight) {
    this.m_weight = weight;
};

cerner.AntiCoagInitiationComponentO1.prototype.getHeight = function () {
    return this.m_height;
};

cerner.AntiCoagInitiationComponentO1.prototype.setHeight = function (height) {
    this.m_height = height;
};

cerner.AntiCoagInitiationComponentO1.prototype.getMidTargetInr = function () {
    return this.m_midTargetInr;
};

cerner.AntiCoagInitiationComponentO1.prototype.setMidTargetInr = function (inr) {
    this.m_midTargetInr = inr;
};

cerner.AntiCoagInitiationComponentO1.prototype.getDoseRowsList = function () {
    if (!this.m_doseRowsList) {
        this.m_doseRowsList = [];
    }
    return this.m_doseRowsList;
};

cerner.AntiCoagInitiationComponentO1.prototype.getDoseRowController = function () {
    if (!this.m_doseRowController) {
        this.m_doseRowController = new DoseRowController(this.getStyles().getId());
        this.m_doseRowController.setCriterion(this.getCriterion());
        this.m_doseRowController.setComponent(this);
    }
    return this.m_doseRowController;
};

cerner.AntiCoagInitiationComponentO1.prototype.setDoseRowController = function (controller) {
    this.m_doseRowController = controller;
};

cerner.AntiCoagInitiationComponentO1.prototype.getEventSetList = function () {
    if (!this.m_eventSetList) {
        this.m_eventSetList = [];
    }
    return this.m_eventSetList;
};

cerner.AntiCoagInitiationComponentO1.prototype.setEventSetList = function (list) {
    this.m_eventSetList = list;
};

cerner.AntiCoagInitiationComponentO1.prototype.getBaselineINR = function () {
    return this.m_baselineINR;
};

cerner.AntiCoagInitiationComponentO1.prototype.setBaselineINR = function (inr) {
    this.m_baselineINR = inr;
};

cerner.AntiCoagInitiationComponentO1.prototype.isEnrolledInChronicProtocol = function () {
    return !!this.m_isEnrolledInChronic;
};

cerner.AntiCoagInitiationComponentO1.prototype.setIsEnrolledInChronicProtocol = function (bool) {
    this.m_isEnrolledInChronic = bool;
};

cerner.AntiCoagInitiationComponentO1.prototype.getCommentManager = function () {
    if (!this.m_commentManager) {
        this.m_commentManager = new CommentManager(this.getStyles().getId());
    }
    return this.m_commentManager;
};

cerner.AntiCoagInitiationComponentO1.prototype.setCommentManager = function (manager) {
    this.m_commentManager = manager;
};

cerner.AntiCoagInitiationComponentO1.prototype.getJqElementsMap = function () {
    if (!this.m_jqElementsMap) {
        this.m_jqElementsMap = {};
    }
    return this.m_jqElementsMap;
};

cerner.AntiCoagInitiationComponentO1.prototype.setJqElementsMap = function (map) {
    this.m_jqElementsMap = map;
};

cerner.AntiCoagInitiationComponentO1.prototype.populateIngredientIndicators = function (result) {
    if (!result || typeof result !== 'string') {
        return;
    }
    var doseRowController = this.getDoseRowController();
    var trim = $.trim;
    var indicators = result.split(",");
    var iLen = indicators.length;
    var i;
    for (i = 0; i < iLen; i++) {
        var val = trim(indicators[i]);
        if (val === "Atrialfibrillation") {
            doseRowController.setAfibstrokeInd(1);
        } else if (val === "CardioembolicStroke") {
            doseRowController.setAfibstrokeInd(1);
            doseRowController.setIndstrokeInd(1);
        } else if (val === "DVT" || val === "PE" || val === "RecurrentPE") {
            doseRowController.setDvtPeInd(1);
        }
    }
};

cerner.AntiCoagInitiationComponentO1.prototype.populateSmokerIndicator = function (result) {
    if (!result || typeof result !== 'string') {
        return;
    }
    var doseRowController = this.getDoseRowController();
    var trim = $.trim;
    var textVals = result.split(",");
    var tLen = textVals.length;
    var i;

    for (i = 0; i < tLen; i++) {
        var val = trim(textVals[i]);
        switch (val) {
            case "Current every day smoker":
            case "Current some day smoker":
            case "Light tobacco smoker":
            case "Heavy tobacco smoker":
            case "Smoker, current status unknown":
                doseRowController.setSmokerInd(1);
                break;
            default:
                break
        }
    }
};

cerner.AntiCoagInitiationComponentO1.prototype.populateEventSetList = function () {
    var eventSetList = this.getEventSetList();

    eventSetList.push(
        {
            NAME: "BASELINE_INR_ES_CD"
            , VALUE: this.getOption("BASELINE_INR_ES_CD")
        }
        , {
            NAME: "INR_ES_CD"
            , VALUE: this.getOption("INR_ES_CD")
        }
        , {
            NAME: "PREVIOUS_DOSE_DT_ES_CD"
            , VALUE: this.getOption("PREVIOUS_DOSE_DT_ES_CD")
        }
        , {
            NAME: "PRESCRIBED_DOSE_ES_CD"
            , VALUE: this.getOption("PRESCRIBED_DOSE_ES_CD")
        }
        , {
            NAME: "ADMINISTERED_DOSE_ES_CD"
            , VALUE: this.getOption("ADMINISTERED_DOSE_ES_CD")
        }, {
            NAME: "ADMINISTERED_TIME_ES_CD"
            , VALUE: this.getOption("ADMINISTERED_TIME_ES_CD")
        }, {
            NAME: "COMMENTS_ES_CD"
            , VALUE: this.getOption("COMMENTS_ES_CD")
        }, {
            NAME: "EST_DAILY_DOSE_ES_CD"
            , VALUE: this.getOption("EST_DAILY_DOSE_ES_CD")
        }, {
            NAME: "SUGGESTED_DOSE_ES_CD"
            , VALUE: this.getOption("SUGGESTED_DOSE_ES_CD")
        }, {
            NAME: "WEIGHT_ES_CD"
            , VALUE: this.getOption("WEIGHT_ES_CD")
        }, {
            NAME: "HEIGHT_ES_CD"
            , VALUE: this.getOption("HEIGHT_ES_CD")
        }, {
            NAME: "TARGET_INR_ES_CD"
            , VALUE: this.getOption("TARGET_INR_ES_CD")
        }, {
            NAME: "AMIODARONE_ES_CD"
            , VALUE: this.getOption("AMIODARONE_ES_CD")
        }, {
            NAME: "FLUVA_ES_CD"
            , VALUE: this.getOption("FLUVA_ES_CD")
        }, {
            NAME: "SIMVA_ES_CD"
            , VALUE: this.getOption("SIMVA_ES_CD")
        }, {
            NAME: "DIABETES_ES_CD"
            , VALUE: this.getOption("DIABETES_ES_CD")
        }, {
            NAME: "INGREDIENTS_ES_CD"
            , VALUE: this.getOption("INGREDIENTS_ES_CD")
        }, {
            NAME: "INDUCERS_ES_CD"
            , VALUE: this.getOption("INDUCERS_ES_CD")
        }
    );
};

cerner.AntiCoagInitiationComponentO1.prototype.render = function () {
    this.retrieveComponentData();
};

cerner.AntiCoagInitiationComponentO1.prototype.retrieveComponentData = function () {
    //this.handleDataRetrievalReply(null);
    this.populateEventSetList();
    //this.processDoseRowsData(ACI_MOCK_DATA.RECORD_DATA);
    this.retrieveClinicalEvents();
};

cerner.AntiCoagInitiationComponentO1.prototype.retrieveClinicalEvents = function () {
    var self = this;

    var eventSetList = this.getEventSetList();
    var criterion = this.getCriterion();
    var sendAr = [];
    var scriptRequest = new ScriptRequest();
    var prsnlInfo = criterion.getPersonnelInfo();
    var encntrs = prsnlInfo.getViewableEncounters();
    var encountersParam = (encntrs) ? "value(" + encntrs + ")" : "0.0";

    var eLen = eventSetList.length;
    var i;
    var eventSetParam = "";

    if (eLen === 0) {
        eventSetParam = "0.0";
    } else {
        eventSetParam += "value(";
        var vals = [];
        for (i = 0; i < eLen; i++) {
            vals.push(eventSetList[i].VALUE + ".0");
        }
        eventSetParam += vals.join(",");
        eventSetParam += ")";
    }

    sendAr.push(
        "^MINE^"
        , criterion.person_id + ".0"
        , encountersParam
        , criterion.provider_id + ".0"
        , criterion.ppr_cd + ".0"
        , eventSetParam
        , 4000
        , this.getOption("INITIATION_CATALOG_CD") + ".0"
        , this.getOption("CHRONIC_CATALOG_CD") + ".0"
        , this.getOption("SCHEDULED_INR_ES_CD") + ".0"
    );

    MP_Util.LogError("mp_anticoag_init_retrieval<br />" + sendAr.join(","));

    scriptRequest.setProgramName("mp_anticoag_init_retrieval");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(true);
    scriptRequest.setName("getClinicalEvents");
    scriptRequest.setResponseHandler(function (scriptReply) {
        //$(self.getTarget()).append("<div>" + JSON.stringify(scriptReply.getResponse(), null, 4) + "</div>");
        self.handleClinicalEventsReply(scriptReply);
    });
    scriptRequest.performRequest();
};

cerner.AntiCoagInitiationComponentO1.prototype.handleClinicalEventsReply = function (reply) {
    var status = reply.getStatus();
    try {
        if (status === 'S' || status === 'Z') {
            var response = reply.getResponse();
            if (!response.INITIATION_ORDER_ID) {
                this.finalizeComponent("<span class='res-none'>Patient not currently enrolled in Anticoagulation Initiation Protocol.</span>");
                return;
            }
            this.initializeDoseRowController();
            this.processDoseRowsData(response);

            var inrDate = response.NEXT_INR_DATE || "";
            if (inrDate) {
                var dateTime = new Date();
                dateTime.setISO8601(inrDate);
                this.setNextSuggestedINRDate(dateTime);
                this.setWorkingINRDate(dateTime);
                this.setNextSuggestedINREventId(response.NEXT_INR_EVENT_ID || 0);
            }
            this.renderComponent();

        }
    } catch (err) {
        alert(err.message);
    }
};

cerner.AntiCoagInitiationComponentO1.prototype.processDoseRowsData = function (data) {
    var doseRowController = this.getDoseRowController();
    if (!data) {
        return;
    }
    //set order info
    this.setInitiationProtocolOrderId(data.INITIATION_ORDER_ID || 0);
    this.setChronicProtocolOrderId(data.CHRONIC_ORDER_ID || 0);
    this.setInitiationProtocolSynonym(data.INITIATION_SYNONYM_ID || 0);
    this.setChronicProtocolSynonym(data.CHRONIC_SYNONYM_ID || 0);

    doseRowController.setAgeInYears(data.AGE_IN_YEARS);
    doseRowController.setAfricanInd(data.AFRICAN_IND);
    doseRowController.setMaleInd(data.MALE_IND);
    this.populateSmokerIndicator(data.TOBACCO_TEXT);

    doseRowController.setDateToInrResultMap(null);
    var dateToInrResultMap = doseRowController.getDateToInrResultMap();

    var results = data.RESULTS || [];
    var rLen = results.length;
    var i;

    var map = {};
    /*
     {
     KEY - from this.createUniqueKey()
     - results[i].clinical_events[j].measurements[k].custom_display
     Value - array of clinical events
     - {
     event_set_cd: f8
     measurements[k]
     }
     }
     */

    for (i = 0; i < rLen; i++) {
        var result = results[i];
        var eventSetCd = result.EVENT_SET_CD || 0;
        var clinicalEvents = result.CLINICAL_EVENTS || [];
        var cLen = clinicalEvents.length;
        var j;

        for (j = 0; j < cLen; j++) {
            var clinicalEvent = clinicalEvents[j];
            var measurements = clinicalEvent.MEASUREMENTS || [];
            var mLen = measurements.length;
            var k;

            for (k = 0; k < mLen; k++) {
                var measurement = measurements[k];
                //Check if this is one of the fields we want to add to a dose row

                //For certain events, we only care about most recent
                if (eventSetCd === this.getOption("WEIGHT_ES_CD")) {
                    doseRowController.setWeight(this.getResult(measurement));
                    break;
                } else if (eventSetCd === this.getOption("HEIGHT_ES_CD")) {
                    doseRowController.setHeight(this.getResult(measurement));
                    break;
                } else if (eventSetCd === this.getOption("TARGET_INR_ES_CD")) {
                    doseRowController.setMidTargetInr(parseFloat(this.getResult(measurement)));
                    break;
                }
                /*
                 If any of the following event set codes were charted, that means 'yes'
                 */
                else if (eventSetCd === this.getOption("AMIODARONE_ES_CD")) {
                    doseRowController.setAmiodaroneInd(1);
                    break;
                } else if (eventSetCd === this.getOption("INDUCERS_ES_CD")) {
                    doseRowController.setInducerInd(1);
                    break;
                } else if (eventSetCd === this.getOption("DIABETES_ES_CD")) {
                    doseRowController.setDiabetesInd(1);
                    break;
                } else if (eventSetCd === this.getOption("FLUVA_ES_CD")) {
                    doseRowController.setFluvaInd(1);
                    break;
                } else if (eventSetCd === this.getOption("SIMVA_ES_CD")) {
                    doseRowController.setSimvaInd(1);
                    break;
                }
                /*
                 The following event set codes need hard-coded logic to determine state
                 */
                else if (eventSetCd === this.getOption("INGREDIENTS_ES_CD")) {
                    this.populateIngredientIndicators(this.getResult(measurement));
                    break;
                }
                /*
                 Need to set some limit (14 days) on this one
                 */
                else if (eventSetCd === this.getOption("BASELINE_INR_ES_CD")) {
                    var baselineDetails = {};
                    baselineDetails.VALUE = this.getResult(measurement);
                    if (measurement.EVENT_ID) {
                        baselineDetails.EVENT_ID = measurement.EVENT_ID;
                    }
                    baselineDetails.EVENT_SET_CD = eventSetCd;
                    doseRowController.setBaselineInr(baselineDetails);
                    break;
                }

                switch (eventSetCd) {
                    case this.getOption("PREVIOUS_DOSE_DT_ES_CD"):
                    case this.getOption("PRESCRIBED_DOSE_ES_CD"):
                    case this.getOption("ADMINISTERED_DOSE_ES_CD"):
                    case this.getOption("ADMINISTERED_TIME_ES_CD"):
                    case this.getOption("COMMENTS_ES_CD"):
                    case this.getOption("EST_DAILY_DOSE_ES_CD"):
                    case this.getOption("SUGGESTED_DOSE_ES_CD"):
                        var key = measurement.CUSTOM_DISPLAY;
                        //Check if we've previously added an element using this key
                        if (!map[key]) {
                            map[key] = [];
                        }
                        map[key].push({
                            EVENT_SET_CD: eventSetCd
                            , MEASUREMENT: measurement
                        });
                        break;
                    case this.getOption("INR_ES_CD"):
                        //Create date object
                        var effectiveDate = new Date();
                        effectiveDate.setISO8601(measurement.EFFECTIVE_DATE);
                        key = doseRowController.formatDate(effectiveDate);
                        if (!dateToInrResultMap[key]) {
                            dateToInrResultMap[key] = [];
                        }
                        dateToInrResultMap[key].push(this.getResult(measurement));
                        break;
                    default:
                        break;
                }
            }
        }
    }

    //Create reference map
    var eventSetList = this.getEventSetList();
    var eLen = eventSetList.length;
    var eventSetToNameMap = {};
    for (i = 0; i < eLen; i++) {
        eventSetToNameMap[eventSetList[i].VALUE] = eventSetList[i].NAME;
    }

    doseRowController.setEventSetToNameMap(eventSetToNameMap);

    //Now, each item in the map can be considered a row
    for (key in map) {
        if (map.hasOwnProperty(key)) {
            //Create doseRow object
            var values = map[key];
            var doseRow = doseRowController.createDoseRow();
            doseRow.setUniqueKey(key);
            //Need to cycle through each value
            var vLen = values.length;
            for (i = 0; i < vLen; i++) {
                var value = values[i];
                eventSetCd = value.EVENT_SET_CD;
                var esName = eventSetToNameMap[eventSetCd];

                var tempDetails = {};
                var eventId = value.MEASUREMENT.EVENT_ID || 0;
                tempDetails.VALUE = this.getResult(value.MEASUREMENT);

                switch (esName) {
                    case "PREVIOUS_DOSE_DT_ES_CD":
                        if (!doseRow.getDateEventId()) {
                            doseRow.setDate(tempDetails);
                            doseRow.setDateEventId(eventId);
                        }
                        break;
                    case "PRESCRIBED_DOSE_ES_CD":
                        if (!doseRow.getPrescribedDoseEventId()) {
                            doseRow.setPrescribedDose(tempDetails);
                            doseRow.setPrescribedDoseEventId(eventId);
                        }
                        break;
                    case "EST_DAILY_DOSE_ES_CD":
                        if (!doseRow.getEstDailyDoseEventId()) {
                            doseRow.setEstDailyDose(tempDetails);
                            doseRow.setEstDailyDoseEventId(eventId);
                        }
                        break;
                    case "SUGGESTED_DOSE_ES_CD":
                        if (!doseRow.getSuggestedDoseEventId()) {
                            doseRow.setSuggestedDose(tempDetails);
                            doseRow.setSuggestedDoseEventId(eventId);
                        }
                        break;
                    case "ADMINISTERED_DOSE_ES_CD":
                        if (!doseRow.getAdministeredDoseEventId()) {
                            doseRow.setAdministeredDose(tempDetails);
                            doseRow.setAdministeredDoseEventId(eventId);
                        }
                        break;
                    case "ADMINISTERED_TIME_ES_CD":
                        if (!doseRow.getAdministeredPeriodEventId()) {
                            doseRow.setAdministeredTime(tempDetails);
                            doseRow.setAdministeredPeriodEventId(eventId);
                        }
                        break;
                    case "COMMENTS_ES_CD":
                        if (!doseRow.getCommentEventId()) {
                            doseRow.setComment(tempDetails);
                            doseRow.setCommentEventId(eventId);
                        }
                        break;
                    default:
                        break;
                }
            }
            doseRowController.addDoseRow(doseRow);
        }
    }
    //Add a row for the current date if one does not exist
    var curDate = new Date();
    var dateToDoseMap = doseRowController.getDateToDoseRowMap();
    key = this.convertDateToKey(curDate);
    if (!dateToDoseMap[key]) {
        doseRow = doseRowController.createDoseRow();
        doseRow.setDate({
            PENDING_VALUE: curDate
        });
        doseRow.setUniqueKey(this.createUniqueKey() + "|curday");
        doseRowController.addDoseRow(doseRow);
    }
    //Ensure at least 30 days appear
    doseRowController.extendToThirtyDays();

    //Fill in empty rows
    doseRowController.fillInDoseRows();

};

cerner.AntiCoagInitiationComponentO1.prototype.flipProtocol = function (enableChronic) {
    var criterion = this.getCriterion();
    var chronicSyn = this.getChronicProtocolSynonym();
    var chronicOrderId = this.getChronicProtocolOrderId();
    var submitParams = [];
    if (enableChronic) {
        //Going to have to place an order
        submitParams.push(
                criterion.person_id + ".0|"
            , criterion.encntr_id + ".0|"
            , "{ORDER|" + chronicSyn + ".0|0|0.0|0|1}"
            , "|24|{2|127}{3|127}|32|1"
        );
        MPAGES_EVENT("ORDERS", submitParams.join(""));
    } else {
        var PowerOrdersMPageUtils = window.external.DiscernObjectFactory("POWERORDERS");
        var hMoew = null;
        hMoew = PowerOrdersMPageUtils.CreateMOEW(criterion.person_id, criterion.encntr_id, 24, 2, 127);
        if (!hMoew) {
            MP_Util.LogError("Unable to create hMoew object.");
        }
        var curCancel = 0;
        curCancel += PowerOrdersMPageUtils.InvokeCancelDCAction(hMoew, chronicOrderId, "0000000000000000", 0.0);
        if (curCancel) {
            PowerOrdersMPageUtils.SignOrders(hMoew);
            PowerOrdersMPageUtils.DestroyMOEW(hMoew);
            //double check that the MOEW handle is destroyed
            if (hMoew) {
                hMoew = null;
            }
        }
    }
};

cerner.AntiCoagInitiationComponentO1.prototype.submitChanges = function () {
    var self = this;
    var criterion = this.getCriterion();
    var sendAr = [];
    var inrEventId = this.getNextSuggestedINREventId();
    var inrEventSetCd = this.getOption("SCHEDULED_INR_ES_CD");
    var count = 0;
    var configJSON = "~{^events_config^:{";
    configJSON += "^config^:[";
    //Check for event id
    if (inrEventId && this.getWorkingINRDate()) {
        if (this.convertToCCLDate(this.getNextSuggestedINRDate()) !== this.convertToCCLDate(this.getWorkingINRDate())) {
            //Let's update
            configJSON += "{";
            configJSON += "^type^:^DATE^";
            configJSON += ",^event_set_cd^:" + inrEventSetCd + ".0";
            configJSON += ",^string_result^:^" + this.convertToCCLDate(this.getWorkingINRDate()) + "^";
            configJSON += ",^description^:^" + this.convertToCCLDate(this.getWorkingINRDate()) + "^";
            configJSON += ",^action^:^MODIFIED^";
            configJSON += ",^event_id^:" + inrEventId + ".0";
            configJSON += "}";
            count++;
        }
    }
    configJSON += "]";
    configJSON += ",^count^:" + count;
    configJSON += "}}~";
    //alert(configJSON);
    sendAr.push(
        "^MINE^"
        , criterion.person_id + ".0"
        , criterion.encntr_id + ".0"
        , criterion.provider_id + ".0"
        , "^POWERCHART^"
        , configJSON
    );
    MP_Util.LogError("mp_save_clinical_event  - request<br />" + sendAr.join(","));
    var scriptRequest = new ScriptRequest();
    scriptRequest.setProgramName("mp_save_clinical_event");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(false);
    scriptRequest.setName("setAnticoagChronicData");
    scriptRequest.setResponseHandler(function (scriptReply) {
        MP_Util.LogError("mp_save_clinical_event - response<br />" + JSON.stringify(scriptReply.getResponse()));
        var status = scriptReply.getStatus();
        if (status === "S") {
            var jqElements = self.getJqElementsMap();
            self.showNotification("SIGN_SUCCEEDED");
            jqElements["save_button"].prop("disabled", true);
            jqElements["reset_button"].prop("disabled", true);
        } else {
            self.showNotification("SIGN_FAILED");
        }
    });
    scriptRequest.performRequest();
};

cerner.AntiCoagInitiationComponentO1.prototype.getResult = function (measurement) {
    if (!measurement) {
        return null;
    }
    var classification = measurement.CLASSIFICATION;
    var result = null;
    if (classification === "quantity_value") {
        //We should have a number
        result = measurement.QUANTITY_VALUE[0].NUMBER;
    } else if (classification === "date_value") {
        var dateVal = measurement.DATE_VALUE[0].DATE;
        if (dateVal) {
            result = new Date();
            result.setISO8601(dateVal);
        }
    } else if (classification === "string_value") {
        result = measurement.STRING_VALUE[0].VALUE;
    } else if (classification === "codified_values") {
        var values = measurement.CODE_VALUE[0].VALUES;
        var tList = [];
        var vLen = values.length;
        var i;
        for (i = 0; i < vLen; i++) {
            tList.push(values[i].SOURCE_STRING);
        }
        result = tList.join(",");
    }
    return result;
};

cerner.AntiCoagInitiationComponentO1.prototype.resize = function (height, width) {
    var compId = this.getStyles().getId();
    var doseRowController = this.getDoseRowController();
    //Get heights
    var componentHeight = parseInt($(this.getTarget()).css("max-height"), 10);
    var alertContainerHeight = $("#" + compId + "AlertContainer").outerHeight(true);
    var topContainerHeight = $("#" + compId + "TopActionsContainer").outerHeight(true);
    //Get component table
    var doseComponentTable = doseRowController.getDoseComponentTable();
    var tableNamespace = doseComponentTable.getNamespace();
    //Get the table's height, subtract body's height
    var jqTableBody = $("#" + tableNamespace + "tableBody");
    var tableHdrHeight = $("#" + tableNamespace + "table").outerHeight(true) - jqTableBody.height();

    var maxTableBodyHeight = componentHeight - (alertContainerHeight + topContainerHeight + tableHdrHeight);

    jqTableBody.css({"max-height": maxTableBodyHeight + "px", "overflow-y": "auto"});

    //Scrolling is applied
    if (jqTableBody[0].scrollHeight > jqTableBody.outerHeight()) {
        $("#" + tableNamespace + "headerWrapper").addClass("shifted");
    } else {
        $("#" + tableNamespace + "headerWrapper").removeClass("shifted");
    }
};

// start vgp changes

cerner.AntiCoagInitiationComponentO1.prototype.getWorkingINRDate = function () {
    return this.m_workingINRDate;
};

cerner.AntiCoagInitiationComponentO1.prototype.setWorkingINRDate = function (dt) {
    this.m_workingINRDate = dt;
};

cerner.AntiCoagInitiationComponentO1.prototype.getNextSuggestedINREventId = function () {
    return this.m_nextSuggestedINREventId
};

cerner.AntiCoagInitiationComponentO1.prototype.setNextSuggestedINREventId = function (eventId) {
    this.m_nextSuggestedINREventId = eventId;
};

cerner.AntiCoagInitiationComponentO1.prototype.getNextSuggestedINRDate = function () {
    return this.m_nextSuggestedINRDate;
};

cerner.AntiCoagInitiationComponentO1.prototype.setNextSuggestedINRDate = function (dt) {
    this.m_nextSuggestedINRDate = dt;
};

cerner.AntiCoagInitiationComponentO1.prototype.attachDatePicker = function () {
    var self = this;
    var jqDateBox = this.getJqElementsMap()["date_picker_text_box"];
    if (!jqDateBox || !jqDateBox.length) {
        return;
    }
    jqDateBox.datepicker({
                onClose: function (dateStr, inst) {
                    var workingDate = new Date();
					workingDate.setDate(1);
                    workingDate.setYear(inst.selectedYear);
                    workingDate.setMonth(inst.selectedMonth);
                    workingDate.setDate(inst.selectedDay);
                    if (!dateStr) {
                        //Invalid date
                        self.onWorkingINRDateUpdated(null);
                        self.showNotification("INR_DATE_VALIDATION");
                        jqDateBox.addClass("acio1-validation-fail");
                    } else {
                       self.clearINRDateValidation();
                       self.onWorkingINRDateUpdated(workingDate);
                    }
        }
    });
};
cerner.AntiCoagInitiationComponentO1.prototype.clearINRDateValidation = function(){
    var self = this;
    var jqDateBox = self.getJqElementsMap()["date_picker_text_box"];
    self.hideNotification("INR_DATE_VALIDATION");
    jqDateBox.removeClass("acio1-validation-fail");
};
cerner.AntiCoagInitiationComponentO1.prototype.showNotification = function (identifier) {
    if (!identifier || typeof identifier !== 'string') {
        return;
    }
    var notificationManager = this.getNotificationManager();
    var alertEnums = notificationManager.NOTIFICATION_TYPES;
    var alertType = null;
    var alertMessage = {};

    switch (identifier) {
        case "INR_DATE_VALIDATION":
            alertMessage.PRIMARY = "Validation Error";
            alertMessage.SECONDARY = "Invalid 'Next INR Date'.";
            alertType = alertEnums.ERROR;
            break;
        default:
            return;
    }
    notificationManager.appendNotification(identifier, alertMessage, alertType);
};

cerner.AntiCoagInitiationComponentO1.prototype.hideNotification = function (identifier) {
    if (!identifier || typeof identifier !== 'string') {
        return;
    }
    var notificationManager = this.getNotificationManager();
    notificationManager.removeNotification(identifier);
};

cerner.AntiCoagInitiationComponentO1.prototype.scrubNumericInputField = function (jqInput) {
    var val = jqInput.val();
    var numericVal;

    jqInput.val(val.replace(/[^0-9\.]/ig, ""));

    //Check for duplicate periods
    var vLen = val.length;
    var i;
    var numPeriods = 0;
    for (i = 0; i < vLen; i++) {
        if (val.charAt(i) === ".") {
            numPeriods++;
        }
        if (numPeriods > 1) {
            return false;
        }
    }
    numericVal = parseFloat(val);
    if (!isFinite(numericVal)) {
        return "";
    }
    return numericVal;
};

cerner.AntiCoagInitiationComponentO1.prototype.renderComponent = function () {
    //var doseRows = this.getDoseRowsList();
    var doseRowController = this.getDoseRowController();

    var html = "";
    html += "<div id='" + this.getStyles().getId() + "AlertContainer' class='acio1-alert-container'></div>";

    html += this.buildTopActionsSectionHTML();

    html += doseRowController.createDoseComponentTable().render();

    //html += this.buildFooterButtonsHTML();
    this.finalizeComponent(html);
    doseRowController.finalizeDoseComponentTable();

    this.captureJqElements();
    this.attachDatePicker();
    this.attachBaselineEvent();
    this.attachINRChangeEvent();
    this.attachAddPreviousDoseEventListener();
    this.attachEnrollEvent();
    
    var notificationManager = doseRowController.getNotificationManager();
	notificationManager.setJqContainer($("#" + this.getStyles().getId() + "AlertContainer"));
    this.resize();
};

cerner.AntiCoagInitiationComponentO1.prototype.attachINRChangeEvent = function () {
    var self = this;
    var jqElements = this.getJqElementsMap();
    var jqDateBox = jqElements["date_picker_text_box"];
    if (!jqDateBox || !jqDateBox.length) {
        return;
    }
    var fullDate4Year = mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR;
    var dateFormatter = MP_Util.GetDateFormatter();
    jqElements["reset_button"].click(function () {
       self.clearINRDateValidation();
       self.onWorkingINRDateUpdated(self.getNextSuggestedINRDate());
    });
    jqElements["save_button"].click(function () {
        self.submitChanges();
    });
};

/*
Method to do all changes when working date is changed.
 */
cerner.AntiCoagInitiationComponentO1.prototype.onWorkingINRDateUpdated = function(inrDate){
    var jqDateBox = this.getJqElementsMap()["date_picker_text_box"];
    var dateFormatter = MP_Util.GetDateFormatter();
    this.setWorkingINRDate(inrDate);
    if(inrDate) {
        var inrDateStr = dateFormatter.format(inrDate, mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
        jqDateBox.val(inrDateStr);
    }else{
        jqDateBox.val("");
    }
    this.updateSaveAndResetBtnStatus(inrDateStr);
};
/*
 Method to update the status of save and reset buttons
 */
cerner.AntiCoagInitiationComponentO1.prototype.updateSaveAndResetBtnStatus = function(inrDateStr){
    var jqElements = this.getJqElementsMap();
    var jqInrSaveButton = jqElements["save_button"];
    var jqInrResetButton = jqElements["reset_button"];
    var datInr = jqElements["date_picker_text_box"];
    if(this.hasINRDateChanged()) {
        jqInrResetButton.prop("disabled", false);
        if(inrDateStr) {
            jqInrSaveButton.prop("disabled", false);
        }else{
            jqInrSaveButton.prop("disabled", true);
        }
    }else{
        jqInrResetButton.prop("disabled", true);
        jqInrSaveButton.prop("disabled", true);
    }
};

/*
 Methods to check status of updateable fields
 */
cerner.AntiCoagInitiationComponentO1.prototype.hasINRDateChanged = function () {
    //Check dates
    var currentINRDate = this.convertToCCLDate(this.getNextSuggestedINRDate());
    var workingINRDate = this.convertToCCLDate(this.getWorkingINRDate());
    return (workingINRDate && workingINRDate !== currentINRDate) || (!workingINRDate && currentINRDate !== "");
};

cerner.AntiCoagInitiationComponentO1.prototype.attachBaselineEvent = function () {
    var self = this;
    var compId = this.getStyles().getId();
    var doseRowController = this.getDoseRowController();
    var jqBaselineInput = $("#" + compId + "BaselineInput");
    var jqBaselineBtn = $("#" + compId + "SaveBaselineBtn");

    jqBaselineInput.blur(function () {
        var jqThis = $(this);
        var value = doseRowController.scrubNumericInputField(jqThis);
        jqThis.val(value);
        jqBaselineBtn.prop("disabled", false);
    });

    jqBaselineBtn.click(function () {
        var value = jqBaselineInput.val();
        var baselineDetails = doseRowController.getBaselineInr() || {};
        baselineDetails.EVENT_SET_CD = self.getOption("BASELINE_INR_ES_CD");
        baselineDetails.PENDING_VALUE = value;
        doseRowController.setBaselineInr(baselineDetails);
        doseRowController.submitBaselineInr(jqBaselineBtn);
    });

};

cerner.AntiCoagInitiationComponentO1.prototype.buildTopActionsSectionHTML = function () {
    var compId = this.getStyles().getId();
    var myi18n = i18n.discernabu.anticoaginitiation_o1;
    var chronicOrderId = this.getChronicProtocolOrderId();
    var html = "";
    var checkedText = (chronicOrderId ? "checked='checked'" : "");
    var doseRowController = this.getDoseRowController();
    //var baselineDetails = doseRowController.getBaselineInr() || {};
    var baselineDetails = doseRowController.determineBaselineInr() || {};
    var baselineInr = baselineDetails.PENDING_VALUE || baselineDetails.VALUE || "";
    var dateFormatter = MP_Util.GetDateFormatter();
    var fullDate4Year = mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR;
    var nextINRDate = this.getNextSuggestedINRDate();
    var inrDateStr = "";

    if (nextINRDate) {
        inrDateStr = dateFormatter.format(nextINRDate, fullDate4Year);
    }

    //Create container
    html += "<div class='acco1-inr-date-container'>";
    html +=     "<span class='acco1-inr-date-lbl'>" + myi18n.NEXT_INR_DATE + ": </span>";
    html +=     "<input type='text' id='" + compId + "INRTextBox' class='acco1-inr-date-textbox' maxlength='10' size='10' value='" + inrDateStr + "' />";
    html +=     "<input type='button' class='acio1-btn' id='" + compId + "SaveNextINRBtn' value='" + myi18n.SAVE + "' disabled /><input type='button' class='acio1-btn' id='" + compId + "ResetNEXTINRDATEBtn' value='" + myi18n.RESET + "' disabled /></div>";
    html += "</div><br/>";
    html += "<div id='" + compId + "TopActionsContainer' class='acio1-top-actions-cont'>";
    html += "<span class='acio1-baseline-inr-cont'>";
    html += "<div>" + myi18n.BASELINE_INR_INSTRUCTIONS + "</div>";
    html += "<div><label class='acio1-est-baseline-lbl'><input id='" + compId + "BaselineInput' type='text' value='" + baselineInr + "' />" + myi18n.ESTIMATED_BASELINE_INR + "</label><input type='button' class='acio1-btn' id='" + compId + "SaveBaselineBtn' value='Save' disabled /></div>";
    html += "</span>";
    html += "<span class='acio1-prev-dose-cont'>";
    html += "<input id='" + compId + "PrevDoseBtn' class='acio1-btn' type='button' value='" + myi18n.ADD_PREVIOUS_DOSE + "' />";
    html += "</span>";
    html += "<span class='acio1-chronic-enroll-cont'>";
    html += "<label class='acio1-enroll-chronic-lbl'>" + myi18n.ENROLL_IN_CHRONIC + "<input id='" + compId + "EnrollBox' type='checkbox' " + checkedText + " /></label>";
    html += "</span>";
    html += "</div>";

    return html;
};

cerner.AntiCoagInitiationComponentO1.prototype.buildDoseTableHTML = function () {
    var compId = this.getStyles().getId();
    var html = "";

    //Create table container
    html += "<div id='" + compId + "DoseTable' class='acio1-dose-table'>";
    //Create header
    html += this.buildDoseTableHeaderRowHTML();
    //Create Body
    html += this.buildDoseRowsHTML();
    html += "</div>";

    return html;
};

cerner.AntiCoagInitiationComponentO1.prototype.convertDateToKey = function (date) {
    var key = date.getFullYear();
    key += "|" + ((date.getMonth() >= 10) ? date.getMonth() : "0" + date.getMonth());
    key += "|" + ((date.getDate() >= 10) ? date.getDate() : "0" + date.getDate());
    return key;
};

cerner.AntiCoagInitiationComponentO1.prototype.buildFooterButtonsHTML = function () {
    var compId = this.getStyles().getId();
    var myi18n = i18n.discernabu.anticoaginitiation_o1;
    var html = "";
    html += "<div class='acio1-footer-cont'>";
    html += "<input id='" + compId + "AddBtn' type='button' class='acio1-btn' value='" + "ADD" + "' />";
    html += "</div>";
    return html;
};

cerner.AntiCoagInitiationComponentO1.prototype.captureJqElements = function () {
    var compId = this.getStyles().getId();
    var jqElementsMap = this.getJqElementsMap();
    jqElementsMap["date_picker_text_box"] = $("#" + compId + "INRTextBox");
    jqElementsMap["add_previous_dose_button"] = $("#" + compId + "PrevDoseBtn");
    jqElementsMap["alert_container"] = $("#" + compId +"AlertContainer");
    jqElementsMap["save_button"] = $("#" + compId + "SaveNextINRBtn");
    jqElementsMap["reset_button"] = $("#" + compId + "ResetNEXTINRDATEBtn");
};

cerner.AntiCoagInitiationComponentO1.prototype.attachEnrollEvent = function () {
    var self = this;
    var compId = this.getStyles().getId();
    var jqEnrollBox = $("#" + compId + "EnrollBox");
    jqEnrollBox.change(function (event) {
        var jqThis = $(this);
        var isChecked = jqThis.prop("checked");
        if (isChecked) {
            self.flipProtocol(true);
        } else {
            self.flipProtocol(false);
        }
    });
};

cerner.AntiCoagInitiationComponentO1.prototype.attachAddPreviousDoseEventListener = function () {
    var self = this;
    var doseRowController = this.getDoseRowController();
    var jqAddPreviousDoseBtn = this.getJqElementsMap()["add_previous_dose_button"];

    if (!jqAddPreviousDoseBtn || !jqAddPreviousDoseBtn.length) {
        return;
    }

    //Creating closure we can reference so we only configure the modal once
    var isModalConfigured = false;

    jqAddPreviousDoseBtn.click(function () {
        doseRowController.launchAddDoseRowModal(self.createUniqueKey());
    });

};


cerner.AntiCoagInitiationComponentO1.prototype.createUniqueKey = function () {
    //Combination of person id, encounter id, and time (ms)
    var date = new Date();
    var criterion = this.getCriterion();

    var key = criterion.person_id + "|" + criterion.encntr_id + "|" + date.getTime();
    return key;
};

cerner.AntiCoagInitiationComponentO1.prototype.initializeDoseRowController = function () {
    this.setDoseRowController(null);
    var doseRowController = this.getDoseRowController();
    doseRowController.setDateEventSetCd(this.getOption("PREVIOUS_DOSE_DT_ES_CD"));
    doseRowController.setPrescribedDoseEventSetCd(this.getOption("PRESCRIBED_DOSE_ES_CD"));
    doseRowController.setAdministeredDoseEventSetCd(this.getOption("ADMINISTERED_DOSE_ES_CD"));
    doseRowController.setAdministeredPeriodEventSetCd(this.getOption("ADMINISTERED_TIME_ES_CD"));
    doseRowController.setCommentEventSetCd(this.getOption("COMMENTS_ES_CD"));
    doseRowController.setEstDailyDoseEventSetCd(this.getOption("EST_DAILY_DOSE_ES_CD"));
    doseRowController.setSuggestedDoseEventSetCd(this.getOption("SUGGESTED_DOSE_ES_CD"));
};

(function (baseComponent) {

    if (typeof i18n == "undefined") {
        var i18n = {};
    }

    if (typeof i18n.discernabu == "undefined") {
        i18n.discernabu = {};
    }

    i18n.discernabu.notification_manager = {
        WARNING: "Warning"
        , ERROR: "Error"
        , ALERT: "Alert"
        , INFO: "Info"
    };

    /**
     * Object that controls the display of visual notifications.
     * @param {string|number} id - Needs to be a unique identifier
     * @constructor
     */
    function NotificationManager(id) {
        this.m_jqContainer = null;
        this.m_id = id;
        this.m_typeToIdMap = null;
        this.m_uniqueCount = 0;
    }

    /**
     * Enumerates the type of notifications that can show.
     * @type {{ERROR: number, WARNING: number}}
     */
    NotificationManager.prototype.NOTIFICATION_TYPES = {
        ERROR: 1
        , ALERT: 2
        , WARNING: 3
        , INFO: 4
    };

    /**
     * Gets the Notification Manager's id.
     * @returns {string|number} - id
     */
    NotificationManager.prototype.getId = function () {
        return this.m_id;
    };

    /**
     * Gets the jQuery container the Notification Manager uses to display alerts.
     * @returns {jQuery object} - jQuery object that acts as a container for notifications
     */
    NotificationManager.prototype.getJqContainer = function () {
        return this.m_jqContainer;
    };

    /**
     * Sets the jQuery container the Notification Manager uses to display alerts.
     * @param {jQuery object|null} jqCont - jQuery container to display alerts in.
     */
    NotificationManager.prototype.setJqContainer = function (jqCont) {
        this.m_jqContainer = jqCont;
    };

    /**
     * Gets the notification identifiers to html ids map.
     * @returns {Object} - identifier to html ids map
     */
    NotificationManager.prototype.getTypeToIdMap = function () {
        if (!this.m_typeToIdMap) {
            this.m_typeToIdMap = {};
        }
        return this.m_typeToIdMap;
    };

    /**
     * Sets the notification identifiers to html ids map.
     * Expected use-case is to null the existing map.
     * @param map {null|Object} - null or an existing map.
     */
    NotificationManager.prototype.setTypeToIdMap = function (map) {
        this.m_typeToIdMap = map;
    };

    /**
     * Builds the HTML for a Notification.
     * @param {{PRIMARY: string, SECONDARY: string}} message - message object to populate alert.
     * @param {number} flag - NotificationManager.prototype.NOTIFICATION_TYPES enumeration.
     * @returns {string} - notification html
     */
    NotificationManager.prototype.buildNotificationHTML = function (message, flag) {
        var myi18n = i18n.discernabu.notification_manager;
        var alertTypes = this.NOTIFICATION_TYPES;
        var alertCSS = "";
        var alertSecondaryCSS = "";
        var alertIconTitle = "";
        var html = "";

        switch (flag) {
            case alertTypes.ERROR:
                alertCSS = "notification-mgr-error-section";
                alertIconTitle = myi18n.ERROR;
                break;
            case alertTypes.ALERT:
                alertCSS = "notification-mgr-alert-section";
                alertIconTitle = myi18n.ALERT;
                break;
            case alertTypes.WARNING:
                alertCSS = "notification-mgr-warning-section";
                alertIconTitle = myi18n.WARNING;
                alertSecondaryCSS = "secondary-text";
                break;
            case alertTypes.INFO:
                alertCSS = "notification-mgr-info-section";
                alertIconTitle = myi18n.INFO;
                alertSecondaryCSS = "secondary-text";
                break;
            default:
                break;
        }

        html += "<div class='" + alertCSS + "'>";
        html += "<span class='notification-mgr-alert-icon' title='" + alertIconTitle + "'></span>";
        html += "<span class='notification-mgr-alert-message'>";

        if (typeof message.PRIMARY === 'string') {
            html += "<span class='notification-mgr-alert-primary'>" + message.PRIMARY + "</span>";
        }
        if (typeof message.SECONDARY === 'string') {
            html += "<span class='" + alertSecondaryCSS + "'>" + message.SECONDARY + "</span>";
        }
        html += "</span>";
        html += "</div>";

        return html;
    };

    /**
     * Visually appends an alert in the Notification Manager's jQuery Container.
     * If the identifier passed in already exists, then the existing notification will be updated.
     * @param {string} identifier - Identifier for a type of alert.
     * @param {{PRIMARY: string, SECONDARY: string}} message - message object to populate alert.
     * @param {number} flag - NotificationManager.prototype.NOTIFICATION_TYPES enumeration.
     */
    NotificationManager.prototype.appendNotification = function (identifier, message, flag) {
        var id = this.getId() || "";
        var jqContainer = this.getJqContainer();
        var typeToIdMap = this.getTypeToIdMap();
        var alertId;
        var html = "";

        if (!jqContainer || !jqContainer.length) {
            return;
        }

        //Check if alert already exists
        alertId = typeToIdMap[identifier];
        if (alertId) {
            //Update current alert
            html += this.buildNotificationHTML(message, flag);
            $("#" + alertId).html(html);
            return;
        }

        //Create new container div
        alertId = id + "Alert" + (++this.m_uniqueCount);
        html += "<div id='" + alertId + "' class='notification-mgr-section'>";
        html += this.buildNotificationHTML(message, flag);
        html += "</div>";

        //Append the alert
        jqContainer.append(html);
        typeToIdMap[identifier] = alertId;
    };

    /**
     * Visually removes an alert in the NotificationManager Manager's jQuery Container.
     * @param {string} identifier - Identifier for a type of notification.
     */
    NotificationManager.prototype.removeNotification = function (identifier) {
        var typeToIdMap = this.getTypeToIdMap();
        var alertId = typeToIdMap[identifier];

        if (!alertId) {
            return;
        }

        //Remove alert
        $("#" + alertId).remove();
        typeToIdMap[identifier] = null;
    };

    /**
     * Visually removes ALL notifications in the Notification Manager's jQuery Container.
     */
    NotificationManager.prototype.clearNotifications = function () {
        this.setTypeToIdMap(null);
        var jqContainer = this.getJqContainer();
        if (!jqContainer || !jqContainer.length) {
            return;
        }

        jqContainer.html("");
    };

    baseComponent.NotificationManager = NotificationManager;
})(cerner.AntiCoagInitiationComponentO1);

function DoseRow() {
    this.m_id = null;
    this.m_uniqueKey = null;
    this.m_date = null;
    this.m_inrResult = null;
    this.m_estDailyDose = null;
    this.m_suggestedDose = null;
    this.m_prescribedDose = null;
    this.m_administeredDose = null;
    this.m_administeredTime = null;
    this.m_comments = null;

    this.m_comment = null;
    this.m_activeInrResultIndex = 0;
    this.m_currentIndex = -1;

    this.m_isCalcuable = false;
    // event set code values
    this.m_dateEvetSetCd = 0;
    this.m_precribedDoseEventSetCd = 0;
    this.m_administeredDoseEventSetCd = 0;
    this.m_administeredPeriodEventSetCd = 0;
    this.m_commentEventSetCd = 0;
    this.m_estDailyDoseEventSetCd = 0;
    this.m_suggestedDoseEventSetCd = 0;
    // event id values
    this.m_dateEventId = 0;
    this.m_prescribedDoseEventId = 0;
    this.m_administeredDoseEventId = 0;
    this.m_administeredPeriodEventId = 0;
    this.m_commentEventId = 0;
    this.m_estDailyDoseEventId = 0;
    this.m_suggestedDoseEventId = 0;
}

DoseRow.prototype.getCurrentIndex = function () {
    return this.m_currentIndex;
};

DoseRow.prototype.setCurrentIndex = function (index) {
    this.m_currentIndex = index;
};

DoseRow.prototype.getEstDailyDoseEventSetCd = function () {
    return this.m_estDailyDoseEventSetCd;
};

DoseRow.prototype.setEstDailyDoseEventSetCd = function (eventSetCd) {
    this.m_estDailyDoseEventSetCd = eventSetCd;
};

DoseRow.prototype.getSuggestedDoseEventSetCd = function () {
    return this.m_suggestedDoseEventSetCd;
};

DoseRow.prototype.setSuggestedDoseEventSetCd = function (eventSetCd) {
    this.m_suggestedDoseEventSetCd = eventSetCd;
};

DoseRow.prototype.getEstDailyDoseEventId = function () {
    return this.m_estDailyDoseEventId;
};

DoseRow.prototype.setEstDailyDoseEventId = function (eventId) {
    this.m_estDailyDoseEventId = eventId;
};

DoseRow.prototype.getSuggestedDoseEventId = function () {
    return this.m_suggestedDoseEventId;
};

DoseRow.prototype.setSuggestedDoseEventId = function (eventId) {
    this.m_suggestedDoseEventId = eventId;
};

DoseRow.prototype.getDateEventId = function () {
    return this.m_dateEventId;
};

DoseRow.prototype.setDateEventId = function (eventId) {
    this.m_dateEventId;
};

DoseRow.prototype.getPrescribedDoseEventId = function () {
    return this.m_prescribedDoseEventId;
};

DoseRow.prototype.setPrescribedDoseEventId = function (eventId) {
    this.m_prescribedDoseEventId = eventId;
};

DoseRow.prototype.getAdministeredDoseEventId = function () {
    return this.m_administeredDoseEventId;
};

DoseRow.prototype.setAdministeredDoseEventId = function (eventId) {
    this.m_administeredDoseEventId;
};

DoseRow.prototype.getAdministeredPeriodEventId = function () {
    return this.m_administeredPeriodEventId;
};

DoseRow.prototype.setAdministeredPeriodEventId = function (eventId) {
    this.m_administeredPeriodEventId = eventId;
};

DoseRow.prototype.getCommentEventId = function () {
    return this.m_commentEventId;
};

DoseRow.prototype.setCommentEventId = function (eventId) {
    this.m_commentEventId = eventId;
};

DoseRow.prototype.getDateEventSetCd = function () {
    return this.m_dateEvetSetCd;
};

DoseRow.prototype.setDateEventSetCd = function (eventSetCd) {
    this.m_dateEvetSetCd = eventSetCd;
};

DoseRow.prototype.getPrescribedDoseEventSetCd = function () {
    return this.m_precribedDoseEventSetCd;
};

DoseRow.prototype.setPrescribedDoseEventSetCd = function (eventSetCd) {
    this.m_precribedDoseEventSetCd = eventSetCd;
};

DoseRow.prototype.getAdministeredDoseEventSetCd = function () {
    return this.m_administeredDoseEventSetCd;
};

DoseRow.prototype.setAdministeredDoseEventSetCd = function (eventSetCd) {
    this.m_administeredDoseEventSetCd = eventSetCd;
};

DoseRow.prototype.getAdministeredPeriodEventSetCd = function () {
    return this.m_administeredPeriodEventSetCd;
};

DoseRow.prototype.setAdministeredPeriodEventSetCd = function (eventSetCd) {
    this.m_administeredPeriodEventSetCd = eventSetCd;
};

DoseRow.prototype.getCommentEventSetCd = function () {
    return this.m_commentEventSetCd;
};

DoseRow.prototype.setCommentEventSetCd = function (eventSetCd) {
    this.m_commentEventSetCd = eventSetCd;
};

DoseRow.prototype.getId = function () {
    return "DoseRow" + this.m_id;
};

DoseRow.prototype.setId = function (id) {
    this.m_id = id;
};

DoseRow.prototype.getActiveInrResultIndex = function () {
    return this.m_activeInrResultIndex;
};

DoseRow.prototype.setActiveInrResultIndex = function (index) {
    this.m_activeInrResultIndex = index;
};

DoseRow.prototype.isCalcuable = function () {
    return this.m_isCalcuable;
};

DoseRow.prototype.setIsCalcuable = function (flag) {
    this.m_isCalcuable = flag;
};

DoseRow.prototype.getUniqueKey = function () {
    return this.m_uniqueKey;
};

DoseRow.prototype.setUniqueKey = function (key) {
    this.m_uniqueKey = key;
};

/*
 Member variables:
 details:
 {
 EVENT_SET_CD: f8
 EVENT_ID: f8
 VALUE: ?
 PENDING_VALUE: ?
 }
 */

DoseRow.prototype.getDate = function () {
    return this.m_date;
};

DoseRow.prototype.setDate = function (details) {
    this.m_date = details;
};

DoseRow.prototype.formatDate = function (date) {
    var dateFormatter = MP_Util.GetDateFormatter();
    var fullDate4Year = mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR;
    var dateStr = "";

    if (date) {
        dateStr = dateFormatter.format(date, fullDate4Year);
    }
    return dateStr;
};

DoseRow.prototype.getFormattedDate = function () {
    var dateDetails = this.getDate();
    if (!dateDetails) {
        return "";
    }
    if (dateDetails.PENDING_VALUE) {
        return this.formatDate(dateDetails.PENDING_VALUE);
    } else if (dateDetails.VALUE) {
        return this.formatDate(dateDetails.VALUE);
    }

    return "";
};

DoseRow.prototype.getInrResults = function () {
    if (!this.m_inrResult) {
        this.m_inrResult = [];
    }
    return this.m_inrResult;
};

DoseRow.prototype.setInrResults = function (inrList) {

//    if (!details || typeof details.VALUE !== 'number' || !isFinite(details.VALUE)){
//        throw new Error("Type Error: 'details.VALUE' passed into DoseRow method setInrResult is not a valid number");
//    }
    this.m_inrResult = inrList;
};

DoseRow.prototype.getEstDailyDose = function () {
    return this.m_estDailyDose;
};

DoseRow.prototype.setEstDailyDose = function (details) {
//    if (!details || typeof details.VALUE !== 'number' || !isFinite(details.VALUE)){
//        throw new Error("Type Error: 'details.VALUE' passed into DoseRow method setEstDailyDose is not a valid number");
//    }
    this.m_estDailyDose = details;
};

DoseRow.prototype.getSuggestedDose = function () {
    return this.m_suggestedDose;
};

DoseRow.prototype.setSuggestedDose = function (details) {
//    if (!details || typeof details.VALUE !== 'number' || !isFinite(details.VALUE)){
//        throw new Error("Type Error: 'details.VALUE' passed into DoseRow method setSuggestedDose is not a valid number");
//    }
    this.m_suggestedDose = details;
};

DoseRow.prototype.getPrescribedDose = function () {
    return this.m_prescribedDose;
};

DoseRow.prototype.setPrescribedDose = function (details) {
//    if (!details || typeof details.VALUE !== 'number' || !isFinite(details.VALUE)){
//        throw new Error("Type Error: 'details.VALUE' passed into DoseRow method setPrescribedDose is not a valid number");
//    }
    this.m_prescribedDose = details;
};

DoseRow.prototype.getAdministeredDose = function () {
    return this.m_administeredDose;
};

DoseRow.prototype.setAdministeredDose = function (details) {
//    if (!details || typeof details.VALUE !== 'number' || !isFinite(details.VALUE)){
//        throw new Error("Type Error: 'details.VALUE' passed into DoseRow method setAdministeredDose is not a valid number");
//    }
    this.m_administeredDose = details;
};

DoseRow.prototype.getAdministeredTime = function () {
    return this.m_administeredTime;
};

DoseRow.prototype.setAdministeredTime = function (details) {
//    if (!details || typeof details.VALUE !== 'string'){
//        throw new Error("Type Error: 'details.VALUE' passed into DoseRow method setAdministeredTime is not a string");
//    }
    this.m_administeredTime = details;
};

DoseRow.prototype.getComment = function () {
    return this.m_comment;
};

DoseRow.prototype.setComment = function (details) {
    this.m_comment = details;
};

DoseRow.prototype.getCommentList = function () {
    if (!this.m_comments) {
        this.m_comments = [];
    }
    return this.m_comments;
};

DoseRow.prototype.setCommentList = function (list) {
    this.m_comments = list;
};

DoseRow.prototype.convertToCCLDate = function (dttm) {
    if (!dttm) {
        return "";
    }
    var monthList = [
        "JAN"
        , "FEB"
        , "MAR"
        , "APR"
        , "MAY"
        , "JUN"
        , "JUL"
        , "AUG"
        , "SEP"
        , "OCT"
        , "NOV"
        , "DEC"
    ];

    //Format: DD-MMM-YYYY
    var cclDate = "";
    cclDate += (dttm.getDate() < 10) ? "0" + dttm.getDate() : dttm.getDate();
    cclDate += ("-" + monthList[dttm.getMonth()] + "-");
    cclDate += dttm.getFullYear();
    return cclDate;
};

/*
 JSON generation for saving events
 */

DoseRow.prototype.getDateJson = function () {
    var jsonToSave = "";
    var details = this.getDate();
    if (!details) {
        //There's nothing to write!
        return jsonToSave;
    }
    //Make sure we have an event set cd and unique id
    var uniqueKey = this.getUniqueKey();
    var eventSetCd = this.getDateEventSetCd();
    if (!eventSetCd || !uniqueKey) {
        return jsonToSave;
    }

    //Check pending value
    var pendingValue = details.PENDING_VALUE;
    //We won't allow dates to be removed
    if (!pendingValue) {
        return jsonToSave;
    }
    //Finally, we can create the JSON
    jsonToSave += "{";
    jsonToSave += "^type^:^DATE^";
    jsonToSave += ",^event_set_cd^:" + eventSetCd + ".0";
    jsonToSave += ",^string_result^:^" + this.convertToCCLDate(pendingValue) + "^";
    jsonToSave += ",^description^:^" + uniqueKey + "^";
    jsonToSave += ",^action^:^AUTH^";

    //Check for event id
    var eventId = this.getDateEventId();
    if (eventId) {
        jsonToSave += ",^event_id^:" + eventId + ".0";
    }

    jsonToSave += "}";

    return jsonToSave;
};

DoseRow.prototype.getEstDoseJson = function () {
    var jsonToSave = "";
    var details = this.getEstDailyDose();
    if (!details) {
        //There's nothing to write!
        return jsonToSave;
    }
    //Make sure we have an event set cd and unique id
    var uniqueKey = this.getUniqueKey();
    var eventSetCd = this.getEstDailyDoseEventSetCd();
    if (!eventSetCd || !uniqueKey) {
        return jsonToSave;
    }

    //Check pending value
    var pendingValue = details.PENDING_VALUE;
    //We won't allow estimations to be removed
    if (!pendingValue) {
        return jsonToSave;
    }
    //Finally, we can create the JSON
    jsonToSave += "{";
    jsonToSave += "^type^:^NUM^";
    jsonToSave += ",^event_set_cd^:" + eventSetCd + ".0";
    jsonToSave += ",^string_result^:^" + pendingValue + "^";
    jsonToSave += ",^description^:^" + uniqueKey + "^";
    jsonToSave += ",^action^:^AUTH^";

    //Check for event id
    var eventId = this.getEstDailyDoseEventId();
    if (eventId) {
        jsonToSave += ",^event_id^:" + eventId + ".0";
    }

    jsonToSave += "}";

    return jsonToSave;
};

DoseRow.prototype.getSuggestedDoseJson = function () {
    var jsonToSave = "";
    var details = this.getSuggestedDose();
    if (!details) {
        //There's nothing to write!
        return jsonToSave;
    }
    //Make sure we have an event set cd and unique id
    var uniqueKey = this.getUniqueKey();
    var eventSetCd = this.getSuggestedDoseEventSetCd();
    if (!eventSetCd || !uniqueKey) {
        return jsonToSave;
    }

    //Check pending value
    var pendingValue = details.PENDING_VALUE;
    //We won't allow suggestions to be removed
    if (!pendingValue) {
        return jsonToSave;
    }
    //Finally, we can create the JSON
    jsonToSave += "{";
    jsonToSave += "^type^:^NUM^";
    jsonToSave += ",^event_set_cd^:" + eventSetCd + ".0";
    jsonToSave += ",^string_result^:^" + pendingValue + "^";
    jsonToSave += ",^description^:^" + uniqueKey + "^";
    jsonToSave += ",^action^:^AUTH^";

    //Check for event id
    var eventId = this.getSuggestedDoseEventId();
    if (eventId) {
        jsonToSave += ",^event_id^:" + eventId + ".0";
    }

    jsonToSave += "}";

    return jsonToSave;
};

DoseRow.prototype.getPrescribedDoseJson = function () {
    var jsonToSave = "";
    var details = this.getPrescribedDose();
    if (!details) {
        //There's nothing to write!
        return jsonToSave;
    }
    //Make sure we have an event set cd and unique id
    var uniqueKey = this.getUniqueKey();
    var eventSetCd = this.getPrescribedDoseEventSetCd();
    if (!eventSetCd || !uniqueKey) {
        return jsonToSave;
    }

    //Check pending value
    var pendingValue = details.PENDING_VALUE;
    //Verify some pending value exists
    if (pendingValue === undefined) {
        return jsonToSave;
    }
    //Check if pending value was cleared
    if (pendingValue === null || pendingValue === "") {
        pendingValue = -1;
    }

    //Finally, we can create the JSON
    jsonToSave += "{";
    jsonToSave += "^type^:^NUM^";
    jsonToSave += ",^event_set_cd^:" + eventSetCd + ".0";
    jsonToSave += ",^string_result^:^" + pendingValue + "^";
    jsonToSave += ",^description^:^" + uniqueKey + "^";
    jsonToSave += ",^action^:^AUTH^";

    //Check for event id
    var eventId = this.getPrescribedDoseEventId();
    if (eventId) {
        jsonToSave += ",^event_id^:" + eventId + ".0";
    }

    jsonToSave += "}";

    return jsonToSave;
};

DoseRow.prototype.getAdministeredDoseJson = function () {
    var jsonToSave = "";
    var details = this.getAdministeredDose();
    if (!details) {
        //There's nothing to write!
        return jsonToSave;
    }
    //Make sure we have an event set cd and unique id
    var uniqueKey = this.getUniqueKey();
    var eventSetCd = this.getAdministeredDoseEventSetCd();
    if (!eventSetCd || !uniqueKey) {
        return jsonToSave;
    }

    //Check pending value
    var pendingValue = details.PENDING_VALUE;
    //Verify some pending value exists
    if (pendingValue === undefined) {
        return jsonToSave;
    }
    //Check if pending value was cleared
    if (pendingValue === null || pendingValue === "") {
        pendingValue = -1;
    }

    //Finally, we can create the JSON
    jsonToSave += "{";
    jsonToSave += "^type^:^NUM^";
    jsonToSave += ",^event_set_cd^:" + eventSetCd + ".0";
    jsonToSave += ",^string_result^:^" + pendingValue + "^";
    jsonToSave += ",^description^:^" + uniqueKey + "^";
    jsonToSave += ",^action^:^AUTH^";

    //Check for event id
    var eventId = this.getAdministeredDoseEventId();
    if (eventId) {
        jsonToSave += ",^event_id^:" + eventId + ".0";
    }

    jsonToSave += "}";

    return jsonToSave;
};

DoseRow.prototype.getAdministeredPeriodJson = function () {
    var jsonToSave = "";
    var details = this.getAdministeredTime();
    if (!details) {
        //There's nothing to write!
        return jsonToSave;
    }
    //Make sure we have an event set cd and unique id
    var uniqueKey = this.getUniqueKey();
    var eventSetCd = this.getAdministeredPeriodEventSetCd();
    if (!eventSetCd || !uniqueKey) {
        return jsonToSave;
    }

    //Check pending value
    var pendingValue = details.PENDING_VALUE;
    //Verify some pending value exists
    if (pendingValue === undefined) {
        return jsonToSave;
    }
    //Check if pending value was cleared
    if (pendingValue === null) {
        pendingValue = "";
    }

    //Finally, we can create the JSON
    jsonToSave += "{";
    jsonToSave += "^type^:^TXT^";
    jsonToSave += ",^event_set_cd^:" + eventSetCd + ".0";
    jsonToSave += ",^string_result^:^" + pendingValue + "^";
    jsonToSave += ",^description^:^" + uniqueKey + "^";
    jsonToSave += ",^action^:^AUTH^";

    //Check for event id
    var eventId = this.getAdministeredPeriodEventId();
    if (eventId) {
        jsonToSave += ",^event_id^:" + eventId + ".0";
    }

    jsonToSave += "}";

    return jsonToSave;
};

DoseRow.prototype.getCommentJson = function () {
    var jsonToSave = "";
    var details = this.getComment();
    if (!details) {
        //There's nothing to write!
        return jsonToSave;
    }
    //Make sure we have an event set cd and unique id
    var uniqueKey = this.getUniqueKey();
    var eventSetCd = this.getCommentEventSetCd();
    if (!eventSetCd || !uniqueKey) {
        return jsonToSave;
    }

    //Check pending value
    var pendingValue = details.PENDING_VALUE;
    //Verify some pending value exists
    if (pendingValue === undefined) {
        return jsonToSave;
    }
    //Check if pending value was cleared
    if (pendingValue === null) {
        pendingValue = "";
    }

    //Finally, we can create the JSON
    jsonToSave += "{";
    jsonToSave += "^type^:^TXT^";
    jsonToSave += ",^event_set_cd^:" + eventSetCd + ".0";
    jsonToSave += ",^string_result^:^" + pendingValue + "^";
    jsonToSave += ",^description^:^" + uniqueKey + "^";
    jsonToSave += ",^action^:^AUTH^";

    //Check for event id
    var eventId = this.getCommentEventId();
    if (eventId) {
        jsonToSave += ",^event_id^:" + eventId + ".0";
    }

    jsonToSave += "}";

    return jsonToSave;
};

/*
 ComponentTable Column Displays
 */

DoseRow.prototype.getDateColDisplay = function () {
    return this.getFormattedDate();
};

DoseRow.prototype.getInrColDisplay = function () {
    var html = "";
    var highlightCss = "";
    var doseRowIndex = this.getCurrentIndex();
    var activeIndex = this.getActiveInrResultIndex();
    var inrList = this.getInrResults();
    var iLen = inrList.length;
    if (!iLen) {
        return "";
    }
    if (doseRowIndex === 0 || doseRowIndex === 1) {
        if (parseFloat(inrList[activeIndex]) > 1.45) {
            highlightCss = "dose-row-inr-highlight";
        }
    }

    html += "<span class='dose-row-inr-mnu " + highlightCss + "' id='" + this.getId() + "InrMnu'>";
    html += inrList[activeIndex];
    if (iLen > 1) {
        html += " [" + iLen + "]";
    }
    html += "</span>";
    return html;
};

DoseRow.prototype.getCalculateColDisplay = function () {
    //Will contain logic to determine if icon should show
    var html = "";
    if (this.isCalcuable()) {
        html += "<span class='acio1-calc-icon'>&nbsp;</span>";
    }
    return html;
};

DoseRow.prototype.getEstDoseColDisplay = function () {
    var html = "";
    if (this.getEstDailyDose()) {
        html += (this.getEstDailyDose().VALUE || "");
    }
    return html;
};

DoseRow.prototype.getSuggestedDoseColDisplay = function () {
    var html = "";
    if (this.getSuggestedDose()) {
        html += (this.getSuggestedDose().VALUE || "");
    }
    return html;
};

DoseRow.prototype.getPrescribedDoseColDisplay = function () {
    var html = "";
    var details = this.getPrescribedDose() || {};
    var pendingValue = details.PENDING_VALUE;
    var value = details.VALUE;
    html += "<input class='dose-row-table-input' type='text' value='";
    if (pendingValue !== undefined) {
        if (pendingValue >= 0) {
            html += pendingValue;
        }
    } else if (value !== undefined) {
        if (value >= 0) {
            html += value;
        }
    } else {
        html += "";
    }
    html += "' />";
    return html;
};

DoseRow.prototype.getAdministeredDoseColDisplay = function () {
    var html = "";
    var details = this.getAdministeredDose() || {};
    var pendingValue = details.PENDING_VALUE;
    var value = details.VALUE;
    html += "<input class='dose-row-table-input' type='input' value='";
    if (pendingValue !== undefined) {
        if (pendingValue >= 0) {
            html += pendingValue;
        }
    } else if (value !== undefined) {
        if (value >= 0) {
            html += value;
        }
    } else {
        html += "";
    }
    html += "' />";
    return html;
};

DoseRow.prototype.getAdministeredTimeColDisplay = function () {
    var administeredPeriod = "";
    var html = "";
    var administeredTimeObj = this.getAdministeredTime();
    if (administeredTimeObj) {
        //1st check for pending value (not yet saved to db), then value (saved to db)
        administeredPeriod = administeredTimeObj.PENDING_VALUE || administeredTimeObj.VALUE || null;
        //If the administeredPeriod is still null, default pending value (so it will save to db) to PM
        if (!administeredPeriod){
            administeredTimeObj.PENDING_VALUE = "PM";
            administeredPeriod = "PM";
        }
    }

    html += "<select class='dose-row-table-input'>";
    html +=     "<option value='PM'" + (administeredPeriod === 'PM' ? " selected" : "") + ">" + "PM" + "</option>";
    html +=     "<option value='AM'" + (administeredPeriod === 'AM' ? " selected" : "") + ">" + "AM" + "</option>";
    html += "</select>";
    return html;
};

DoseRow.prototype.getCommentsColDisplay = function () {
    var commentsDetail = this.getComment();
    var comment = "";
    var html = "";
    if (commentsDetail) {
        comment = commentsDetail.PENDING_VALUE || commentsDetail.VALUE || "";
    }
    html += "<input class='dose-row-comment-input' maxlength='255' type='text' value='" + comment + "' />";
    return html;
};

function DoseRowController(id) {
    this.m_id = "DoseRowController" + (id || "");
    this.m_criterion = null;
    this.m_doseRows = null;
    this.m_htmlToDoseRowMap = null;
    this.m_dateToDoseRowMap = null;
    this.m_uniqueCounter = 0;
    this.m_componentTable = null;
    this.m_addDoseRowModal = null;
    this.m_modalDoseRow = null;
    this.m_commentManager = null;
    this.m_component = null;

    this.m_eventSetToNameMap = null;
    this.m_nameToEventSetMap = null;

    this.m_dateToInrResult = null;

    this.m_inrResultsMenu = null;

    //Fields for calculations
    this.m_ageInYears = null;
    this.m_africanInd = null;
    this.m_maleInd = null;
    this.m_weight = 0;
    this.m_height = 0;
    this.m_midTargetInr = 0;
    this.m_amiodaroneInd = 0;
    this.m_smokerInd = 0;
    this.m_fluvaInd = 0;
    this.m_simvaInd = 0;
    this.m_diabetesInd = 0;
    this.m_dvtPeInd = 0;
    this.m_afibstrokeInd = 0;
    this.m_indstrokeInd = 0;
    this.m_inducerInd = 0;

    this.m_baselineInr = null;
    // event set code values
    this.m_dateEvetSetCd = 0;
    this.m_precribedDoseEventSetCd = 0;
    this.m_administeredDoseEventSetCd = 0;
    this.m_administeredPeriodEventSetCd = 0;
    this.m_commentEventSetCd = 0;
    this.m_estDailyDoseEventSetCd = 0;
    this.m_suggestedDoseEventSetCd = 0;
}

DoseRowController.prototype.getComponent = function () {
    return this.m_component;
};

DoseRowController.prototype.setComponent = function (comp) {
    this.m_component = comp;
};

DoseRowController.prototype.getEstDailyDoseEventSetCd = function () {
    return this.m_estDailyDoseEventSetCd;
};

DoseRowController.prototype.setEstDailyDoseEventSetCd = function (eventSetCd) {
    this.m_estDailyDoseEventSetCd = eventSetCd;
};

DoseRowController.prototype.getSuggestedDoseEventSetCd = function () {
    return this.m_suggestedDoseEventSetCd;
};

DoseRowController.prototype.setSuggestedDoseEventSetCd = function (eventSetCd) {
    this.m_suggestedDoseEventSetCd = eventSetCd;
};

DoseRowController.prototype.getDateEventSetCd = function () {
    return this.m_dateEvetSetCd;
};

DoseRowController.prototype.setDateEventSetCd = function (eventSetCd) {
    this.m_dateEvetSetCd = eventSetCd;
};

DoseRowController.prototype.getPrescribedDoseEventSetCd = function () {
    return this.m_precribedDoseEventSetCd;
};

DoseRowController.prototype.setPrescribedDoseEventSetCd = function (eventSetCd) {
    this.m_precribedDoseEventSetCd = eventSetCd;
};

DoseRowController.prototype.getAdministeredDoseEventSetCd = function () {
    return this.m_administeredDoseEventSetCd;
};

DoseRowController.prototype.setAdministeredDoseEventSetCd = function (eventSetCd) {
    this.m_administeredDoseEventSetCd = eventSetCd;
};

DoseRowController.prototype.getAdministeredPeriodEventSetCd = function () {
    return this.m_administeredPeriodEventSetCd;
};

DoseRowController.prototype.setAdministeredPeriodEventSetCd = function (eventSetCd) {
    this.m_administeredPeriodEventSetCd = eventSetCd;
};

DoseRowController.prototype.getCommentEventSetCd = function () {
    return this.m_commentEventSetCd;
};

DoseRowController.prototype.setCommentEventSetCd = function (eventSetCd) {
    this.m_commentEventSetCd = eventSetCd;
};

DoseRowController.prototype.getBaselineInr = function () {
    return this.m_baselineInr;
};

DoseRowController.prototype.setBaselineInr = function (details) {
    this.m_baselineInr = details;
};

DoseRowController.prototype.getInducerInd = function () {
    return this.m_inducerInd;
};

DoseRowController.prototype.setInducerInd = function (ind) {
    this.m_inducerInd = ind;
};

DoseRowController.prototype.getIndstrokeInd = function () {
    return this.m_indstrokeInd;
};

DoseRowController.prototype.setIndstrokeInd = function (ind) {
    this.m_indstrokeInd = ind;
};

DoseRowController.prototype.getAfibstrokeInd = function () {
    return this.m_afibstrokeInd;
};

DoseRowController.prototype.setAfibstrokeInd = function (ind) {
    this.m_afibstrokeInd;
};

DoseRowController.prototype.getDvtPeInd = function () {
    return this.m_dvtPeInd;
};

DoseRowController.prototype.setDvtPeInd = function (ind) {
    this.m_dvtPeInd = ind;
};

DoseRowController.prototype.getDiabetesInd = function () {
    return this.m_diabetesInd;
};

DoseRowController.prototype.setDiabetesInd = function (ind) {
    this.m_diabetesInd = ind;
};

DoseRowController.prototype.getSimvaInd = function () {
    return this.m_simvaInd;
};

DoseRowController.prototype.setSimvaInd = function (ind) {
    this.m_simvaInd = ind;
};

DoseRowController.prototype.getFluvaInd = function () {
    return this.m_fluvaInd;
};

DoseRowController.prototype.setFluvaInd = function (ind) {
    this.m_fluvaInd = ind;
};

DoseRowController.prototype.getSmokerInd = function () {
    return this.m_smokerInd;
};

DoseRowController.prototype.setSmokerInd = function (ind) {
    this.m_smokerInd = ind;
};

DoseRowController.prototype.getAmiodaroneInd = function () {
    return this.m_amiodaroneInd;
};

DoseRowController.prototype.setAmiodaroneInd = function (ind) {
    this.m_amiodaroneInd = ind;
};

DoseRowController.prototype.getInrResultsMenu = function () {
    return this.m_inrResultsMenu;
};

DoseRowController.prototype.setInrResultsMenu = function (menu) {
    this.m_inrResultsMenu = menu;
};

DoseRowController.prototype.getCommentManager = function () {
    if (!this.m_commentManager) {
        this.m_commentManager = new CommentManager(this.getId());
    }
    return this.m_commentManager;
};

DoseRowController.prototype.setCommentManager = function (mgr) {
    this.m_commentManager = mgr;
};

DoseRowController.prototype.getEventSetToNameMap = function () {
    if (!this.m_eventSetToNameMap) {
        this.m_eventSetToNameMap = {};
    }
    return this.m_eventSetToNameMap;
};

DoseRowController.prototype.setEventSetToNameMap = function (map) {
    this.m_eventSetToNameMap = map;
};

DoseRowController.prototype.getNameToEventSetMap = function () {
    if (!this.m_nameToEventSetMap) {
        this.m_nameToEventSetMap = {};
    }
    return this.m_nameToEventSetMap;
};

DoseRowController.prototype.setNameToEventSetMap = function (map) {
    this.m_nameToEventSetMap = map;
};

DoseRowController.prototype.getCriterion = function () {
    return this.m_criterion;
};

DoseRowController.prototype.setCriterion = function (criterion) {
    this.m_criterion = criterion;
};

DoseRowController.prototype.getDateToInrResultMap = function () {
    if (!this.m_dateToInrResult) {
        this.m_dateToInrResult = {};
    }
    return this.m_dateToInrResult;
};

DoseRowController.prototype.setDateToInrResultMap = function (map) {
    this.m_dateToInrResult;
};

DoseRowController.prototype.getAgeInYears = function () {
    return this.m_ageInYears;
};

DoseRowController.prototype.setAgeInYears = function (age) {
    this.m_ageInYears = age;
};

DoseRowController.prototype.getAfricanInd = function () {
    return this.m_africanInd;
};

DoseRowController.prototype.setAfricanInd = function (ind) {
    this.m_africanInd = ind;
};

DoseRowController.prototype.getMaleInd = function () {
    return this.m_maleInd;
};

DoseRowController.prototype.setMaleInd = function (ind) {
    this.m_maleInd = ind;
};

DoseRowController.prototype.getWeight = function () {
    return this.m_weight;
};

DoseRowController.prototype.setWeight = function (weight) {
    this.m_weight = weight;
};

DoseRowController.prototype.getHeight = function () {
    return this.m_height;
};

DoseRowController.prototype.setHeight = function (height) {
    this.m_height = height;
};

DoseRowController.prototype.getMidTargetInr = function () {
    return this.m_midTargetInr;
};

DoseRowController.prototype.setMidTargetInr = function (inr) {
    this.m_midTargetInr = inr;
};

DoseRowController.prototype.getId = function () {
    return this.m_id;
};

DoseRowController.prototype.getModalDoseRow = function () {
    return this.m_modalDoseRow;
};

DoseRowController.prototype.setModalDoseRow = function (doseRow) {
    this.m_modalDoseRow = doseRow;
};

DoseRowController.prototype.getAddDoseRowModal = function () {
    if (!this.m_addDoseRowModal) {
        this.m_addDoseRowModal = new ModalDialog(this.getId() + "AddDoseRowModal");
        this.configureAddDoseRowModal();
    }
    return this.m_addDoseRowModal;
};

DoseRowController.prototype.setAddDoseRowModal = function (modal) {
    this.m_addDoseRowModal = modal;
};

DoseRowController.prototype.getHtmlToDoseRowMap = function () {
    if (!this.m_htmlToDoseRowMap) {
        this.m_htmlToDoseRowMap = {};
    }
    return this.m_htmlToDoseRowMap;
};

DoseRowController.prototype.setHtmlToDoseRowMap = function (map) {
    this.m_htmlToDoseRowMap = map;
};

DoseRowController.prototype.getDateToDoseRowMap = function () {
    if (!this.m_dateToDoseRowMap) {
        this.m_dateToDoseRowMap = {};
    }
    return this.m_dateToDoseRowMap;
};

DoseRowController.prototype.setDateToDoseRowMap = function (map) {
    this.m_dateToDoseRowMap = map;
};

DoseRowController.prototype.getDoseComponentTable = function () {
    return this.m_componentTable;
};

DoseRowController.prototype.setDoseComponentTable = function (table) {
    this.m_componentTable = table;
};

DoseRowController.prototype.getDoseRowsList = function () {
    if (!this.m_doseRows) {
        this.m_doseRows = [];
    }
    return this.m_doseRows;
};

DoseRowController.prototype.setDoseRowsList = function (list) {
    this.m_doseRows = list;
};

DoseRowController.prototype.createInrResultsMenu = function () {
    var id = this.getId();
    var menuId = "inrResultsMnu" + id;
    var inrResultsMenu = new Menu(menuId);

    inrResultsMenu.setLabel("");
    inrResultsMenu.setIsRootMenu(true);
    inrResultsMenu.setAnchorConnectionCorner(["bottom", "right"]);
    inrResultsMenu.setContentConnectionCorner(["top", "right"]);
    inrResultsMenu.setAnchorActiveClass("drc-inr-anchor-selected");

    MP_MenuManager.addMenuObject(inrResultsMenu);
    this.setInrResultsMenu(inrResultsMenu);
};

DoseRowController.prototype.renderInrMenu = function (doseRow, event) {
    if (!doseRow) {
        return;
    }
    var inrMenu = this.getInrResultsMenu();
    var inrResultList = doseRow.getInrResults();
    var activeInrResultIndex = doseRow.getActiveInrResultIndex();
    var iLen = inrResultList.length;
    var i;

    var colId = event.currentTarget.id;

    //Don't do anything if the number of inr results is less than 2
    if (iLen < 2) {
        return;
    }

    //Remove all menu items
    var menuItems = inrMenu.getMenuItemArray() || [];
    for (var i = 0, mLen = menuItems.length; i < mLen; i++) {
        MP_MenuManager.deleteMenuObject(menuItems[i].getId());
    }
    menuItems.splice(0, mLen);

    //Create menu items
    for (i = 0; i < iLen; i++) {
        var result = inrResultList[i];
        var inrItem = new MenuSelection("inrResult" + i);
        inrItem.setLabel(result + "");
        //Make the currently face-up INR selected
        inrItem.setIsSelected(activeInrResultIndex === i);
        inrItem.setClickFunction((function (index) {
            //Needed to return a function because otherwise the value of i would be whatever its final value was (closures)
            return function () {
                //Need to update the doseRow
                doseRow.setActiveInrResultIndex(index);
                var colDom = document.getElementById(colId);
                //Update the column in the component table
                //$("#" + colId).html(doseRow.getInrColDisplay());
                colDom.innerHTML = doseRow.getInrColDisplay();
            }
        })(i));
        inrMenu.addMenuItem(inrItem);
    }

    //Set anchor
    inrMenu.setAnchorElementId(event.target.id);

    if (inrMenu.isActive()) {
        MP_MenuManager.closeMenuStack(true);
    } else {
        MP_MenuManager.showMenu(inrMenu.getId());
    }

};

DoseRowController.prototype.sortDoseRowsByDate = function () {
    var doseRows = this.getDoseRowsList();
    doseRows.sort(function (a, b) {
        var aDetails = a.getDate();
        var bDetails = b.getDate();

        var aVal = aDetails.PENDING_VALUE || aDetails.VALUE || "";
        var bVal = bDetails.PENDING_VALUE || bDetails.VALUE || "";
        return aVal - bVal;
    });
    //Set indexes
    for (var i = 0, iLen = doseRows.length; i < iLen; i++) {
        doseRows[i].setCurrentIndex(i);
    }
    return doseRows;
};

DoseRowController.prototype.addDoseRow = function (doseRow) {
    //Check if date exists
    var dateToDoseMap = this.getDateToDoseRowMap();
    var dateToInrResultMap = this.getDateToInrResultMap();
    var dateDetails = doseRow.getDate();
    var date = doseRow.getFormattedDate();
    if (!date) {
        return;
    }
    if (dateToDoseMap[date]) {
        return;
    }
    var inrList = dateToInrResultMap[date];
    if (inrList && inrList.length) {
        doseRow.setInrResults(inrList);
    }
    doseRow.setId(this.getId() + (++this.m_uniqueCounter));
    dateToDoseMap[date] = doseRow;
    this.getDoseRowsList().push(doseRow);
};

DoseRowController.prototype.createDoseRow = function () {
    var doseRow = new DoseRow();
    doseRow.setDateEventSetCd(this.getDateEventSetCd());
    doseRow.setPrescribedDoseEventSetCd(this.getPrescribedDoseEventSetCd());
    doseRow.setAdministeredPeriodEventSetCd(this.getAdministeredPeriodEventSetCd());
    doseRow.setAdministeredDoseEventSetCd(this.getAdministeredDoseEventSetCd());
    doseRow.setCommentEventSetCd(this.getCommentEventSetCd());
    doseRow.setEstDailyDoseEventSetCd(this.getEstDailyDoseEventSetCd());
    doseRow.setSuggestedDoseEventSetCd(this.getSuggestedDoseEventSetCd());
    return doseRow;
};

DoseRowController.prototype.extendToThirtyDays = function () {
    function getDiffInDays(startDt, endDt) {
        var daysInMs = (1000 * 60 * 60 * 24);
        if (!startDt || !endDt) {
            throw new Error("Runtime Error: startDt or endDt are not defined in DoseRowController method extendToThirtyDays' helper function getDiffInDays");
        }
        startDt.setHours(0);
        startDt.setMinutes(0);
        startDt.setSeconds(0);
        startDt.setMilliseconds(0);
        endDt.setHours(0);
        endDt.setMinutes(0);
        endDt.setSeconds(0);
        endDt.setMilliseconds(0);

        return Math.round(Math.abs(endDt - startDt) / daysInMs);
    }

    this.sortDoseRowsByDate();
    var doseRow;
    var doseRowsList = this.getDoseRowsList();
    var dLen = doseRowsList.length;

    if (!dLen || dLen >= 30) {
        return;
    }

    //Get first date and last date
    var firstDateDetails = doseRowsList[0].getDate() || {};
    var lastDateDetails = doseRowsList[dLen - 1].getDate() || {};
    var firstDate = firstDateDetails.PENDING_VALUE || firstDateDetails.VALUE || null;
    var lastDate = lastDateDetails.PENDING_VALUE || lastDateDetails.VALUE || null;

    //Get num of dates between them
    var diffDays = getDiffInDays(firstDate, lastDate);
    //Add a new dose row if the difference in days is less than 30
    if (diffDays < 30) {
        var workingDate = new Date(firstDate);
        workingDate.setDate(workingDate.getDate() + 30);
        doseRow = this.createDoseRow();
        doseRow.setDate({
            PENDING_VALUE: workingDate
        });
        //Set unique key
        var timeKey = new Date();
        var criterion = this.getCriterion();
        var uKey = criterion.person_id + "|" + criterion.encntr_id + "|" + timeKey.getTime() + "|extend";
        //Now add the dose row (it will already be sorted!
        this.addDoseRow(doseRow);
    }
};

DoseRowController.prototype.determineBaselineInr = function () {
    var baselineValue;
    if (this.getBaselineInr()) {
        baselineValue = this.getBaselineInr();
        return baselineValue;
    }

    //Get the date to INR map, we need to search for INR values 14 days before the earliest doseRow
    var doseRowsList = this.getDoseRowsList() || [];
    if (!doseRowsList.length) {
        return null;
    }
    this.sortDoseRowsByDate();
    var earliestDate = doseRowsList[0].getDate().PENDING_VALUE || doseRowsList[0].getDate().VALUE;

    var dateToInrMap = this.getDateToInrResultMap();
    //Go back 14 days, till we find a match
    var formatDate = DoseRow.prototype.formatDate;
    var maxDays = 14;
    for (var i = 1; i <= maxDays; i++) {
        var tempDate = new Date();
        tempDate.setYear(earliestDate.getFullYear());
        tempDate.setMonth(earliestDate.getMonth());
        tempDate.setDate(earliestDate.getDate() - i);
        tempDate.setHours(0);
        tempDate.setMinutes(0);
        tempDate.setSeconds(0);
        //get formatted date
        var dateKey = formatDate(tempDate);
        //Check if an INR result exists for this date
        var inrList = dateToInrMap[dateKey];
        if (!inrList) {
            continue;
        }
        var iLen = inrList.length;
        var j;
        for (j = 0; j < iLen; j++) {
            var inrVal = parseFloat(inrList[j]);
            if (inrVal <= 1.45) {
                baselineValue = inrVal;
                this.setBaselineInr({PENDING_VALUE: inrVal});
                return this.getBaselineInr();
            }
        }
    }

    return null;
};

DoseRowController.prototype.formatDate = function (date) {
    var dateFormatter = MP_Util.GetDateFormatter();
    var fullDate4Year = mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR;
    var dateStr = "";

    if (date) {
        dateStr = dateFormatter.format(date, fullDate4Year);
    }
    return dateStr;
};

DoseRowController.prototype.fillInDoseRows = function () {
    function getDiffInDays(startDt, endDt) {
        var daysInMs = (1000 * 60 * 60 * 24);
        if (!startDt || !endDt) {
            throw new Error("Runtime Error: startDt or endDt are not defined in DoseRowController method fillInDoseRows' helper function getDiffInDays");
        }
        startDt.setHours(0);
        startDt.setMinutes(0);
        startDt.setSeconds(0);
        startDt.setMilliseconds(0);
        endDt.setHours(0);
        endDt.setMinutes(0);
        endDt.setSeconds(0);
        endDt.setMilliseconds(0);

        return Math.round(Math.abs(endDt - startDt) / daysInMs);
    }

    this.sortDoseRowsByDate();
    var doseRow;
    var dateToDoseMap = this.getDateToDoseRowMap();
    var doseRowsList = this.getDoseRowsList();
    var dLen = doseRowsList.length;
    var i = 0;

    //If the length of the array is 1 or fewer, we don't have to fill anything in
    if (dLen <= 1) {
        return;
    }

    //Need to get the 1st and last items in the array (assuming sorted);
    var earliestDoseRow = doseRowsList[0];
    var lastDoseRow = doseRowsList[dLen - 1];
    //Get date details and value
    var firstDateDetails = earliestDoseRow.getDate() || {};
    var lastDateDetails = lastDoseRow.getDate() || {};

    //Grab actual dates
    var firstDate = firstDateDetails.PENDING_VALUE || firstDateDetails.VALUE || null;
    var lastDate = lastDateDetails.PENDING_VALUE || lastDateDetails.VALUE || null;

    var lastDateKey = lastDoseRow.getFormattedDate();
    var workingDateKey = earliestDoseRow.getFormattedDate();
    var workingDate = firstDate;
    if (!workingDateKey || !workingDate || !lastDateKey) {
        throw new Error("Runtime Error: Invalid first or last date in DoseRowController method 'fillInDoseRows'");
    }

    //Create dose rows if one does not exist
    workingDate = new Date(workingDate);
    doseRow = this.createDoseRow();
    while (workingDateKey !== lastDateKey) {
        //Check if the date already exists in the map
        if (!dateToDoseMap[workingDateKey]) {
            //Create new DoseRow
            doseRow = this.createDoseRow();
            //Set date
            doseRow.setDate({PENDING_VALUE: new Date(workingDate)});
            //Add to controller
            this.addDoseRow(doseRow);
        }
        if (!doseRow.getUniqueKey()) {
            var date = new Date();
            var criterion = this.getCriterion();

            var uKey = criterion.person_id + "|" + criterion.encntr_id + "|" + date.getTime() + "|" + i;
            doseRow.setUniqueKey(uKey);
        }
        //Incremement
        i++;
        workingDate.setDate(workingDate.getDate() + 1);
        workingDateKey = doseRow.formatDate(workingDate);
    }
    //Re-sort
    this.sortDoseRowsByDate();
    this.determineCalcuableDoseRow()
};

DoseRowController.prototype.configureAddDoseRowModal = function () {
    var self = this;
    var myi18n = i18n.discernabu.anticoaginitiation_o1;
    var modalDialog = this.getAddDoseRowModal();
    var commentManager = this.getCommentManager();
    modalDialog.setLeftMarginPercentage(20).setRightMarginPercentage(20).setTopMarginPercentage(10).setIsBodySizeFixed(true).setIsFooterAlwaysShown(true);
    modalDialog.setShowCloseIcon(true);
    modalDialog.setHeaderTitle(myi18n.ADD_PREVIOUS_DOSE);

    var cancelButton = new ModalButton("AddPreviousDoseCancel");
    cancelButton.setText(myi18n.CANCEL).setCloseOnClick(true);

    var addButton = new ModalButton("AddPreviousDoseAdd");
    addButton.setText(myi18n.ADD).setCloseOnClick(true).setOnClickFunction(function () {
        var doseRow = self.getModalDoseRow();

        //Add comment details
        var commentText = commentManager.getCommentText();
        var commentDetails = doseRow.getComment() || {};
        commentDetails.PENDING_VALUE = commentText;
        doseRow.setComment(commentDetails);

        //Get json
        var jsonList = [];

        var jsonConfig = doseRow.getDateJson();
        if (jsonConfig) {
            jsonList.push(jsonConfig);
        }
        jsonConfig = doseRow.getPrescribedDoseJson();
        if (jsonConfig) {
            jsonList.push(jsonConfig);
        }
        jsonConfig = doseRow.getAdministeredDoseJson();
        if (jsonConfig) {
            jsonList.push(jsonConfig);
        }
        jsonConfig = doseRow.getAdministeredPeriodJson();
        if (jsonConfig) {
            jsonList.push(jsonConfig);
        }
        var jsonConfig = doseRow.getCommentJson();
        if (jsonConfig) {
            jsonList.push(jsonConfig);
        }

        self.submitDoseRowChanges(doseRow, jsonList, function () {
            //Add doseRow
            self.addDoseRow(doseRow);
            self.setModalDoseRow(null);

            self.fillInDoseRows();
            //Refresh table
            self.updateDoseTable();
        });

    });

    modalDialog.addFooterButton(addButton);
    modalDialog.addFooterButton(cancelButton);

    MP_ModalDialog.updateModalDialogObject(modalDialog);
};

DoseRowController.prototype.getBaselineInrJson = function () {
    var jsonToSave = "";
    var details = this.getBaselineInr();
    if (!details) {
        //There's nothing to write!
        return jsonToSave;
    }
    //Make sure we have an event set cd
    var eventSetCd = details.EVENT_SET_CD;
    if (!eventSetCd) {
        return jsonToSave;
    }

    //Check pending value
    var pendingValue = details.PENDING_VALUE;
    //Verify some pending value exists
    if (pendingValue === undefined) {
        return jsonToSave;
    }
    //Check if pending value was cleared
    if (pendingValue === null || pendingValue === "") {
        pendingValue = -1;
    }

    //Finally, we can create the JSON
    jsonToSave += "{";
    jsonToSave += "^type^:^NUM^";
    jsonToSave += ",^event_set_cd^:" + eventSetCd + ".0";
    jsonToSave += ",^string_result^:^" + pendingValue + "^";
    jsonToSave += ",^description^:^" + "Baseline Inr" + "^";
    jsonToSave += ",^action^:^AUTH^";

    //Check for event id
    var eventId = details.EVENT_ID;
    if (eventId) {
        jsonToSave += ",^event_id^:" + eventId + ".0";
    }

    jsonToSave += "}";

    return jsonToSave;
};

DoseRowController.prototype.updateDoseTable = function () {
    this.sortDoseRowsByDate();
    this.determineCalcuableDoseRow();
    var doseTable = this.getDoseComponentTable();
    doseTable.bindData(this.getDoseRowsList());
    doseTable.refresh();
};

DoseRowController.prototype.buildAddDoseModalHtml = function () {
    var id = this.getId();
    var myi18n = i18n.discernabu.anticoaginitiation_o1;
    var html = "";

    /*
     Fields:
     Previous Dose Date Field (calendar)
     Prescribed dose field
     Administered dose field
     administered time
     comments
     */

    //Container
    html += "<div id='" + id + "AddPreviousDoseModalFieldsContainer' class='acio1-modal-fields-cont'>";
    //fields
    html += "<div class='acio1-modal-field-row'>";
    html += "<span class='acio1-modal-field-lbl'>" + myi18n.PREVIOUS_DOSE_DATE + ":</span>";
    html += "<span class='acio1-modal-field-input'><input type='text' id='" + id + "ModalPreviousDoseDate' /></span>";
    html += "</div>";
    html += "<div class='acio1-modal-field-row'>";
    html += "<span class='acio1-modal-field-lbl'>" + myi18n.PRESCRIBED_DOSE + ":</span>";
    html += "<span class='acio1-modal-field-input'><input type='text' id='" + id + "ModalPrescribedDose' /></span>";
    html += "</div>";
    html += "<div class='acio1-modal-field-row'>";
    html += "<span class='acio1-modal-field-lbl'>" + myi18n.ADMINISTERED_DOSE + ":</span>";
    html += "<span class='acio1-modal-field-input'><input type='text' id='" + id + "ModalAdministeredDose' /></span>";
    html += "</div>";
    html += "<div class='acio1-modal-field-row'>";
    html += "<span class='acio1-modal-field-lbl'>" + myi18n.ADMINISTERED_TIME + ":</span>";
    //html +=     "<span class='acio1-modal-field-input'><input type='time' id='" + id + "ModalAdministeredTime' /></span>";
    html += "<select id='" + id + "ModalTimePeriod'>";
    html += "<option value='PM' SELECTED>" + "PM" + "</option>";
    html += "<option value='AM' >" + "AM" + "</option>";
    html += "</select>";
    html += "</div>";
    html += "</div>";

    //separator
    html += "<div class='acio1-modal-separator'></div>";

    //Comment Entry
    html += "<div class='acio1-modal-comments-hdr'>" + myi18n.COMMENTS + "</div>";
    html += "<div id='" + id + "AddPreviousDoseModalCommentsContainer' class='acio1-modal-comments-cont'>";
    html += "</div>";

    return html;
};

DoseRowController.prototype.launchAddDoseRowModal = function (key) {
    if (!key) {
        return;
    }
    var doseRow = this.createDoseRow();
    doseRow.setUniqueKey(key);
    var administeredTimeObj = doseRow.getAdministeredTime();
//Set the pending period value to 'PM' so 'PM' will get saved to the database when the row is saved.
    //administeredTimeObj.PENDING_VALUE = "PM";
    this.setModalDoseRow(doseRow);
    var modalDialog = this.getAddDoseRowModal();
    var commentManager = this.getCommentManager();
    commentManager.reset();

    MP_ModalDialog.showModalDialog(modalDialog.getId());
    modalDialog.setBodyHTML(this.buildAddDoseModalHtml());

    var jqCommentContainer = $("#" + this.getId() + "AddPreviousDoseModalCommentsContainer");
    if (jqCommentContainer && jqCommentContainer.length) {
        commentManager.setJqContainer(jqCommentContainer);
        var commentDetails = doseRow.getComment() || {};
        commentManager.setCommentText(commentDetails.PENDING_VALUE || commentDetails.VALUE || "");
        commentManager.initialize();
    }

    this.finalizeAddDoseRowModal();
};

DoseRowController.prototype.determineCalcuableDoseRow = function () {
    //Get the list of dose rows (and datemap)
    var doseRows = this.getDoseRowsList();
    var currentDate = new Date();
    var curDateStr = DoseRow.prototype.formatDate(currentDate);
    var doseRowsLen = doseRows.length;
    var i;

    //To be calcuable, must be within 11 days, and current date
    for (i = 0; i < doseRowsLen; i++) {
        var doseRow = doseRows[i];
        if (i < 11 && doseRow.getFormattedDate() === curDateStr) {
            doseRow.setIsCalcuable(true);
        } else {
            doseRow.setIsCalcuable(false);
        }
    }
};

DoseRowController.prototype.finalizeAddDoseRowModal = function () {
    var dateIsValid = false;
    var prescribedDoseIsValid = false;
    var administeredDoseIsValid = false;
    var administeredDoseIsValid = false;
    var administeredPeriodIsValid = false;

    function updateAddButtonDither() {
        //Will update to include all booleans
        if (dateIsValid) {
            modalDialog.setFooterButtonDither("AddPreviousDoseAdd", false);
        } else {
            modalDialog.setFooterButtonDither("AddPreviousDoseAdd", true);
        }
    }

    var self = this;
    var id = this.getId();
    var modalDialog = this.getAddDoseRowModal();
    var doseRow = this.getModalDoseRow();

    updateAddButtonDither();

    //Attach input field event listeners
    $("#" + id + "AddPreviousDoseModalFieldsContainer").on("blur", "input", function (event) {
        var jqInput = $(event.currentTarget);
        var inputId = event.currentTarget.id;

        if (inputId === (id + "ModalPreviousDoseDate")) {
            return;
        }

        var inputValue = self.scrubNumericInputField(jqInput);

        /*
         Prescribed Dose Field
         */
        if (inputId === (id + "ModalPrescribedDose")) {
            if (inputValue === false) {
                //Validation colors, disable add button

            }
            var prescribedDoseDetail = doseRow.getPrescribedDose();
            if (!prescribedDoseDetail) {
                prescribedDoseDetail = {};
            }
            prescribedDoseDetail.PENDING_VALUE = inputValue;
            doseRow.setPrescribedDose(prescribedDoseDetail);
        }
        /*
         Administered Dose Field
         */
        else if (inputId === (id + "ModalAdministeredDose")) {
            if (inputValue === false) {
                //Validation colors, disable add button

            }
            var administeredDoseDetail = doseRow.getAdministeredDose();
            if (!administeredDoseDetail) {
                administeredDoseDetail = {};
            }
            administeredDoseDetail.PENDING_VALUE = inputValue;
            doseRow.setAdministeredDose(administeredDoseDetail);
        }
    });

    //Select time period
    $("#" + id + "ModalTimePeriod").change(function (event) {
        var value = $(event.currentTarget).val();
        var administeredPeriod = doseRow.getAdministeredTime();
        if (!administeredPeriod) {
            administeredPeriod = {};
        }
        administeredPeriod.PENDING_VALUE = value;
        doseRow.setAdministeredTime(administeredPeriod);
    });

    $("#" + id + "ModalPreviousDoseDate").datepicker({
        onClose: function (dateStr, inst) {
            var dateToDoseMap = self.getDateToDoseRowMap();
            var workingDate = new Date(inst.selectedYear, inst.selectedMonth, inst.selectedDay);
            var details = {};
            if (!dateStr) {
                //Invalid date
                details.PENDING_VALUE = null;
                dateIsValid = false;
            } else {
                //Check if the date already exists
                details.PENDING_VALUE = workingDate;
                dateIsValid = true;
            }
            doseRow.setDate(details);
            if (dateToDoseMap[doseRow.formatDate(workingDate)]) {
                dateIsValid = false;
            }
            updateAddButtonDither();
        }
    });

};

DoseRowController.prototype.submitBaselineInr = function (jqButton) {
    var self = this;
    var criterion = this.getCriterion();
    var sendAr = [];
    var baselineJson = this.getBaselineInrJson();
    if (!criterion) {
        return;
    }

    var configJson = "";

    configJson += "~{";
    configJson += "^events_config^:{";
    configJson += "^config^:[";
    configJson += baselineJson;
    configJson += "]";
    configJson += ",^count^:" + 1;
    configJson += "}";
    configJson += "}~";

    sendAr.push(
        "^MINE^"
        , criterion.person_id + ".0"
        , criterion.encntr_id + ".0"
        , criterion.provider_id + ".0"
        , "^POWERCHART^"
        , configJson
    );

    //Log the request
    MP_Util.LogError("mp_save_cac_prev_dose - request<br />" + sendAr.join(","));

    var scriptRequest = new ScriptRequest();
    scriptRequest.setProgramName("mp_save_cac_prev_dose");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(false);
    scriptRequest.setName("setPreviousDoseData");
    scriptRequest.setResponseHandler(function (scriptReply) {
        MP_Util.LogError("mp_save_cac_prev_dose - response<br />" + JSON.stringify(scriptReply.getResponse()));
        //Check if the submit passed
        var status = scriptReply.getStatus();

        if (status !== 'S') {
            //TODO: throw alert
            //revert any dose row changes
        } else {
            if (jqButton) {
                jqButton.prop("disabled", true);
            }
        }
    });
    scriptRequest.performRequest();
};

DoseRowController.prototype.submitDoseRowChanges = function (doseRow, doseRowJsonList, callback) {
    var self = this;
    var criterion = this.getCriterion();
    var sendAr = [];
    if (!criterion || !doseRow || !doseRowJsonList || !doseRowJsonList.length) {
        return;
    }

    var count = doseRowJsonList.length;
    var configJson = "";

    configJson += "~{";
    configJson += "^events_config^:{";
    configJson += "^config^:[";
    configJson += doseRowJsonList.join(",");
    configJson += "]";
    configJson += ",^count^:" + count;
    configJson += "}";
    configJson += "}~";

    sendAr.push(
        "^MINE^"
        , criterion.person_id + ".0"
        , criterion.encntr_id + ".0"
        , criterion.provider_id + ".0"
        , "^POWERCHART^"
        , configJson
    );

    //Log the request
    MP_Util.LogError("mp_save_cac_prev_dose - request<br />" + sendAr.join(","));

    var scriptRequest = new ScriptRequest();
    scriptRequest.setProgramName("mp_save_cac_prev_dose");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(false);
    scriptRequest.setName("setPreviousDoseData");
    scriptRequest.setResponseHandler(function (scriptReply) {
        MP_Util.LogError("mp_save_cac_prev_dose - response<br />" + JSON.stringify(scriptReply.getResponse()));
        //Check if the submit passed
        var status = scriptReply.getStatus();

        if (status !== 'S') {
            //TODO: throw alert
            //revert any dose row changes
        } else {
            self.commitDoseRow(doseRow, scriptReply.getResponse().RESULTS);
        }

        if (typeof callback === 'function') {
            callback();
        }
    });
    scriptRequest.performRequest();
};

DoseRowController.prototype.updateDetails = function (details, eventId) {
    if (!eventId || !details) {
        return;
    }
    details.EVENT_ID = eventId;
    details.VALUE = details.PENDING_VALUE;
    delete details.PENDING_VALUE;
    return details;
};

DoseRowController.prototype.commitDoseRow = function (doseRow, results) {
    if (!results || !doseRow) {
        return;
    }
    var details;
    var eventSetToNameMap = this.getEventSetToNameMap();
    var rLen = results.length;
    var i;
    //Loop through the results
    for (i = 0; i < rLen; i++) {
        var eventSetCd = results[i].EVENT_SET_CD;
        var eventId = results[i].EVENT_ID;
        if (!eventSetCd || !eventId) {
            continue;
        }
        var name = eventSetToNameMap[eventSetCd];
        if (!name) {
            continue;
        }

        switch (name) {
            case "PREVIOUS_DOSE_DT_ES_CD":
                details = doseRow.getDate();
                this.updateDetails(details, eventId);
                break;
            case "EST_DAILY_DOSE_ES_CD":
                details = doseRow.getEstDailyDose();
                this.updateDetails(details, eventId);
                break;
            case "SUGGESTED_DOSE_ES_CD":
                details = doseRow.getSuggestedDose();
                this.updateDetails(details, eventId);
                break;
            case "PRESCRIBED_DOSE_ES_CD":
                details = doseRow.getPrescribedDose();
                this.updateDetails(details, eventId);
                break;
            case "ADMINISTERED_DOSE_ES_CD":
                details = doseRow.getAdministeredDose();
                this.updateDetails(details, eventId);
                break;
            case "ADMINISTERED_TIME_ES_CD":
                details = doseRow.getAdministeredTime();
                this.updateDetails(details, eventId);
                break;
            default:
                break;
        }
    }
};

DoseRowController.prototype.createDoseComponentTable = function () {
    var myi18n = i18n.discernabu.anticoaginitiation_o1;
    var self = this;

    this.sortDoseRowsByDate();
    this.determineCalcuableDoseRow();

    var table = new ComponentTable();
    table.setNamespace(this.getId() + "DoseTable");
    table.setCustomClass("acio1-dose-table");
    table.setZebraStripe(false);

    var dateCol = new TableColumn();
    dateCol.setColumnId("DATE");
    dateCol.setCustomClass("acio1-date-col");
    dateCol.setRenderTemplate('${getDateColDisplay()}');
    dateCol.setColumnDisplay(myi18n.DATE);

    var inrCol = new TableColumn();
    inrCol.setColumnId("INR_RESULT");
    inrCol.setCustomClass("acio1-inr-col");
    inrCol.setRenderTemplate('${getInrColDisplay()}');
    inrCol.setColumnDisplay(myi18n.INR_RESULT);

    var calcCol = new TableColumn();
    calcCol.setColumnId("CALC");
    calcCol.setCustomClass("acio1-calc-col");
    calcCol.setRenderTemplate('${getCalculateColDisplay()}');
    calcCol.setColumnDisplay(myi18n.CALCULATE);

    var estDoseCol = new TableColumn();
    estDoseCol.setColumnId("EST_DOSE");
    estDoseCol.setCustomClass("acio1-est-dose-col");
    estDoseCol.setRenderTemplate('${getEstDoseColDisplay()}');
    estDoseCol.setColumnDisplay(myi18n.EST_DAILY_DOSE + " (mg)");

    var suggestedDoseCol = new TableColumn();
    suggestedDoseCol.setColumnId("SUGGESTED_DOSE");
    suggestedDoseCol.setCustomClass("acio1-suggested-dose-col");
    suggestedDoseCol.setRenderTemplate('${getSuggestedDoseColDisplay()}');
    suggestedDoseCol.setColumnDisplay(myi18n.SUGGESTED_DOSE + " (mg)");

    var prescribedDoseCol = new TableColumn();
    prescribedDoseCol.setColumnId("PRESCRIBED_DOSE");
    prescribedDoseCol.setCustomClass("acio1-prescribed-dose-col");
    prescribedDoseCol.setRenderTemplate('${getPrescribedDoseColDisplay()}');
    prescribedDoseCol.setColumnDisplay(myi18n.PRESCRIBED_DOSE + " (mg)");

    var administeredDoseCol = new TableColumn();
    administeredDoseCol.setColumnId("ADMINISTERED_DOSE");
    administeredDoseCol.setCustomClass("acio1-administered-dose-col");
    administeredDoseCol.setRenderTemplate('${getAdministeredDoseColDisplay()}');
    administeredDoseCol.setColumnDisplay(myi18n.ADMINISTERED_DOSE + " (mg)");

    var administeredTimeCol = new TableColumn();
    administeredTimeCol.setColumnId("ADMINISTERED_TIME");
    administeredTimeCol.setCustomClass("acio1-administered-time-col");
    administeredTimeCol.setRenderTemplate('${getAdministeredTimeColDisplay()}');
    administeredTimeCol.setColumnDisplay(myi18n.ADMINISTERED_TIME);

    var commentsCol = new TableColumn();
    commentsCol.setColumnId("COMMENTS");
    commentsCol.setCustomClass("acio1-comments-col");
    commentsCol.setRenderTemplate('${getCommentsColDisplay()}');
    commentsCol.setColumnDisplay(myi18n.COMMENTS);

    table.addColumn(dateCol);
    table.addColumn(inrCol);
    table.addColumn(calcCol);
    table.addColumn(estDoseCol);
    table.addColumn(suggestedDoseCol);
    table.addColumn(prescribedDoseCol);
    table.addColumn(administeredDoseCol);
    table.addColumn(administeredTimeCol);
    table.addColumn(commentsCol);

    //Add cell click extension
    var clickExtension = new TableCellClickCallbackExtension();
    clickExtension.setCellClickCallback(function (event, data) {
        var jqTarget = $(event.target);
        var doseRow = data.RESULT_DATA;


        if (jqTarget.hasClass("acio1-calc-icon")) {
            self.calculateDose(doseRow);
        }
        /*
         Inr Results Menu (click)
         */
        else if (jqTarget.hasClass("dose-row-inr-mnu")) {
            self.renderInrMenu(doseRow, event);
        }

    });

    //Add Change Extension
    var changeExtension = new TableSelectChangeExtension();
    changeExtension.setSelectChangeCallback(function (event, data) {
        var doseRow = data.RESULT_DATA;
        var jqSelect = $(event.currentTarget);
        var val = jqSelect.val();
        var jsonConfigList = [];
        var administeredPeriodDetails = doseRow.getAdministeredTime();
        if (!administeredPeriodDetails) {
            administeredPeriodDetails = {};
        }
        administeredPeriodDetails.PENDING_VALUE = val;
        doseRow.setAdministeredTime(administeredPeriodDetails);
        jsonConfigList.push(doseRow.getAdministeredPeriodJson());
        //Just in case this was a 'fillIn' row, adding date as well
        var dateJson = doseRow.getDateJson();
        if (dateJson) {
            jsonConfigList.push(dateJson);
        }

        self.submitDoseRowChanges(doseRow, jsonConfigList);
    });

    //Add Blur Extension
    var blurExtension = new TableInputBlurExtension();
    blurExtension.setInputBlurCallback(function (event, data) {
        var jqInput = $(event.currentTarget);
        var colId = data.COLUMN_ID;
        var doseRow = data.RESULT_DATA;
        var jsonConfigList = [];
        var inputValue;


        /*
         Comment Text
         */
        if (colId === commentsCol.getColumnId()) {
            inputValue = jqInput.val(); //TODO: SCRUB FOR SECURITY PURPOSES
            var commentDetail = doseRow.getComment() || {};
            commentDetail.PENDING_VALUE = inputValue;
            doseRow.setComment(commentDetail);
            jsonConfigList.push(doseRow.getCommentJson());
        }
        /*
         Prescribed Dose Field
         */
        else if (colId === prescribedDoseCol.getColumnId()) {
            inputValue = self.scrubNumericInputField(jqInput);
            if (inputValue === false) {
                //Validation colors, disable add button
                return;
            }
            var prescribedDoseDetail = doseRow.getPrescribedDose();
            if (!prescribedDoseDetail) {
                prescribedDoseDetail = {};
            }
            prescribedDoseDetail.PENDING_VALUE = inputValue;
            doseRow.setPrescribedDose(prescribedDoseDetail);
            jsonConfigList.push(doseRow.getPrescribedDoseJson());
        }
        /*
         Administered Dose Field
         */
        else if (colId === administeredDoseCol.getColumnId()) {
            inputValue = self.scrubNumericInputField(jqInput);
            if (inputValue === false) {
                //Validation colors, disable add button
                return;
            }
            var administeredDoseDetail = doseRow.getAdministeredDose();
            if (!administeredDoseDetail) {
                administeredDoseDetail = {};
            }
            administeredDoseDetail.PENDING_VALUE = inputValue;
            doseRow.setAdministeredDose(administeredDoseDetail);
            jsonConfigList.push(doseRow.getAdministeredDoseJson());
        }
        //Just in case this was a 'fillIn' row, adding date as well
        var dateJson = doseRow.getDateJson();
        if (dateJson) {
            jsonConfigList.push(dateJson);
        }
	var administeredPeriodDetails = doseRow.getAdministeredTime();
        if (!administeredPeriodDetails) {
            administeredPeriodDetails = {};
	    administeredPeriodDetails.PENDING_VALUE = "PM";
	    doseRow.setAdministeredTime(administeredPeriodDetails);
        }
        
        jsonConfigList.push(doseRow.getAdministeredPeriodJson());
        self.submitDoseRowChanges(doseRow, jsonConfigList);
    });

    table.addExtension(clickExtension);
    table.addExtension(blurExtension);
    table.addExtension(changeExtension);

    table.bindData(this.getDoseRowsList());

    this.setDoseComponentTable(table);
    return table;
};

DoseRowController.prototype.calculateDose = function (doseRow) {
    function cnvtIntToFloat(num) {
        if (!(num % 1)) {
            return num + ".0";
        }
        return num;
    }

    var notificationManager = this.getNotificationManager();
    notificationManager.clearNotifications();
    //going to have a JSON string that contains the values we'll submit
    var ageInYears = this.getAgeInYears();
    var africanInd = this.getAfricanInd();
    var maleInd = this.getMaleInd();
    var weight = this.getWeight();
    var height = this.getHeight();
    var midTargetInr = this.getMidTargetInr();
    var errFields = [];

    if (ageInYears === null) {
        errFields.push("ageInYears");
    }
    if (africanInd === null) {
        errFields.push("africanInd");
    }
    if (maleInd === null) {
        errFields.push("maleInd");
    }
    if (!weight) {
        errFields.push("weight");
    }
    if (!height) {
        errFields.push("height");
    }
    if (ageInYears === null || africanInd === null || maleInd === null || !weight || !height) {
        throw new Error("Runtime Error: DoseRowController method calculateDose lacks necessary data: " + errFields.join(","));
    }

    var jsonRequest = "";
    jsonRequest += "~{^calc_request^:{";
    jsonRequest += "^weight^:" + cnvtIntToFloat(weight);
    jsonRequest += ",^height^:" + cnvtIntToFloat(height);
    jsonRequest += ",^target_inr^:" + cnvtIntToFloat(midTargetInr);
    jsonRequest += ",^age_in_years^:" + ageInYears;
    jsonRequest += ",^african_ind^:" + africanInd;
    jsonRequest += ",^male_ind^:" + maleInd;
    jsonRequest += ",^amiodar_ind^:" + this.getAmiodaroneInd();
    jsonRequest += ",^smoker_ind^:" + this.getSmokerInd();
    jsonRequest += ",^dvt_pe_ind^:" + this.getDvtPeInd();
    jsonRequest += ",^indstroke_ind^:" + this.getIndstrokeInd();
    jsonRequest += ",^simva_ind^:" + this.getSimvaInd();
    jsonRequest += ",^fluva_ind^:" + this.getFluvaInd();
    jsonRequest += ",^afibstroke_ind^:" + this.getAfibstrokeInd();
    jsonRequest += ",^diabetes_ind^:" + this.getDiabetesInd();
    jsonRequest += ",^inducer_ind^:" + this.getInducerInd();

    //Get data needed from previous doses
    var doseRowsList = this.getDoseRowsList();
    var dLen = doseRowsList.length;
    var doseIndex = -1;
    var i;
    var keyDate = doseRow.getFormattedDate();
    //Find doseRow's index in the DoseRow list (should switch to a binary search later)
    for (i = 0; i < dLen; i++) {
        //Compare formatted dates
        var tempDoseRow = doseRowsList[i];
        if (keyDate === tempDoseRow.getFormattedDate()) {
            doseIndex = i;
            break;
        }
    }
    //Throw error if index wasn't found
    if (doseIndex === -1) {
        throw new Error("Runtime Error: Could not find doseRow in doseRowsList within DoseRowController method calculateDose");
    }

    //If the doseRow the 3rd row or higher, we need an INR result, and previous administered dose
    if (doseIndex >= 2) {
        var activeInrIndex;
        var prevDoseRow = doseRowsList[doseIndex - 1];
        var inrResultList = doseRow.getInrResults() || [];
        var inrResult;
        if (inrResultList.length) {
            activeInrIndex = doseRow.getActiveInrResultIndex();
            inrResult = inrResultList[activeInrIndex];
        }

        //If we don't have an inr result, we can use the previous day's (previous day's only)
        if (!inrResult) {
            inrResultList = prevDoseRow.getInrResults();
            if (inrResultList.length) {
                activeInrIndex = prevDoseRow.getActiveInrResultIndex();
                inrResult = inrResultList[activeInrIndex];
            }
        }
        //If we still don't have an inr result, alert user
        if (!inrResult) {
            //TODO: ALERT
            alert("INR Result from today or previous day must be posted.");
            return;
        }

        //Generate administered dose results
        for (i = doseIndex; i > 0; i--) {
            var administeredDoseDetails = doseRowsList[i - 1].getAdministeredDose() || {};
            var administeredDose = administeredDoseDetails.VALUE;

            //If there isn't an administered dose, alert user
            if (typeof administeredDose !== 'number' || administeredDose < 0) {
                //TODO: Alert
                alert("Invalid previous administered dose.");
                return;
            }
            jsonRequest += ",^dose" + i + "^:" + administeredDose;
        }

        //Generate INR JSON
        jsonRequest += ",^inr_result^:" + inrResult;
    }

    jsonRequest += "}}~";
    this.cclCalculateDoses(doseRow, doseIndex + 1, jsonRequest);
};

DoseRowController.prototype.getNotificationManager = function () {
    if (!this.m_notificationManager) {
        this.m_notificationManager = new DoseRowController.NotificationManager(this.getId());
    }
    return this.m_notificationManager;
};

DoseRowController.prototype.cclCalculateDoses = function (doseRow, dayNum, jsonRequest) {
    //Call ccl script
    var self = this;
    var sendAr = [];
    var scriptRequest = new ScriptRequest();

    sendAr.push(
        "^MINE^"
        , dayNum
        , jsonRequest
    );

    MP_Util.LogError("mp_calc_cac_initiation_doses - request<br />" + sendAr.join(","));

    scriptRequest.setProgramName("mp_calc_cac_initiation_doses");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(false);
    scriptRequest.setName("calculateDoses");
    scriptRequest.setResponseHandler(function (scriptReply) {
        var response = scriptReply.getResponse();
        MP_Util.LogError("mp_calc_cac_initiation_doses - response<br />" + JSON.stringify(scriptReply.getResponse()));
        var notificationManager = self.getNotificationManager();
        var notificationList = response.NOTIFICATION || [];
        var nLen = notificationList.length;
        var i;
        for (i = 0; i < nLen; i++) {
            var notification = notificationList[i];
            var primaryText = notification.PRIMARY_TEXT || "";
            var secondaryText = notification.SECONDARY_TEXT || "";
            var notificationType = notification.TYPE;
            if (primaryText || secondaryText) {
                notificationManager.appendNotification("NOTIFICATION" + i, {PRIMARY: primaryText, SECONDARY: secondaryText}, notificationType);
            }
        }
//        var message = response.MESSAGE;
//        if (message){
//            notificationManager.appendNotification("CALC_MESSAGE", {PRIMARY:("Dose " + dayNum + ": "), SECONDARY:message}, notificationManager.NOTIFICATION_TYPES.WARNING);
//        }
//        //Display message if day is 1 or 2
//        if (dayNum === 1 || dayNum === 2){
//            notificationManager.appendNotification("FIRST_2_DAYS_MESSAGE", {PRIMARY:("Dose " + dayNum + ": "), SECONDARY: ("To have the INR rise more quickly " + response.SUGGESTED_DOSE + " mg may be given today.")}, notificationManager.NOTIFICATION_TYPES.INFO);
//        }

        var jsonConfigList = [];
        var estDetails = doseRow.getEstDailyDose();
        if (!estDetails) {
            estDetails = {};
        }
        estDetails.PENDING_VALUE = response.ESTIMATED_DOSE;
        doseRow.setEstDailyDose(estDetails);
        jsonConfigList.push(doseRow.getEstDoseJson());

        var suggestedDetails = doseRow.getSuggestedDose();
        if (!suggestedDetails) {
            suggestedDetails = {};
        }
        suggestedDetails.PENDING_VALUE = response.SUGGESTED_DOSE;
        doseRow.setSuggestedDose(suggestedDetails);
        jsonConfigList.push(doseRow.getSuggestedDoseJson());

        var dateJson = doseRow.getDateJson();
        if (dateJson) {
            jsonConfigList.push(dateJson);
        }

        self.submitDoseRowChanges(doseRow, jsonConfigList, function () {
            self.updateDoseTable();
        });
        var component = self.getComponent();
        if (component) {
            component.resize();
        }
    });
    scriptRequest.performRequest();
};

DoseRowController.prototype.scrubNumericInputField = function (jqInput) {
    var val = jqInput.val();
    var numericVal;

    jqInput.val(val.replace(/[^0-9\.]/ig, ""));

    //Check for duplicate periods
    var vLen = val.length;
    var i;
    var numPeriods = 0;
    for (i = 0; i < vLen; i++) {
        if (val.charAt(i) === ".") {
            numPeriods++;
        }
        if (numPeriods > 1) {
            return false;
        }
    }
    numericVal = parseFloat(val);
    if (!isFinite(numericVal)) {
        return "";
    }
    return numericVal;
};

DoseRowController.prototype.finalizeDoseComponentTable = function () {
    var doseTable = this.getDoseComponentTable();
    //We also need our menu for the table
    if (!this.m_inrResultsMenu) {
        this.createInrResultsMenu();
    }

    if (doseTable) {
        doseTable.finalize();
    }
};

/********************************* */

cerner.AntiCoagInitiationComponentO1.prototype.convertToCCLDate = function (dttm) {
    if (!dttm) {
        return "";
    }
    var monthList = [
        "JAN"
        , "FEB"
        , "MAR"
        , "APR"
        , "MAY"
        , "JUN"
        , "JUL"
        , "AUG"
        , "SEP"
        , "OCT"
        , "NOV"
        , "DEC"
    ];

    //Format: DD-MMM-YYYY
    var cclDate = "";
    cclDate += (dttm.getDate() < 10) ? "0" + dttm.getDate() : dttm.getDate();
    cclDate += ("-" + monthList[dttm.getMonth()] + "-");
    cclDate += dttm.getFullYear();
    return cclDate;
};

function CommentManager(id) {
    this.m_jqContainer = null;
    this.m_id = (id || "") + "CommentManager";
    this.m_existingCommentList = null;
    this.m_pendingCommentList = null;
    this.m_idToCommentMap = null;
    this.m_uniqueCount = 0;
    this.m_commentText = "";
}

CommentManager.prototype.getId = function () {
    return this.m_id;
};

CommentManager.prototype.getJqContainer = function () {
    return this.m_jqContainer;
};

CommentManager.prototype.setJqContainer = function (jqCont) {
    this.m_jqContainer = jqCont;
};

CommentManager.prototype.getCommentText = function () {
    return this.m_commentText;
};

CommentManager.prototype.setCommentText = function (text) {
    this.m_commentText = text;
};

CommentManager.prototype.getExistingCommentList = function () {
    if (!this.m_existingCommentList) {
        this.m_existingCommentList = [];
    }
    return this.m_existingCommentList;
};

CommentManager.prototype.setExistingCommentList = function (list) {
    this.m_existingCommentList = list;
};

CommentManager.prototype.getPendingCommentList = function () {
    if (!this.m_pendingCommentList) {
        this.m_pendingCommentList = [];
    }
    return this.m_pendingCommentList;
};

CommentManager.prototype.setPendingCommentList = function (list) {
    this.m_pendingCommentList = list;
};
CommentManager.prototype.getFullCommentList = function () {
    var fullCommentList = [];
    fullCommentList.push.apply(fullCommentList, this.getExistingCommentList());
    fullCommentList.push.apply(fullCommentList, this.getPendingCommentList());
    return fullCommentList;
};

CommentManager.prototype.getIdToCommentMap = function () {
    if (!this.m_idToCommentMap) {
        this.m_idToCommentMap = {};
    }
    return this.m_idToCommentMap;
};

CommentManager.prototype.setIdToCommentMap = function (map) {
    this.m_idToCommentMap = map;
};

CommentManager.prototype.reset = function () {
    this.setJqContainer(null);
    this.setExistingCommentList(null);
    this.setPendingCommentList(null);
    this.setIdToCommentMap(null);
    this.getCommentText(null);
};

CommentManager.prototype.buildNewCommentSection = function () {
    var id = this.getId();
    var myi18n = i18n.discernabu.anticoaginitiation_o1;
    var html = "";
    var commentText = this.getCommentText() || "";

    html += "<div id='" + id + "NewCommentContainer' class='acio1-new-comment-outer'>";
    //Text inner
    html += "<input type='text' value='" + (commentText || "Add new comment") + "' class='acio1-new-comment-input' maxlength='255' />";
    html += "<div class='acio1-new-comment-info-cont hide'>";
    html += "<div id='" + id + "NewCommentCharacterCount' class='acio1-comment-character-count'>" + myi18n.CHARACTERS_LEFT.replace("{0}", 255) + "</div>";
    html += "<div class='acio1-comment-btn-cont'>";
    html += "<input type='button' class='comment-mgr-new-comment-save-btn acio1-btn' value='" + myi18n.SAVE + "' />";
    html += "<input type='button' class='comment-mgr-new-comment-cancel-btn acio1-btn' value='" + myi18n.CANCEL + "' />";
    html += "</div>";
    html += "</div>";
    html += "</div>";
    return html;
};

CommentManager.prototype.buildAllCommentRowsHTML = function () {
    var fullCommentList = this.getFullCommentList();
    var fLen = fullCommentList.length;
    var i;
    var html = "";

    for (i = 0; i < fLen; i++) {
        html += this.buildCommentRowHTML(fullCommentList[i]);
    }

    return html;
};

CommentManager.prototype.buildCommentRowHTML = function (comment) {
    if (!comment) {
        return "";
    }
    var id = this.getId();
    var commentId = id + "Comment" + (++this.m_uniqueCount);
    var idToCommentMap = this.getIdToCommentMap();
    var dateFormatter = MP_Util.GetDateFormatter();
    var fullDate4Year = mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR;
    var html = "";

    //Get Comment Date
    var commentDate = comment.COMMENT_DATE || "";

    if (commentDate) {
        commentDate = dateFormatter.format(commentDate, fullDate4Year);
    }

    //Container
    html += "<div id='" + commentId + "' class='comment-manager-comment-cont'>";
    //Comment text/buttons row
    html += "<div class='comment-manager-comment-text-row'>";
    html += "<span class='comment-manager-comment-text-content'>" + comment.COMMENT_TEXT + "</span>";
    html += "<span class='comment-manager-comment-text-buttons'><span class='comment-manager-comment-edit-btn'>&nbsp;</span><span class='comment-manager-comment-delete-btn'>&nbsp;</span></span>";
    html += "</div>";
    html += "<div class='comment-manager-comment-text-info secondary-text'>" + comment.PRSNL_NAME + " " + commentDate + "</div>";
    html += "</div>";

    idToCommentMap[commentId] = comment;

    return html;
};

CommentManager.prototype.appendComment = function (comment) {
    var jqContainer = this.getJqContainer();
    if (!jqContainer || !jqContainer.length) {
        return;
    }
    var html = this.buildCommentRowHTML(comment);
    if (html) {
        jqContainer.append(html);
    }

};

CommentManager.prototype.attachEventListeners = function () {
    var self = this;
    var jqContainer = this.getJqContainer();
    if (!jqContainer || !jqContainer.length) {
        return;
    }
    var myi18n = i18n.discernabu.anticoaginitiation_o1;
    var id = this.getId();
    //Closures for the New Comment Entry Box
    var initialNewCommentText = myi18n.ADD_NEW_COMMENT;
    var initShouldShowDefault = true;

    var jqNewCommentCharacterCount = $("#" + id + "NewCommentCharacterCount");

    function routeTask(event) {
        var jqCurrentTarget = $(event.currentTarget);
        var eventType = event.type;
        var comment = null;

        /*
         New Comment Input (Focus)
         */
        if (eventType === 'focusin' && jqCurrentTarget.hasClass("acio1-new-comment-input")) {
            if (initShouldShowDefault || jqCurrentTarget.val().length === 0) {
                jqCurrentTarget.val("");
                jqCurrentTarget.addClass("acio1-comment-input-edited");
                jqCurrentTarget.next(".acio1-new-comment-info-cont").removeClass("hide");
            } else {
                jqCurrentTarget.addClass("acio1-comment-input-edited");
                jqCurrentTarget.next(".acio1-new-comment-info-cont").removeClass("hide");
            }
        }
        /*
         New Comment Input (Blur)
         */
        else if (eventType === 'focusout' && jqCurrentTarget.hasClass("acio1-new-comment-input")) {
            initShouldShowDefault = (!jqCurrentTarget.val().length);
            if (initShouldShowDefault) {
                jqCurrentTarget.val(initialNewCommentText);
                jqCurrentTarget.removeClass("acio1-comment-input-edited");
                jqCurrentTarget.next(".acio1-new-comment-info-cont").addClass("hide");
            }
        }
        /*
         New Comment Input (Key Up)
         */
        else if (eventType === 'keyup' && jqCurrentTarget.hasClass("acio1-new-comment-input")) {
            var txtLen = jqCurrentTarget.val().length;
            //Grab character count
            jqNewCommentCharacterCount.text(myi18n.CHARACTERS_LEFT.replace("{0}", (255 - txtLen)));
        }
        /*
         Comment Save Button
         */
        else if (eventType === 'click' && jqCurrentTarget.hasClass("comment-mgr-new-comment-save-btn")) {
            //Grab textbox
            var jqCommentInput = jqCurrentTarget.closest(".acio1-new-comment-outer").children("input");
            self.setCommentText(jqCommentInput.val());
            jqCommentInput.next(".acio1-new-comment-info-cont").addClass("hide");
            jqCommentInput.blur();
            //comment = self.handleAddNewComment(jqCommentInput.val());
            //self.appendComment(comment);
            //jqCommentInput.val("");
            //jqCommentInput.keyup();
            //jqCommentInput.blur();
        }
    }

    jqContainer.on("focus blur keyup", "input.acio1-new-comment-input", function (event) {
        routeTask(event);
    });

    jqContainer.on("click", "input.acio1-btn", function (event) {
        routeTask(event);
    });

};

CommentManager.prototype.handleAddNewComment = function (commentText) {
    if (!commentText) {
        return;
    }

    var comment = {
        COMMENT_DATE_TIME: "2014-07-18:18:20:10Z"
        , COMMENT_DATE: null
        , PRSNL_NAME: "Radek, Christopher"
        , COMMENT_TEXT: ""
    };

    var pendingCommentList = this.getPendingCommentList();
    comment.COMMENT_DATE = new Date();
    comment.COMMENT_TEXT = commentText;

    pendingCommentList.push(comment);

    return comment;
};

CommentManager.prototype.initialize = function () {
    var jqContainer = this.getJqContainer();
    if (!jqContainer || !jqContainer.length) {
        return;
    }
    var html = "";

    //Insert the new comment section first
    html += this.buildNewCommentSection();
    //html += this.buildAllCommentRowsHTML();

    //Insert HTML into the container
    jqContainer.html(html);

    //Attach event listeners
    this.attachEventListeners();

};

function TableSelectChangeExtension() {
    this.callback = function (event, data) {
        return;
    };
    return this;
}

TableSelectChangeExtension.prototype = new TableExtension();
TableSelectChangeExtension.prototype.constructor = TableSelectChangeExtension;

TableSelectChangeExtension.prototype.setSelectChangeCallback = function (callback) {
    if (typeof callback != 'function') {
        throw new Error("In TableSelectChangeExtension, attempted to setCallback() with non function type");
    }
    this.callback = callback;
    return this;
};

TableSelectChangeExtension.prototype.finalize = function (table) {
    var self = this;
    var namespace = table.getNamespace();
    var resultData = null;
    var columnId = "";
    var data = {};
    $("#" + namespace + "tableBody").on("change", "select", function (event) {
        resultData = ComponentTableDataRetriever.getResultFromTable(table, $(this).closest(".table-cell"));
        columnId = ComponentTableDataRetriever.getColumnIdFromElement(table, $(this).closest(".table-cell"));

        data = {
            "COLUMN_ID" : columnId
            , "RESULT_DATA" : resultData
            , "SOURCE" : "TableSelectChangeExtension:SELECT_CHANGE"
        };
        self.callback(event, data);
    });
};

function TableInputBlurExtension() {
    this.callback = function (event, data) {
        return;
    };
    return this;
}

TableInputBlurExtension.prototype = new TableExtension();
TableInputBlurExtension.prototype.constructor = TableInputBlurExtension;

TableInputBlurExtension.prototype.setInputBlurCallback = function (callback) {
    if (typeof callback !== 'function') {
        throw new Error("In TableInputBlurExtension, attempted to setCallback() with non function type");
    }
    this.callback = callback;
    return this;
};

TableInputBlurExtension.prototype.finalize = function (table) {
    var self = this;
    var namespace = table.getNamespace();
    var resultData = null;
    var columnId = "";
    var data = {};
    $("#" + namespace + "tableBody").on("blur", "input", function (event) {
        resultData = ComponentTableDataRetriever.getResultFromTable(table, $(this).closest(".table-cell"));
        columnId = ComponentTableDataRetriever.getColumnIdFromElement(table, $(this).closest(".table-cell"));

        data = {
            "COLUMN_ID" : columnId
            , "RESULT_DATA" : resultData
            , "SOURCE" : "TableInputBlurExtension:INPUT_BLUR"
        };
        self.callback(event, data);
    });
};


if (typeof TableElementHoverExtension !== 'function') {
    function TableElementHoverExtension() {
        this.templateMap = {};
        return this;
    }

    TableElementHoverExtension.prototype = new HoverExtension();
    TableElementHoverExtension.prototype.constructor = TableElementHoverExtension;

    TableElementHoverExtension.prototype.addHoverForElement = function (elementClass, renderer) {
        if (!elementClass) {
            throw new Error("Called addHoverForColumn on TableElementHoverExtension with null element for element parameter");
        }
        this.templateMap[elementClass] = HoverRenderFactory.getHoverRenderer(renderer);
        this.setTarget("." + elementClass);
    };

    TableElementHoverExtension.prototype.showHover = function (event, table, anchor) {
        var data = {};
        var templateMap = this.templateMap;
        var jqAnchor = $(anchor);
        var hoverRenderer = null;
        for (var key in templateMap) {
            if (templateMap.hasOwnProperty(key)) {
                if (jqAnchor.hasClass(key)) {
                    hoverRenderer = templateMap[key];
                    break;
                }
            }
        }

        if (!hoverRenderer) {
            return;
        }
        data.RESULT_DATA = ComponentTableDataRetriever.getResultFromTable(table, jqAnchor.closest("dl.result-info").get(0));
        data.ELEMENT_CLASS = key;
        data.SOURCE = "TableElementHoverExtension:ELEMENT_HOVER";
        data.EVENT = event;
        var content = hoverRenderer.render(data);
        if (!content) {
            return;
        }
        var tooltip = this.getTooltip();
        tooltip.setX(event.pageX).setY(event.pageY).setAnchor(anchor).setContent(content);
        tooltip.show();
    };
}

(function (baseComponent) {

    if (typeof i18n == "undefined") {
        var i18n = {};
    }

    if (typeof i18n.discernabu == "undefined") {
        i18n.discernabu = {};
    }

    i18n.discernabu.notification_manager = {
        WARNING: "Warning"
        , ERROR: "Error"
        , ALERT: "Alert"
        , INFO: "Info"
    };

    /**
     * Object that controls the display of visual notifications.
     * @param {string|number} id - Needs to be a unique identifier
     * @constructor
     */
    function NotificationManager(id) {
        this.m_jqContainer = null;
        this.m_id = id;
        this.m_typeToIdMap = null;
        this.m_uniqueCount = 0;
    }

    /**
     * Enumerates the type of notifications that can show.
     * @type {{ERROR: number, WARNING: number}}
     */
    NotificationManager.prototype.NOTIFICATION_TYPES = {
        ERROR: 1
        , ALERT: 2
        , WARNING: 3
        , INFO: 4
    };

    /**
     * Gets the Notification Manager's id.
     * @returns {string|number} - id
     */
    NotificationManager.prototype.getId = function () {
        return this.m_id;
    };

    /**
     * Gets the jQuery container the Notification Manager uses to display alerts.
     * @returns {jQuery object} - jQuery object that acts as a container for notifications
     */
    NotificationManager.prototype.getJqContainer = function () {
        return this.m_jqContainer;
    };

    /**
     * Sets the jQuery container the Notification Manager uses to display alerts.
     * @param {jQuery object|null} jqCont - jQuery container to display alerts in.
     */
    NotificationManager.prototype.setJqContainer = function (jqCont) {
        this.m_jqContainer = jqCont;
    };

    /**
     * Gets the notification identifiers to html ids map.
     * @returns {Object} - identifier to html ids map
     */
    NotificationManager.prototype.getTypeToIdMap = function () {
        if (!this.m_typeToIdMap) {
            this.m_typeToIdMap = {};
        }
        return this.m_typeToIdMap;
    };

    /**
     * Sets the notification identifiers to html ids map.
     * Expected use-case is to null the existing map.
     * @param map {null|Object} - null or an existing map.
     */
    NotificationManager.prototype.setTypeToIdMap = function (map) {
        this.m_typeToIdMap = map;
    };

    /**
     * Builds the HTML for a Notification.
     * @param {{PRIMARY: string, SECONDARY: string}} message - message object to populate alert.
     * @param {number} flag - NotificationManager.prototype.NOTIFICATION_TYPES enumeration.
     * @returns {string} - notification html
     */
    NotificationManager.prototype.buildNotificationHTML = function (message, flag) {
        var myi18n = i18n.discernabu.notification_manager;
        var alertTypes = this.NOTIFICATION_TYPES;
        var alertCSS = "";
        var alertSecondaryCSS = "";
        var alertIconTitle = "";
        var html = "";

        switch (flag) {
            case alertTypes.ERROR:
                alertCSS = "notification-mgr-error-section";
                alertIconTitle = myi18n.ERROR;
                break;
            case alertTypes.ALERT:
                alertCSS = "notification-mgr-alert-section";
                alertIconTitle = myi18n.ALERT;
                break;
            case alertTypes.WARNING:
                alertCSS = "notification-mgr-warning-section";
                alertIconTitle = myi18n.WARNING;
                alertSecondaryCSS = "secondary-text";
                break;
            case alertTypes.INFO:
                alertCSS = "notification-mgr-info-section";
                alertIconTitle = myi18n.INFO;
                alertSecondaryCSS = "secondary-text";
                break;
            default:
                break;
        }

        html += "<div class='" + alertCSS + "'>";
        html += "<span class='notification-mgr-alert-icon' title='" + alertIconTitle + "'></span>";
        html += "<span class='notification-mgr-alert-message'>";

        if (typeof message.PRIMARY === 'string') {
            html += "<span class='notification-mgr-alert-primary'>" + message.PRIMARY + "</span>";
        }
        if (typeof message.SECONDARY === 'string') {
            html += "<span class='" + alertSecondaryCSS + "'>" + message.SECONDARY + "</span>";
        }
        html += "</span>";
        html += "</div>";

        return html;
    };

    /**
     * Visually appends an alert in the Notification Manager's jQuery Container.
     * If the identifier passed in already exists, then the existing notification will be updated.
     * @param {string} identifier - Identifier for a type of alert.
     * @param {{PRIMARY: string, SECONDARY: string}} message - message object to populate alert.
     * @param {number} flag - NotificationManager.prototype.NOTIFICATION_TYPES enumeration.
     */
    NotificationManager.prototype.appendNotification = function (identifier, message, flag) {
        var id = this.getId() || "";
        var jqContainer = this.getJqContainer();
        var typeToIdMap = this.getTypeToIdMap();
        var alertId;
        var html = "";

        if (!jqContainer || !jqContainer.length) {
            return;
        }

        //Check if alert already exists
        alertId = typeToIdMap[identifier];
        if (alertId) {
            //Update current alert
            html += this.buildNotificationHTML(message, flag);
            $("#" + alertId).html(html);
            return;
        }

        //Create new container div
        alertId = id + "Alert" + (++this.m_uniqueCount);
        html += "<div id='" + alertId + "' class='notification-mgr-section'>";
        html += this.buildNotificationHTML(message, flag);
        html += "</div>";

        //Append the alert
        jqContainer.append(html);
        typeToIdMap[identifier] = alertId;
    };

    /**
     * Visually removes an alert in the NotificationManager Manager's jQuery Container.
     * @param {string} identifier - Identifier for a type of notification.
     */
    NotificationManager.prototype.removeNotification = function (identifier) {
        var typeToIdMap = this.getTypeToIdMap();
        var alertId = typeToIdMap[identifier];

        if (!alertId) {
            return;
        }

        //Remove alert
        $("#" + alertId).remove();
        typeToIdMap[identifier] = null;
    };

    /**
     * Visually removes ALL notifications in the Notification Manager's jQuery Container.
     */
    NotificationManager.prototype.clearNotifications = function () {
        this.setTypeToIdMap(null);
        var jqContainer = this.getJqContainer();
        if (!jqContainer || !jqContainer.length) {
            return;
        }

        jqContainer.html("");
    };

    baseComponent.NotificationManager = NotificationManager;
})(DoseRowController);
/*****
ANTICOAG END
******/

/*******
Bilirubin Start
********/
if ( typeof i18n == "undefined") {
    var i18n = {};
}
if ( typeof i18n.discernabu == "undefined") {
    i18n.discernabu = {};
}
i18n.discernabu.bilirubin_o1 = {
    AGE: "Age",
    BHUTANI: "Bhutani",
    BHUTANI_TITLE: "Hour Specific Bilirubin RISK CHART for Term & Late-Preterm Infants",
    BIRTH: "Birth",
    BIRTH_TO_35_WEEK_GUIDELINE: "Exchange transfusion is generally recommended for levels 3-5 mg/dL above phototherapy levelsand should be determined by the attending neonatologist.",
    CONSIDER_EXCHANGE_TRANSFUSION: "Consider exchange transfusion",
    CONSIDER_EXCHANGE_TRANSFUSION_NEUROTOXICITY: "Consider exchange transfusion for \n NEUROTOXICITY RISK FACTORS",
    DAYS: "Days",
    DISCLAIMER: "These suggested levels represent a consensus but are based on limited evidence, and the levels shown are approximations.",
    HIGH_INTERMEDIATE_RISK: "High Intermediate Risk Zone",
    HIGH_RISK: "High Risk Zone",
    LOW_INTERMEDIATE_RISK: "Low Intermediate Risk Zone",
    LOW_RISK: "Low Risk Zone",
    NEUROTOXICITY_RISK_FACTORS: "NEUROTOXICITY RISK FACTORS",
    OVER_35_WEEKS_GUIDELINE: "These guidelines are based upon the 2004 AAP Clinical Practice Guideline. Obtain STAT NEONATOLOGY CONSULT if nearing exchange transfusion threshold",
    PRINT: "Print",
    TREATMENT_27_TITLE: "Hour-Specific Bilirubin THERAPY CHART for 27-30(6/7) Week Infants (or 1001-1500g)",
    TREATMENT_31_TITLE: "Hour-Specific Bilirubin THERAPY CHART for 31-34(6/7) Week Infants (or 1501-2500g)",
    TREATMENT_35_TITLE: "Hour-Specific Bilirubin THERAPY CHART for 35-37(6/7) Week Infants",
    TREATMENT_38_TITLE: "Hour-Specific Bilirubin THERAPY CHART for >= 38 Week Infants",
    TREATMENT_38_WEEKS_PLUS: "Treatment for >= 38 Week Infants",
    TREATMENT_27_WEEKS_OPTION: "Treatment for 27-30(6/7) Week Infants",
    TREATMENT_31_WEEKS_OPTION: "Treatment for 31-34(6/7) Week Infants",
    TREATMENT_35_WEEKS_OPTION: "Treatment for 35-37(6/7) Week Infants",
    TREATMENT_LESS_THAN_27_WEEKS_OPTION: "Treatment for <= 26(6/7) Week Infants",
    TREATMENT_LESS_THAN_27_WEEKS_TITLE: "Hour-Specific Bilirubin THERAPY CHART for <= 26(6/7) Week Infants (or <1000g)",
    SERUM_BILIRUBIN: "Serum Bilirubin",
    SEVERE_HYPERBILI_RISK_FACTORS: "SEVERE HYPERBILI RISK FACTORS",
    START_PHOTOTHERAPY: "Start inpatient phototherapy",
    START_PHOTOTHERAPY_NEUROTOXICITY: "Start phototherapy for NEUROTOXICITY RISK FACTORS",
    START_PHOTOTHERAPY_NEUROTOXICITY_OR_NO_RISK: "Start inpatient phototherapy for NEUROTOXICITY RISK FACTORS or outpatient for NO Risk Factors",
    YAXIS_TITLE: "Neonatal Serum Bilirubin",
    NO_DOB: "No Date of Birth charted."
};

var BGO1_P351_OPTIONS = {
    "bilirubin_es_cd_list": [18115886, 3995172]
    , "dob_es_cd": 20873418
};

var BGO1_T351B_OPTIONS = {

};

/**
 * Create the component style object which will be used to style various aspects of our component
 */
function BiliGraphsO1ComponentStyle(){
    this.initByNamespace("bgo1");
}

BiliGraphsO1ComponentStyle.prototype = new ComponentStyle();
BiliGraphsO1ComponentStyle.prototype.constructor = ComponentStyle;

/**
 * @constructor
 * Initialize the Existing Orders Intelligent Ordering Component
 * @param {criterion} criterion - The criterion object contains information needed to render the component
 */
function BiliGraphsO1Component(criterion){
    this.m_plot = null;
    this.m_rightPlot = null;
    this.m_leftPlot = null;
    this.m_printRightPlot = null;
    this.m_printLeftPlot = null;
    this.m_gestationalAgeInDays = 0;
    this.m_biliEventSetCodes = []
    this.m_gestationalAgeEventSetCodes = [];
    this.m_dobEsCd = 0;
    this.m_biliResultList = [];
    this.gestationalAgeResultList = [];
    this.m_biliResultsXYCoords = [];
    this.m_dateOfBirth = null;
    this.m_currentGraphName = "";
    this.m_jsonData = null;
    this.m_notificationManager = null;
}

BiliGraphsO1Component.prototype = new MPage.Component();
BiliGraphsO1Component.prototype.constructor = BiliGraphsO1Component;
BiliGraphsO1Component.prototype.base = MPage.Component.prototype;
BiliGraphsO1Component.name = "BiliGraphsO1Component";

BiliGraphsO1Component.prototype.getJSONData = function(){
	if(!this.m_jsonData){
		this.m_jsonData = this.buildJSONData();
	}
	return this.m_jsonData;
};

BiliGraphsO1Component.PLOT_LOCATION = {
    LEFT: 1
    , RIGHT: 2
};

BiliGraphsO1Component.DAYS_TO_TREATMENT_SORTED_ASC = [
    {
        GRAPH_NAME: "TREATMENT_LESS_THAN_27_WEEKS"
        , DAYS_UPPER_BOUND: 188
    }
    , {
        GRAPH_NAME: "TREATMENT_27_WEEKS"
        , DAYS_UPPER_BOUND: 216
    }
    , {
        GRAPH_NAME: "TREATMENT_31_WEEKS"
        , DAYS_UPPER_BOUND: 244
    }
    , {
        GRAPH_NAME: "TREATMENT_35_WEEKS"
        , DAYS_UPPER_BOUND: 265
    }
    , {
        GRAPH_NAME: "TREATMENT_38_WEEKS"
        , DAYS_UPPER_BOUND: 10000
    }
];

BiliGraphsO1Component.prototype.getNotificationManager = function() {
    if (!this.m_notificationManager) {
        this.m_notificationManager = new BiliGraphsO1Component.NotificationManager(this.getStyles().getId());
    }
    return this.m_notificationManager;
}

BiliGraphsO1Component.prototype.buildJSONData = function(){
	var data = {
GRAPH_SETTINGS: {
    TREATMENT_LESS_THAN_27_WEEKS: {
        REFERENCE: {
            UPPER_BOUND: [[0, 30], [348, 30]]
            , LOWER_BOUND: [[0, 0], [348, 0]]
            , FIRST_LEVEL: [[0,3.7],[1,3.76],[2,3.82],[3,3.88],[4,3.94],[5,4],[6,4.05],[7,4.11],[8,4.17],[9,4.23],[10,4.29],[11,4.35],[12,4.4],[13,4.46],[14,4.52],[15,4.58],[16,4.64],[17,4.7],[18,4.75],[19,4.81],[20,4.87],[21,4.93],[22,4.99],[23,5.05],[24,5.1],[25,5.16],[26,5.22],[27,5.28],[28,5.34],[29,5.4],[30,5.45],[31,5.51],[32,5.57],[33,5.63],[34,5.69],[35,5.75],[36,5.8],[37,5.86],[38,5.92],[39,5.98],[40,6.04],[41,6.1],[42,6.15],[43,6.21],[44,6.27],[45,6.33],[46,6.39],[47,6.45],[48,6.5],[49,6.55],[50,6.6],[51,6.64],[52,6.68],[53,6.72],[54,6.76],[55,6.8],[56,6.84],[57,6.88],[58,6.92],[59,6.96],[60,7],[61,7.04],[62,7.08],[63,7.12],[64,7.16],[65,7.19],[66,7.22],[67,7.25],[68,7.28],[69,7.31],[70,7.34],[71,7.37],[72,7.4],[73,7.43],[74,7.45],[75,7.47],[76,7.49],[77,7.51],[78,7.53],[79,7.55],[80,7.57],[81,7.59],[82,7.61],[83,7.63],[84,7.65],[85,7.67],[86,7.69],[87,7.71],[88,7.73],[89,7.75],[90,7.77],[91,7.79],[92,7.81],[93,7.82],[94,7.83],[95,7.84],[96,7.85],[97,7.86],[98,7.87],[99,7.88],[100,7.89],[101,7.9],[102,7.91],[103,7.92],[104,7.93],[105,7.93],[106,7.94],[107,7.94],[108,7.95],[109,7.95],[110,7.96],[111,7.96],[112,7.97],[113,7.97],[114,7.97],[115,7.98],[116,7.98],[117,7.98],[118,7.99],[119,7.99],[120,7.99],[121,8],[122,8],[123,8],[124,8],[125,8],[126,8],[127,8],[128,8],[129,8],[130,8],[131,8],[132,8],[133,8],[134,8],[135,8],[136,8],[137,8],[138,8],[139,8],[140,8],[141,8],[142,8],[143,8],[144,8],[145,8],[146,8],[147,8],[148,8],[149,8],[150,8],[151,8],[152,8],[153,8],[154,8],[155,8],[156,8],[157,8],[158,8],[159,8],[160,8],[161,8],[162,8],[163,8],[164,8],[165,8],[166,8],[167,8],[168,8],[169,8],[170,8],[171,8],[172,8],[173,8],[174,8],[175,8],[176,8],[177,8],[178,8],[179,8],[180,8],[181,8],[182,8],[183,8],[184,8],[185,8],[186,8],[187,8],[188,8],[189,8],[190,8],[191,8],[192,8],[193,8],[194,8],[195,8],[196,8],[197,8],[198,8],[199,8],[200,8],[201,8],[202,8],[203,8],[204,8],[205,8],[206,8],[207,8],[208,8],[209,8],[210,8],[211,8],[212,8],[213,8],[214,8],[215,8],[216,8],[217,8],[218,8],[219,8],[220,8],[221,8],[222,8],[223,8],[224,8],[225,8],[226,8],[227,8],[228,8],[229,8],[230,8],[231,8],[232,8],[233,8],[234,8],[235,8],[236,8],[237,8],[238,8],[239,8],[240,8],[241,8],[242,8],[243,8],[244,8],[245,8],[246,8],[247,8],[248,8],[249,8],[250,8],[251,8],[252,8],[253,8],[254,8],[255,8],[256,8],[257,8],[258,8],[259,8],[260,8],[261,8],[262,8],[263,8],[264,8],[265,8],[266,8],[267,8],[268,8],[269,8],[270,8],[271,8],[272,8],[273,8],[274,8],[275,8],[276,8],[277,8],[278,8],[279,8],[280,8],[281,8],[282,8],[283,8],[284,8],[285,8],[286,8],[287,8],[288,8],[289,8],[290,8],[291,8],[292,8],[293,8],[294,8],[295,8],[296,8],[297,8],[298,8],[299,8],[300,8],[301,8],[302,8],[303,8],[304,8],[305,8],[306,8],[307,8],[308,8],[309,8],[310,8],[311,8],[312,8],[313,8],[314,8],[315,8],[316,8],[317,8],[318,8],[319,8],[320,8],[321,8],[322,8],[323,8],[324,8],[325,8],[326,8],[327,8],[328,8],[329,8],[330,8],[331,8],[332,8],[333,8],[334,8],[335,8],[336,8],[337,8],[338,8],[339,8],[340,8],[341,8],[342,8],[343,8],[344,8],[345,8],[346,8],[347,8],[348,8]]
            , SECOND_LEVEL: [[0,4.5],[1,4.59],[2,4.68],[3,4.77],[4,4.86],[5,4.95],[6,5.04],[7,5.12],[8,5.2],[9,5.28],[10,5.36],[11,5.44],[12,5.52],[13,5.6],[14,5.68],[15,5.76],[16,5.84],[17,5.92],[18,6],[19,6.08],[20,6.16],[21,6.24],[22,6.32],[23,6.4],[24,6.48],[25,6.55],[26,6.62],[27,6.69],[28,6.75],[29,6.81],[30,6.87],[31,6.93],[32,6.99],[33,7.05],[34,7.11],[35,7.17],[36,7.23],[37,7.29],[38,7.35],[39,7.4],[40,7.45],[41,7.5],[42,7.55],[43,7.6],[44,7.65],[45,7.7],[46,7.75],[47,7.8],[48,7.85],[49,7.9],[50,7.95],[51,8],[52,8.05],[53,8.1],[54,8.15],[55,8.2],[56,8.25],[57,8.3],[58,8.35],[59,8.4],[60,8.45],[61,8.5],[62,8.55],[63,8.6],[64,8.65],[65,8.7],[66,8.75],[67,8.8],[68,8.85],[69,8.9],[70,8.95],[71,9],[72,9.05],[73,9.1],[74,9.15],[75,9.2],[76,9.25],[77,9.3],[78,9.35],[79,9.39],[80,9.43],[81,9.47],[82,9.51],[83,9.55],[84,9.58],[85,9.61],[86,9.64],[87,9.67],[88,9.69],[89,9.72],[90,9.75],[91,9.77],[92,9.79],[93,9.81],[94,9.83],[95,9.85],[96,9.87],[97,9.89],[98,9.91],[99,9.92],[100,9.93],[101,9.94],[102,9.95],[103,9.96],[104,9.97],[105,9.98],[106,9.99],[107,10],[108,10],[109,10],[110,10],[111,10],[112,10],[113,10],[114,10],[115,10],[116,10],[117,10],[118,10],[119,10],[120,10],[121,10],[122,10],[123,10],[124,10],[125,10],[126,10],[127,10],[128,10],[129,10],[130,10],[131,10],[132,10],[133,10],[134,10],[135,10],[136,10],[137,10],[138,10],[139,10],[140,10],[141,10],[142,10],[143,10],[144,10],[145,10],[146,10],[147,10],[148,10],[149,10],[150,10],[151,10],[152,10],[153,10],[154,10],[155,10],[156,10],[157,10],[158,10],[159,10],[160,10],[161,10],[162,10],[163,10],[164,10],[165,10],[166,10],[167,10],[168,10],[169,10],[170,10],[171,10],[172,10],[173,10],[174,10],[175,10],[176,10],[177,10],[178,10],[179,10],[180,10],[181,10],[182,10],[183,10],[184,10],[185,10],[186,10],[187,10],[188,10],[189,10],[190,10],[191,10],[192,10],[193,10],[194,10],[195,10],[196,10],[197,10],[198,10],[199,10],[200,10],[201,10],[202,10],[203,10],[204,10],[205,10],[206,10],[207,10],[208,10],[209,10],[210,10],[211,10],[212,10],[213,10],[214,10],[215,10],[216,10],[217,10],[218,10],[219,10],[220,10],[221,10],[222,10],[223,10],[224,10],[225,10],[226,10],[227,10],[228,10],[229,10],[230,10],[231,10],[232,10],[233,10],[234,10],[235,10],[236,10],[237,10],[238,10],[239,10],[240,10],[241,10],[242,10],[243,10],[244,10],[245,10],[246,10],[247,10],[248,10],[249,10],[250,10],[251,10],[252,10],[253,10],[254,10],[255,10],[256,10],[257,10],[258,10],[259,10],[260,10],[261,10],[262,10],[263,10],[264,10],[265,10],[266,10],[267,10],[268,10],[269,10],[270,10],[271,10],[272,10],[273,10],[274,10],[275,10],[276,10],[277,10],[278,10],[279,10],[280,10],[281,10],[282,10],[283,10],[284,10],[285,10],[286,10],[287,10],[288,10],[289,10],[290,10],[291,10],[292,10],[293,10],[294,10],[295,10],[296,10],[297,10],[298,10],[299,10],[300,10],[301,10],[302,10],[303,10],[304,10],[305,10],[306,10],[307,10],[308,10],[309,10],[310,10],[311,10],[312,10],[313,10],[314,10],[315,10],[316,10],[317,10],[318,10],[319,10],[320,10],[321,10],[322,10],[323,10],[324,10],[325,10],[326,10],[327,10],[328,10],[329,10],[330,10],[331,10],[332,10],[333,10],[334,10],[335,10],[336,10],[337,10],[338,10],[339,10],[340,10],[341,10],[342,10],[343,10],[344,10],[345,10],[346,10],[347,10],[348,10]]
        }
        , TEXT_BOXES: [
            {
                color: "#FFFFFF"
                , type: "guideline"
                , content: "<div class='bgo1-jqplot-text-box-guideline'>"
                + "<div>Exchange transfusion is generally recommended for levels 3-5 mg/dL above phototherapy levels and should be determined by the attending neonatologist.</div>"
                + "</div>"
            }
            , {
                color: "#ff8585"
                , type: "treatment"
                , seqFromRight: 0
                , content: "<div class='bgo1-jqplot-text-box-title'>NEUROTOXICITY RISK FACTORS</div>"
                    + "<div>Hemolysis (Isoimmune, G6PD)</div>"
                    + "<div>Asphyxia or Acidosis</div>"
                    + "<div>Respiratory Distress</div>"
                    + "<div>Sepsis, Significant Lethargy,</div>"
                    + "<div>Temperature Instability</div>"
                    + "<div>Hypoalbuminemia (<3.0 g/dL)</div>"
            }
        ]
        , JQPLOT_SETTINGS: {
            title: "Hour-Specific Bilirubin THERAPY CHART for <= 26(6/7) Week Infants (or <1000g)"
            , seriesColors: [
                "#000000"
            ]
            , fillBetween: {
                series1: [1, 2]
                , series2: [2, 3]
                , color: [
                    "#ffff9b"
                    , "#ffff00"

                ]
            }
            , grid: {
                background: 'transparent'
                , renderer: $.jqplot.AdvancedCanvasGridRenderer
            }
            , axes: {
                yaxis: {
                    show: true
                    , label: "Neonatal Serum Bilirubin (mg/dL)"
                    , labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                    , min: 0
                    , max: 30
                    , numberTicks: 30
                    , ticks: [
                        [0, '0']
                        , [5, '5']
                        , [10, '10']
                        , [15, '15']
                        , [20, '20']
                        , [25, '25']
                        , [30, '30']
                    ]
                    , tickOptions: {
                        mark: 'outside'
                    }
                    , lineColor: "#555555"
                    , lineWidth: 2
                }
            , xaxis: {
                show: true
                , label: "Age"
                , labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                , min: 0
                , max: 348 //hours
                , ticks: [
                		[0, "Birth"]
                		,[24, "24h"]	
                		,[48, "48h"]	
                		,[72, "72h"]	
                		,[96, "96h"]	
                		,[120, "5 Days"]	
                		,[144, "6 Days"]	
                		,[168, "7 Days"]	
                		,[192, "8 Days"]	
                		,[216, "9 Days"]	
                		,[240, "10 Days"]	
                		,[264, "11 Days"]	
                		,[288, "12 Days"]	
                		,[312, "13 Days"]	
                		,[336, "14 Days"]	
                		,[348, ""]
                ]
                , lineColor: "#555555"
                , lineWidth: 1
            }
            , x2axis: {
                show: true
                , min: 0
                , max: 348
                , numberTicks: 59
                , showTicks: false
                , lineColor: "#aaaaaa"
            }
                , y2axis: {
                    show: true
                    , min: 0
                    , max: 30
                    , numberTicks: 31
                    , showTicks: false
                    , lineColor: "#aaaaaa"
                }
            }
            , seriesDefaults: {
                lineWidth: 1
                , showMarker: false
                , showHighlight: false
            }
            , series: [
                {//lower bound
                    show: false
                }
                , {//First Level
                    label: "Start phototherapy for NEUROTOXICITY RISK FACTORS"
                    , linePattern: "dashed"
                }
                , {//second level
                    label: "Start inpatient phototherapy"
                    , linePattern: "dashed"
                }
                , {//upper bound
                    show: false
                }
                , {//Results
                    label: "Results"
                    , show: false
                    , showLine: false
                    , showMarker: true
                    , showHighlight: true
                }
            ]
            , highlighter: {
                show: true
                , sizedAdjust: 7.5
                , tooltipLocation: 'se'
                , useAxesFormatters: false
                , tooltipContentEditor: function (str, seriesIndex, pointIndex, plot) {
                    var point = plot.data[seriesIndex][pointIndex];
                    var hours = point[0];
                    var val = point[1];
                    var html = "<div>Age: " + hours + " hours</div>";
                    html += "<div>Serum Bilirubin: " + val + " mg/dL</div>";
                    return html;
                }
            }
            , legend: {
                show: true
                , renderer: $.jqplot.AdvancedTableLegendRenderer
                , rendererOptions: {
                    swatchColors: [
                        "#ffff9b"
                        , "#ffff00"
                        , "#FFFFFF"
                    ]
                    , invert: true
                    , location: "nw"
                }
            }
        }
    }
    , TREATMENT_27_WEEKS: {
        REFERENCE: {
            UPPER_BOUND: [[0, 30], [348, 30]]
            , LOWER_BOUND: [[0, 0], [348, 0]]
            , FIRST_LEVEL: [[0,3.67],[1,3.78],[2,3.89],[3,4],[4,4.1],[5,4.2],[6,4.3],[7,4.39],[8,4.48],[9,4.57],[10,4.66],[11,4.75],[12,4.84],[13,4.93],[14,5.02],[15,5.11],[16,5.2],[17,5.29],[18,5.38],[19,5.47],[20,5.56],[21,5.65],[22,5.74],[23,5.83],[24,5.92],[25,6.01],[26,6.1],[27,6.19],[28,6.28],[29,6.37],[30,6.46],[31,6.55],[32,6.64],[33,6.73],[34,6.82],[35,6.91],[36,7],[37,7.08],[38,7.16],[39,7.24],[40,7.32],[41,7.4],[42,7.48],[43,7.55],[44,7.62],[45,7.69],[46,7.76],[47,7.83],[48,7.9],[49,7.96],[50,8.02],[51,8.08],[52,8.14],[53,8.2],[54,8.26],[55,8.34],[56,8.4],[57,8.45],[58,8.5],[59,8.55],[60,8.6],[61,8.65],[62,8.7],[63,8.74],[64,8.78],[65,8.82],[66,8.86],[67,8.9],[68,8.94],[69,8.98],[70,9.02],[71,9.06],[72,9.1],[73,9.14],[74,9.18],[75,9.22],[76,9.26],[77,9.3],[78,9.34],[79,9.38],[80,9.42],[81,9.46],[82,9.49],[83,9.52],[84,9.55],[85,9.58],[86,9.6],[87,9.62],[88,9.64],[89,9.66],[90,9.68],[91,9.7],[92,9.72],[93,9.74],[94,9.76],[95,9.78],[96,9.8],[97,9.82],[98,9.84],[99,9.86],[100,9.87],[101,9.88],[102,9.89],[103,9.9],[104,9.91],[105,9.92],[106,9.93],[107,9.94],[108,9.95],[109,9.96],[110,9.97],[111,9.98],[112,9.99],[113,10],[114,10],[115,10],[116,10],[117,10],[118,10],[119,10],[120,10],[121,10],[122,10],[123,10],[124,10],[125,10],[126,10],[127,10],[128,10],[129,10],[130,10],[131,10],[132,10],[133,10],[134,10],[135,10],[136,10],[137,10],[138,10],[139,10],[140,10],[141,10],[142,10],[143,10],[144,10],[145,10],[146,10],[147,10],[148,10],[149,10],[150,10],[151,10],[152,10],[153,10],[154,10],[155,10],[156,10],[157,10],[158,10],[159,10],[160,10],[161,10],[162,10],[163,10],[164,10],[165,10],[166,10],[167,10],[168,10],[169,10],[170,10],[171,10],[172,10],[173,10],[174,10],[175,10],[176,10],[177,10],[178,10],[179,10],[180,10],[181,10],[182,10],[183,10],[184,10],[185,10],[186,10],[187,10],[188,10],[189,10],[190,10],[191,10],[192,10],[193,10],[194,10],[195,10],[196,10],[197,10],[198,10],[199,10],[200,10],[201,10],[202,10],[203,10],[204,10],[205,10],[206,10],[207,10],[208,10],[209,10],[210,10],[211,10],[212,10],[213,10],[214,10],[215,10],[216,10],[217,10],[218,10],[219,10],[220,10],[221,10],[222,10],[223,10],[224,10],[225,10],[226,10],[227,10],[228,10],[229,10],[230,10],[231,10],[232,10],[233,10],[234,10],[235,10],[236,10],[237,10],[238,10],[239,10],[240,10],[241,10],[242,10],[243,10],[244,10],[245,10],[246,10],[247,10],[248,10],[249,10],[250,10],[251,10],[252,10],[253,10],[254,10],[255,10],[256,10],[257,10],[258,10],[259,10],[260,10],[261,10],[262,10],[263,10],[264,10],[265,10],[266,10],[267,10],[268,10],[269,10],[270,10],[271,10],[272,10],[273,10],[274,10],[275,10],[276,10],[277,10],[278,10],[279,10],[280,10],[281,10],[282,10],[283,10],[284,10],[285,10],[286,10],[287,10],[288,10],[289,10],[290,10],[291,10],[292,10],[293,10],[294,10],[295,10],[296,10],[297,10],[298,10],[299,10],[300,10],[301,10],[302,10],[303,10],[304,10],[305,10],[306,10],[307,10],[308,10],[309,10],[310,10],[311,10],[312,10],[313,10],[314,10],[315,10],[316,10],[317,10],[318,10],[319,10],[320,10],[321,10],[322,10],[323,10],[324,10],[325,10],[326,10],[327,10],[328,10],[329,10],[330,10],[331,10],[332,10],[333,10],[334,10],[335,10],[336,10],[337,10],[338,10],[339,10],[340,10],[341,10],[342,10],[343,10],[344,10],[345,10],[346,10],[347,10],[348,10]]
            , SECOND_LEVEL: [[0,5],[1,5.11],[2,5.22],[3,5.33],[4,5.44],[5,5.55],[6,5.66],[7,5.77],[8,5.88],[9,6],[10,6.1],[11,6.2],[12,6.3],[13,6.41],[14,6.52],[15,6.63],[16,6.74],[17,6.84],[18,6.94],[19,7.04],[20,7.13],[21,7.22],[22,7.31],[23,7.4],[24,7.49],[25,7.58],[26,7.67],[27,7.76],[28,7.85],[29,7.94],[30,8.03],[31,8.12],[32,8.21],[33,8.3],[34,8.39],[35,8.48],[36,8.57],[37,8.66],[38,8.75],[39,8.84],[40,8.93],[41,9.01],[42,9.09],[43,9.17],[44,9.24],[45,9.31],[46,9.38],[47,9.45],[48,9.52],[49,9.59],[50,9.66],[51,9.73],[52,9.8],[53,9.87],[54,9.94],[55,10.01],[56,10.08],[57,10.15],[58,10.22],[59,10.29],[60,10.35],[61,10.42],[62,10.49],[63,10.56],[64,10.63],[65,10.71],[66,10.77],[67,10.83],[68,10.89],[69,10.95],[70,11.01],[71,11.07],[72,11.13],[73,11.19],[74,11.25],[75,11.3],[76,11.35],[77,11.4],[78,11.45],[79,11.5],[80,11.55],[81,11.6],[82,11.64],[83,11.68],[84,11.72],[85,11.76],[86,11.8],[87,11.84],[88,11.88],[89,11.92],[90,11.95],[91,11.98],[92,12.01],[93,12.04],[94,12.06],[95,12.08],[96,12.1],[97,12.12],[98,12.14],[99,12.16],[100,12.18],[101,12.2],[102,12.22],[103,12.24],[104,12.26],[105,12.28],[106,12.29],[107,12.3],[108,12.3],[109,12.3],[110,12.3],[111,12.3],[112,12.3],[113,12.3],[114,12.3],[115,12.3],[116,12.3],[117,12.3],[118,12.3],[119,12.3],[120,12.3],[121,12.3],[122,12.3],[123,12.3],[124,12.3],[125,12.3],[126,12.3],[127,12.3],[128,12.3],[129,12.3],[130,12.3],[131,12.3],[132,12.3],[133,12.3],[134,12.3],[135,12.3],[136,12.3],[137,12.3],[138,12.3],[139,12.3],[140,12.3],[141,12.3],[142,12.3],[143,12.3],[144,12.3],[145,12.3],[146,12.3],[147,12.3],[148,12.3],[149,12.3],[150,12.3],[151,12.3],[152,12.3],[153,12.3],[154,12.3],[155,12.3],[156,12.3],[157,12.3],[158,12.3],[159,12.3],[160,12.3],[161,12.3],[162,12.3],[163,12.3],[164,12.3],[165,12.3],[166,12.3],[167,12.3],[168,12.3],[169,12.3],[170,12.3],[171,12.3],[172,12.3],[173,12.3],[174,12.3],[175,12.3],[176,12.3],[177,12.3],[178,12.3],[179,12.3],[180,12.3],[181,12.3],[182,12.3],[183,12.3],[184,12.3],[185,12.3],[186,12.3],[187,12.3],[188,12.3],[189,12.3],[190,12.3],[191,12.3],[192,12.3],[193,12.3],[194,12.3],[195,12.3],[196,12.3],[197,12.3],[198,12.3],[199,12.3],[200,12.3],[201,12.3],[202,12.3],[203,12.3],[204,12.3],[205,12.3],[206,12.3],[207,12.3],[208,12.3],[209,12.3],[210,12.3],[211,12.3],[212,12.3],[213,12.3],[214,12.3],[215,12.3],[216,12.3],[217,12.3],[218,12.3],[219,12.3],[220,12.3],[221,12.3],[222,12.3],[223,12.3],[224,12.3],[225,12.3],[226,12.3],[227,12.3],[228,12.3],[229,12.3],[230,12.3],[231,12.3],[232,12.3],[233,12.3],[234,12.3],[235,12.3],[236,12.3],[237,12.3],[238,12.3],[239,12.3],[240,12.3],[241,12.3],[242,12.3],[243,12.3],[244,12.3],[245,12.3],[246,12.3],[247,12.3],[248,12.3],[249,12.3],[250,12.3],[251,12.3],[252,12.3],[253,12.3],[254,12.3],[255,12.3],[256,12.3],[257,12.3],[258,12.3],[259,12.3],[260,12.3],[261,12.3],[262,12.3],[263,12.3],[264,12.3],[265,12.3],[266,12.3],[267,12.3],[268,12.3],[269,12.3],[270,12.3],[271,12.3],[272,12.3],[273,12.3],[274,12.3],[275,12.3],[276,12.3],[277,12.3],[278,12.3],[279,12.3],[280,12.3],[281,12.3],[282,12.3],[283,12.3],[284,12.3],[285,12.3],[286,12.3],[287,12.3],[288,12.3],[289,12.3],[290,12.3],[291,12.3],[292,12.3],[293,12.3],[294,12.3],[295,12.3],[296,12.3],[297,12.3],[298,12.3],[299,12.3],[300,12.3],[301,12.3],[302,12.3],[303,12.3],[304,12.3],[305,12.3],[306,12.3],[307,12.3],[308,12.3],[309,12.3],[310,12.3],[311,12.3],[312,12.3],[313,12.3],[314,12.3],[315,12.3],[316,12.3],[317,12.3],[318,12.3],[319,12.3],[320,12.3],[321,12.3],[322,12.3],[323,12.3],[324,12.3],[325,12.3],[326,12.3],[327,12.3],[328,12.3],[329,12.3],[330,12.3],[331,12.3],[332,12.3],[333,12.3],[334,12.3],[335,12.3],[336,12.3],[337,12.3],[338,12.3],[339,12.3],[340,12.3],[341,12.3],[342,12.3],[343,12.3],[344,12.3],[345,12.3],[346,12.3],[347,12.3],[348,12.3]]
        }
        , TEXT_BOXES: [
            {
                color: "#FFFFFF"
                , type: "guideline"
                , content: "<div class='bgo1-jqplot-text-box-guideline'>"
                + "<div>Exchange transfusion is generally recommended for levels 3-5 mg/dL above phototherapy levelsand should be determined by the attending neonatologist.</div>"
                + "</div>"
            }
            , {
                color: "#ff8585"
                , type: "treatment"
                , seqFromRight: 0
                , content: "<div class='bgo1-jqplot-text-box-title'>NEUROTOXICITY RISK FACTORS</div>"
                    + "<div>Hemolysis (Isoimmune, G6PD)</div>"
                    + "<div>Asphyxia or Acidosis</div>"
                    + "<div>Respiratory Distress</div>"
                    + "<div>Sepsis, Significant Lethargy,</div>"
                    + "<div>Temperature Instability</div>"
                    + "<div>Hypoalbuminemia (<3.0 g/dL)</div>"
            }
        ]
        , JQPLOT_SETTINGS: {
            title: "Hour-Specific Bilirubin THERAPY CHART for 27-30(6/7) Week Infants (or 1001-1500g)"
            , seriesColors: [
                "#000000"
            ]
            , fillBetween: {
                series1: [1, 2]
                , series2: [2, 3]
                , color: [
                    "#ffff9b"
                    , "#ffff00"

                ]
            }
            , grid: {
                background: 'transparent'
                , renderer: $.jqplot.AdvancedCanvasGridRenderer
            }
            , axes: {
                yaxis: {
                    show: true
                    , label: "Neonatal Serum Bilirubin (mg/dL)"
                    , labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                    , min: 0
                    , max: 30
                    , numberTicks: 30
                    , ticks: [
                        [0, '0']
                        , [5, '5']
                        , [10, '10']
                        , [15, '15']
                        , [20, '20']
                        , [25, '25']
                        , [30, '30']
                    ]
                    , tickOptions: {
                        mark: 'outside'
                    }
                    , lineColor: "#555555"
                    , lineWidth: 2
                }
            , xaxis: {
                show: true
                , label: "Age"
                , labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                , min: 0
                , max: 348 //hours
                , ticks: [
                		[0, "Birth"]
                		,[24, "24h"]	
                		,[48, "48h"]	
                		,[72, "72h"]	
                		,[96, "96h"]	
                		,[120, "5 Days"]	
                		,[144, "6 Days"]	
                		,[168, "7 Days"]	
                		,[192, "8 Days"]	
                		,[216, "9 Days"]	
                		,[240, "10 Days"]	
                		,[264, "11 Days"]	
                		,[288, "12 Days"]	
                		,[312, "13 Days"]	
                		,[336, "14 Days"]	
                		,[348, ""]
                ]
                , lineColor: "#555555"
                , lineWidth: 1
            }
            , x2axis: {
                show: true
                , min: 0
                , max: 348
                , numberTicks: 59
                , showTicks: false
                , lineColor: "#aaaaaa"
            }
                , y2axis: {
                    show: true
                    , min: 0
                    , max :30
                    , numberTicks: 31
                    , showTicks: false
                    , lineColor: "#aaaaaa"
                }
            }
            , seriesDefaults: {
                lineWidth: 1
                , showMarker: false
                , showHighlight: false
            }
            , series: [
                {//lower bound
                    show: false
                }
                , {//First Level
                    label: "Start phototherapy for NEUROTOXICITY RISK FACTORS"
                    , linePattern: "dashed"
                }
                , {//second level
                    label: "Start inpatient phototherapy"
                    , linePattern: "dashed"
                }
                , {//upper bound
                    show: false
                }
                , {//Results
                    label: "Results"
                    , show: false
                    , showLine: false
                    , showMarker: true
                    , showHighlight: true
                }
            ]
            , highlighter: {
                show: true
                , sizedAdjust: 7.5
                , tooltipLocation: 'se'
                , useAxesFormatters: false
                , tooltipContentEditor: function (str, seriesIndex, pointIndex, plot) {
                    var point = plot.data[seriesIndex][pointIndex];
                    var hours = point[0];
                    var val = point[1];
                    var html = "<div>Age: " + hours + " hours</div>";
                    html += "<div>Serum Bilirubin: " + val + " mg/dL</div>";
                    return html;
                }
            }
            , legend: {
                show: true
                , renderer: $.jqplot.AdvancedTableLegendRenderer
                , rendererOptions: {
                    swatchColors: [
                        "#ffff9b"
                        , "#ffff00"
                        , "#FFFFFF"
                    ]
                    , invert: true
                    , location: "nw"
                }
            }
        }
    }
    , TREATMENT_31_WEEKS: {
        REFERENCE: {
            UPPER_BOUND: [[0, 30], [348, 30]]
            , LOWER_BOUND: [[0, 0], [348, 0]]
            , FIRST_LEVEL: [[0,3.6],[1,3.7],[2,3.9],[3,4],[4,4.1],[5,4.3],[6,4.4],[7,4.5],[8,4.7],[9,4.8],[10,4.9],[11,5.1],[12,5.2],[13,5.3],[14,5.5],[15,5.6],[16,5.7],[17,5.9],[18,6],[19,6.1],[20,6.3],[21,6.4],[22,6.5],[23,6.7],[24,6.8],[25,6.9],[26,7],[27,7.2],[28,7.3],[29,7.4],[30,7.5],[31,7.6],[32,7.7],[33,7.8],[34,7.9],[35,8],[36,8.2],[37,8.3],[38,8.4],[39,8.5],[40,8.6],[41,8.8],[42,8.9],[43,9],[44,9.1],[45,9.2],[46,9.3],[47,9.4],[48,9.5],[49,9.6],[50,9.6],[51,9.7],[52,9.8],[53,9.9],[54,10],[55,10.1],[56,10.1],[57,10.2],[58,10.3],[59,10.4],[60,10.5],[61,10.5],[62,10.6],[63,10.7],[64,10.8],[65,10.8],[66,10.9],[67,11],[68,11],[69,11.1],[70,11.1],[71,11.2],[72,11.2],[73,11.3],[74,11.3],[75,11.4],[76,11.4],[77,11.5],[78,11.5],[79,11.6],[80,11.6],[81,11.6],[82,11.7],[83,11.7],[84,11.7],[85,11.8],[86,11.8],[87,11.8],[88,11.8],[89,11.8],[90,11.8],[91,11.9],[92,11.9],[93,11.9],[94,11.9],[95,11.9],[96,11.9],[97,11.9],[98,11.9],[99,12],[100,12],[101,12],[102,12],[103,12],[104,12],[105,12],[106,12],[107,12],[108,12],[109,12],[110,12],[111,12],[112,12],[113,12],[114,12],[115,12],[116,12],[117,12],[118,12],[119,12],[120,12],[121,12],[122,12],[123,12],[124,12],[125,12],[126,12],[127,12],[128,12],[129,12],[130,12],[131,12],[132,12],[133,12],[134,12],[135,12],[136,12],[137,12],[138,12],[139,12],[140,12],[141,12],[142,12],[143,12],[144,12],[145,12],[146,12],[147,12],[148,12],[149,12],[150,12],[151,12],[152,12],[153,12],[154,12],[155,12],[156,12],[157,12],[158,12],[159,12],[160,12],[161,12],[162,12],[163,12],[164,12],[165,12],[166,12],[167,12],[168,12],[169,12],[170,12],[171,12],[172,12],[173,12],[174,12],[175,12],[176,12],[177,12],[178,12],[179,12],[180,12],[181,12],[182,12],[183,12],[184,12],[185,12],[186,12],[187,12],[188,12],[189,12],[190,12],[191,12],[192,12],[193,12],[194,12],[195,12],[196,12],[197,12],[198,12],[199,12],[200,12],[201,12],[202,12],[203,12],[204,12],[205,12],[206,12],[207,12],[208,12],[209,12],[210,12],[211,12],[212,12],[213,12],[214,12],[215,12],[216,12],[217,12],[218,12],[219,12],[220,12],[221,12],[222,12],[223,12],[224,12],[225,12],[226,12],[227,12],[228,12],[229,12],[230,12],[231,12],[232,12],[233,12],[234,12],[235,12],[236,12],[237,12],[238,12],[239,12],[240,12],[241,12],[242,12],[243,12],[244,12],[245,12],[246,12],[247,12],[248,12],[249,12],[250,12],[251,12],[252,12],[253,12],[254,12],[255,12],[256,12],[257,12],[258,12],[259,12],[260,12],[261,12],[262,12],[263,12],[264,12],[265,12],[266,12],[267,12],[268,12],[269,12],[270,12],[271,12],[272,12],[273,12],[274,12],[275,12],[276,12],[277,12],[278,12],[279,12],[280,12],[281,12],[282,12],[283,12],[284,12],[285,12],[286,12],[287,12],[288,12],[289,12],[290,12],[291,12],[292,12],[293,12],[294,12],[295,12],[296,12],[297,12],[298,12],[299,12],[300,12],[301,12],[302,12],[303,12],[304,12],[305,12],[306,12],[307,12],[308,12],[309,12],[310,12],[311,12],[312,12],[313,12],[314,12],[315,12],[316,12],[317,12],[318,12],[319,12],[320,12],[321,12],[322,12],[323,12],[324,12],[325,12],[326,12],[327,12],[328,12],[329,12],[330,12],[331,12],[332,12],[333,12],[334,12],[335,12],[336,12],[337,12],[338,12],[339,12],[340,12],[341,12],[342,12],[343,12],[344,12],[345,12],[346,12],[347,12],[348,12]]
            , SECOND_LEVEL: [[0,5],[1,5.1],[2,5.3],[3,5.5],[4,5.7],[5,5.8],[6,5.9],[7,6.1],[8,6.2],[9,6.4],[10,6.5],[11,6.6],[12,6.8],[13,6.9],[14,7.1],[15,7.2],[16,7.4],[17,7.6],[18,7.7],[19,7.9],[20,8],[21,8.1],[22,8.3],[23,8.4],[24,8.5],[25,8.6],[26,8.8],[27,8.9],[28,9],[29,9.2],[30,9.3],[31,9.4],[32,9.6],[33,9.7],[34,9.8],[35,9.9],[36,10],[37,10.1],[38,10.2],[39,10.3],[40,10.4],[41,10.5],[42,10.6],[43,10.7],[44,10.8],[45,10.9],[46,11],[47,11.1],[48,11.2],[49,11.3],[50,11.4],[51,11.5],[52,11.6],[53,11.7],[54,11.8],[55,11.9],[56,12],[57,12.1],[58,12.2],[59,12.3],[60,12.3],[61,12.4],[62,12.5],[63,12.6],[64,12.7],[65,12.7],[66,12.8],[67,12.9],[68,13.1],[69,13.2],[70,13.2],[71,13.3],[72,13.3],[73,13.4],[74,13.5],[75,13.5],[76,13.6],[77,13.7],[78,13.7],[79,13.9],[80,13.9],[81,14],[82,14],[83,14.1],[84,14.1],[85,14.2],[86,14.2],[87,14.3],[88,14.3],[89,14.4],[90,14.4],[91,14.5],[92,14.5],[93,14.6],[94,14.6],[95,14.6],[96,14.7],[97,14.7],[98,14.7],[99,14.8],[100,14.8],[101,14.8],[102,14.8],[103,14.9],[104,14.9],[105,14.9],[106,14.9],[107,14.9],[108,15],[109,15],[110,15],[111,15],[112,15],[113,15],[114,15],[115,15],[116,15],[117,15],[118,15],[119,15],[120,15],[121,15],[122,15],[123,15],[124,15],[125,15],[126,15],[127,15],[128,15],[129,15],[130,15],[131,15],[132,15],[133,15],[134,15],[135,15],[136,15],[137,15],[138,15],[139,15],[140,15],[141,15],[142,15],[143,15],[144,15],[145,15],[146,15],[147,15],[148,15],[149,15],[150,15],[151,15],[152,15],[153,15],[154,15],[155,15],[156,15],[157,15],[158,15],[159,15],[160,15],[161,15],[162,15],[163,15],[164,15],[165,15],[166,15],[167,15],[168,15],[169,15],[170,15],[171,15],[172,15],[173,15],[174,15],[175,15],[176,15],[177,15],[178,15],[179,15],[180,15],[181,15],[182,15],[183,15],[184,15],[185,15],[186,15],[187,15],[188,15],[189,15],[190,15],[191,15],[192,15],[193,15],[194,15],[195,15],[196,15],[197,15],[198,15],[199,15],[200,15],[201,15],[202,15],[203,15],[204,15],[205,15],[206,15],[207,15],[208,15],[209,15],[210,15],[211,15],[212,15],[213,15],[214,15],[215,15],[216,15],[217,15],[218,15],[219,15],[220,15],[221,15],[222,15],[223,15],[224,15],[225,15],[226,15],[227,15],[228,15],[229,15],[230,15],[231,15],[232,15],[233,15],[234,15],[235,15],[236,15],[237,15],[238,15],[239,15],[240,15],[241,15],[242,15],[243,15],[244,15],[245,15],[246,15],[247,15],[248,15],[249,15],[250,15],[251,15],[252,15],[253,15],[254,15],[255,15],[256,15],[257,15],[258,15],[259,15],[260,15],[261,15],[262,15],[263,15],[264,15],[265,15],[266,15],[267,15],[268,15],[269,15],[270,15],[271,15],[272,15],[273,15],[274,15],[275,15],[276,15],[277,15],[278,15],[279,15],[280,15],[281,15],[282,15],[283,15],[284,15],[285,15],[286,15],[287,15],[288,15],[289,15],[290,15],[291,15],[292,15],[293,15],[294,15],[295,15],[296,15],[297,15],[298,15],[299,15],[300,15],[301,15],[302,15],[303,15],[304,15],[305,15],[306,15],[307,15],[308,15],[309,15],[310,15],[311,15],[312,15],[313,15],[314,15],[315,15],[316,15],[317,15],[318,15],[319,15],[320,15],[321,15],[322,15],[323,15],[324,15],[325,15],[326,15],[327,15],[328,15],[329,15],[330,15],[331,15],[332,15],[333,15],[334,15],[335,15],[336,15],[337,15],[338,15],[339,15],[340,15],[341,15],[342,15],[343,15],[344,15],[345,15],[346,15],[347,15],[348,15]]
        }
        , TEXT_BOXES: [
            {
                color: "#FFFFFF"
                , type: "guideline"
                , content: "<div class='bgo1-jqplot-text-box-guideline'>"
                + "<div>Exchange transfusion is generally recommended for levels 3-5 mg/dL above phototherapy levelsand should be determined by the attending neonatologist.</div>"
                + "</div>"
            }
            , {
                color: "#ff8585"
                , type: "treatment"
                , seqFromRight: 0
                , content: "<div class='bgo1-jqplot-text-box-title'>NEUROTOXICITY RISK FACTORS</div>"
                    + "<div>Hemolysis (Isoimmune, G6PD)</div>"
                    + "<div>Asphyxia or Acidosis</div>"
                    + "<div>Respiratory Distress</div>"
                    + "<div>Sepsis, Significant Lethargy,</div>"
                    + "<div>Temperature Instability</div>"
                    + "<div>Hypoalbuminemia (<3.0 g/dL)</div>"
            }
        ]
        , JQPLOT_SETTINGS: {
            title: "Hour-Specific Bilirubin THERAPY CHART for 31-34(6/7) Week Infants (or 1501-2500g)"
            , seriesColors: [
                "#000000"
            ]
            , fillBetween: {
                series1: [1, 2]
                , series2: [2, 3]
                , color: [
                    "#ffff9b"
                    , "#ffff00"

                ]
            }
            , grid: {
                background: 'transparent'
                , renderer: $.jqplot.AdvancedCanvasGridRenderer
            }
            , axes: {
                yaxis: {
                    show: true
                    , label: "Neonatal Serum Bilirubin (mg/dL)"
                    , labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                    , min: 0
                    , max: 30
                    , numberTicks: 30
                    , ticks: [
                        [0, '0']
                        , [5, '5']
                        , [10, '10']
                        , [15, '15']
                        , [20, '20']
                        , [25, '25']
                        , [30, '30']
                    ]
                    , tickOptions: {
                        mark: 'outside'
                    }
                    , lineColor: "#555555"
                    , lineWidth: 2
                }
	            , xaxis: {
	                show: true
	                , label: "Age"
	                , labelRenderer: $.jqplot.CanvasAxisLabelRenderer
	                , min: 0
	                , max: 348 //hours
	                , ticks: [
	                      	[0, "Birth"]
	                    	,[24, "24h"]	
	                    	,[48, "48h"]	
	                    	,[72, "72h"]	
	                    	,[96, "96h"]	
	                    	,[120, "5 Days"]	
	                    	,[144, "6 Days"]	
	                    	,[168, "7 Days"]	
	                    	,[192, "8 Days"]	
	                    	,[216, "9 Days"]	
	                    	,[240, "10 Days"]	
	                    	,[264, "11 Days"]	
	                    	,[288, "12 Days"]	
	                    	,[312, "13 Days"]	
	                    	,[336, "14 Days"]	
	                    	,[348, ""]
	                    ]
	                , lineColor: "#555555"
	                , lineWidth: 1
	            }
	            , x2axis: {
	                show: true
	                , min: 0
	                , max: 348
	                , numberTicks: 59
	                , showTicks: false
	                , lineColor: "#aaaaaa"
	            }
                , y2axis: {
                    show: true
                    , min: 0
                    , max :30
                    , numberTicks: 31
                    , showTicks: false
                    , lineColor: "#aaaaaa"
                }
            }
            , seriesDefaults: {
                lineWidth: 1
                , showMarker: false
                , showHighlight: false
            }
            , series: [
                {//lower bound
                    show: false
                }
                , {//First Level
                    label: "Start phototherapy for NEUROTOXICITY RISK FACTORS"
                    , linePattern: "dashed"
                }
                , {//second level
                    label: "Start inpatient phototherapy"
                    , linePattern: "dashed"
                }
                , {//upper bound
                    show: false
                }
                , {//Results
                    label: "Results"
                    , show: false
                    , showLine: false
                    , showMarker: true
                    , showHighlight: true
                }
            ]
            , highlighter: {
                show: true
                , sizedAdjust: 7.5
                , tooltipLocation: 'se'
                , useAxesFormatters: false
                , tooltipContentEditor: function (str, seriesIndex, pointIndex, plot) {
                    var point = plot.data[seriesIndex][pointIndex];
                    var hours = point[0];
                    var val = point[1];
                    var html = "<div>Age: " + hours + " hours</div>";
                    html += "<div>Serum Bilirubin: " + val + " mg/dL</div>";
                    return html;
                }
            }
            , legend: {
                show: true
                , renderer: $.jqplot.AdvancedTableLegendRenderer
                , rendererOptions: {
                    swatchColors: [
                        "#ffff9b"
                        , "#ffff00"
                        , "#FFFFFF"
                    ]
                    , invert: true
                    , location: "nw"
                }
            }
        }
    }
    , TREATMENT_35_WEEKS: {
        REFERENCE: {
            UPPER_BOUND: [[0, 30], [348, 30]]
            , LOWER_BOUND: [[0, 0], [348, 0]]
            , FIRST_LEVEL: [[0,3.7],[1,3.9],[2,4.1],[3,4.2],[4,4.4],[5,4.6],[6,4.7],[7,4.9],[8,5.1],[9,5.2],[10,5.4],[11,5.6],[12,5.7],[13,5.9],[14,6.1],[15,6.2],[16,6.4],[17,6.6],[18,6.7],[19,6.9],[20,7.1],[21,7.2],[22,7.4],[23,7.6],[24,7.7],[25,7.9],[26,8.1],[27,8.3],[28,8.4],[29,8.6],[30,8.7],[31,8.9],[32,9],[33,9.2],[34,9.3],[35,9.5],[36,9.6],[37,9.8],[38,9.9],[39,10.1],[40,10.2],[41,10.4],[42,10.5],[43,10.7],[44,10.8],[45,10.9],[46,11],[47,11.2],[48,11.3],[49,11.4],[50,11.6],[51,11.7],[52,11.8],[53,11.9],[54,12],[55,12.1],[56,12.2],[57,12.3],[58,12.4],[59,12.5],[60,12.6],[61,12.7],[62,12.8],[63,12.9],[64,13],[65,13],[66,13.1],[67,13.2],[68,13.3],[69,13.3],[70,13.4],[71,13.5],[72,13.5],[73,13.6],[74,13.6],[75,13.7],[76,13.7],[77,13.8],[78,13.8],[79,13.9],[80,13.9],[81,14],[82,14],[83,14.1],[84,14.1],[85,14.2],[86,14.2],[87,14.3],[88,14.3],[89,14.4],[90,14.4],[91,14.5],[92,14.5],[93,14.5],[94,14.6],[95,14.6],[96,14.6],[97,14.7],[98,14.7],[99,14.7],[100,14.7],[101,14.8],[102,14.8],[103,14.8],[104,14.8],[105,14.8],[106,14.8],[107,14.8],[108,14.9],[109,14.9],[110,14.9],[111,14.9],[112,14.9],[113,14.9],[114,14.9],[115,15],[116,15],[117,15],[118,15],[119,15],[120,15],[121,15],[122,15],[123,15],[124,15],[125,15],[126,15],[127,15],[128,15],[129,15],[130,15],[131,15],[132,15],[133,15],[134,15],[135,15],[136,15],[137,15],[138,15],[139,15],[140,15],[141,15],[142,15],[143,15],[144,15],[145,15],[146,15],[147,15],[148,15],[149,15],[150,15],[151,15],[152,15],[153,15],[154,15],[155,15],[156,15],[157,15],[158,15],[159,15],[160,15],[161,15],[162,15],[163,15],[164,15],[165,15],[166,15],[167,15],[168,15],[169,15],[170,15],[171,15],[172,15],[173,15],[174,15],[175,15],[176,15],[177,15],[178,15],[179,15],[180,15],[181,15],[182,15],[183,15],[184,15],[185,15],[186,15],[187,15],[188,15],[189,15],[190,15],[191,15],[192,15],[193,15],[194,15],[195,15],[196,15],[197,15],[198,15],[199,15],[200,15],[201,15],[202,15],[203,15],[204,15],[205,15],[206,15],[207,15],[208,15],[209,15],[210,15],[211,15],[212,15],[213,15],[214,15],[215,15],[216,15],[217,15],[218,15],[219,15],[220,15],[221,15],[222,15],[223,15],[224,15],[225,15],[226,15],[227,15],[228,15],[229,15],[230,15],[231,15],[232,15],[233,15],[234,15],[235,15],[236,15],[237,15],[238,15],[239,15],[240,15],[241,15],[242,15],[243,15],[244,15],[245,15],[246,15],[247,15],[248,15],[249,15],[250,15],[251,15],[252,15],[253,15],[254,15],[255,15],[256,15],[257,15],[258,15],[259,15],[260,15],[261,15],[262,15],[263,15],[264,15],[265,15],[266,15],[267,15],[268,15],[269,15],[270,15],[271,15],[272,15],[273,15],[274,15],[275,15],[276,15],[277,15],[278,15],[279,15],[280,15],[281,15],[282,15],[283,15],[284,15],[285,15],[286,15],[287,15],[288,15],[289,15],[290,15],[291,15],[292,15],[293,15],[294,15],[295,15],[296,15],[297,15],[298,15],[299,15],[300,15],[301,15],[302,15],[303,15],[304,15],[305,15],[306,15],[307,15],[308,15],[309,15],[310,15],[311,15],[312,15],[313,15],[314,15],[315,15],[316,15],[317,15],[318,15],[319,15],[320,15],[321,15],[322,15],[323,15],[324,15],[325,15],[326,15],[327,15],[328,15],[329,15],[330,15],[331,15],[332,15],[333,15],[334,15],[335,15],[336,15],[337,15],[338,15],[339,15],[340,15],[341,15],[342,15],[343,15],[344,15],[345,15],[346,15],[347,15],[348,15]]
            , SECOND_LEVEL: [[0,5],[1,5.2],[2,5.4],[3,5.6],[4,5.8],[5,6],[6,6.2],[7,6.4],[8,6.6],[9,6.8],[10,7],[11,7.2],[12,7.4],[13,7.6],[14,7.8],[15,8],[16,8.2],[17,8.4],[18,8.6],[19,8.8],[20,8.9],[21,9.1],[22,9.3],[23,9.5],[24,9.6],[25,9.8],[26,9.9],[27,10.1],[28,10.2],[29,10.4],[30,10.5],[31,10.7],[32,10.8],[33,11],[34,11.1],[35,11.3],[36,11.4],[37,11.5],[38,11.7],[39,11.8],[40,11.9],[41,12.1],[42,12.2],[43,12.3],[44,12.5],[45,12.6],[46,12.7],[47,12.8],[48,12.9],[49,13],[50,13.1],[51,13.2],[52,13.3],[53,13.5],[54,13.6],[55,13.7],[56,13.8],[57,13.9],[58,14.1],[59,14.2],[60,14.3],[61,14.4],[62,14.5],[63,14.6],[64,14.7],[65,14.8],[66,14.9],[67,15],[68,15.1],[69,15.2],[70,15.3],[71,15.4],[72,15.4],[73,15.5],[74,15.6],[75,15.7],[76,15.8],[77,15.9],[78,15.9],[79,16],[80,16.1],[81,16.2],[82,16.3],[83,16.3],[84,16.4],[85,16.5],[86,16.6],[87,16.6],[88,16.7],[89,16.8],[90,16.8],[91,16.9],[92,17],[93,17],[94,17.1],[95,17.2],[96,17.2],[97,17.3],[98,17.3],[99,17.4],[100,17.4],[101,17.4],[102,17.5],[103,17.5],[104,17.5],[105,17.6],[106,17.6],[107,17.6],[108,17.7],[109,17.7],[110,17.7],[111,17.7],[112,17.8],[113,17.8],[114,17.8],[115,17.8],[116,17.9],[117,17.9],[118,17.9],[119,17.9],[120,17.9],[121,18],[122,18],[123,18],[124,18],[125,18],[126,18],[127,18],[128,18],[129,18],[130,18],[131,18],[132,18],[133,18],[134,18],[135,18],[136,18],[137,18],[138,18],[139,18],[140,18],[141,18],[142,18],[143,18],[144,18],[145,18],[146,18],[147,18],[148,18],[149,18],[150,18],[151,18],[152,18],[153,18],[154,18],[155,18],[156,18],[157,18],[158,18],[159,18],[160,18],[161,18],[162,18],[163,18],[164,18],[165,18],[166,18],[167,18],[168,18],[169,18],[170,18],[171,18],[172,18],[173,18],[174,18],[175,18],[176,18],[177,18],[178,18],[179,18],[180,18],[181,18],[182,18],[183,18],[184,18],[185,18],[186,18],[187,18],[188,18],[189,18],[190,18],[191,18],[192,18],[193,18],[194,18],[195,18],[196,18],[197,18],[198,18],[199,18],[200,18],[201,18],[202,18],[203,18],[204,18],[205,18],[206,18],[207,18],[208,18],[209,18],[210,18],[211,18],[212,18],[213,18],[214,18],[215,18],[216,18],[217,18],[218,18],[219,18],[220,18],[221,18],[222,18],[223,18],[224,18],[225,18],[226,18],[227,18],[228,18],[229,18],[230,18],[231,18],[232,18],[233,18],[234,18],[235,18],[236,18],[237,18],[238,18],[239,18],[240,18],[241,18],[242,18],[243,18],[244,18],[245,18],[246,18],[247,18],[248,18],[249,18],[250,18],[251,18],[252,18],[253,18],[254,18],[255,18],[256,18],[257,18],[258,18],[259,18],[260,18],[261,18],[262,18],[263,18],[264,18],[265,18],[266,18],[267,18],[268,18],[269,18],[270,18],[271,18],[272,18],[273,18],[274,18],[275,18],[276,18],[277,18],[278,18],[279,18],[280,18],[281,18],[282,18],[283,18],[284,18],[285,18],[286,18],[287,18],[288,18],[289,18],[290,18],[291,18],[292,18],[293,18],[294,18],[295,18],[296,18],[297,18],[298,18],[299,18],[300,18],[301,18],[302,18],[303,18],[304,18],[305,18],[306,18],[307,18],[308,18],[309,18],[310,18],[311,18],[312,18],[313,18],[314,18],[315,18],[316,18],[317,18],[318,18],[319,18],[320,18],[321,18],[322,18],[323,18],[324,18],[325,18],[326,18],[327,18],[328,18],[329,18],[330,18],[331,18],[332,18],[333,18],[334,18],[335,18],[336,18],[337,18],[338,18],[339,18],[340,18],[341,18],[342,18],[343,18],[344,18],[345,18],[346,18],[347,18],[348,18]]
            , THIRD_LEVEL: [[0,12],[1,12.1],[2,12.3],[3,12.4],[4,12.5],[5,12.6],[6,12.7],[7,12.8],[8,12.9],[9,13],[10,13.1],[11,13.2],[12,13.3],[13,13.4],[14,13.6],[15,13.7],[16,13.8],[17,13.9],[18,14],[19,14.1],[20,14.2],[21,14.3],[22,14.4],[23,14.5],[24,14.6],[25,14.7],[26,14.8],[27,14.9],[28,15],[29,15.1],[30,15.2],[31,15.3],[32,15.4],[33,15.5],[34,15.6],[35,15.7],[36,15.8],[37,15.9],[38,16],[39,16.1],[40,16.2],[41,16.3],[42,16.4],[43,16.5],[44,16.6],[45,16.7],[46,16.8],[47,16.9],[48,17],[49,17.1],[50,17.1],[51,17.2],[52,17.3],[53,17.3],[54,17.4],[55,17.4],[56,17.5],[57,17.6],[58,17.6],[59,17.7],[60,17.7],[61,17.8],[62,17.8],[63,17.9],[64,18],[65,18],[66,18.1],[67,18.1],[68,18.2],[69,18.2],[70,18.3],[71,18.3],[72,18.4],[73,18.4],[74,18.5],[75,18.5],[76,18.6],[77,18.6],[78,18.6],[79,18.7],[80,18.7],[81,18.7],[82,18.7],[83,18.8],[84,18.8],[85,18.8],[86,18.8],[87,18.8],[88,18.9],[89,18.9],[90,18.9],[91,18.9],[92,18.9],[93,18.9],[94,18.9],[95,19],[96,19],[97,19],[98,19],[99,19],[100,19],[101,19],[102,19],[103,19],[104,19],[105,19],[106,19],[107,19],[108,19],[109,19],[110,19],[111,19],[112,19],[113,19],[114,19],[115,19],[116,19],[117,19],[118,19],[119,19],[120,19],[121,19],[122,19],[123,19],[124,19],[125,19],[126,19],[127,19],[128,19],[129,19],[130,19],[131,19],[132,19],[133,19],[134,19],[135,19],[136,19],[137,19],[138,19],[139,19],[140,19],[141,19],[142,19],[143,19],[144,19],[145,19],[146,19],[147,19],[148,19],[149,19],[150,19],[151,19],[152,19],[153,19],[154,19],[155,19],[156,19],[157,19],[158,19],[159,19],[160,19],[161,19],[162,19],[163,19],[164,19],[165,19],[166,19],[167,19],[168,19],[169,19],[170,19],[171,19],[172,19],[173,19],[174,19],[175,19],[176,19],[177,19],[178,19],[179,19],[180,19],[181,19],[182,19],[183,19],[184,19],[185,19],[186,19],[187,19],[188,19],[189,19],[190,19],[191,19],[192,19],[193,19],[194,19],[195,19],[196,19],[197,19],[198,19],[199,19],[200,19],[201,19],[202,19],[203,19],[204,19],[205,19],[206,19],[207,19],[208,19],[209,19],[210,19],[211,19],[212,19],[213,19],[214,19],[215,19],[216,19],[217,19],[218,19],[219,19],[220,19],[221,19],[222,19],[223,19],[224,19],[225,19],[226,19],[227,19],[228,19],[229,19],[230,19],[231,19],[232,19],[233,19],[234,19],[235,19],[236,19],[237,19],[238,19],[239,19],[240,19],[241,19],[242,19],[243,19],[244,19],[245,19],[246,19],[247,19],[248,19],[249,19],[250,19],[251,19],[252,19],[253,19],[254,19],[255,19],[256,19],[257,19],[258,19],[259,19],[260,19],[261,19],[262,19],[263,19],[264,19],[265,19],[266,19],[267,19],[268,19],[269,19],[270,19],[271,19],[272,19],[273,19],[274,19],[275,19],[276,19],[277,19],[278,19],[279,19],[280,19],[281,19],[282,19],[283,19],[284,19],[285,19],[286,19],[287,19],[288,19],[289,19],[290,19],[291,19],[292,19],[293,19],[294,19],[295,19],[296,19],[297,19],[298,19],[299,19],[300,19],[301,19],[302,19],[303,19],[304,19],[305,19],[306,19],[307,19],[308,19],[309,19],[310,19],[311,19],[312,19],[313,19],[314,19],[315,19],[316,19],[317,19],[318,19],[319,19],[320,19],[321,19],[322,19],[323,19],[324,19],[325,19],[326,19],[327,19],[328,19],[329,19],[330,19],[331,19],[332,19],[333,19],[334,19],[335,19],[336,19],[337,19],[338,19],[339,19],[340,19],[341,19],[342,19],[343,19],[344,19],[345,19],[346,19],[347,19],[348,19]]
            , FOURTH_LEVEL: [[0,13.9],[1,14],[2,14.1],[3,14.2],[4,14.3],[5,14.4],[6,14.5],[7,14.6],[8,14.7],[9,14.8],[10,14.9],[11,15],[12,15.2],[13,15.3],[14,15.4],[15,15.5],[16,15.6],[17,15.7],[18,15.8],[19,15.9],[20,16],[21,16.1],[22,16.2],[23,16.3],[24,16.4],[25,16.5],[26,16.6],[27,16.7],[28,16.8],[29,16.9],[30,17],[31,17.1],[32,17.2],[33,17.4],[34,17.5],[35,17.6],[36,17.7],[37,17.8],[38,17.9],[39,18],[40,18.1],[41,18.2],[42,18.3],[43,18.4],[44,18.5],[45,18.6],[46,18.7],[47,18.8],[48,18.9],[49,19],[50,19.1],[51,19.2],[52,19.3],[53,19.4],[54,19.5],[55,19.6],[56,19.7],[57,19.8],[58,19.9],[59,20],[60,20.1],[61,20.2],[62,20.3],[63,20.4],[64,20.5],[65,20.6],[66,20.7],[67,20.8],[68,20.9],[69,21],[70,21.1],[71,21.1],[72,21.2],[73,21.3],[74,21.4],[75,21.5],[76,21.5],[77,21.6],[78,21.7],[79,21.8],[80,21.8],[81,21.9],[82,22],[83,22],[84,22.1],[85,22.1],[86,22.2],[87,22.2],[88,22.2],[89,22.3],[90,22.3],[91,22.3],[92,22.4],[93,22.4],[94,22.4],[95,22.4],[96,22.5],[97,22.5],[98,22.5],[99,22.5],[100,22.5],[101,22.5],[102,22.5],[103,22.5],[104,22.5],[105,22.5],[106,22.5],[107,22.5],[108,22.5],[109,22.5],[110,22.5],[111,22.5],[112,22.5],[113,22.5],[114,22.5],[115,22.5],[116,22.5],[117,22.5],[118,22.5],[119,22.5],[120,22.5],[121,22.5],[122,22.5],[123,22.5],[124,22.5],[125,22.5],[126,22.5],[127,22.5],[128,22.5],[129,22.5],[130,22.5],[131,22.5],[132,22.5],[133,22.5],[134,22.5],[135,22.5],[136,22.5],[137,22.5],[138,22.5],[139,22.5],[140,22.5],[141,22.5],[142,22.5],[143,22.5],[144,22.5],[145,22.5],[146,22.5],[147,22.5],[148,22.5],[149,22.5],[150,22.5],[151,22.5],[152,22.5],[153,22.5],[154,22.5],[155,22.5],[156,22.5],[157,22.5],[158,22.5],[159,22.5],[160,22.5],[161,22.5],[162,22.5],[163,22.5],[164,22.5],[165,22.5],[166,22.5],[167,22.5],[168,22.5],[169,22.5],[170,22.5],[171,22.5],[172,22.5],[173,22.5],[174,22.5],[175,22.5],[176,22.5],[177,22.5],[178,22.5],[179,22.5],[180,22.5],[181,22.5],[182,22.5],[183,22.5],[184,22.5],[185,22.5],[186,22.5],[187,22.5],[188,22.5],[189,22.5],[190,22.5],[191,22.5],[192,22.5],[193,22.5],[194,22.5],[195,22.5],[196,22.5],[197,22.5],[198,22.5],[199,22.5],[200,22.5],[201,22.5],[202,22.5],[203,22.5],[204,22.5],[205,22.5],[206,22.5],[207,22.5],[208,22.5],[209,22.5],[210,22.5],[211,22.5],[212,22.5],[213,22.5],[214,22.5],[215,22.5],[216,22.5],[217,22.5],[218,22.5],[219,22.5],[220,22.5],[221,22.5],[222,22.5],[223,22.5],[224,22.5],[225,22.5],[226,22.5],[227,22.5],[228,22.5],[229,22.5],[230,22.5],[231,22.5],[232,22.5],[233,22.5],[234,22.5],[235,22.5],[236,22.5],[237,22.5],[238,22.5],[239,22.5],[240,22.5],[241,22.5],[242,22.5],[243,22.5],[244,22.5],[245,22.5],[246,22.5],[247,22.5],[248,22.5],[249,22.5],[250,22.5],[251,22.5],[252,22.5],[253,22.5],[254,22.5],[255,22.5],[256,22.5],[257,22.5],[258,22.5],[259,22.5],[260,22.5],[261,22.5],[262,22.5],[263,22.5],[264,22.5],[265,22.5],[266,22.5],[267,22.5],[268,22.5],[269,22.5],[270,22.5],[271,22.5],[272,22.5],[273,22.5],[274,22.5],[275,22.5],[276,22.5],[277,22.5],[278,22.5],[279,22.5],[280,22.5],[281,22.5],[282,22.5],[283,22.5],[284,22.5],[285,22.5],[286,22.5],[287,22.5],[288,22.5],[289,22.5],[290,22.5],[291,22.5],[292,22.5],[293,22.5],[294,22.5],[295,22.5],[296,22.5],[297,22.5],[298,22.5],[299,22.5],[300,22.5],[301,22.5],[302,22.5],[303,22.5],[304,22.5],[305,22.5],[306,22.5],[307,22.5],[308,22.5],[309,22.5],[310,22.5],[311,22.5],[312,22.5],[313,22.5],[314,22.5],[315,22.5],[316,22.5],[317,22.5],[318,22.5],[319,22.5],[320,22.5],[321,22.5],[322,22.5],[323,22.5],[324,22.5],[325,22.5],[326,22.5],[327,22.5],[328,22.5],[329,22.5],[330,22.5],[331,22.5],[332,22.5],[333,22.5],[334,22.5],[335,22.5],[336,22.5],[337,22.5],[338,22.5],[339,22.5],[340,22.5],[341,22.5],[342,22.5],[343,22.5],[344,22.5],[345,22.5],[346,22.5],[347,22.5],[348,22.5]]
        }
        , TEXT_BOXES: [
            {
                color: "#FFFFFF"
                , type: "guideline"
                , content: "<div class='bgo1-jqplot-text-box-guideline'>"
                + "<div>These guidelines are based upon the 2004 AAP Clinical Practice Guideline. Obtain STAT NEONATOLOGY CONSULT if nearing exchange transfusion threshold</div>"
                + "</div>"
            }
            , {
                color: "#ff8585"
                , type: "treatment"
                , seqFromRight: 0
                , content: "<div class='bgo1-jqplot-text-box-title'>NEUROTOXICITY RISK FACTORS</div>"
                    + "<div>Hemolysis (Isoimmune, G6PD)</div>"
                    + "<div>Asphyxia or Acidosis</div>"
                    + "<div>Respiratory Distress</div>"
                    + "<div>Sepsis, Significant Lethargy,</div>"
                    + "<div>Temperature Instability</div>"
                    + "<div>Hypoalbuminemia (<3.0 g/dL)</div>"
            }
            , {
                color: "#ffff00"
                , type: "bhutani"
                , seqFromRight: 1
                , content: "<div class='bgo1-jqplot-text-box-title'>SEVERE HYPERBILI RISK FACTORS</div>"
                    + "<div>Hemolysis (DAT/Coombs+, G6PD)</div>"
                    + "<div>Cephalohematoma, Sig. Bruising</div>"
                    + "<div>Previous sibling received phototherapy</div>"
                    + "<div>Exclusive breastfeeding, not going well and/or excessive weight loss</div>"
                    + "<div>East Asian, Amer. Indian, Pacific Islander</div>"
            }
        ]
        , JQPLOT_SETTINGS: {
            title: "Hour-Specific Bilirubin THERAPY CHART for 35-37(6/7) Week Infants"
            , seriesColors: [
                "#000000"
            ]
            , fillBetween: {
                series1: [1, 2, 3, 4]
                , series2: [2, 3, 4, 5]
                , color: [
                    "#ffff9b"
                    , "#ffff00"
                    , "#ffb9b9"
                    , "#ff8585"
                ]
            }
            , grid: {
                background: 'transparent'
                , renderer: $.jqplot.AdvancedCanvasGridRenderer
            }
            , axes: {
                yaxis: {
                    show: true
                    , label: "Neonatal Serum Bilirubin (mg/dL)"
                    , labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                    , min: 0
                    , max: 30
                    , numberTicks: 30
                    , ticks: [
                        [0, '0']
                        , [5, '5']
                        , [10, '10']
                        , [15, '15']
                        , [20, '20']
                        , [25, '25']
                        , [30, '30']
                    ]
                    , tickOptions: {
                        mark: 'outside'
                    }
                    , lineColor: "#555555"
                    , lineWidth: 2
                }
            , xaxis: {
                show: true
                , label: "Age"
                , labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                , min: 0
                , max: 348 //hours
                , ticks: [
                      	[0, "Birth"]
                    	,[24, "24h"]	
                    	,[48, "48h"]	
                    	,[72, "72h"]	
                    	,[96, "96h"]	
                    	,[120, "5 Days"]	
                    	,[144, "6 Days"]	
                    	,[168, "7 Days"]	
                    	,[192, "8 Days"]	
                    	,[216, "9 Days"]	
                    	,[240, "10 Days"]	
                    	,[264, "11 Days"]	
                    	,[288, "12 Days"]	
                    	,[312, "13 Days"]	
                    	,[336, "14 Days"]	
                    	,[348, ""]
                    ]
                , lineColor: "#555555"
                , lineWidth: 1
            }
            , x2axis: {
                show: true
                , min: 0
                , max: 348
                , numberTicks: 59
                , showTicks: false
                , lineColor: "#aaaaaa"
            }
                , y2axis: {
                    show: true
                    , min: 0
                    , max :30
                    , numberTicks: 31
                    , showTicks: false
                    , lineColor: "#aaaaaa"
                }
            }
            , seriesDefaults: {
                lineWidth: 1
                , showMarker: false
                , showHighlight: false
            }
            , series: [
                {//lower bound
                    show: false
                }
                , {//First Level
                    label: "Start inpatient phototherapy for NEUROTOXICITY RISK FACTORS or outpatient for NO Risk Factors"
                    , linePattern: "dashed"
                }
                , {//second level
                    label: "Start inpatient phototherapy"
                    , linePattern: "dashed"
                }
                , {//third level
                    linePattern: "dashed"
                    , label: "Consider exchange transfusion for \n NEUROTOXICITY RISK FACTORS"
                }
                , {//fourth level
                    linePattern: "solid"
                    , label: "Consider exchange transfusion"
                }
                , {//upper bound
                    show: false
                }
                , {//Results
                    label: "Results"
                    , show: false
                    , showLine: false
                    , showMarker: true
                    , showHighlight: true
                }
            ]
            , highlighter: {
                show: true
                , sizedAdjust: 7.5
                , tooltipLocation: 'se'
                , useAxesFormatters: false
                , tooltipContentEditor: function (str, seriesIndex, pointIndex, plot) {
                    var point = plot.data[seriesIndex][pointIndex];
                    var hours = point[0];
                    var val = point[1];
                    var html = "<div>Age: " + hours + " hours</div>";
                    html += "<div>Serum Bilirubin: " + val + " mg/dL</div>";
                    return html;
                }
            }
            , legend: {
                show: true
                , renderer: $.jqplot.AdvancedTableLegendRenderer
                , rendererOptions: {
                    swatchColors: [
                        "#ffff9b"
                        , "#ffff00"
                        , "#ffb9b9"
                        , "#ff8585"
                        , "#FFFFFF"
                    ]
                    , invert: true
                    , location: "nw"
                }
            }
        }
    }
    , TREATMENT_38_WEEKS: {
        REFERENCE: {
            UPPER_BOUND: [[0, 30], [348, 30]]
            , LOWER_BOUND: [[0, 0], [348, 0]]
            , FIRST_LEVEL: [[0,5],[1,5],[2,5.3],[3,5.5],[4,5.7],[5,5.9],[6,6.1],[7,6.3],[8,6.5],[9,6.7],[10,6.9],[11,7.1],[12,7.3],[13,7.5],[14,7.7],[15,7.9],[16,8.1],[17,8.3],[18,8.5],[19,8.7],[20,8.9],[21,9],[22,9.2],[23,9.4],[24,9.5],[25,9.7],[26,9.8],[27,10],[28,10.1],[29,10.3],[30,10.4],[31,10.6],[32,10.8],[33,10.9],[34,11.1],[35,11.2],[36,11.3],[37,11.4],[38,11.6],[39,11.7],[40,11.8],[41,12],[42,12.1],[43,12.3],[44,12.4],[45,12.5],[46,12.7],[47,12.8],[48,12.9],[49,13],[50,13.1],[51,13.2],[52,13.3],[53,13.4],[54,13.5],[55,13.6],[56,13.7],[57,13.8],[58,13.9],[59,14],[60,14.1],[61,14.2],[62,14.3],[63,14.4],[64,14.5],[65,14.5],[66,14.6],[67,14.7],[68,14.8],[69,14.9],[70,15],[71,15.1],[72,15.2],[73,15.3],[74,15.4],[75,15.4],[76,15.5],[77,15.6],[78,15.7],[79,15.8],[80,15.9],[81,15.9],[82,16],[83,16.1],[84,16.2],[85,16.3],[86,16.3],[87,16.4],[88,16.5],[89,16.5],[90,16.6],[91,16.7],[92,16.8],[93,16.8],[94,16.9],[95,17],[96,17.1],[97,17.1],[98,17.2],[99,17.3],[100,17.3],[101,17.4],[102,17.5],[103,17.5],[104,17.6],[105,17.6],[106,17.7],[107,17.7],[108,17.8],[109,17.8],[110,17.8],[111,17.8],[112,17.8],[113,17.9],[114,17.9],[115,17.9],[116,17.9],[117,17.9],[118,17.9],[119,17.9],[120,18],[121,18],[122,18],[123,18],[124,18],[125,18],[126,18],[127,18],[128,18],[129,18],[130,18],[131,18],[132,18],[133,18],[134,18],[135,18],[136,18],[137,18],[138,18],[139,18],[140,18],[141,18],[142,18],[143,18],[144,18],[145,18],[146,18],[147,18],[148,18],[149,18],[150,18],[151,18],[152,18],[153,18],[154,18],[155,18],[156,18],[157,18],[158,18],[159,18],[160,18],[161,18],[162,18],[163,18],[164,18],[165,18],[166,18],[167,18],[168,18],[169,18],[170,18],[171,18],[172,18],[173,18],[174,18],[175,18],[176,18],[177,18],[178,18],[179,18],[180,18],[181,18],[182,18],[183,18],[184,18],[185,18],[186,18],[187,18],[188,18],[189,18],[190,18],[191,18],[192,18],[193,18],[194,18],[195,18],[196,18],[197,18],[198,18],[199,18],[200,18],[201,18],[202,18],[203,18],[204,18],[205,18],[206,18],[207,18],[208,18],[209,18],[210,18],[211,18],[212,18],[213,18],[214,18],[215,18],[216,18],[217,18],[218,18],[219,18],[220,18],[221,18],[222,18],[223,18],[224,18],[225,18],[226,18],[227,18],[228,18],[229,18],[230,18],[231,18],[232,18],[233,18],[234,18],[235,18],[236,18],[237,18],[238,18],[239,18],[240,18],[241,18],[242,18],[243,18],[244,18],[245,18],[246,18],[247,18],[248,18],[249,18],[250,18],[251,18],[252,18],[253,18],[254,18],[255,18],[256,18],[257,18],[258,18],[259,18],[260,18],[261,18],[262,18],[263,18],[264,18],[265,18],[266,18],[267,18],[268,18],[269,18],[270,18],[271,18],[272,18],[273,18],[274,18],[275,18],[276,18],[277,18],[278,18],[279,18],[280,18],[281,18],[282,18],[283,18],[284,18],[285,18],[286,18],[287,18],[288,18],[289,18],[290,18],[291,18],[292,18],[293,18],[294,18],[295,18],[296,18],[297,18],[298,18],[299,18],[300,18],[301,18],[302,18],[303,18],[304,18],[305,18],[306,18],[307,18],[308,18],[309,18],[310,18],[311,18],[312,18],[313,18],[314,18],[315,18],[316,18],[317,18],[318,18],[319,18],[320,18],[321,18],[322,18],[323,18],[324,18],[325,18],[326,18],[327,18],[328,18],[329,18],[330,18],[331,18],[332,18],[333,18],[334,18],[335,18],[336,18],[337,18],[338,18],[339,18],[340,18],[341,18],[342,18],[343,18],[344,18],[345,18],[346,18],[347,18],[348,18]]
            , SECOND_LEVEL: [[0,7],[1,7],[2,7.2],[3,7.4],[4,7.6],[5,7.8],[6,8],[7,8.2],[8,8.4],[9,8.6],[10,8.8],[11,9],[12,9.2],[13,9.4],[14,9.6],[15,9.8],[16,10],[17,10.2],[18,10.4],[19,10.6],[20,10.8],[21,11.1],[22,11.3],[23,11.5],[24,11.7],[25,11.9],[26,12],[27,12.2],[28,12.3],[29,12.5],[30,12.7],[31,12.8],[32,13],[33,13.1],[34,13.3],[35,13.4],[36,13.6],[37,13.7],[38,13.9],[39,14],[40,14.2],[41,14.3],[42,14.5],[43,14.6],[44,14.7],[45,14.9],[46,15],[47,15.2],[48,15.3],[49,15.4],[50,15.5],[51,15.6],[52,15.7],[53,15.8],[54,16],[55,16.1],[56,16.2],[57,16.3],[58,16.4],[59,16.5],[60,16.6],[61,16.7],[62,16.8],[63,16.9],[64,17],[65,17.1],[66,17.2],[67,17.2],[68,17.3],[69,17.4],[70,17.5],[71,17.6],[72,17.7],[73,17.8],[74,17.9],[75,18],[76,18.1],[77,18.2],[78,18.3],[79,18.4],[80,18.5],[81,18.6],[82,18.7],[83,18.8],[84,18.9],[85,19],[86,19.1],[87,19.2],[88,19.2],[89,19.3],[90,19.4],[91,19.5],[92,19.6],[93,19.7],[94,19.7],[95,19.8],[96,19.9],[97,20],[98,20],[99,20.1],[100,20.1],[101,20.2],[102,20.3],[103,20.3],[104,20.4],[105,20.4],[106,20.5],[107,20.5],[108,20.6],[109,20.6],[110,20.7],[111,20.7],[112,20.7],[113,20.8],[114,20.8],[115,20.8],[116,20.9],[117,20.9],[118,20.9],[119,21],[120,21],[121,21],[122,21],[123,21],[124,21],[125,21],[126,21],[127,21],[128,21],[129,21],[130,21],[131,21],[132,21],[133,21],[134,21],[135,21],[136,21],[137,21],[138,21],[139,21],[140,21],[141,21],[142,21],[143,21],[144,21],[145,21],[146,21],[147,21],[148,21],[149,21],[150,21],[151,21],[152,21],[153,21],[154,21],[155,21],[156,21],[157,21],[158,21],[159,21],[160,21],[161,21],[162,21],[163,21],[164,21],[165,21],[166,21],[167,21],[168,21],[169,21],[170,21],[171,21],[172,21],[173,21],[174,21],[175,21],[176,21],[177,21],[178,21],[179,21],[180,21],[181,21],[182,21],[183,21],[184,21],[185,21],[186,21],[187,21],[188,21],[189,21],[190,21],[191,21],[192,21],[193,21],[194,21],[195,21],[196,21],[197,21],[198,21],[199,21],[200,21],[201,21],[202,21],[203,21],[204,21],[205,21],[206,21],[207,21],[208,21],[209,21],[210,21],[211,21],[212,21],[213,21],[214,21],[215,21],[216,21],[217,21],[218,21],[219,21],[220,21],[221,21],[222,21],[223,21],[224,21],[225,21],[226,21],[227,21],[228,21],[229,21],[230,21],[231,21],[232,21],[233,21],[234,21],[235,21],[236,21],[237,21],[238,21],[239,21],[240,21],[241,21],[242,21],[243,21],[244,21],[245,21],[246,21],[247,21],[248,21],[249,21],[250,21],[251,21],[252,21],[253,21],[254,21],[255,21],[256,21],[257,21],[258,21],[259,21],[260,21],[261,21],[262,21],[263,21],[264,21],[265,21],[266,21],[267,21],[268,21],[269,21],[270,21],[271,21],[272,21],[273,21],[274,21],[275,21],[276,21],[277,21],[278,21],[279,21],[280,21],[281,21],[282,21],[283,21],[284,21],[285,21],[286,21],[287,21],[288,21],[289,21],[290,21],[291,21],[292,21],[293,21],[294,21],[295,21],[296,21],[297,21],[298,21],[299,21],[300,21],[301,21],[302,21],[303,21],[304,21],[305,21],[306,21],[307,21],[308,21],[309,21],[310,21],[311,21],[312,21],[313,21],[314,21],[315,21],[316,21],[317,21],[318,21],[319,21],[320,21],[321,21],[322,21],[323,21],[324,21],[325,21],[326,21],[327,21],[328,21],[329,21],[330,21],[331,21],[332,21],[333,21],[334,21],[335,21],[336,21],[337,21],[338,21],[339,21],[340,21],[341,21],[342,21],[343,21],[344,21],[345,21],[346,21],[347,21],[348,21]]
            , THIRD_LEVEL: [[0,13.9],[1,13.9],[2,14],[3,14.1],[4,14.2],[5,14.3],[6,14.4],[7,14.5],[8,14.7],[9,14.8],[10,14.9],[11,15],[12,15.1],[13,15.2],[14,15.3],[15,15.4],[16,15.5],[17,15.6],[18,15.7],[19,15.8],[20,16],[21,16.1],[22,16.2],[23,16.3],[24,16.4],[25,16.5],[26,16.6],[27,16.7],[28,16.8],[29,16.9],[30,17.1],[31,17.2],[32,17.3],[33,17.4],[34,17.5],[35,17.6],[36,17.7],[37,17.8],[38,17.9],[39,18],[40,18.1],[41,18.2],[42,18.3],[43,18.4],[44,18.5],[45,18.6],[46,18.7],[47,18.8],[48,18.9],[49,19],[50,19.1],[51,19.2],[52,19.3],[53,19.4],[54,19.5],[55,19.6],[56,19.7],[57,19.8],[58,19.9],[59,20],[60,20.1],[61,20.2],[62,20.3],[63,20.4],[64,20.5],[65,20.6],[66,20.6],[67,20.7],[68,20.8],[69,20.9],[70,21],[71,21.1],[72,21.2],[73,21.2],[74,21.3],[75,21.4],[76,21.5],[77,21.5],[78,21.6],[79,21.7],[80,21.7],[81,21.8],[82,21.8],[83,21.9],[84,21.9],[85,22],[86,22],[87,22.1],[88,22.1],[89,22.1],[90,22.2],[91,22.2],[92,22.2],[93,22.3],[94,22.3],[95,22.3],[96,22.4],[97,22.4],[98,22.4],[99,22.5],[100,22.5],[101,22.5],[102,22.5],[103,22.5],[104,22.5],[105,22.5],[106,22.5],[107,22.5],[108,22.5],[109,22.5],[110,22.5],[111,22.5],[112,22.5],[113,22.5],[114,22.5],[115,22.5],[116,22.5],[117,22.5],[118,22.5],[119,22.5],[120,22.5],[121,22.5],[122,22.5],[123,22.5],[124,22.5],[125,22.5],[126,22.5],[127,22.5],[128,22.5],[129,22.5],[130,22.5],[131,22.5],[132,22.5],[133,22.5],[134,22.5],[135,22.5],[136,22.5],[137,22.5],[138,22.5],[139,22.5],[140,22.5],[141,22.5],[142,22.5],[143,22.5],[144,22.5],[145,22.5],[146,22.5],[147,22.5],[148,22.5],[149,22.5],[150,22.5],[151,22.5],[152,22.5],[153,22.5],[154,22.5],[155,22.5],[156,22.5],[157,22.5],[158,22.5],[159,22.5],[160,22.5],[161,22.5],[162,22.5],[163,22.5],[164,22.5],[165,22.5],[166,22.5],[167,22.5],[168,22.5],[169,22.5],[170,22.5],[171,22.5],[172,22.5],[173,22.5],[174,22.5],[175,22.5],[176,22.5],[177,22.5],[178,22.5],[179,22.5],[180,22.5],[181,22.5],[182,22.5],[183,22.5],[184,22.5],[185,22.5],[186,22.5],[187,22.5],[188,22.5],[189,22.5],[190,22.5],[191,22.5],[192,22.5],[193,22.5],[194,22.5],[195,22.5],[196,22.5],[197,22.5],[198,22.5],[199,22.5],[200,22.5],[201,22.5],[202,22.5],[203,22.5],[204,22.5],[205,22.5],[206,22.5],[207,22.5],[208,22.5],[209,22.5],[210,22.5],[211,22.5],[212,22.5],[213,22.5],[214,22.5],[215,22.5],[216,22.5],[217,22.5],[218,22.5],[219,22.5],[220,22.5],[221,22.5],[222,22.5],[223,22.5],[224,22.5],[225,22.5],[226,22.5],[227,22.5],[228,22.5],[229,22.5],[230,22.5],[231,22.5],[232,22.5],[233,22.5],[234,22.5],[235,22.5],[236,22.5],[237,22.5],[238,22.5],[239,22.5],[240,22.5],[241,22.5],[242,22.5],[243,22.5],[244,22.5],[245,22.5],[246,22.5],[247,22.5],[248,22.5],[249,22.5],[250,22.5],[251,22.5],[252,22.5],[253,22.5],[254,22.5],[255,22.5],[256,22.5],[257,22.5],[258,22.5],[259,22.5],[260,22.5],[261,22.5],[262,22.5],[263,22.5],[264,22.5],[265,22.5],[266,22.5],[267,22.5],[268,22.5],[269,22.5],[270,22.5],[271,22.5],[272,22.5],[273,22.5],[274,22.5],[275,22.5],[276,22.5],[277,22.5],[278,22.5],[279,22.5],[280,22.5],[281,22.5],[282,22.5],[283,22.5],[284,22.5],[285,22.5],[286,22.5],[287,22.5],[288,22.5],[289,22.5],[290,22.5],[291,22.5],[292,22.5],[293,22.5],[294,22.5],[295,22.5],[296,22.5],[297,22.5],[298,22.5],[299,22.5],[300,22.5],[301,22.5],[302,22.5],[303,22.5],[304,22.5],[305,22.5],[306,22.5],[307,22.5],[308,22.5],[309,22.5],[310,22.5],[311,22.5],[312,22.5],[313,22.5],[314,22.5],[315,22.5],[316,22.5],[317,22.5],[318,22.5],[319,22.5],[320,22.5],[321,22.5],[322,22.5],[323,22.5],[324,22.5],[325,22.5],[326,22.5],[327,22.5],[328,22.5],[329,22.5],[330,22.5],[331,22.5],[332,22.5],[333,22.5],[334,22.5],[335,22.5],[336,22.5],[337,22.5],[338,22.5],[339,22.5],[340,22.5],[341,22.5],[342,22.5],[343,22.5],[344,22.5],[345,22.5],[346,22.5],[347,22.5],[348,22.5]]
            , FOURTH_LEVEL: [[0,16],[1,16],[2,16.2],[3,16.3],[4,16.5],[5,16.6],[6,16.7],[7,16.9],[8,17],[9,17.1],[10,17.3],[11,17.4],[12,17.5],[13,17.6],[14,17.7],[15,17.9],[16,18],[17,18.1],[18,18.2],[19,18.4],[20,18.5],[21,18.6],[22,18.7],[23,18.8],[24,19],[25,19.2],[26,19.3],[27,19.4],[28,19.6],[29,19.7],[30,19.8],[31,19.9],[32,20],[33,20.2],[34,20.3],[35,20.4],[36,20.5],[37,20.7],[38,20.8],[39,20.9],[40,21],[41,21.2],[42,21.3],[43,21.4],[44,21.5],[45,21.7],[46,21.8],[47,21.9],[48,22],[49,22.1],[50,22.2],[51,22.3],[52,22.4],[53,22.5],[54,22.6],[55,22.7],[56,22.7],[57,22.8],[58,22.9],[59,23],[60,23.1],[61,23.2],[62,23.3],[63,23.3],[64,23.4],[65,23.5],[66,23.6],[67,23.6],[68,23.7],[69,23.8],[70,23.8],[71,23.9],[72,24],[73,24],[74,24.1],[75,24.1],[76,24.2],[77,24.2],[78,24.3],[79,24.3],[80,24.4],[81,24.4],[82,24.5],[83,24.5],[84,24.6],[85,24.6],[86,24.6],[87,24.7],[88,24.7],[89,24.7],[90,24.8],[91,24.8],[92,24.8],[93,24.9],[94,24.9],[95,24.9],[96,25],[97,25],[98,25],[99,25],[100,25],[101,25],[102,25],[103,25],[104,25],[105,25],[106,25],[107,25],[108,25],[109,25],[110,25],[111,25],[112,25],[113,25],[114,25],[115,25],[116,25],[117,25],[118,25],[119,25],[120,25],[121,25],[122,25],[123,25],[124,25],[125,25],[126,25],[127,25],[128,25],[129,25],[130,25],[131,25],[132,25],[133,25],[134,25],[135,25],[136,25],[137,25],[138,25],[139,25],[140,25],[141,25],[142,25],[143,25],[144,25],[145,25],[146,25],[147,25],[148,25],[149,25],[150,25],[151,25],[152,25],[153,25],[154,25],[155,25],[156,25],[157,25],[158,25],[159,25],[160,25],[161,25],[162,25],[163,25],[164,25],[165,25],[166,25],[167,25],[168,25],[169,25],[170,25],[171,25],[172,25],[173,25],[174,25],[175,25],[176,25],[177,25],[178,25],[179,25],[180,25],[181,25],[182,25],[183,25],[184,25],[185,25],[186,25],[187,25],[188,25],[189,25],[190,25],[191,25],[192,25],[193,25],[194,25],[195,25],[196,25],[197,25],[198,25],[199,25],[200,25],[201,25],[202,25],[203,25],[204,25],[205,25],[206,25],[207,25],[208,25],[209,25],[210,25],[211,25],[212,25],[213,25],[214,25],[215,25],[216,25],[217,25],[218,25],[219,25],[220,25],[221,25],[222,25],[223,25],[224,25],[225,25],[226,25],[227,25],[228,25],[229,25],[230,25],[231,25],[232,25],[233,25],[234,25],[235,25],[236,25],[237,25],[238,25],[239,25],[240,25],[241,25],[242,25],[243,25],[244,25],[245,25],[246,25],[247,25],[248,25],[249,25],[250,25],[251,25],[252,25],[253,25],[254,25],[255,25],[256,25],[257,25],[258,25],[259,25],[260,25],[261,25],[262,25],[263,25],[264,25],[265,25],[266,25],[267,25],[268,25],[269,25],[270,25],[271,25],[272,25],[273,25],[274,25],[275,25],[276,25],[277,25],[278,25],[279,25],[280,25],[281,25],[282,25],[283,25],[284,25],[285,25],[286,25],[287,25],[288,25],[289,25],[290,25],[291,25],[292,25],[293,25],[294,25],[295,25],[296,25],[297,25],[298,25],[299,25],[300,25],[301,25],[302,25],[303,25],[304,25],[305,25],[306,25],[307,25],[308,25],[309,25],[310,25],[311,25],[312,25],[313,25],[314,25],[315,25],[316,25],[317,25],[318,25],[319,25],[320,25],[321,25],[322,25],[323,25],[324,25],[325,25],[326,25],[327,25],[328,25],[329,25],[330,25],[331,25],[332,25],[333,25],[334,25],[335,25],[336,25],[337,25],[338,25],[339,25],[340,25],[341,25],[342,25],[343,25],[344,25],[345,25],[346,25],[347,25],[348,25]]
        }
        , TEXT_BOXES: [
            {
                color: "#FFFFFF"
                , type: "guideline"
                , content: "<div class='bgo1-jqplot-text-box-guideline'>"
                + "<div>These guidelines are based upon the 2004 AAP Clinical Practice Guideline. Obtain STAT NEONATOLOGY CONSULT if nearing exchange transfusion threshold</div>"
                + "</div>"
            }
            , {
                color: "#ff8585"
                , type: "treatment"
                , seqFromRight: 0
                , content: "<div class='bgo1-jqplot-text-box-title'>NEUROTOXICITY RISK FACTORS</div>"
                    + "<div>Hemolysis (Isoimmune, G6PD)</div>"
                    + "<div>Asphyxia or Acidosis</div>"
                    + "<div>Respiratory Distress</div>"
                    + "<div>Sepsis, Significant Lethargy,</div>"
                    + "<div>Temperature Instability</div>"
                    + "<div>Hypoalbuminemia (<3.0 g/dL)</div>"
            }
            , {
                color: "#ffff00"
                , type: "bhutani"
                , seqFromRight: 1
                , content: "<div class='bgo1-jqplot-text-box-title'>SEVERE HYPERBILI RISK FACTORS</div>"
                    + "<div>Hemolysis (DAT/Coombs+, G6PD)</div>"
                    + "<div>Cephalohematoma, Sig. Bruising</div>"
                    + "<div>Previous sibling received phototherapy</div>"
                    + "<div>Exclusive breastfeeding, not going well and/or excessive weight loss</div>"
                    + "<div>East Asian, Amer. Indian, Pacific Islander</div>"
            }
        ]
        , JQPLOT_SETTINGS: {
            title: "Hour-Specific Bilirubin THERAPY CHART for >= 38 Week Infants"
            , seriesColors: [
                "#000000"
            ]
            , fillBetween: {
                series1: [1, 2, 3, 4]
                , series2: [2, 3, 4, 5]
                , color: [
                    "#ffff9b"
                    , "#ffff00"
                    , "#ffb9b9"
                    , "#ff8585"
                ]
            }
            , grid: {
                background: 'transparent'
                , renderer: $.jqplot.AdvancedCanvasGridRenderer
            }
            , axes: {
                yaxis: {
                    show: true
                    , label: "Neonatal Serum Bilirubin (mg/dL)"
                    , labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                    , min: 0
                    , max: 30
                    , numberTicks: 30
                    , ticks: [
                        [0, '0']
                        , [5, '5']
                        , [10, '10']
                        , [15, '15']
                        , [20, '20']
                        , [25, '25']
                        , [30, '30']
                    ]
                    , tickOptions: {
                        mark: 'outside'
                    }
                    , lineColor: "#555555"
                    , lineWidth: 2
                }
                , xaxis: {
                    show: true
                    , label: "Age"
                    , labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                    , min: 0
                    , max: 348 //hours
                    , ticks: [
                          	[0, "Birth"]
                        	,[24, "24h"]	
                        	,[48, "48h"]	
                        	,[72, "72h"]	
                        	,[96, "96h"]	
                        	,[120, "5 Days"]	
                        	,[144, "6 Days"]	
                        	,[168, "7 Days"]	
                        	,[192, "8 Days"]	
                        	,[216, "9 Days"]	
                        	,[240, "10 Days"]	
                        	,[264, "11 Days"]	
                        	,[288, "12 Days"]	
                        	,[312, "13 Days"]	
                        	,[336, "14 Days"]	
                        	,[348, ""]
                        ]
                    , lineColor: "#555555"
                    , lineWidth: 1
                }
                , x2axis: {
                    show: true
                    , min: 0
                    , max: 348
                    , numberTicks: 59
                    , showTicks: false
                    , lineColor: "#aaaaaa"
                }
                , y2axis: {
                    show: true
                    , min: 0
                    , max: 30
                    , numberTicks: 31
                    , showTicks: false
                    , lineColor: "#aaaaaa"
                }
            }
            , seriesDefaults: {
                lineWidth: 1
                , show: true
                , showMarker: false
                , showHighlight: false
            }
            , series: [
                {//lower bound
                    show: false
                }
                , {//First Level
                    label: "Start inpatient phototherapy for NEUROTOXICITY RISK FACTORS or outpatient for NO Risk Factors"
                    , linePattern: "dashed"
                }
                , {//second level
                    label: "Start inpatient phototherapy"
                    , linePattern: "dashed"
                }
                , {//third level
                    linePattern: "dashed"
                    , label: "Consider exchange transfusion for \n NEUROTOXICITY RISK FACTORS"
                }
                , {//fourth level
                    linePattern: "solid"
                    , label: "Consider exchange transfusion"
                }
                , {//upper bound
                    show: false
                }
                , {//Results
                    label: "Results"
                    , show: false
                    , showLine: false
                    , showMarker: true
                    , showHighlight: true
                }
            ]
            , highlighter: {
                show: true
                , sizedAdjust: 7.5
                , tooltipLocation: 'se'
                , useAxesFormatters: false
                , tooltipContentEditor: function (str, seriesIndex, pointIndex, plot) {
                    var point = plot.data[seriesIndex][pointIndex];
                    var hours = point[0];
                    var val = point[1];
                    var html = "<div>Age: " + hours + " hours</div>";
                    html += "<div>Serum Bilirubin: " + val + " mg/dL</div>";
                    return html;
                }
            }
            , legend: {
                show: true
                , renderer: $.jqplot.AdvancedTableLegendRenderer
                , rendererOptions: {
                    swatchColors: [
                        "#ffff9b"
                        , "#ffff00"
                        , "#ffb9b9"
                        , "#ff8585"
                        , "#FFFFFF"
                    ]
                    , invert: true
                    , location: "nw"
                }
            }
        }
    }
    , BHUTANI: {
        REFERENCE: {
            UPPER_BOUND: [[12, 30], [180, 30]]
            , LOWER_BOUND: [[12, 0], [180, 0]]
            , LOW_RANGE: [[12,4.529826352657909],[18,5.597309856659676],[24,6.54172409178657],[30,7.373814455838566],[36,8.10618490464111],[42,8.75217457984727],[48,9.324919726719248],[54,9.83660090188927],[60,10.29787547109985],[66,10.717495396923423],[72,11.102110316461362],[78,11.456255909022348],[84,11.782527553780128],[90,12.08193927741065],[96,12.354467991708553],[102,12.599783021183072],[108,12.818160920633218],[114,12.88523754050626],[120,12.88523754050626],[126,12.88523754050626],[132,12.88523754050626],[138,12.88523754050626],[144,12.88523754050626],[150,12.88523754050626],[156,12.88523754050626],[162,12.88523754050626],[168,12.88523754050626],[174,12.88523754050626],[180,12.88523754050626]]
            , MID_RANGE: [[12,5.275102196085885],[18,6.719050987452363],[24,8.000817714485878],[30,9.075474574818358],[36,9.950845633937202],[42,10.665908471118088],[48,11.272950240571157],[54,11.823478147800483],[60,12.357884341176891],[66,12.898865218724143],[72,13.448595150118381],[78,13.989654613900944],[84,14.489712749904601],[90,14.909964326892883],[96,15.217321125413005],[102,15.400357735861967],[108,15.48901177176618],[114,15.51159698474925],[120,15.51159698474925],[126,15.51159698474925],[132,15.51159698474925],[138,15.51159698474925],[144,15.51159698474925],[150,15.51159698474925],[156,15.51159698474925],[162,15.51159698474925],[168,15.51159698474925],[174,15.51159698474925],[180,15.51159698474925]]
            , HIGH_RANGE: [[12,6.615808224188976],[18,8.31668638304288],[24,9.7927944653995],[30,11.021318709527542],[36,12.024160031468584],[42,12.847957266266173],[48,13.547763171280048],[54,14.174373191585492],[60,14.765306987457802],[66,15.339442723941868],[72,15.895304122506825],[78,16.413000274785993],[84,16.8598182184017],[90,17.199468274875354],[96,17.40498214962269],[102,17.475263794034145],[108,17.455293029639883],[114,17.445918044137535],[120,17.445918044137535],[126,17.445918044137535],[132,17.445918044137535],[138,17.445918044137535],[144,17.445918044137535],[150,17.445918044137535],[156,17.445918044137535],[162,17.445918044137535],[168,17.445918044137535],[174,17.445918044137535],[180,17.445918044137535]]
        }
        , JQPLOT_SETTINGS: {
            title: "Hour Specific Bilirubin RISK CHART for Term & Late-Preterm Infants"
            , seriesColors: [
                "#000000"
            ]
            ,fillBetween: {
                series1: [0, 1, 2, 3], series2: [1, 2, 3, 4], color: ["#b6df89", "#ffff00", "#ffc000", "#ff6d6d"], fill: [true, true]
            }
            , grid: {
                background: 'transparent'
                , renderer: $.jqplot.AdvancedCanvasGridRenderer
            }
            , axes: {
                yaxis: {
                    show: true
                    , label: "Neonatal Serum Bilirubin (mg/dL)"
                    , labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                    , min: 0
                    , max: 30
                    , numberTicks: 30
                    , ticks: [
                        [0, '0']
                        , [5, '5']
                        , [10, '10']
                        , [15, '15']
                        , [20, '20']
                        , [25, '25']
                        , [30, '30']
                    ]
                    , tickOptions: {
                        mark: 'outside'
                    }
                    , lineColor: "#555555"
                    , lineWidth: 2
                }
                , xaxis: {
                    show: true
                    , label: "Age"
                    , labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                    , min: 0
                    , max: 180 //hours
                    , ticks: [
                		[0, "Birth"]
                		,[24, "24h"]	
                		,[48, "48h"]	
                		,[72, "72h"]	
                		,[96, "96h"]	
                		,[120, "5 Days"]	
                		,[144, "6 Days"]	
                		,[168, "7 Days"]	
                		,[180, ""]
                ]
                    , lineColor: "#555555"
                    , lineWidth: 1
                }
                , x2axis: {
                    show: true
                    , min: 0
                    , max: 180
                    , numberTicks: 31
                    , showTicks: false
                    , lineColor: "#aaaaaa"
                }
                , y2axis: {
                    show: true
                    , min: 0
                    , max :30
                    , numberTicks: 31
                    , showTicks: false
                    , lineColor: "#aaaaaa"
                }
            }
            , seriesDefaults: {
                lineWidth: 1
                , showMarker: false
                , showHighlight: false
            }
            , series: [
                {//lowBase
                    show: false
                }
                , {//lowRange
                    label: "Low Risk Zone (<40%)"
                    , linePattern: "dashed"
                }
                , {//midRange
                    label: "Low Intermediate Risk Zone (40-75%)"
                    , linePattern: "dashed"
                }
                , {//highRange
                    linePattern: "dashed"
                    , label: "High Intermediate Risk Zone (75%-95%)"
                }
                , {//highBase
                    show: true
                    , label: "High-Risk Zone (>95%)"
                    , lineWidth: 0
                }
                , {//Results
                    label: "Results"
                    , show: false
                    , showLine: false
                    , showMarker: true
                    , showHighlight: true
                }
            ]
            , highlighter: {
                show: true
                , sizedAdjust: 7.5
                , tooltipLocation: 'se'
                , useAxesFormatters: false
                , tooltipContentEditor: function (str, seriesIndex, pointIndex, plot) {
                    var point = plot.data[seriesIndex][pointIndex];
                    var hours = point[0];
                    var val = point[1];
                    var html = "<div>Age: " + hours + " hours</div>";
                    html += "<div>Serum Bilirubin: " + val + " mg/dL</div>";
                    return html;
                }
            }
            , legend: {
                show: true
                , renderer: $.jqplot.AdvancedTableLegendRenderer
                , rendererOptions: {
                    swatchColors: [
                        "#b6df89"
                        , "#ffff00"
                        , "#ffc000"
                        , "#ff6d6d"
                    ]
                    , invert: true
                    , location: "nw"
                }
            }
        }
    }
}
};
	return data;
};

BiliGraphsO1Component.prototype.getStyles = function(){
    var compId = this.getComponentUid();
    return {
        getId: function(){
            return compId;
        }
        , getNameSpace: function(){
            return "BGO1";
        }
    };
};

BiliGraphsO1Component.prototype.getCriterion = function(){
    var js_criterion = JSON.parse(m_criterionJSON);
    return MP_Util.GetCriterion(js_criterion, CERN_static_content);
};

BiliGraphsO1Component.prototype.getComponentLoadTimerName = function(){
    return "USR:BILI.GRAPH_load_component";
};

BiliGraphsO1Component.prototype.getComponentRenderTimeName = function(){
    return "ENG:BILI.GRAPH_render_component";
};

BiliGraphsO1Component.prototype.getRootComponentNode = function(){
    return this.options.parentComp.getRootComponentNode();
};

BiliGraphsO1Component.prototype.getSectionContentNode = function(){
    return this.getTarget();
};

BiliGraphsO1Component.prototype.initHovers = MPageComponent.prototype.initHovers;
BiliGraphsO1Component.prototype.getScrollNumber = MPageComponent.prototype.getScrollNumber;

BiliGraphsO1Component.prototype.finalizeComponent = function(html, count){
    this.notifyAggregateTimer = function(){};
    MPageComponent.prototype.finalizeComponent.apply(this, [html, count]);
};

BiliGraphsO1Component.prototype.render = function(){
    this.retrieveComponentData();
};

BiliGraphsO1Component.prototype.resize = function(width, height){
    this.resizeComponent();
};

BiliGraphsO1Component.prototype.getGestationalAgeInDays = function(){
    return this.m_gestationalAgeInDays;
};

BiliGraphsO1Component.prototype.setGestationalAgeInDays = function(age){
    if (typeof age !== 'number' || !isFinite(age)){
        throw new Error("Type Error: Non-finite number 'age' passed into BiliGraphsO1Component method 'setGestationalAgeInDays'");
    }
    this.m_gestationalAgeInDays = age;
};

BiliGraphsO1Component.prototype.setGraphContainerDimensions = function(){
    if (!this.m_resizeGraph){
        return;
    }
    var jqComponent = $(this.getRootComponentNode());
    var jqGraph = $("#" + this.getStyles().getId() + "Graph1");
    //Grab width from parent
    var maxWidth = jqGraph.width();
    //Grab Height from cpm container
    var maxHeight = parseInt(jqComponent.closest(".cpm").css("max-height"), 10);

    //Get height of header to subtract
    var headerHeight = jqComponent.children("h2").outerHeight(true);
    var graphSelectorHeight = $("#" + this.getStyles().getId() + "GraphSelector").outerHeight(true);
    maxHeight = (maxHeight - headerHeight) - graphSelectorHeight;

    //resize graph

    if (maxHeight >= maxWidth){
        //Use width
        jqGraph.css({"height": maxWidth + "px"
            , "width": 70 + "%"
        });
    } else {
        //Use height
        jqGraph.css({"height": maxHeight + "px"
            , "width": maxHeight + "px"
        });
    }
    this.m_resizeGraph = false;
};

BiliGraphsO1Component.prototype.modifyPlot = function(plot){
    plot.legend.invert = true;
    plot.doFillBetweenLines = function(){
        var fb = this.fillBetween;
        var series = this.series;
        var sid1 = fb.series1;
        var sid2 = fb.series2;
        var id1 = 0, id2 = 0;
        var color;

        function fill(id1, id2, color){
            var series1 = series[id1];
            var series2 = series[id2];
            if (series2.renderer.smooth)
                var tempgd = series2.renderer._smoothedData.slice(0).reverse();
            else
                var tempgd = series2.gridData.slice(0).reverse();
            if (series1.renderer.smooth)
                var gd = series1.renderer._smoothedData.concat(tempgd);
            else
                var gd = series1.gridData.concat(tempgd);
            var baseSeries = fb.baseSeries !== null ? fb.baseSeries : id1;
            var sr =
                series[baseSeries].renderer.shapeRenderer;
            var opts =
            {
                fillStyle : color,
                fill : true,
                closePath : true
            };
            sr.draw(series1.shadowCanvas._ctx, gd, opts)
        }

        if(typeof sid1 == 'number' && typeof sid2 == 'number'){
            id1 = sid1 < sid2 ? sid1 : sid2;
            id2 = sid2 > sid1 ? sid2 : sid1;
            color = fb.color !== null ? fb.color : series[sid1].fillColor;
            fill(id1, id2, color);
        }
        else{
            for(var cnt = 0; cnt < sid1.length ; cnt++){
                if (typeof fb.color === 'string'){
                    color = fb.color;
                } else if (fb.color && fb.color.length > cnt){
                    color = fb.color[cnt];
                } else {
                    color = series[cnt].fillColor;
                }
                id1 = sid1[cnt] < sid2[cnt] ? sid1[cnt] : sid2[cnt];
                id2 = sid2[cnt] > sid1[cnt] ? sid2[cnt] : sid1[cnt];
                fill(id1, id2, color);
            }
        }
    };
};

BiliGraphsO1Component.prototype.renderGraph = function(htmlId, graphName, plotSide, printFlag){
    var compId = this.getStyles().getId();
    var jsonData = this.getJSONData();
    if (!htmlId || !graphName){
        return;
    }

    var idExt = (printFlag) ? "B" : "";

    var graphData = jsonData.GRAPH_SETTINGS[graphName];
    if (!graphData){
        return;
    }

    var jqContainer = $("#" + htmlId);
    if (!jqContainer.length){
        return;
    }
    var plotLocs = BiliGraphsO1Component.PLOT_LOCATION;
    var graphRef = graphData.REFERENCE;
    var graphSettings = graphData.JQPLOT_SETTINGS;
    var textBoxes = graphData.TEXT_BOXES;
    var series = [];
    var resultSeries = this.m_biliResultsXYCoords;
    if (graphName === "BHUTANI"){
        series.push(graphRef.LOWER_BOUND
            , graphRef.LOW_RANGE
            , graphRef.MID_RANGE
            , graphRef.HIGH_RANGE
            , graphRef.UPPER_BOUND
        );
    } else if (graphName === "TREATMENT_38_WEEKS" || graphName === "TREATMENT_35_WEEKS"){
        series.push(graphRef.LOWER_BOUND
            , graphRef.FIRST_LEVEL
            , graphRef.SECOND_LEVEL
            , graphRef.THIRD_LEVEL
            , graphRef.FOURTH_LEVEL
            , graphRef.UPPER_BOUND
        );
    } else if (graphName === "TREATMENT_31_WEEKS" || graphName === "TREATMENT_27_WEEKS" || graphName === "TREATMENT_LESS_THAN_27_WEEKS"){
        series.push(graphRef.LOWER_BOUND
            , graphRef.FIRST_LEVEL
            , graphRef.SECOND_LEVEL
            , graphRef.UPPER_BOUND
        );
    }

    if (resultSeries && resultSeries.length){
        series.push(resultSeries);
        var resultSeriesSettings = graphSettings.series[series.length - 1];
        var isSeriesShown = resultSeriesSettings.show;
        if (!isSeriesShown){
            resultSeriesSettings.show = true;
            graphSettings.legend.rendererOptions.swatchColors.push("#000000");
        }
    }
    var plot;
    var legendContId;
    if (plotSide === plotLocs.RIGHT){
        //Remove right plot
        plot = this.m_rightPlot;
        legendContId = compId + "Graph2LegendCont" + idExt;
    } else if (plotSide === plotLocs.LEFT){
        //Remove left plot
        plot = this.m_leftPlot;
        legendContId = compId + "Graph1LegendCont" + idExt;
    } else {
        return;
    }
    if (plot && !printFlag){
        plot.destroy();
    }

    //this.setGraphContainerDimensions();
    plot = $.jqplot(htmlId, series, graphSettings);
    this.modifyPlot(plot);
    plot.redraw();

    if (plotSide === plotLocs.RIGHT){
        //add right plot
        if (printFlag){
            this.m_printRightPlot = plot;
        } else {
            this.m_rightPlot = plot;
        }
    } else if (plotSide === plotLocs.LEFT){
        //add left plot
        if (printFlag){
            this.m_printLeftPlot = plot;
        } else {
            this.m_leftPlot = plot;
        }
    }

    var jqLegend = jqContainer.find("tbody");
    if (!printFlag){
        var legendHtml = "";
        jqLegend.find(".jqplot-table-legend-swatch-outline").css("width", "12px");
        legendHtml += "<div style='display:table;overflow:hidden;'>";
        //Grab <tr>s
        var jqTableRows = jqLegend.find("tr");
        var trLen = jqTableRows.length;
        var x;
        for (x = 0; x < trLen; x++){
            //Build table row
            legendHtml += "<div style='display:table-row;'>";
            //grab the two
            var jqRow = $(jqTableRows.get(x));
            legendHtml += "<div style='display:table-cell;'>" + jqRow.find("td.jqplot-table-legend-swatch").html() + "</div>";
            legendHtml += "<div style='display:table-cell;'>" + jqRow.find("td.jqplot-table-legend-label").html() + "</div>";
            legendHtml += "</div>";
        }
        legendHtml += "</div>";
        $("#" + legendContId).html(legendHtml);
    }
    //    $("#" + legendContId).html(jqLegend.html());
    //}
    //TODO: DEV PRINT STUFF
    //if (printFlag){
    //    jqLegend.find("td.jqplot-table-legend-swatch").css("width", "16px");
    //    jqLegend.find("td.jqplot-table-legend")
    //}
    //jqLegend.css({"width": (graphWidth - 24) + "px"});
    //jqLegend.after(jqLastDataSeries);



    $("#" + this.getStyles().getId() + "GraphInfo" + idExt).empty();
    if (textBoxes && !printFlag){
        //Build text boxes
        var html = "";
        var i;
        var tLen = textBoxes.length;

        var jqTextBoxList = [];

        for (i = tLen-1; i >= 0; i--){
            var textBoxSettings = textBoxes[i];
            html = "";
            html += "<div class='bgo1-jqplot-text-box-outer "+textBoxSettings.type+"'>";
            html += "<div class='bgo1-jqplot-text-box' style='background-color:" + textBoxSettings.color + ";'>";
            html += textBoxSettings.content;
            html += "</div>";
            html += "</div>";
            
            $("#" + this.getStyles().getId() + "GraphInfo" + idExt).append($(html));
        }
    }
};

BiliGraphsO1Component.prototype.resizeGraphs = function(printFlag){
    function fixPlot(jqTarget){
        if (!jqTarget || !jqTarget.length){
            return;
        }
        //Move grid
        var jqSeries = jqTarget.children("canvas.jqplot-series-canvas");
        var numOfSeries = jqSeries.length;
        var jqLastSeries = jqSeries.last().detach();
        numOfSeries--;

        var jqGrid = jqTarget.children("canvas.jqplot-grid-canvas").detach();
        $(jqSeries.get(numOfSeries - 1)).after(jqGrid);
        jqGrid.after(jqLastSeries);
        //Remove legend
        jqTarget.children("table.jqplot-table-legend").remove();
    }
    var idExt = "";
    if (printFlag){
        idExt = "B";
    }
    var compId = this.getStyles().getId();
//    var jqComponentContent = $(this.getTarget());
//    //Get the max height
//    var maxHeight = parseInt(jqComponentContent.css("max-height"), 10);
//    var legendContHeight = Math.ceil($("#" + compId + "LegendsCont").outerHeight(true));
//    var infoHeight = Math.ceil($("#" + compId + "GraphInfo").outerHeight(true));
//    var selectorHeight = Math.ceil($("#" + compId + "GraphSelector").outerHeight(true));
//
//    var maxGraphHeight = maxHeight - (legendContHeight + infoHeight + selectorHeight);
//    var maxGraphWidth = parseInt(jqComponentContent.width()) / 2;

//    var squareDimension = (maxGraphHeight >= maxGraphWidth) ? maxGraphWidth : maxGraphHeight;
    var squareDimension = 350;

    var leftPlot;
    var rightPlot;
    if (printFlag){
        leftPlot = this.m_printLeftPlot;
        rightPlot = this.m_printRightPlot;
    } else {
        leftPlot = this.m_leftPlot;
        rightPlot = this.m_rightPlot;
    }



    if (leftPlot){
        $("#" + compId + "Graph1" + idExt).width(squareDimension).height(squareDimension);
        leftPlot.replot();
        fixPlot(leftPlot.target);
    }
    if (rightPlot){
        $("#" + compId + "Graph2" + idExt).width(650).height(squareDimension);
        rightPlot.replot();
        fixPlot(rightPlot.target);
    }

    //Fix plots

};

BiliGraphsO1Component.prototype.resizeComponent = function(){
    this.resizeGraphs();
};

BiliGraphsO1Component.prototype.retrieveComponentData = function(){
    var self = this;
    var criterion = this.getCriterion();
    var request;
    var scriptRequest = new ScriptRequest();
    var sendAr = [];
    var prsnlInfo = criterion.getPersonnelInfo();
    var encntrs = prsnlInfo.getViewableEncounters();
    var encountersParam = (encntrs) ? "value(" + encntrs + ")" : "0.0";
    //this.m_biliEventSetCodes.push(18115886, 3995172);
    this.m_biliEventSetCodes = this.getOption("bilirubin_es_cd_list") || [];
    this.m_dobEsCd = this.getOption("dob_es_cd") || 0;

    //this.m_gestationalAgeEventSetCodes.push(18733442);

    var eventSetCodes = [];
    eventSetCodes.push.apply(eventSetCodes, this.m_biliEventSetCodes);
    eventSetCodes.push(this.m_dobEsCd);
    //eventSetCodes.push.apply(eventSetCodes, this.m_gestationalAgeEventSetCodes);

    sendAr.push(
        "^MINE^"
        , criterion.person_id + ".0"
        , encountersParam
        , criterion.provider_id + ".0"
        , criterion.ppr_cd + ".0"
        , 0 //Lookback Units
        , 0 //Lookback Units Type
        , "^^" //Begin Date/Time
        , "^^" //End Date/Time
        , MP_Util.CreateParamArray([], 1)
        , MP_Util.CreateParamArray(eventSetCodes, 1)
        , 400
    );

    MP_Util.LogError("mp_bili_graph_wrapper - request<br />" + sendAr.join(","));

    scriptRequest.setProgramName("MP_BILI_GRAPH_WRAPPER");
    scriptRequest.setParameterArray(sendAr);
    scriptRequest.setAsyncIndicator(true);
    scriptRequest.setName("GetBiliResults");
    scriptRequest.setResponseHandler(function(scriptReply){
        if (!scriptReply){
            self.finalizeComponent(MP_Util.HandleErrorResponse(self.getStyles().getNameSpace(), "Component Data Retrieval Failed"), "");
            return;
        }
        MP_Util.LogError("mp_bili_graph_wrapper - reply<br />" + JSON.stringify(scriptReply.getResponse()));
        var status = scriptReply.getStatus();

        if (status === 'S' || status === 'Z'){
            var response = scriptReply.getResponse();
            self.renderComponent(response);
        } else {
            self.finalizeComponent(MP_Util.HandleErrorResponse(self.getStyles().getNameSpace(), "Component Data Retrieval Failed"), "");
        }
    });
    scriptRequest.performRequest();

};

BiliGraphsO1Component.prototype.generateBiliXYCoord = function(biliVal, biliDTTM){
    var dob = this.m_dateOfBirth;
    if (!dob || typeof biliVal !== "number" || !biliDTTM){
        return null;
    }

    var MS_IN_HOUR = 3600000;
    //biliVal will be the Y coord, need to calculate X Coord
    var biliDate = new Date();
    biliDate.setISO8601(biliDTTM);

    var hoursFromBirth = (Date.parse(biliDate) - Date.parse(dob)) / MS_IN_HOUR;
    if (hoursFromBirth < 0){
        return null;
    }
    return [hoursFromBirth, biliVal];
};

BiliGraphsO1Component.prototype.processBiliResults = function(reply){
    var self = this;
    var labGroupList = reply.PG || [];
    var lgLen = labGroupList.length;
    var i;
    var biliXYCoords = this.m_biliResultsXYCoords;

    this.setGestationalAgeInDays(reply.EGA_IN_DAYS || 0);

    function isDOBResult(eventSetCode){
        return self.m_dobEsCd == eventSetCode;
    }

    function isBiliResult(eventSetCode){
        var biliEventSetCodes = self.m_biliEventSetCodes || [];
        var bLen = biliEventSetCodes.length;
        var i;
        for (i = 0; i < bLen; i++){
            if (eventSetCode === biliEventSetCodes[i]){
                return true;
            }
        }
        return false;
    }

    function isGestationalAgeResult(eventSetCode){
        var gestationalAgeEventSetCodes = this.m_gestationalAgeEventSetCodes || [];
        var gLen = gestationalAgeEventSetCodes.length;
        var i;
        for (i = 0; i < gLen; i++){
            if (eventSetCode === gestationalAgeEventSetCodes[i]){
                return true;
            }
        }
        return false;
    }

    var biliGroups = [];
    var dobGroup = [];
    for (i = 0; i < lgLen; i++){
        var labGroup = labGroupList[i];
        if (isBiliResult(labGroup.EVENT_SET_CD)){
            biliGroups.push(labGroup);
        } else if (isDOBResult(labGroup.EVENT_SET_CD)){
            dobGroup.push(labGroup);
        }
    }

    var gLen = dobGroup.length;
    for (i = 0; i < gLen; i++){
        labGroup = dobGroup[i];
        var resultGroupList = labGroup.RG || [];
        var rgLen = resultGroupList.length;
        var j;
        for (j = 0; j < rgLen; j++){
            //We are hoping to have result groups contain only one primitive event set
            //However, we will cover the case where we were given an event set instead
            var resultGroup = resultGroupList[j];
            var measurementList = resultGroup.MEASUREMENTS || [];
            var mLen = measurementList.length;
            var k;
            //Get the measurements and append them to the biliResults array
            for (k = 0; k < mLen; k++){
                var measurement = measurementList[k];
                var dateTime = new Date();
                dateTime.setISO8601(measurement.RESULT);
                this.m_dateOfBirth = dateTime;
                break;
            }
        }
    }

    if (!this.m_dateOfBirth){
        return;
    }

    gLen = biliGroups.length;
    for (i = 0; i < gLen; i++){
        labGroup = biliGroups[i];
        var resultGroupList = labGroup.RG || [];
        var rgLen = resultGroupList.length;
        var j;
        for (j = 0; j < rgLen; j++){
            //We are hoping to have result groups contain only one primitive event set
            //However, we will cover the case where we were given an event set instead
            var resultGroup = resultGroupList[j];
            var measurementList = resultGroup.MEASUREMENTS || [];
            var mLen = measurementList.length;
            var k;
            //Get the measurements and append them to the biliResults array
            for (k = 0; k < mLen; k++){
                var measurement = measurementList[k];
                var xyCoords = this.generateBiliXYCoord(parseFloat(measurement.RESULT), measurement.DTTM);
                if (xyCoords && xyCoords.length === 2){
                    biliXYCoords.push(xyCoords);
                }
            }
        }
    }


    //Sort biliXYCoords
    biliXYCoords.sort(function(a, b){
        var aX = a[0];
        var bX = b[0];
        if (aX <= bX){
            return -1;
        }
        return 1;
    });
};

BiliGraphsO1Component.prototype.determineDefaultGraph = function(ageInDays){
    if (!ageInDays){
        return null;
    }
    var daysToTreatmentList = BiliGraphsO1Component.DAYS_TO_TREATMENT_SORTED_ASC;
    var dLen = daysToTreatmentList.length;
    var i;
    for (i = 0; i < dLen; i++){
        var item = daysToTreatmentList[i];
        var uBound = item.DAYS_UPPER_BOUND;
        if (ageInDays <= uBound){
            return item.GRAPH_NAME;
        }
    }
    return null;
};

BiliGraphsO1Component.prototype.renderComponent = function(reply){
    try {
        var compId = this.getStyles().getId();
        var self = this;
        this.processBiliResults(reply);

        //Determine the default treatment graph
        var defaultGraphName = this.determineDefaultGraph(this.getGestationalAgeInDays());

        if (!defaultGraphName){
            defaultGraphName = "BHUTANI";
        }
        this.m_currentGraphName = defaultGraphName;
        var graphsList = [];
        graphsList.push(
            {
                VALUE: "BHUTANI"
                , DESCRIPTION: "Bhutani"
            }
            , {
                VALUE: "TREATMENT_38_WEEKS"
                , DESCRIPTION: "Treatment for >= 38 Week Infants"
            }
            , {
                VALUE: "TREATMENT_35_WEEKS"
                , DESCRIPTION: "Treatment for 35-37(6/7) Week Infants"
            }
            , {
                VALUE: "TREATMENT_31_WEEKS"
                , DESCRIPTION: "Treatment for 31-34(6/7) Week Infants"
            }
            , {
                VALUE: "TREATMENT_27_WEEKS"
                , DESCRIPTION: "Treatment for 27-30(6/7) Week Infants"
            },
            {
                VALUE: "TREATMENT_LESS_THAN_27_WEEKS"
                , DESCRIPTION: "Treatment for <= 26(6/7) Week Infants"
            }
        );
        var gLen = graphsList.length;
        var i;

        var html = "";
        if (!this.m_dateOfBirth){
            html += "<div id='" + compId + "AlertCont'></div>";
        }
        html += "<div id='" + compId + "BiliGraphsCont' class='bgo1-bili-cont'>";
        html += "<div class='bgo1-bili-graph-cont'>";
        html += "<div id='" + compId + "Graph1' class='bgo1-bili-graph-cont' style='width:350px;height:350px;'>&nbsp;</div>";
        html += "</div>";
        html += "<div class='bgo1-bili-graph-cont'>";
        html += "<div id='" + compId + "Graph2' class='bgo1-bili-graph-cont' style='width:650px;height:350px;'>&nbsp;</div>";
        html += "</div>";
        html += "</div>";
        html += "<div id='" + compId + "disclaimer' class='bgo1-disclaimer'>*These suggested levels represent a consensus but are based on limited evidence, and the levels shown are approximations.</div>";
        html += "<div id='" + compId + "LegendsCont' class='bgo1-table-cont'>";
        html += "<table id='" + compId + "Graph1LegendCont' class='bgo1-bili-graph-cont'>&nbsp;</table>";
        html += "<table id='" + compId + "Graph2LegendCont' class='bgo1-bili-graph-cont'>&nbsp;</table>";
        html += "</div>";
        html += "<div id='" + compId + "GraphInfo' class='bgo1-bili-graph-info-cont'>&nbsp;</div>";
        html += "<div id='" + compId + "GraphSelector' class='bgo1-bili-graph-selector'>";
        html += "<select>";
        for (i = 0; i < gLen; i++){
            var selectedText = "";
            if (graphsList[i].VALUE === defaultGraphName){
                selectedText = " selected ";
                
            }
            html += "<option value='" + graphsList[i].VALUE + "'" + selectedText + ">" + graphsList[i].DESCRIPTION + "</option>";
        }
        html += "</select>";
        html += "<input type='button' class='bgo1-btn' id='" + compId + "PrintBtn' + value='Print' />";
        html += "</div>";
        this.finalizeComponent(html, "");

        if (!this.m_dateOfBirth){
            var notificationManager = this.getNotificationManager();
            notificationManager.setJqContainer($("#" + this.getStyles().getId() + "AlertCont"));
            notificationManager.appendNotification("NO_DOB", {PRIMARY: "No date of birth charted."}, notificationManager.NOTIFICATION_TYPES.WARNING);
        }

        //Attach event
        $("#" + compId + "GraphSelector").children("select").change(function () {
            var graphName = this.value;
            self.m_currentGraphName = graphName;
            self.renderGraphs(graphName);
        });

        $("#" + compId + "PrintBtn").click(function(){
            self.printGraphs();
        });

        this.renderGraphs(defaultGraphName);
        
    } catch (err){
        alert(err.message);
    }
};


BiliGraphsO1Component.prototype.renderGraphs = function(graphName, printFlag){
    var self = this;
    var compId = this.getStyles().getId();
    function clearRightPlot(){
        if (rightPlot){
            rightPlot.destroy();
            self.m_rightPlot = null;
            $("#" + compId + "Graph2LegendCont").empty();
        }
    }
    function clearLeftPlot(){
        if (leftPlot){
            leftPlot.destroy();
            self.m_leftPlot = null;
            $("#" + compId + "Graph1LegendCont").empty();
        }
    }
    var idExt = "";
    if (printFlag){
        idExt = "B";
    }

    //Get left and right plots
    var leftPlot = this.m_leftPlot;
    var rightPlot = this.m_rightPlot;

    var plotLocs = BiliGraphsO1Component.PLOT_LOCATION;
    if (graphName === "BHUTANI"){
        //Remove right plot, draw left plot
        if (!printFlag) {
            clearRightPlot();
        }
        $("#" + compId + "disclaimer").hide();
        this.renderGraph(compId + "Graph1" + idExt, graphName, plotLocs.LEFT, printFlag);
    } else if (graphName === "TREATMENT_38_WEEKS" || graphName === "TREATMENT_35_WEEKS"){
    	$("#" + compId + "disclaimer").show();
        //Check if bhutani graph exists
        if (!printFlag) {
            if (!leftPlot) {
                this.renderGraph(compId + "Graph1" + idExt, "BHUTANI", plotLocs.LEFT, printFlag);
            }
        } else {
            this.renderGraph(compId + "Graph1" + idExt, "BHUTANI", plotLocs.LEFT, printFlag);
        }
        this.renderGraph(compId + "Graph2" + idExt, graphName, plotLocs.RIGHT, printFlag);
    } else {
    	$("#" + compId + "disclaimer").show();
        //Remove bhutani graph
        if (!printFlag) {
            clearLeftPlot();
        }
        this.renderGraph(compId + "Graph2" + idExt, graphName, plotLocs.RIGHT, printFlag);
    }
    this.resizeGraphs(printFlag);
};

BiliGraphsO1Component.prototype.buildResultsHtml = function(){
    var biliResults = this.m_biliResultsXYCoords || [];
    var bLen = biliResults.length;
    var i;
    var html = "";

    if (bLen === 0){
        return html;
    }

    html += "<div>Results:</div>";
    for (i = 0; i < bLen; i++){
        html += "<div style='margin-left:4px;'>Age in hours: " + biliResults[i][0].toFixed(2) + " Serum bilirubin (mg/dL): " + biliResults[i][1] + "</div>";
    }
    //html += "<div style='display:table;'>";
    //
    //html += "<div style='display:table-row;'>";
    //for (i = 0; i < bLen; i++){
    //    html +=     "<div style='display:table-cell;width:40px'>" + biliResults[i][0].toFixed(2) + "</div>";
    //}
    //html += "</div>";
    //
    //html += "<div style='display:table-row;'>";
    //for (i = 0; i < bLen; i++){
    //    html +=     "<div style='display:table-cell;width:40px'>" + biliResults[i][1] + "mg/dL</div>";
    //}
    //html += "</div>";
    //
    //html += "</div>";

    return html;
};

BiliGraphsO1Component.prototype.buildPrintFieldsHtml = function(){
    var html = "";
    html += "<div style='display:table;'><span style='display:table-cell; vertical-align:bottom;'>Follow up bilirubin draw on </span><span style='width:250px; display:table-cell; border-bottom:1px solid #000;height:30px;'>&nbsp;</span><span style='height:30px; display:table-cell; vertical-align:bottom;'> at </span><span style='height:30px;width:250px; display:table-cell; border-bottom:1px solid #000'>&nbsp;</span></div>";
    html += "<div style='display:table;'><span style='height:30px; display:table-cell; vertical-align:bottom;'>Follow up in clinic on </span><span style='width:250px; display:table-cell; border-bottom:1px solid #000;height:30px;'>&nbsp;</span></div>";
    html += "<div style='display:table;'><span style='height:30px; display:table-cell; vertical-align:bottom;'>RN signature:  </span><span style='width:400px; display:table-cell; border-bottom:1px solid #000;height:30px;'>&nbsp;</span></div>";
    html += "<div style='display:table;'><span style='height:30px; display:table-cell; vertical-align:bottom;'>Patient signature:  </span><span style='width:400px; display:table-cell; border-bottom:1px solid #000;height:30px;'>&nbsp;</span></div>";
    return html;
};

BiliGraphsO1Component.prototype.printGraphs = function(){
    //Grab body
    var compId = this.getStyles().getId();
    var jqBody = $("body");
    var jqBodyChildren = jqBody.children();
    var patientName = this.getCriterion().getPatientInfo().getName() || "";

    var html = "";
    //Generate html for graphs
    html += "<div id='" + compId + "PrintContainer' >";
    html += "<div id='" + compId + "BiliGraphsContB' class='bgo1-bili-cont'>";
    html += "<div class='bgo1-bili-graph-cont bgo1-bhutani print'>";
    html += "<div id='" + compId + "Graph1B' class='bgo1-bili-graph-cont' style='height:350px; width:350px;'>&nbsp;</div>";
    html += "</div>";
    html += "<div class='bgo1-bili-graph-cont bgo1-treatment print'>";
    html += "<div id='" + compId + "Graph2B' class='bgo1-bili-graph-cont'>&nbsp;</div>";
    html += "</div>";
    html += "</div>";
	//html += "<div id='" + compId + "disclaimer' class='bgo1-disclaimer print'> *These suggested levels represent a consensus but are based on limited evidence, and the levels shown are approximations.</div>";
    html += "<div id='" + compId + "LegendsContB' class='bgo1-table-cont'>";
    html += "<div id='" + compId + "Graph1LegendContB' class='bgo1-bili-graph-cont bgo1-bhutani print'>&nbsp;</div>";
    html += "<div id='" + compId + "Graph2LegendContB' class='bgo1-bili-graph-cont bgo1-treatment print'>&nbsp;</div>";
    html += "</div>";
    html += "<div id='" + compId + "GraphInfoB' class='bgo1-bili-graph-info-cont print'>&nbsp;</div>";
    //FIELDS TO PRINT
    html += "<div>" + patientName + "</div>";
    html += this.buildResultsHtml();
    html += this.buildPrintFieldsHtml();
    html += "</div>";

    var jqGraphContainer = $(html);
    //Hide body children
    var formerDisplayVals = [];
    for (var i = 0, eLen = jqBodyChildren.length; i < eLen; i++){
        formerDisplayVals.push($(jqBodyChildren.get(i)).css("display"));
    }
    jqBodyChildren.css("display", "none");

    jqBody.prepend(jqGraphContainer);
    this.renderGraphs(this.m_currentGraphName ,true);
    window.print();
    setTimeout(function(){
        $("#" + compId + "PrintContainer").empty();
        for (i = 0; i < eLen; i++){
            $(jqBodyChildren.get(i)).css("display", formerDisplayVals[i]);
        }
        //jqBodyChildren.css("visibility", "inherit");
    }, 2000);
};

(function (baseComponent) {

    if (typeof i18n == "undefined") {
        var i18n = {};
    }

    if (typeof i18n.discernabu == "undefined") {
        i18n.discernabu = {};
    }

    i18n.discernabu.notification_manager = {
        WARNING: "Warning"
        , ERROR: "Error"
        , ALERT: "Alert"
        , INFO: "Info"
    };

    /**
     * Object that controls the display of visual notifications.
     * @param {string|number} id - Needs to be a unique identifier
     * @constructor
     */
    function NotificationManager(id) {
        this.m_jqContainer = null;
        this.m_id = id;
        this.m_typeToIdMap = null;
        this.m_uniqueCount = 0;
    }

    /**
     * Enumerates the type of notifications that can show.
     * @type {{ERROR: number, WARNING: number}}
     */
    NotificationManager.prototype.NOTIFICATION_TYPES = {
        ERROR: 1
        , ALERT: 2
        , WARNING: 3
        , INFO: 4
    };

    /**
     * Gets the Notification Manager's id.
     * @returns {string|number} - id
     */
    NotificationManager.prototype.getId = function () {
        return this.m_id;
    };

    /**
     * Gets the jQuery container the Notification Manager uses to display alerts.
     * @returns {jQuery object} - jQuery object that acts as a container for notifications
     */
    NotificationManager.prototype.getJqContainer = function () {
        return this.m_jqContainer;
    };

    /**
     * Sets the jQuery container the Notification Manager uses to display alerts.
     * @param {jQuery object|null} jqCont - jQuery container to display alerts in.
     */
    NotificationManager.prototype.setJqContainer = function (jqCont) {
        this.m_jqContainer = jqCont;
    };

    /**
     * Gets the notification identifiers to html ids map.
     * @returns {Object} - identifier to html ids map
     */
    NotificationManager.prototype.getTypeToIdMap = function () {
        if (!this.m_typeToIdMap) {
            this.m_typeToIdMap = {};
        }
        return this.m_typeToIdMap;
    };

    /**
     * Sets the notification identifiers to html ids map.
     * Expected use-case is to null the existing map.
     * @param map {null|Object} - null or an existing map.
     */
    NotificationManager.prototype.setTypeToIdMap = function (map) {
        this.m_typeToIdMap = map;
    };

    /**
     * Builds the HTML for a Notification.
     * @param {{PRIMARY: string, SECONDARY: string}} message - message object to populate alert.
     * @param {number} flag - NotificationManager.prototype.NOTIFICATION_TYPES enumeration.
     * @returns {string} - notification html
     */
    NotificationManager.prototype.buildNotificationHTML = function (message, flag) {
        var myi18n = i18n.discernabu.notification_manager;
        var alertTypes = this.NOTIFICATION_TYPES;
        var alertCSS = "";
        var alertSecondaryCSS = "";
        var alertIconTitle = "";
        var html = "";

        switch (flag) {
            case alertTypes.ERROR:
                alertCSS = "notification-mgr-error-section";
                alertIconTitle = myi18n.ERROR;
                break;
            case alertTypes.ALERT:
                alertCSS = "notification-mgr-alert-section";
                alertIconTitle = myi18n.ALERT;
                break;
            case alertTypes.WARNING:
                alertCSS = "notification-mgr-warning-section";
                alertIconTitle = myi18n.WARNING;
                alertSecondaryCSS = "secondary-text";
                break;
            case alertTypes.INFO:
                alertCSS = "notification-mgr-info-section";
                alertIconTitle = myi18n.INFO;
                alertSecondaryCSS = "secondary-text";
                break;
            default:
                break;
        }

        html += "<div class='" + alertCSS + "'>";
        html += "<span class='notification-mgr-alert-icon' title='" + alertIconTitle + "'></span>";
        html += "<span class='notification-mgr-alert-message'>";

        if (typeof message.PRIMARY === 'string') {
            html += "<span class='notification-mgr-alert-primary'>" + message.PRIMARY + "</span>";
        }
        if (typeof message.SECONDARY === 'string') {
            html += "<span class='" + alertSecondaryCSS + "'>" + message.SECONDARY + "</span>";
        }
        html += "</span>";
        html += "</div>";

        return html;
    };

    /**
     * Visually appends an alert in the Notification Manager's jQuery Container.
     * If the identifier passed in already exists, then the existing notification will be updated.
     * @param {string} identifier - Identifier for a type of alert.
     * @param {{PRIMARY: string, SECONDARY: string}} message - message object to populate alert.
     * @param {number} flag - NotificationManager.prototype.NOTIFICATION_TYPES enumeration.
     */
    NotificationManager.prototype.appendNotification = function (identifier, message, flag) {
        var id = this.getId() || "";
        var jqContainer = this.getJqContainer();
        var typeToIdMap = this.getTypeToIdMap();
        var alertId;
        var html = "";

        if (!jqContainer || !jqContainer.length) {
            return;
        }

        //Check if alert already exists
        alertId = typeToIdMap[identifier];
        if (alertId) {
            //Update current alert
            html += this.buildNotificationHTML(message, flag);
            $("#" + alertId).html(html);
            return;
        }

        //Create new container div
        alertId = id + "Alert" + (++this.m_uniqueCount);
        html += "<div id='" + alertId + "' class='notification-mgr-section'>";
        html += this.buildNotificationHTML(message, flag);
        html += "</div>";

        //Append the alert
        jqContainer.append(html);
        typeToIdMap[identifier] = alertId;
    };

    /**
     * Visually removes an alert in the NotificationManager Manager's jQuery Container.
     * @param {string} identifier - Identifier for a type of notification.
     */
    NotificationManager.prototype.removeNotification = function (identifier) {
        var typeToIdMap = this.getTypeToIdMap();
        var alertId = typeToIdMap[identifier];

        if (!alertId) {
            return;
        }

        //Remove alert
        $("#" + alertId).remove();
        typeToIdMap[identifier] = null;
    };

    /**
     * Visually removes ALL notifications in the Notification Manager's jQuery Container.
     */
    NotificationManager.prototype.clearNotifications = function () {
        this.setTypeToIdMap(null);
        var jqContainer = this.getJqContainer();
        if (!jqContainer || !jqContainer.length) {
            return;
        }

        jqContainer.html("");
    };

    baseComponent.NotificationManager = NotificationManager;
})(BiliGraphsO1Component); //Replace {} with Component constructor

/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.8
 * Revision: 1250
 *
 * Copyright (c) 2009-2013 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can
 * choose the license that best suits your project and use it accordingly.
 *
 * Although not required, the author would appreciate an email letting him
 * know of any substantial use of jqPlot.  You can reach the author at:
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     The author (Ash Searle) has placed this code in the public domain:
 *     "This code is unrestricted: you are free to use it however you like."
 *
 */
(function($) {
    /**
     *  Class: $.jqplot.CanvasAxisTickRenderer
     * Renderer to draw axis ticks with a canvas element to support advanced
     * featrues such as rotated text.  This renderer uses a separate rendering engine
     * to draw the text on the canvas.  Two modes of rendering the text are available.
     * If the browser has native font support for canvas fonts (currently Mozila 3.5
     * and Safari 4), you can enable text rendering with the canvas fillText method.
     * You do so by setting the "enableFontSupport" option to true.
     *
     * Browsers lacking native font support will have the text drawn on the canvas
     * using the Hershey font metrics.  Even if the "enableFontSupport" option is true
     * non-supporting browsers will still render with the Hershey font.
     */
    $.jqplot.CanvasAxisTickRenderer = function(options) {
        // Group: Properties

        // prop: mark
        // tick mark on the axis.  One of 'inside', 'outside', 'cross', '' or null.
        this.mark = 'outside';
        // prop: showMark
        // whether or not to show the mark on the axis.
        this.showMark = true;
        // prop: showGridline
        // whether or not to draw the gridline on the grid at this tick.
        this.showGridline = true;
        // prop: isMinorTick
        // if this is a minor tick.
        this.isMinorTick = false;
        // prop: angle
        // angle of text, measured clockwise from x axis.
        this.angle = 0;
        // prop:  markSize
        // Length of the tick marks in pixels.  For 'cross' style, length
        // will be stoked above and below axis, so total length will be twice this.
        this.markSize = 4;
        // prop: show
        // whether or not to show the tick (mark and label).
        this.show = true;
        // prop: showLabel
        // whether or not to show the label.
        this.showLabel = true;
        // prop: labelPosition
        // 'auto', 'start', 'middle' or 'end'.
        // Whether tick label should be positioned so the start, middle, or end
        // of the tick mark.
        this.labelPosition = 'auto';
        this.label = '';
        this.value = null;
        this._styles = {};
        // prop: formatter
        // A class of a formatter for the tick text.
        // The default $.jqplot.DefaultTickFormatter uses sprintf.
        this.formatter = $.jqplot.DefaultTickFormatter;
        // prop: formatString
        // string passed to the formatter.
        this.formatString = '';
        // prop: prefix
        // String to prepend to the tick label.
        // Prefix is prepended to the formatted tick label.
        this.prefix = '';
        // prop: fontFamily
        // css spec for the font-family css attribute.
        this.fontFamily = '"Trebuchet MS", Arial, Helvetica, sans-serif';
        // prop: fontSize
        // CSS spec for font size.
        this.fontSize = '10pt';
        // prop: fontWeight
        // CSS spec for fontWeight
        this.fontWeight = 'normal';
        // prop: fontStretch
        // Multiplier to condense or expand font width.
        // Applies only to browsers which don't support canvas native font rendering.
        this.fontStretch = 1.0;
        // prop: textColor
        // css spec for the color attribute.
        this.textColor = '#666666';
        // prop: enableFontSupport
        // true to turn on native canvas font support in Mozilla 3.5+ and Safari 4+.
        // If true, tick label will be drawn with canvas tag native support for fonts.
        // If false, tick label will be drawn with Hershey font metrics.
        this.enableFontSupport = true;
        // prop: pt2px
        // Point to pixel scaling factor, used for computing height of bounding box
        // around a label.  The labels text renderer has a default setting of 1.4, which
        // should be suitable for most fonts.  Leave as null to use default.  If tops of
        // letters appear clipped, increase this.  If bounding box seems too big, decrease.
        // This is an issue only with the native font renderering capabilities of Mozilla
        // 3.5 and Safari 4 since they do not provide a method to determine the font height.
        this.pt2px = null;

        this._elem;
        this._ctx;
        this._plotWidth;
        this._plotHeight;
        this._plotDimensions = {height:null, width:null};

        $.extend(true, this, options);

        var ropts = {fontSize:this.fontSize, fontWeight:this.fontWeight, fontStretch:this.fontStretch, fillStyle:this.textColor, angle:this.getAngleRad(), fontFamily:this.fontFamily};
        if (this.pt2px) {
            ropts.pt2px = this.pt2px;
        }

        if (this.enableFontSupport) {
            if ($.jqplot.support_canvas_text()) {
                this._textRenderer = new $.jqplot.CanvasFontRenderer(ropts);
            }

            else {
                this._textRenderer = new $.jqplot.CanvasTextRenderer(ropts);
            }
        }
        else {
            this._textRenderer = new $.jqplot.CanvasTextRenderer(ropts);
        }
    };

    $.jqplot.CanvasAxisTickRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
        this._textRenderer.init({fontSize:this.fontSize, fontWeight:this.fontWeight, fontStretch:this.fontStretch, fillStyle:this.textColor, angle:this.getAngleRad(), fontFamily:this.fontFamily});
    };

    // return width along the x axis
    // will check first to see if an element exists.
    // if not, will return the computed text box width.
    $.jqplot.CanvasAxisTickRenderer.prototype.getWidth = function(ctx) {
        if (this._elem) {
            return this._elem.outerWidth(true);
        }
        else {
            var tr = this._textRenderer;
            var l = tr.getWidth(ctx);
            var h = tr.getHeight(ctx);
            var w = Math.abs(Math.sin(tr.angle)*h) + Math.abs(Math.cos(tr.angle)*l);
            return w;
        }
    };

    // return height along the y axis.
    $.jqplot.CanvasAxisTickRenderer.prototype.getHeight = function(ctx) {
        if (this._elem) {
            return this._elem.outerHeight(true);
        }
        else {
            var tr = this._textRenderer;
            var l = tr.getWidth(ctx);
            var h = tr.getHeight(ctx);
            var w = Math.abs(Math.cos(tr.angle)*h) + Math.abs(Math.sin(tr.angle)*l);
            return w;
        }
    };

    // return top.
    $.jqplot.CanvasAxisTickRenderer.prototype.getTop = function(ctx) {
        if (this._elem) {
            return this._elem.position().top;
        }
        else {
            return null;
        }
    };

    $.jqplot.CanvasAxisTickRenderer.prototype.getAngleRad = function() {
        var a = this.angle * Math.PI/180;
        return a;
    };


    $.jqplot.CanvasAxisTickRenderer.prototype.setTick = function(value, axisName, isMinor) {
        this.value = value;
        if (isMinor) {
            this.isMinorTick = true;
        }
        return this;
    };

    $.jqplot.CanvasAxisTickRenderer.prototype.draw = function(ctx, plot) {
        if (!this.label) {
            this.label = this.prefix + this.formatter(this.formatString, this.value);
        }

        // Memory Leaks patch
        if (this._elem) {
            if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
                window.G_vmlCanvasManager.uninitElement(this._elem.get(0));
            }

            this._elem.emptyForce();
            this._elem = null;
        }

        // create a canvas here, but can't draw on it untill it is appended
        // to dom for IE compatability.

        var elem = plot.canvasManager.getCanvas();

        this._textRenderer.setText(this.label, ctx);
        var w = this.getWidth(ctx);
        var h = this.getHeight(ctx);
        // canvases seem to need to have width and heigh attributes directly set.
        elem.width = w;
        elem.height = h;
        elem.style.width = w;
        elem.style.height = h;
        elem.style.textAlign = 'left';
        elem.style.position = 'absolute';

        elem = plot.canvasManager.initCanvas(elem);

        this._elem = $(elem);
        this._elem.css(this._styles);
        this._elem.addClass('jqplot-'+this.axis+'-tick');

        elem = null;
        return this._elem;
    };

    $.jqplot.CanvasAxisTickRenderer.prototype.pack = function() {
        this._textRenderer.draw(this._elem.get(0).getContext("2d"), this.label);
    };

})(jQuery);

/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.8
 * Revision: 1250
 *
 * Copyright (c) 2009-2013 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can
 * choose the license that best suits your project and use it accordingly.
 *
 * Although not required, the author would appreciate an email letting him
 * know of any substantial use of jqPlot.  You can reach the author at:
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     The author (Ash Searle) has placed this code in the public domain:
 *     "This code is unrestricted: you are free to use it however you like."
 *
 */
(function($) {
    var objCounter = 0;
    // class: $.jqplot.CanvasOverlay
    $.jqplot.CanvasOverlay = function(opts){
        var options = opts || {};
        this.options = {
            show: $.jqplot.config.enablePlugins,
            deferDraw: false
        };
        // prop: objects
        this.objects = [];
        this.objectNames = [];
        this.canvas = null;
        this.markerRenderer = new $.jqplot.MarkerRenderer({style:'line'});
        this.markerRenderer.init();
        this.highlightObjectIndex = null;
        if (options.objects) {
            var objs = options.objects,
                obj;
            for (var i=0; i<objs.length; i++) {
                obj = objs[i];
                for (var n in obj) {
                    switch (n) {
                        case 'line':
                            this.addLine(obj[n]);
                            break;
                        case 'horizontalLine':
                            this.addHorizontalLine(obj[n]);
                            break;
                        case 'dashedHorizontalLine':
                            this.addDashedHorizontalLine(obj[n]);
                            break;
                        case 'verticalLine':
                            this.addVerticalLine(obj[n]);
                            break;
                        case 'dashedVerticalLine':
                            this.addDashedVerticalLine(obj[n]);
                            break;
                        case 'rectangle':
                            this.addRectangle(obj[n]);
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        $.extend(true, this.options, options);
    };

    // called with scope of a plot object
    $.jqplot.CanvasOverlay.postPlotInit = function (target, data, opts) {
        var options = opts || {};
        // add a canvasOverlay attribute to the plot
        this.plugins.canvasOverlay = new $.jqplot.CanvasOverlay(options.canvasOverlay);
    };


    function LineBase() {
        this.uid = null;
        this.type = null;
        this.gridStart = null;
        this.gridStop = null;
        this.tooltipWidthFactor = 0;
        this.options = {
            // prop: name
            // Optional name for the overlay object.
            // Can be later used to retrieve the object by name.
            name: null,
            // prop: show
            // true to show (draw), false to not draw.
            show: true,
            // prop: lineWidth
            // Width of the line.
            lineWidth: 2,
            // prop: lineCap
            // Type of ending placed on the line ['round', 'butt', 'square']
            lineCap: 'round',
            // prop: color
            // color of the line
            color: '#666666',
            // prop: shadow
            // whether or not to draw a shadow on the line
            shadow: true,
            // prop: shadowAngle
            // Shadow angle in degrees
            shadowAngle: 45,
            // prop: shadowOffset
            // Shadow offset from line in pixels
            shadowOffset: 1,
            // prop: shadowDepth
            // Number of times shadow is stroked, each stroke offset shadowOffset from the last.
            shadowDepth: 3,
            // prop: shadowAlpha
            // Alpha channel transparency of shadow.  0 = transparent.
            shadowAlpha: '0.07',
            // prop: xaxis
            // X axis to use for positioning/scaling the line.
            xaxis: 'xaxis',
            // prop: yaxis
            // Y axis to use for positioning/scaling the line.
            yaxis: 'yaxis',
            // prop: showTooltip
            // Show a tooltip with data point values.
            showTooltip: false,
            // prop: showTooltipPrecision
            // Controls how close to line cursor must be to show tooltip.
            // Higher number = closer to line, lower number = farther from line.
            // 1.0 = cursor must be over line.
            showTooltipPrecision: 0.6,
            // prop: tooltipLocation
            // Where to position tooltip, 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'
            tooltipLocation: 'nw',
            // prop: fadeTooltip
            // true = fade in/out tooltip, flase = show/hide tooltip
            fadeTooltip: true,
            // prop: tooltipFadeSpeed
            // 'slow', 'def', 'fast', or number of milliseconds.
            tooltipFadeSpeed: "fast",
            // prop: tooltipOffset
            // Pixel offset of tooltip from the highlight.
            tooltipOffset: 4,
            // prop: tooltipFormatString
            // Format string passed the x and y values of the cursor on the line.
            // e.g., 'Dogs: %.2f, Cats: %d'.
            tooltipFormatString: '%d, %d'
        };
    }


    function Rectangle(options) {
        LineBase.call(this);
        this.type = 'rectangle';
        var opts = {
            // prop: xmin
            // x value for the start of the line, null to scale to axis min.
            xmin: null,
            // prop: xmax
            // x value for the end of the line, null to scale to axis max.
            xmax: null,
            // prop xOffset
            // offset ends of the line inside the grid. Number
            xOffset: '6px', // number or string. Number interpreted as units, string as pixels.
            xminOffset: null,
            xmaxOffset: null,

            ymin: null,
            ymax: null,
            yOffset: '6px', // number or string. Number interpreted as units, string as pixels.
            yminOffset: null,
            ymaxOffset: null
        };
        $.extend(true, this.options, opts, options);

        if (this.options.showTooltipPrecision < 0.01) {
            this.options.showTooltipPrecision = 0.01;
        }
    }

    Rectangle.prototype = new LineBase();
    Rectangle.prototype.constructor = Rectangle;


    /**
     * Class: Line
     * A straight line.
     */
    function Line(options) {
        LineBase.call(this);
        this.type = 'line';
        var opts = {
            // prop: start
            // [x, y] coordinates for the start of the line.
            start: [],
            // prop: stop
            // [x, y] coordinates for the end of the line.
            stop: []
        };
        $.extend(true, this.options, opts, options);

        if (this.options.showTooltipPrecision < 0.01) {
            this.options.showTooltipPrecision = 0.01;
        }
    }

    Line.prototype = new LineBase();
    Line.prototype.constructor = Line;


    /**
     * Class: HorizontalLine
     * A straight horizontal line.
     */
    function HorizontalLine(options) {
        LineBase.call(this);
        this.type = 'horizontalLine';
        var opts = {
            // prop: y
            // y value to position the line
            y: null,
            // prop: xmin
            // x value for the start of the line, null to scale to axis min.
            xmin: null,
            // prop: xmax
            // x value for the end of the line, null to scale to axis max.
            xmax: null,
            // prop xOffset
            // offset ends of the line inside the grid.  Number
            xOffset: '6px', // number or string.  Number interpreted as units, string as pixels.
            xminOffset: null,
            xmaxOffset: null
        };
        $.extend(true, this.options, opts, options);

        if (this.options.showTooltipPrecision < 0.01) {
            this.options.showTooltipPrecision = 0.01;
        }
    }

    HorizontalLine.prototype = new LineBase();
    HorizontalLine.prototype.constructor = HorizontalLine;


    /**
     * Class: DashedHorizontalLine
     * A straight dashed horizontal line.
     */
    function DashedHorizontalLine(options) {
        LineBase.call(this);
        this.type = 'dashedHorizontalLine';
        var opts = {
            y: null,
            xmin: null,
            xmax: null,
            xOffset: '6px', // number or string.  Number interpreted as units, string as pixels.
            xminOffset: null,
            xmaxOffset: null,
            // prop: dashPattern
            // Array of line, space settings in pixels.
            // Default is 8 pixel of line, 8 pixel of space.
            // Note, limit to a 2 element array b/c of bug with higher order arrays.
            dashPattern: [8,8]
        };
        $.extend(true, this.options, opts, options);

        if (this.options.showTooltipPrecision < 0.01) {
            this.options.showTooltipPrecision = 0.01;
        }
    }

    DashedHorizontalLine.prototype = new LineBase();
    DashedHorizontalLine.prototype.constructor = DashedHorizontalLine;


    /**
     * Class: VerticalLine
     * A straight vertical line.
     */
    function VerticalLine(options) {
        LineBase.call(this);
        this.type = 'verticalLine';
        var opts = {
            x: null,
            ymin: null,
            ymax: null,
            yOffset: '6px', // number or string.  Number interpreted as units, string as pixels.
            yminOffset: null,
            ymaxOffset: null
        };
        $.extend(true, this.options, opts, options);

        if (this.options.showTooltipPrecision < 0.01) {
            this.options.showTooltipPrecision = 0.01;
        }
    }

    VerticalLine.prototype = new LineBase();
    VerticalLine.prototype.constructor = VerticalLine;


    /**
     * Class: DashedVerticalLine
     * A straight dashed vertical line.
     */
    function DashedVerticalLine(options) {
        LineBase.call(this);
        this.type = 'dashedVerticalLine';
        this.start = null;
        this.stop = null;
        var opts = {
            x: null,
            ymin: null,
            ymax: null,
            yOffset: '6px', // number or string.  Number interpreted as units, string as pixels.
            yminOffset: null,
            ymaxOffset: null,
            // prop: dashPattern
            // Array of line, space settings in pixels.
            // Default is 8 pixel of line, 8 pixel of space.
            // Note, limit to a 2 element array b/c of bug with higher order arrays.
            dashPattern: [8,8]
        };
        $.extend(true, this.options, opts, options);

        if (this.options.showTooltipPrecision < 0.01) {
            this.options.showTooltipPrecision = 0.01;
        }
    }

    DashedVerticalLine.prototype = new LineBase();
    DashedVerticalLine.prototype.constructor = DashedVerticalLine;

    $.jqplot.CanvasOverlay.prototype.addLine = function(opts) {
        var line = new Line(opts);
        line.uid = objCounter++;
        this.objects.push(line);
        this.objectNames.push(line.options.name);
    };

    $.jqplot.CanvasOverlay.prototype.addHorizontalLine = function(opts) {
        var line = new HorizontalLine(opts);
        line.uid = objCounter++;
        this.objects.push(line);
        this.objectNames.push(line.options.name);
    };

    $.jqplot.CanvasOverlay.prototype.addDashedHorizontalLine = function(opts) {
        var line = new DashedHorizontalLine(opts);
        line.uid = objCounter++;
        this.objects.push(line);
        this.objectNames.push(line.options.name);
    };

    $.jqplot.CanvasOverlay.prototype.addVerticalLine = function(opts) {
        var line = new VerticalLine(opts);
        line.uid = objCounter++;
        this.objects.push(line);
        this.objectNames.push(line.options.name);
    };

    $.jqplot.CanvasOverlay.prototype.addDashedVerticalLine = function(opts) {
        var line = new DashedVerticalLine(opts);
        line.uid = objCounter++;
        this.objects.push(line);
        this.objectNames.push(line.options.name);
    };

    $.jqplot.CanvasOverlay.prototype.addRectangle = function(opts) {
        var line = new Rectangle(opts);
        line.uid = objCounter++;
        this.objects.push(line);
        this.objectNames.push(line.options.name);
    };

    $.jqplot.CanvasOverlay.prototype.removeObject = function(idx) {
        // check if integer, remove by index
        if ($.type(idx) == 'number') {
            this.objects.splice(idx, 1);
            this.objectNames.splice(idx, 1);
        }
        // if string, remove by name
        else {
            var id = $.inArray(idx, this.objectNames);
            if (id != -1) {
                this.objects.splice(id, 1);
                this.objectNames.splice(id, 1);
            }
        }
    };

    $.jqplot.CanvasOverlay.prototype.getObject = function(idx) {
        // check if integer, remove by index
        if ($.type(idx) == 'number') {
            return this.objects[idx];
        }
        // if string, remove by name
        else {
            var id = $.inArray(idx, this.objectNames);
            if (id != -1) {
                return this.objects[id];
            }
        }
    };

    // Set get as alias for getObject.
    $.jqplot.CanvasOverlay.prototype.get = $.jqplot.CanvasOverlay.prototype.getObject;

    $.jqplot.CanvasOverlay.prototype.clear = function(plot) {
        this.canvas._ctx.clearRect(0,0,this.canvas.getWidth(), this.canvas.getHeight());
    };

    $.jqplot.CanvasOverlay.prototype.draw = function(plot) {
        var obj,
            objs = this.objects,
            mr = this.markerRenderer,
            start,
            stop;
        if (this.options.show) {
            this.canvas._ctx.clearRect(0,0,this.canvas.getWidth(), this.canvas.getHeight());
            for (var k=0; k<objs.length; k++) {
                obj = objs[k];
                var opts = $.extend(true, {}, obj.options);
                if (obj.options.show) {
                    // style and shadow properties should be set before
                    // every draw of marker renderer.
                    mr.shadow = obj.options.shadow;
                    obj.tooltipWidthFactor = obj.options.lineWidth / obj.options.showTooltipPrecision;
                    switch (obj.type) {
                        case 'line':
                            // style and shadow properties should be set before
                            // every draw of marker renderer.
                            mr.style = 'line';
                            opts.closePath = false;
                            start = [plot.axes[obj.options.xaxis].series_u2p(obj.options.start[0]), plot.axes[obj.options.yaxis].series_u2p(obj.options.start[1])];
                            stop = [plot.axes[obj.options.xaxis].series_u2p(obj.options.stop[0]), plot.axes[obj.options.yaxis].series_u2p(obj.options.stop[1])];
                            obj.gridStart = start;
                            obj.gridStop = stop;
                            mr.draw(start, stop, this.canvas._ctx, opts);
                            break;
                        case 'horizontalLine':

                            // style and shadow properties should be set before
                            // every draw of marker renderer.
                            if (obj.options.y != null) {
                                mr.style = 'line';
                                opts.closePath = false;
                                var xaxis = plot.axes[obj.options.xaxis],
                                    xstart,
                                    xstop,
                                    y = plot.axes[obj.options.yaxis].series_u2p(obj.options.y),
                                    xminoff = obj.options.xminOffset || obj.options.xOffset,
                                    xmaxoff = obj.options.xmaxOffset || obj.options.xOffset;
                                if (obj.options.xmin != null) {
                                    xstart = xaxis.series_u2p(obj.options.xmin);
                                }
                                else if (xminoff != null) {
                                    if ($.type(xminoff) == "number") {
                                        xstart = xaxis.series_u2p(xaxis.min + xminoff);
                                    }
                                    else if ($.type(xminoff) == "string") {
                                        xstart = xaxis.series_u2p(xaxis.min) + parseFloat(xminoff);
                                    }
                                }
                                if (obj.options.xmax != null) {
                                    xstop = xaxis.series_u2p(obj.options.xmax);
                                }
                                else if (xmaxoff != null) {
                                    if ($.type(xmaxoff) == "number") {
                                        xstop = xaxis.series_u2p(xaxis.max - xmaxoff);
                                    }
                                    else if ($.type(xmaxoff) == "string") {
                                        xstop = xaxis.series_u2p(xaxis.max) - parseFloat(xmaxoff);
                                    }
                                }
                                if (xstop != null && xstart != null) {
                                    obj.gridStart = [xstart, y];
                                    obj.gridStop = [xstop, y];
                                    mr.draw([xstart, y], [xstop, y], this.canvas._ctx, opts);
                                }
                            }
                            break;

                        case 'dashedHorizontalLine':

                            var dashPat = obj.options.dashPattern;
                            var dashPatLen = 0;
                            for (var i=0; i<dashPat.length; i++) {
                                dashPatLen += dashPat[i];
                            }

                            // style and shadow properties should be set before
                            // every draw of marker renderer.
                            if (obj.options.y != null) {
                                mr.style = 'line';
                                opts.closePath = false;
                                var xaxis = plot.axes[obj.options.xaxis],
                                    xstart,
                                    xstop,
                                    y = plot.axes[obj.options.yaxis].series_u2p(obj.options.y),
                                    xminoff = obj.options.xminOffset || obj.options.xOffset,
                                    xmaxoff = obj.options.xmaxOffset || obj.options.xOffset;
                                if (obj.options.xmin != null) {
                                    xstart = xaxis.series_u2p(obj.options.xmin);
                                }
                                else if (xminoff != null) {
                                    if ($.type(xminoff) == "number") {
                                        xstart = xaxis.series_u2p(xaxis.min + xminoff);
                                    }
                                    else if ($.type(xminoff) == "string") {
                                        xstart = xaxis.series_u2p(xaxis.min) + parseFloat(xminoff);
                                    }
                                }
                                if (obj.options.xmax != null) {
                                    xstop = xaxis.series_u2p(obj.options.xmax);
                                }
                                else if (xmaxoff != null) {
                                    if ($.type(xmaxoff) == "number") {
                                        xstop = xaxis.series_u2p(xaxis.max - xmaxoff);
                                    }
                                    else if ($.type(xmaxoff) == "string") {
                                        xstop = xaxis.series_u2p(xaxis.max) - parseFloat(xmaxoff);
                                    }
                                }
                                if (xstop != null && xstart != null) {
                                    obj.gridStart = [xstart, y];
                                    obj.gridStop = [xstop, y];
                                    var numDash = Math.ceil((xstop - xstart)/dashPatLen);
                                    var b=xstart, e;
                                    for (var i=0; i<numDash; i++) {
                                        for (var j=0; j<dashPat.length; j+=2) {
                                            e = b+dashPat[j];
                                            mr.draw([b, y], [e, y], this.canvas._ctx, opts);
                                            b += dashPat[j];
                                            if (j < dashPat.length-1) {
                                                b += dashPat[j+1];
                                            }
                                        }
                                    }
                                }
                            }
                            break;

                        case 'verticalLine':

                            // style and shadow properties should be set before
                            // every draw of marker renderer.
                            if (obj.options.x != null) {
                                mr.style = 'line';
                                opts.closePath = false;
                                var yaxis = plot.axes[obj.options.yaxis],
                                    ystart,
                                    ystop,
                                    x = plot.axes[obj.options.xaxis].series_u2p(obj.options.x),
                                    yminoff = obj.options.yminOffset || obj.options.yOffset,
                                    ymaxoff = obj.options.ymaxOffset || obj.options.yOffset;
                                if (obj.options.ymin != null) {
                                    ystart = yaxis.series_u2p(obj.options.ymin);
                                }
                                else if (yminoff != null) {
                                    if ($.type(yminoff) == "number") {
                                        ystart = yaxis.series_u2p(yaxis.min - yminoff);
                                    }
                                    else if ($.type(yminoff) == "string") {
                                        ystart = yaxis.series_u2p(yaxis.min) - parseFloat(yminoff);
                                    }
                                }
                                if (obj.options.ymax != null) {
                                    ystop = yaxis.series_u2p(obj.options.ymax);
                                }
                                else if (ymaxoff != null) {
                                    if ($.type(ymaxoff) == "number") {
                                        ystop = yaxis.series_u2p(yaxis.max + ymaxoff);
                                    }
                                    else if ($.type(ymaxoff) == "string") {
                                        ystop = yaxis.series_u2p(yaxis.max) + parseFloat(ymaxoff);
                                    }
                                }
                                if (ystop != null && ystart != null) {
                                    obj.gridStart = [x, ystart];
                                    obj.gridStop = [x, ystop];
                                    mr.draw([x, ystart], [x, ystop], this.canvas._ctx, opts);
                                }
                            }
                            break;

                        case 'dashedVerticalLine':

                            var dashPat = obj.options.dashPattern;
                            var dashPatLen = 0;
                            for (var i=0; i<dashPat.length; i++) {
                                dashPatLen += dashPat[i];
                            }

                            // style and shadow properties should be set before
                            // every draw of marker renderer.
                            if (obj.options.x != null) {
                                mr.style = 'line';
                                opts.closePath = false;
                                var yaxis = plot.axes[obj.options.yaxis],
                                    ystart,
                                    ystop,
                                    x = plot.axes[obj.options.xaxis].series_u2p(obj.options.x),
                                    yminoff = obj.options.yminOffset || obj.options.yOffset,
                                    ymaxoff = obj.options.ymaxOffset || obj.options.yOffset;
                                if (obj.options.ymin != null) {
                                    ystart = yaxis.series_u2p(obj.options.ymin);
                                }
                                else if (yminoff != null) {
                                    if ($.type(yminoff) == "number") {
                                        ystart = yaxis.series_u2p(yaxis.min - yminoff);
                                    }
                                    else if ($.type(yminoff) == "string") {
                                        ystart = yaxis.series_u2p(yaxis.min) - parseFloat(yminoff);
                                    }
                                }
                                if (obj.options.ymax != null) {
                                    ystop = yaxis.series_u2p(obj.options.ymax);
                                }
                                else if (ymaxoff != null) {
                                    if ($.type(ymaxoff) == "number") {
                                        ystop = yaxis.series_u2p(yaxis.max + ymaxoff);
                                    }
                                    else if ($.type(ymaxoff) == "string") {
                                        ystop = yaxis.series_u2p(yaxis.max) + parseFloat(ymaxoff);
                                    }
                                }


                                if (ystop != null && ystart != null) {
                                    obj.gridStart = [x, ystart];
                                    obj.gridStop = [x, ystop];
                                    var numDash = Math.ceil((ystart - ystop)/dashPatLen);
                                    var firstDashAdjust = ((numDash * dashPatLen) - (ystart - ystop))/2.0;
                                    var b=ystart, e, bs, es;
                                    for (var i=0; i<numDash; i++) {
                                        for (var j=0; j<dashPat.length; j+=2) {
                                            e = b - dashPat[j];
                                            if (e < ystop) {
                                                e = ystop;
                                            }
                                            if (b < ystop) {
                                                b = ystop;
                                            }
                                            // es = e;
                                            // if (i == 0) {
                                            //  es += firstDashAdjust;
                                            // }
                                            mr.draw([x, b], [x, e], this.canvas._ctx, opts);
                                            b -= dashPat[j];
                                            if (j < dashPat.length-1) {
                                                b -= dashPat[j+1];
                                            }
                                        }
                                    }
                                }
                            }
                            break;

                        case 'rectangle':
                            // style and shadow properties should be set before
                            // every draw of marker renderer.
                            mr.style = 'line';
                            opts.closePath = true;

                            var xaxis = plot.axes[obj.options.xaxis],
                                xstart,
                                xstop,
                                y = plot.axes[obj.options.yaxis].series_u2p(obj.options.y),
                                xminoff = obj.options.xminOffset || obj.options.xOffset,
                                xmaxoff = obj.options.xmaxOffset || obj.options.xOffset;
                            if (obj.options.xmin != null) {
                                xstart = xaxis.series_u2p(obj.options.xmin);
                            }
                            else if (xminoff != null) {
                                if ($.type(xminoff) == "number") {
                                    xstart = xaxis.series_u2p(xaxis.min + xminoff);
                                }
                                else if ($.type(xminoff) == "string") {
                                    xstart = xaxis.series_u2p(xaxis.min) + parseFloat(xminoff);
                                }
                            }
                            if (obj.options.xmax != null) {
                                xstop = xaxis.series_u2p(obj.options.xmax);
                            }
                            else if (xmaxoff != null) {
                                if ($.type(xmaxoff) == "number") {
                                    xstop = xaxis.series_u2p(xaxis.max - xmaxoff);
                                }
                                else if ($.type(xmaxoff) == "string") {
                                    xstop = xaxis.series_u2p(xaxis.max) - parseFloat(xmaxoff);
                                }
                            }

                            var yaxis = plot.axes[obj.options.yaxis],
                                ystart,
                                ystop,
                                x = plot.axes[obj.options.xaxis].series_u2p(obj.options.x),
                                yminoff = obj.options.yminOffset || obj.options.yOffset,
                                ymaxoff = obj.options.ymaxOffset || obj.options.yOffset;
                            if (obj.options.ymin != null) {
                                ystart = yaxis.series_u2p(obj.options.ymin);
                            }
                            else if (yminoff != null) {
                                if ($.type(yminoff) == "number") {
                                    ystart = yaxis.series_u2p(yaxis.min - yminoff);
                                }
                                else if ($.type(yminoff) == "string") {
                                    ystart = yaxis.series_u2p(yaxis.min) - parseFloat(yminoff);
                                }
                            }
                            if (obj.options.ymax != null) {
                                ystop = yaxis.series_u2p(obj.options.ymax);
                            }
                            else if (ymaxoff != null) {
                                if ($.type(ymaxoff) == "number") {
                                    ystop = yaxis.series_u2p(yaxis.max + ymaxoff);
                                }
                                else if ($.type(ymaxoff) == "string") {
                                    ystop = yaxis.series_u2p(yaxis.max) + parseFloat(ymaxoff);
                                }
                            }


                            if (xstop != null && xstart != null && ystop != null && ystart != null) {
                                obj.gridStart = [xstart, ystart];
                                obj.gridStop = [xstop, ystop];

                                this.canvas._ctx.fillStyle = obj.options.color;
                                this.canvas._ctx.fillRect(xstart, ystart, xstop - xstart, ystop - ystart);
                            }
                            break;

                        default:
                            break;
                    }
                }
            }
        }
    };

    // called within context of plot
    // create a canvas which we can draw on.
    // insert it before the eventCanvas, so eventCanvas will still capture events.
    $.jqplot.CanvasOverlay.postPlotDraw = function() {
        var co = this.plugins.canvasOverlay;
        // Memory Leaks patch
        if (co && co.highlightCanvas) {
            co.highlightCanvas.resetCanvas();
            co.highlightCanvas = null;
        }
        co.canvas = new $.jqplot.GenericCanvas();

        this.eventCanvas._elem.before(co.canvas.createElement(this._gridPadding, 'jqplot-overlayCanvas-canvas', this._plotDimensions, this));
        co.canvas.setContext();
        if (!co.deferDraw) {
            co.draw(this);
        }

        var elem = document.createElement('div');
        co._tooltipElem = $(elem);
        elem = null;
        co._tooltipElem.addClass('jqplot-canvasOverlay-tooltip');
        co._tooltipElem.css({position:'absolute', display:'none'});

        this.eventCanvas._elem.before(co._tooltipElem);
        this.eventCanvas._elem.bind('mouseleave', { elem: co._tooltipElem }, function (ev) { ev.data.elem.hide(); });

        var co = null;
    };


    function showTooltip(plot, obj, gridpos, datapos) {
        var co = plot.plugins.canvasOverlay;
        var elem = co._tooltipElem;

        var opts = obj.options, x, y;

        elem.html($.jqplot.sprintf(opts.tooltipFormatString, datapos[0], datapos[1]));

        switch (opts.tooltipLocation) {
            case 'nw':
                x = gridpos[0] + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset;
                y = gridpos[1] + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true);
                break;
            case 'n':
                x = gridpos[0] + plot._gridPadding.left - elem.outerWidth(true)/2;
                y = gridpos[1] + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true);
                break;
            case 'ne':
                x = gridpos[0] + plot._gridPadding.left + opts.tooltipOffset;
                y = gridpos[1] + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true);
                break;
            case 'e':
                x = gridpos[0] + plot._gridPadding.left + opts.tooltipOffset;
                y = gridpos[1] + plot._gridPadding.top - elem.outerHeight(true)/2;
                break;
            case 'se':
                x = gridpos[0] + plot._gridPadding.left + opts.tooltipOffset;
                y = gridpos[1] + plot._gridPadding.top + opts.tooltipOffset;
                break;
            case 's':
                x = gridpos[0] + plot._gridPadding.left - elem.outerWidth(true)/2;
                y = gridpos[1] + plot._gridPadding.top + opts.tooltipOffset;
                break;
            case 'sw':
                x = gridpos[0] + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset;
                y = gridpos[1] + plot._gridPadding.top + opts.tooltipOffset;
                break;
            case 'w':
                x = gridpos[0] + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset;
                y = gridpos[1] + plot._gridPadding.top - elem.outerHeight(true)/2;
                break;
            default: // same as 'nw'
                x = gridpos[0] + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset;
                y = gridpos[1] + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true);
                break;
        }

        elem.css('left', x);
        elem.css('top', y);
        if (opts.fadeTooltip) {
            // Fix for stacked up animations.  Thnanks Trevor!
            elem.stop(true,true).fadeIn(opts.tooltipFadeSpeed);
        }
        else {
            elem.show();
        }
        elem = null;
    }


    function isNearLine(point, lstart, lstop, width) {
        // r is point to test, p and q are end points.
        var rx = point[0];
        var ry = point[1];
        var px = Math.round(lstop[0]);
        var py = Math.round(lstop[1]);
        var qx = Math.round(lstart[0]);
        var qy = Math.round(lstart[1]);

        var l = Math.sqrt(Math.pow(px-qx, 2) + Math.pow(py-qy, 2));

        // scale error term by length of line.
        var eps = width*l;
        var res = Math.abs((qx-px) * (ry-py) - (qy-py) * (rx-px));
        var ret = (res < eps) ? true : false;
        return ret;
    }

    function isNearRectangle(point, lstart, lstop, width) {
        // r is point to test, p and q are end points.
        var rx = point[0];
        var ry = point[1];
        var px = Math.round(lstop[0]);
        var py = Math.round(lstop[1]);
        var qx = Math.round(lstart[0]);
        var qy = Math.round(lstart[1]);

        var temp;
        if (px > qx) { temp = px; px = qx; qx = temp; }
        if (py > qy) { temp = py; py = qy; qy = temp; }

        var ret = (rx >= px && rx <= qx && ry >= py && ry <= qy);

        return ret;
    }


    function handleMove(ev, gridpos, datapos, neighbor, plot) {
        var co = plot.plugins.canvasOverlay;
        var objs = co.objects;
        var l = objs.length;
        var obj, haveHighlight=false;
        var elem;
        for (var i=0; i<l; i++) {
            obj = objs[i];
            if (obj.options.showTooltip) {
                var n;
                if (obj.type === 'rectangle') {
                    n = isNearRectangle([gridpos.x, gridpos.y], obj.gridStart, obj.gridStop, obj.tooltipWidthFactor);
                } else {
                    n = isNearLine([gridpos.x, gridpos.y], obj.gridStart, obj.gridStop, obj.tooltipWidthFactor);
                }
                datapos = [plot.axes[obj.options.xaxis].series_p2u(gridpos.x), plot.axes[obj.options.yaxis].series_p2u(gridpos.y)];

                // cases:
                //    near line, no highlighting
                //    near line, highliting on this line
                //    near line, highlighting another line
                //    not near any line, highlighting
                //    not near any line, no highlighting

                // near line, not currently highlighting
                if (n && co.highlightObjectIndex == null) {
                    switch (obj.type) {
                        case 'line':
                            showTooltip(plot, obj, [gridpos.x, gridpos.y], datapos);
                            break;

                        case 'horizontalLine':
                        case 'dashedHorizontalLine':
                            showTooltip(plot, obj, [gridpos.x, obj.gridStart[1]], [datapos[0], obj.options.y]);
                            break;

                        case 'verticalLine':
                        case 'dashedVerticalLine':
                            showTooltip(plot, obj, [obj.gridStart[0], gridpos.y], [obj.options.x, datapos[1]]);
                            break;

                        case 'rectangle':
                            showTooltip(plot, obj, [obj.gridStart[0], gridpos.y], [obj.options.x, datapos[1]]);
                            break;

                        default:
                            break;
                    }
                    co.highlightObjectIndex = i;
                    haveHighlight = true;
                    break;
                }

                // near line, highlighting another line.
                else if (n && co.highlightObjectIndex !== i) {
                    // turn off tooltip.
                    elem = co._tooltipElem;
                    if (obj.fadeTooltip) {
                        elem.fadeOut(obj.tooltipFadeSpeed);
                    }
                    else {
                        elem.hide();
                    }

                    // turn on right tooltip.
                    switch (obj.type) {
                        case 'line':
                            showTooltip(plot, obj, [gridpos.x, gridpos.y], datapos);
                            break;

                        case 'horizontalLine':
                        case 'dashedHorizontalLine':
                            showTooltip(plot, obj, [gridpos.x, obj.gridStart[1]], [datapos[0], obj.options.y]);
                            break;

                        case 'verticalLine':
                        case 'dashedVerticalLine':
                            showTooltip(plot, obj, [obj.gridStart[0], gridpos.y], [obj.options.x, datapos[1]]);
                            break;

                        case 'rectangle':
                            showTooltip(plot, obj, [obj.gridStart[0], gridpos.y], [obj.options.x, datapos[1]]);
                            break;

                        default:
                            break;
                    }

                    co.highlightObjectIndex = i;
                    haveHighlight = true;
                    break;
                }

                // near line, already highlighting this line, update
                else if (n) {
                    switch (obj.type) {
                        case 'line':
                            showTooltip(plot, obj, [gridpos.x, gridpos.y], datapos);
                            break;

                        case 'horizontalLine':
                        case 'dashedHorizontalLine':
                            showTooltip(plot, obj, [gridpos.x, obj.gridStart[1]], [datapos[0], obj.options.y]);
                            break;

                        case 'verticalLine':
                        case 'dashedVerticalLine':
                            showTooltip(plot, obj, [obj.gridStart[0], gridpos.y], [obj.options.x, datapos[1]]);
                            break;

                        case 'rectangle':
                            showTooltip(plot, obj, [obj.gridStart[0], gridpos.y], [obj.options.x, datapos[1]]);
                            break;

                        default:
                            break;
                    }

                    haveHighlight = true;
                    break;
                }
            }
        }

        // check if we are highlighting and not near a line, turn it off.
        if (!haveHighlight && co.highlightObjectIndex !== null) {
            elem = co._tooltipElem;
            obj = co.getObject(co.highlightObjectIndex);
            if (obj.fadeTooltip) {
                elem.fadeOut(obj.tooltipFadeSpeed);
            }
            else {
                elem.hide();
            }
            co.highlightObjectIndex = null;
        }
    }

    $.jqplot.postInitHooks.push($.jqplot.CanvasOverlay.postPlotInit);
    $.jqplot.postDrawHooks.push($.jqplot.CanvasOverlay.postPlotDraw);
    $.jqplot.eventListenerHooks.push(['jqplotMouseMove', handleMove]);

})(jQuery);

/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.8
 * Revision: 1250
 *
 * Copyright (c) 2009-2013 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can
 * choose the license that best suits your project and use it accordingly.
 *
 * Although not required, the author would appreciate an email letting him
 * know of any substantial use of jqPlot.  You can reach the author at:
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     The author (Ash Searle) has placed this code in the public domain:
 *     "This code is unrestricted: you are free to use it however you like."
 *
 * included jsDate library by Chris Leonello:
 *
 * Copyright (c) 2010-2013 Chris Leonello
 *
 * jsDate is currently available for use in all personal or commercial projects
 * under both the MIT and GPL version 2.0 licenses. This means that you can
 * choose the license that best suits your project and use it accordingly.
 *
 * jsDate borrows many concepts and ideas from the Date Instance
 * Methods by Ken Snyder along with some parts of Ken's actual code.
 *
 * Ken's original Date Instance Methods and copyright notice:
 *
 * Ken Snyder (ken d snyder at gmail dot com)
 * 2008-09-10
 * version 2.0.2 (http://kendsnyder.com/sandbox/date/)
 * Creative Commons Attribution License 3.0 (http://creativecommons.org/licenses/by/3.0/)
 *
 * jqplotToImage function based on Larry Siden's export-jqplot-to-png.js.
 * Larry has generously given permission to adapt his code for inclusion
 * into jqPlot.
 *
 * Larry's original code can be found here:
 *
 * https://github.com/lsiden/export-jqplot-to-png
 *
 *
 */

(function($) {
    // This code is a modified version of the canvastext.js code, copyright below:
    //
    // This code is released to the public domain by Jim Studt, 2007.
    // He may keep some sort of up to date copy at http://www.federated.com/~jim/canvastext/
    //
    $.jqplot.CanvasTextRenderer = function(options){
        this.fontStyle = 'normal';  // normal, italic, oblique [not implemented]
        this.fontVariant = 'normal';    // normal, small caps [not implemented]
        this.fontWeight = 'normal'; // normal, bold, bolder, lighter, 100 - 900
        this.fontSize = '10px';
        this.fontFamily = 'sans-serif';
        this.fontStretch = 1.0;
        this.fillStyle = '#666666';
        this.angle = 0;
        this.textAlign = 'start';
        this.textBaseline = 'alphabetic';
        this.text;
        this.width;
        this.height;
        this.pt2px = 1.28;

        $.extend(true, this, options);
        this.normalizedFontSize = this.normalizeFontSize(this.fontSize);
        this.setHeight();
    };

    $.jqplot.CanvasTextRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
        this.normalizedFontSize = this.normalizeFontSize(this.fontSize);
        this.setHeight();
    };

    // convert css spec into point size
    // returns float
    $.jqplot.CanvasTextRenderer.prototype.normalizeFontSize = function(sz) {
        sz = String(sz);
        var n = parseFloat(sz);
        if (sz.indexOf('px') > -1) {
            return n/this.pt2px;
        }
        else if (sz.indexOf('pt') > -1) {
            return n;
        }
        else if (sz.indexOf('em') > -1) {
            return n*12;
        }
        else if (sz.indexOf('%') > -1) {
            return n*12/100;
        }
        // default to pixels;
        else {
            return n/this.pt2px;
        }
    };


    $.jqplot.CanvasTextRenderer.prototype.fontWeight2Float = function(w) {
        // w = normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900
        // return values adjusted for Hershey font.
        if (Number(w)) {
            return w/400;
        }
        else {
            switch (w) {
                case 'normal':
                    return 1;
                    break;
                case 'bold':
                    return 1.75;
                    break;
                case 'bolder':
                    return 2.25;
                    break;
                case 'lighter':
                    return 0.75;
                    break;
                default:
                    return 1;
                    break;
            }
        }
    };

    $.jqplot.CanvasTextRenderer.prototype.getText = function() {
        return this.text;
    };

    $.jqplot.CanvasTextRenderer.prototype.setText = function(t, ctx) {
        this.text = t;
        this.setWidth(ctx);
        return this;
    };

    $.jqplot.CanvasTextRenderer.prototype.getWidth = function(ctx) {
        return this.width;
    };

    $.jqplot.CanvasTextRenderer.prototype.setWidth = function(ctx, w) {
        if (!w) {
            this.width = this.measure(ctx, this.text);
        }
        else {
            this.width = w;
        }
        return this;
    };

    // return height in pixels.
    $.jqplot.CanvasTextRenderer.prototype.getHeight = function(ctx) {
        return this.height;
    };

    // w - height in pt
    // set heigh in px
    $.jqplot.CanvasTextRenderer.prototype.setHeight = function(w) {
        if (!w) {
            //height = this.fontSize /0.75;
            this.height = this.normalizedFontSize * this.pt2px;
        }
        else {
            this.height = w;
        }
        return this;
    };

    $.jqplot.CanvasTextRenderer.prototype.letter = function (ch)
    {
        return this.letters[ch];
    };

    $.jqplot.CanvasTextRenderer.prototype.ascent = function()
    {
        return this.normalizedFontSize;
    };

    $.jqplot.CanvasTextRenderer.prototype.descent = function()
    {
        return 7.0*this.normalizedFontSize/25.0;
    };

    $.jqplot.CanvasTextRenderer.prototype.measure = function(ctx, str)
    {
        var total = 0;
        var len = str.length;

        for (var i = 0; i < len; i++) {
            var c = this.letter(str.charAt(i));
            if (c) {
                total += c.width * this.normalizedFontSize / 25.0 * this.fontStretch;
            }
        }
        return total;
    };

    $.jqplot.CanvasTextRenderer.prototype.draw = function(ctx,str)
    {
        var x = 0;
        // leave room at bottom for descenders.
        var y = this.height*0.72;
        var total = 0;
        var len = str.length;
        var mag = this.normalizedFontSize / 25.0;

        ctx.save();
        var tx, ty;

        // 1st quadrant
        if ((-Math.PI/2 <= this.angle && this.angle <= 0) || (Math.PI*3/2 <= this.angle && this.angle <= Math.PI*2)) {
            tx = 0;
            ty = -Math.sin(this.angle) * this.width;
        }
        // 4th quadrant
        else if ((0 < this.angle && this.angle <= Math.PI/2) || (-Math.PI*2 <= this.angle && this.angle <= -Math.PI*3/2)) {
            tx = Math.sin(this.angle) * this.height;
            ty = 0;
        }
        // 2nd quadrant
        else if ((-Math.PI < this.angle && this.angle < -Math.PI/2) || (Math.PI <= this.angle && this.angle <= Math.PI*3/2)) {
            tx = -Math.cos(this.angle) * this.width;
            ty = -Math.sin(this.angle) * this.width - Math.cos(this.angle) * this.height;
        }
        // 3rd quadrant
        else if ((-Math.PI*3/2 < this.angle && this.angle < Math.PI) || (Math.PI/2 < this.angle && this.angle < Math.PI)) {
            tx = Math.sin(this.angle) * this.height - Math.cos(this.angle)*this.width;
            ty = -Math.cos(this.angle) * this.height;
        }

        ctx.strokeStyle = this.fillStyle;
        ctx.fillStyle = this.fillStyle;
        ctx.translate(tx, ty);
        ctx.rotate(this.angle);
        ctx.lineCap = "round";
        // multiplier was 2.0
        var fact = (this.normalizedFontSize > 30) ? 2.0 : 2 + (30 - this.normalizedFontSize)/20;
        ctx.lineWidth = fact * mag * this.fontWeight2Float(this.fontWeight);

        for ( var i = 0; i < len; i++) {
            var c = this.letter( str.charAt(i));
            if ( !c) {
                continue;
            }

            ctx.beginPath();

            var penUp = 1;
            var needStroke = 0;
            for ( var j = 0; j < c.points.length; j++) {
                var a = c.points[j];
                if ( a[0] == -1 && a[1] == -1) {
                    penUp = 1;
                    continue;
                }
                if ( penUp) {
                    ctx.moveTo( x + a[0]*mag*this.fontStretch, y - a[1]*mag);
                    penUp = false;
                } else {
                    ctx.lineTo( x + a[0]*mag*this.fontStretch, y - a[1]*mag);
                }
            }
            ctx.stroke();
            x += c.width*mag*this.fontStretch;
        }
        ctx.restore();
        return total;
    };

    $.jqplot.CanvasTextRenderer.prototype.letters = {
        ' ': { width: 16, points: [] },
        '!': { width: 10, points: [[5,21],[5,7],[-1,-1],[5,2],[4,1],[5,0],[6,1],[5,2]] },
        '"': { width: 16, points: [[4,21],[4,14],[-1,-1],[12,21],[12,14]] },
        '#': { width: 21, points: [[11,25],[4,-7],[-1,-1],[17,25],[10,-7],[-1,-1],[4,12],[18,12],[-1,-1],[3,6],[17,6]] },
        '$': { width: 20, points: [[8,25],[8,-4],[-1,-1],[12,25],[12,-4],[-1,-1],[17,18],[15,20],[12,21],[8,21],[5,20],[3,18],[3,16],[4,14],[5,13],[7,12],[13,10],[15,9],[16,8],[17,6],[17,3],[15,1],[12,0],[8,0],[5,1],[3,3]] },
        '%': { width: 24, points: [[21,21],[3,0],[-1,-1],[8,21],[10,19],[10,17],[9,15],[7,14],[5,14],[3,16],[3,18],[4,20],[6,21],[8,21],[10,20],[13,19],[16,19],[19,20],[21,21],[-1,-1],[17,7],[15,6],[14,4],[14,2],[16,0],[18,0],[20,1],[21,3],[21,5],[19,7],[17,7]] },
        '&': { width: 26, points: [[23,12],[23,13],[22,14],[21,14],[20,13],[19,11],[17,6],[15,3],[13,1],[11,0],[7,0],[5,1],[4,2],[3,4],[3,6],[4,8],[5,9],[12,13],[13,14],[14,16],[14,18],[13,20],[11,21],[9,20],[8,18],[8,16],[9,13],[11,10],[16,3],[18,1],[20,0],[22,0],[23,1],[23,2]] },
        '\'': { width: 10, points: [[5,19],[4,20],[5,21],[6,20],[6,18],[5,16],[4,15]] },
        '(': { width: 14, points: [[11,25],[9,23],[7,20],[5,16],[4,11],[4,7],[5,2],[7,-2],[9,-5],[11,-7]] },
        ')': { width: 14, points: [[3,25],[5,23],[7,20],[9,16],[10,11],[10,7],[9,2],[7,-2],[5,-5],[3,-7]] },
        '*': { width: 16, points: [[8,21],[8,9],[-1,-1],[3,18],[13,12],[-1,-1],[13,18],[3,12]] },
        '+': { width: 26, points: [[13,18],[13,0],[-1,-1],[4,9],[22,9]] },
        ',': { width: 10, points: [[6,1],[5,0],[4,1],[5,2],[6,1],[6,-1],[5,-3],[4,-4]] },
        '-': { width: 18, points: [[6,9],[12,9]] },
        '.': { width: 10, points: [[5,2],[4,1],[5,0],[6,1],[5,2]] },
        '/': { width: 22, points: [[20,25],[2,-7]] },
        '0': { width: 20, points: [[9,21],[6,20],[4,17],[3,12],[3,9],[4,4],[6,1],[9,0],[11,0],[14,1],[16,4],[17,9],[17,12],[16,17],[14,20],[11,21],[9,21]] },
        '1': { width: 20, points: [[6,17],[8,18],[11,21],[11,0]] },
        '2': { width: 20, points: [[4,16],[4,17],[5,19],[6,20],[8,21],[12,21],[14,20],[15,19],[16,17],[16,15],[15,13],[13,10],[3,0],[17,0]] },
        '3': { width: 20, points: [[5,21],[16,21],[10,13],[13,13],[15,12],[16,11],[17,8],[17,6],[16,3],[14,1],[11,0],[8,0],[5,1],[4,2],[3,4]] },
        '4': { width: 20, points: [[13,21],[3,7],[18,7],[-1,-1],[13,21],[13,0]] },
        '5': { width: 20, points: [[15,21],[5,21],[4,12],[5,13],[8,14],[11,14],[14,13],[16,11],[17,8],[17,6],[16,3],[14,1],[11,0],[8,0],[5,1],[4,2],[3,4]] },
        '6': { width: 20, points: [[16,18],[15,20],[12,21],[10,21],[7,20],[5,17],[4,12],[4,7],[5,3],[7,1],[10,0],[11,0],[14,1],[16,3],[17,6],[17,7],[16,10],[14,12],[11,13],[10,13],[7,12],[5,10],[4,7]] },
        '7': { width: 20, points: [[17,21],[7,0],[-1,-1],[3,21],[17,21]] },
        '8': { width: 20, points: [[8,21],[5,20],[4,18],[4,16],[5,14],[7,13],[11,12],[14,11],[16,9],[17,7],[17,4],[16,2],[15,1],[12,0],[8,0],[5,1],[4,2],[3,4],[3,7],[4,9],[6,11],[9,12],[13,13],[15,14],[16,16],[16,18],[15,20],[12,21],[8,21]] },
        '9': { width: 20, points: [[16,14],[15,11],[13,9],[10,8],[9,8],[6,9],[4,11],[3,14],[3,15],[4,18],[6,20],[9,21],[10,21],[13,20],[15,18],[16,14],[16,9],[15,4],[13,1],[10,0],[8,0],[5,1],[4,3]] },
        ':': { width: 10, points: [[5,14],[4,13],[5,12],[6,13],[5,14],[-1,-1],[5,2],[4,1],[5,0],[6,1],[5,2]] },
        ';': { width: 10, points: [[5,14],[4,13],[5,12],[6,13],[5,14],[-1,-1],[6,1],[5,0],[4,1],[5,2],[6,1],[6,-1],[5,-3],[4,-4]] },
        '<': { width: 24, points: [[20,18],[4,9],[20,0]] },
        '=': { width: 26, points: [[4,12],[22,12],[-1,-1],[4,6],[22,6]] },
        '>': { width: 24, points: [[4,18],[20,9],[4,0]] },
        '?': { width: 18, points: [[3,16],[3,17],[4,19],[5,20],[7,21],[11,21],[13,20],[14,19],[15,17],[15,15],[14,13],[13,12],[9,10],[9,7],[-1,-1],[9,2],[8,1],[9,0],[10,1],[9,2]] },
        '@': { width: 27, points: [[18,13],[17,15],[15,16],[12,16],[10,15],[9,14],[8,11],[8,8],[9,6],[11,5],[14,5],[16,6],[17,8],[-1,-1],[12,16],[10,14],[9,11],[9,8],[10,6],[11,5],[-1,-1],[18,16],[17,8],[17,6],[19,5],[21,5],[23,7],[24,10],[24,12],[23,15],[22,17],[20,19],[18,20],[15,21],[12,21],[9,20],[7,19],[5,17],[4,15],[3,12],[3,9],[4,6],[5,4],[7,2],[9,1],[12,0],[15,0],[18,1],[20,2],[21,3],[-1,-1],[19,16],[18,8],[18,6],[19,5]] },
        'A': { width: 18, points: [[9,21],[1,0],[-1,-1],[9,21],[17,0],[-1,-1],[4,7],[14,7]] },
        'B': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,15],[17,13],[16,12],[13,11],[-1,-1],[4,11],[13,11],[16,10],[17,9],[18,7],[18,4],[17,2],[16,1],[13,0],[4,0]] },
        'C': { width: 21, points: [[18,16],[17,18],[15,20],[13,21],[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5]] },
        'D': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[11,21],[14,20],[16,18],[17,16],[18,13],[18,8],[17,5],[16,3],[14,1],[11,0],[4,0]] },
        'E': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,21],[17,21],[-1,-1],[4,11],[12,11],[-1,-1],[4,0],[17,0]] },
        'F': { width: 18, points: [[4,21],[4,0],[-1,-1],[4,21],[17,21],[-1,-1],[4,11],[12,11]] },
        'G': { width: 21, points: [[18,16],[17,18],[15,20],[13,21],[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[18,8],[-1,-1],[13,8],[18,8]] },
        'H': { width: 22, points: [[4,21],[4,0],[-1,-1],[18,21],[18,0],[-1,-1],[4,11],[18,11]] },
        'I': { width: 8, points: [[4,21],[4,0]] },
        'J': { width: 16, points: [[12,21],[12,5],[11,2],[10,1],[8,0],[6,0],[4,1],[3,2],[2,5],[2,7]] },
        'K': { width: 21, points: [[4,21],[4,0],[-1,-1],[18,21],[4,7],[-1,-1],[9,12],[18,0]] },
        'L': { width: 17, points: [[4,21],[4,0],[-1,-1],[4,0],[16,0]] },
        'M': { width: 24, points: [[4,21],[4,0],[-1,-1],[4,21],[12,0],[-1,-1],[20,21],[12,0],[-1,-1],[20,21],[20,0]] },
        'N': { width: 22, points: [[4,21],[4,0],[-1,-1],[4,21],[18,0],[-1,-1],[18,21],[18,0]] },
        'O': { width: 22, points: [[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[19,8],[19,13],[18,16],[17,18],[15,20],[13,21],[9,21]] },
        'P': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,14],[17,12],[16,11],[13,10],[4,10]] },
        'Q': { width: 22, points: [[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[19,8],[19,13],[18,16],[17,18],[15,20],[13,21],[9,21],[-1,-1],[12,4],[18,-2]] },
        'R': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,15],[17,13],[16,12],[13,11],[4,11],[-1,-1],[11,11],[18,0]] },
        'S': { width: 20, points: [[17,18],[15,20],[12,21],[8,21],[5,20],[3,18],[3,16],[4,14],[5,13],[7,12],[13,10],[15,9],[16,8],[17,6],[17,3],[15,1],[12,0],[8,0],[5,1],[3,3]] },
        'T': { width: 16, points: [[8,21],[8,0],[-1,-1],[1,21],[15,21]] },
        'U': { width: 22, points: [[4,21],[4,6],[5,3],[7,1],[10,0],[12,0],[15,1],[17,3],[18,6],[18,21]] },
        'V': { width: 18, points: [[1,21],[9,0],[-1,-1],[17,21],[9,0]] },
        'W': { width: 24, points: [[2,21],[7,0],[-1,-1],[12,21],[7,0],[-1,-1],[12,21],[17,0],[-1,-1],[22,21],[17,0]] },
        'X': { width: 20, points: [[3,21],[17,0],[-1,-1],[17,21],[3,0]] },
        'Y': { width: 18, points: [[1,21],[9,11],[9,0],[-1,-1],[17,21],[9,11]] },
        'Z': { width: 20, points: [[17,21],[3,0],[-1,-1],[3,21],[17,21],[-1,-1],[3,0],[17,0]] },
        '[': { width: 14, points: [[4,25],[4,-7],[-1,-1],[5,25],[5,-7],[-1,-1],[4,25],[11,25],[-1,-1],[4,-7],[11,-7]] },
        '\\': { width: 14, points: [[0,21],[14,-3]] },
        ']': { width: 14, points: [[9,25],[9,-7],[-1,-1],[10,25],[10,-7],[-1,-1],[3,25],[10,25],[-1,-1],[3,-7],[10,-7]] },
        '^': { width: 16, points: [[6,15],[8,18],[10,15],[-1,-1],[3,12],[8,17],[13,12],[-1,-1],[8,17],[8,0]] },
        '_': { width: 16, points: [[0,-2],[16,-2]] },
        '`': { width: 10, points: [[6,21],[5,20],[4,18],[4,16],[5,15],[6,16],[5,17]] },
        'a': { width: 19, points: [[15,14],[15,0],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
        'b': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,11],[6,13],[8,14],[11,14],[13,13],[15,11],[16,8],[16,6],[15,3],[13,1],[11,0],[8,0],[6,1],[4,3]] },
        'c': { width: 18, points: [[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
        'd': { width: 19, points: [[15,21],[15,0],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
        'e': { width: 18, points: [[3,8],[15,8],[15,10],[14,12],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
        'f': { width: 12, points: [[10,21],[8,21],[6,20],[5,17],[5,0],[-1,-1],[2,14],[9,14]] },
        'g': { width: 19, points: [[15,14],[15,-2],[14,-5],[13,-6],[11,-7],[8,-7],[6,-6],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
        'h': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0]] },
        'i': { width: 8, points: [[3,21],[4,20],[5,21],[4,22],[3,21],[-1,-1],[4,14],[4,0]] },
        'j': { width: 10, points: [[5,21],[6,20],[7,21],[6,22],[5,21],[-1,-1],[6,14],[6,-3],[5,-6],[3,-7],[1,-7]] },
        'k': { width: 17, points: [[4,21],[4,0],[-1,-1],[14,14],[4,4],[-1,-1],[8,8],[15,0]] },
        'l': { width: 8, points: [[4,21],[4,0]] },
        'm': { width: 30, points: [[4,14],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0],[-1,-1],[15,10],[18,13],[20,14],[23,14],[25,13],[26,10],[26,0]] },
        'n': { width: 19, points: [[4,14],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0]] },
        'o': { width: 19, points: [[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3],[16,6],[16,8],[15,11],[13,13],[11,14],[8,14]] },
        'p': { width: 19, points: [[4,14],[4,-7],[-1,-1],[4,11],[6,13],[8,14],[11,14],[13,13],[15,11],[16,8],[16,6],[15,3],[13,1],[11,0],[8,0],[6,1],[4,3]] },
        'q': { width: 19, points: [[15,14],[15,-7],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
        'r': { width: 13, points: [[4,14],[4,0],[-1,-1],[4,8],[5,11],[7,13],[9,14],[12,14]] },
        's': { width: 17, points: [[14,11],[13,13],[10,14],[7,14],[4,13],[3,11],[4,9],[6,8],[11,7],[13,6],[14,4],[14,3],[13,1],[10,0],[7,0],[4,1],[3,3]] },
        't': { width: 12, points: [[5,21],[5,4],[6,1],[8,0],[10,0],[-1,-1],[2,14],[9,14]] },
        'u': { width: 19, points: [[4,14],[4,4],[5,1],[7,0],[10,0],[12,1],[15,4],[-1,-1],[15,14],[15,0]] },
        'v': { width: 16, points: [[2,14],[8,0],[-1,-1],[14,14],[8,0]] },
        'w': { width: 22, points: [[3,14],[7,0],[-1,-1],[11,14],[7,0],[-1,-1],[11,14],[15,0],[-1,-1],[19,14],[15,0]] },
        'x': { width: 17, points: [[3,14],[14,0],[-1,-1],[14,14],[3,0]] },
        'y': { width: 16, points: [[2,14],[8,0],[-1,-1],[14,14],[8,0],[6,-4],[4,-6],[2,-7],[1,-7]] },
        'z': { width: 17, points: [[14,14],[3,0],[-1,-1],[3,14],[14,14],[-1,-1],[3,0],[14,0]] },
        '{': { width: 14, points: [[9,25],[7,24],[6,23],[5,21],[5,19],[6,17],[7,16],[8,14],[8,12],[6,10],[-1,-1],[7,24],[6,22],[6,20],[7,18],[8,17],[9,15],[9,13],[8,11],[4,9],[8,7],[9,5],[9,3],[8,1],[7,0],[6,-2],[6,-4],[7,-6],[-1,-1],[6,8],[8,6],[8,4],[7,2],[6,1],[5,-1],[5,-3],[6,-5],[7,-6],[9,-7]] },
        '|': { width: 8, points: [[4,25],[4,-7]] },
        '}': { width: 14, points: [[5,25],[7,24],[8,23],[9,21],[9,19],[8,17],[7,16],[6,14],[6,12],[8,10],[-1,-1],[7,24],[8,22],[8,20],[7,18],[6,17],[5,15],[5,13],[6,11],[10,9],[6,7],[5,5],[5,3],[6,1],[7,0],[8,-2],[8,-4],[7,-6],[-1,-1],[8,8],[6,6],[6,4],[7,2],[8,1],[9,-1],[9,-3],[8,-5],[7,-6],[5,-7]] },
        '~': { width: 24, points: [[3,6],[3,8],[4,11],[6,12],[8,12],[10,11],[14,8],[16,7],[18,7],[20,8],[21,10],[-1,-1],[3,8],[4,10],[6,11],[8,11],[10,10],[14,7],[16,6],[18,6],[20,7],[21,10],[21,12]] }
    };

    $.jqplot.CanvasFontRenderer = function(options) {
        options = options || {};
        if (!options.pt2px) {
            options.pt2px = 1.5;
        }
        $.jqplot.CanvasTextRenderer.call(this, options);
    };

    $.jqplot.CanvasFontRenderer.prototype = new $.jqplot.CanvasTextRenderer({});
    $.jqplot.CanvasFontRenderer.prototype.constructor = $.jqplot.CanvasFontRenderer;

    $.jqplot.CanvasFontRenderer.prototype.measure = function(ctx, str)
    {
        // var fstyle = this.fontStyle+' '+this.fontVariant+' '+this.fontWeight+' '+this.fontSize+' '+this.fontFamily;
        var fstyle = this.fontSize+' '+this.fontFamily;
        ctx.save();
        ctx.font = fstyle;
        var w = ctx.measureText(str).width;
        ctx.restore();
        return w;
    };

    $.jqplot.CanvasFontRenderer.prototype.draw = function(ctx, str)
    {
        var x = 0;
        // leave room at bottom for descenders.
        var y = this.height*0.72;
        //var y = 12;

        ctx.save();
        var tx, ty;

        // 1st quadrant
        if ((-Math.PI/2 <= this.angle && this.angle <= 0) || (Math.PI*3/2 <= this.angle && this.angle <= Math.PI*2)) {
            tx = 0;
            ty = -Math.sin(this.angle) * this.width;
        }
        // 4th quadrant
        else if ((0 < this.angle && this.angle <= Math.PI/2) || (-Math.PI*2 <= this.angle && this.angle <= -Math.PI*3/2)) {
            tx = Math.sin(this.angle) * this.height;
            ty = 0;
        }
        // 2nd quadrant
        else if ((-Math.PI < this.angle && this.angle < -Math.PI/2) || (Math.PI <= this.angle && this.angle <= Math.PI*3/2)) {
            tx = -Math.cos(this.angle) * this.width;
            ty = -Math.sin(this.angle) * this.width - Math.cos(this.angle) * this.height;
        }
        // 3rd quadrant
        else if ((-Math.PI*3/2 < this.angle && this.angle < Math.PI) || (Math.PI/2 < this.angle && this.angle < Math.PI)) {
            tx = Math.sin(this.angle) * this.height - Math.cos(this.angle)*this.width;
            ty = -Math.cos(this.angle) * this.height;
        }
        ctx.strokeStyle = this.fillStyle;
        ctx.fillStyle = this.fillStyle;
        // var fstyle = this.fontStyle+' '+this.fontVariant+' '+this.fontWeight+' '+this.fontSize+' '+this.fontFamily;
        var fstyle = this.fontSize+' '+this.fontFamily;
        ctx.font = fstyle;
        ctx.translate(tx, ty);
        ctx.rotate(this.angle);
        ctx.fillText(str, x, y);
        // ctx.strokeText(str, x, y);

        ctx.restore();
    };

})(jQuery);

/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.4
 * Revision: 1121
 *
 * Copyright (c) 2009-2012 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can
 * choose the license that best suits your project and use it accordingly.
 *
 * Although not required, the author would appreciate an email letting him
 * know of any substantial use of jqPlot.  You can reach the author at:
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     The author (Ash Searle) has placed this code in the public domain:
 *     "This code is unrestricted: you are free to use it however you like."
 *
 */
(function($) {
    /**
     *  class: $.jqplot.CategoryAxisRenderer
     *  A plugin for jqPlot to render a category style axis, with equal pixel spacing between y data values of a series.
     *
     *  To use this renderer, include the plugin in your source
     *  > <script type="text/javascript" language="javascript" src="plugins/jqplot.categoryAxisRenderer.js"></script>
     *
     *  and supply the appropriate options to your plot
     *
     *  > {axes:{xaxis:{renderer:$.jqplot.CategoryAxisRenderer}}}
     **/
    $.jqplot.CategoryAxisRenderer = function(options) {
        $.jqplot.LinearAxisRenderer.call(this);
        // prop: sortMergedLabels
        // True to sort tick labels when labels are created by merging
        // x axis values from multiple series.  That is, say you have
        // two series like:
        // > line1 = [[2006, 4],            [2008, 9], [2009, 16]];
        // > line2 = [[2006, 3], [2007, 7], [2008, 6]];
        // If no label array is specified, tick labels will be collected
        // from the x values of the series.  With sortMergedLabels
        // set to true, tick labels will be:
        // > [2006, 2007, 2008, 2009]
        // With sortMergedLabels set to false, tick labels will be:
        // > [2006, 2008, 2009, 2007]
        //
        // Note, this property is specified on the renderOptions for the
        // axes when creating a plot:
        // > axes:{xaxis:{renderer:$.jqplot.CategoryAxisRenderer, rendererOptions:{sortMergedLabels:true}}}
        this.sortMergedLabels = false;
    };

    $.jqplot.CategoryAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer();
    $.jqplot.CategoryAxisRenderer.prototype.constructor = $.jqplot.CategoryAxisRenderer;

    $.jqplot.CategoryAxisRenderer.prototype.init = function(options){
        this.groups = 1;
        this.groupLabels = [];
        this._groupLabels = [];
        this._grouped = false;
        this._barsPerGroup = null;
        this.reverse = false;
        // prop: tickRenderer
        // A class of a rendering engine for creating the ticks labels displayed on the plot,
        // See <$.jqplot.AxisTickRenderer>.
        // this.tickRenderer = $.jqplot.AxisTickRenderer;
        // this.labelRenderer = $.jqplot.AxisLabelRenderer;
        $.extend(true, this, {tickOptions:{formatString:'%d'}}, options);
        var db = this._dataBounds;
        // Go through all the series attached to this axis and find
        // the min/max bounds for this axis.
        for (var i=0; i<this._series.length; i++) {
            var s = this._series[i];
            if (s.groups) {
                this.groups = s.groups;
            }
            var d = s.data;

            for (var j=0; j<d.length; j++) {
                if (this.name == 'xaxis' || this.name == 'x2axis') {
                    if (d[j][0] < db.min || db.min == null) {
                        db.min = d[j][0];
                    }
                    if (d[j][0] > db.max || db.max == null) {
                        db.max = d[j][0];
                    }
                }
                else {
                    if (d[j][1] < db.min || db.min == null) {
                        db.min = d[j][1];
                    }
                    if (d[j][1] > db.max || db.max == null) {
                        db.max = d[j][1];
                    }
                }
            }
        }

        if (this.groupLabels.length) {
            this.groups = this.groupLabels.length;
        }
    };


    $.jqplot.CategoryAxisRenderer.prototype.createTicks = function() {
        // we're are operating on an axis here
        var ticks = this._ticks;
        var userTicks = this.ticks;
        var name = this.name;
        // databounds were set on axis initialization.
        var db = this._dataBounds;
        var dim, interval;
        var min, max;
        var pos1, pos2;
        var tt, i;

        // if we already have ticks, use them.
        if (userTicks.length) {
            // adjust with blanks if we have groups
            if (this.groups > 1 && !this._grouped) {
                var l = userTicks.length;
                var skip = parseInt(l/this.groups, 10);
                var count = 0;
                for (var i=skip; i<l; i+=skip) {
                    userTicks.splice(i+count, 0, ' ');
                    count++;
                }
                this._grouped = true;
            }
            this.min = 0.5;
            this.max = userTicks.length + 0.5;
            var range = this.max - this.min;
            this.numberTicks = 2*userTicks.length + 1;
            for (i=0; i<userTicks.length; i++){
                tt = this.min + 2 * i * range / (this.numberTicks-1);
                // need a marker before and after the tick
                var t = new this.tickRenderer(this.tickOptions);
                t.showLabel = false;
                // t.showMark = true;
                t.setTick(tt, this.name);
                this._ticks.push(t);
                var t = new this.tickRenderer(this.tickOptions);
                t.label = userTicks[i];
                // t.showLabel = true;
                t.showMark = false;
                t.showGridline = false;
                t.setTick(tt+0.5, this.name);
                this._ticks.push(t);
            }
            // now add the last tick at the end
            var t = new this.tickRenderer(this.tickOptions);
            t.showLabel = false;
            // t.showMark = true;
            t.setTick(tt+1, this.name);
            this._ticks.push(t);
        }

        // we don't have any ticks yet, let's make some!
        else {
            if (name == 'xaxis' || name == 'x2axis') {
                dim = this._plotDimensions.width;
            }
            else {
                dim = this._plotDimensions.height;
            }

            // if min, max and number of ticks specified, user can't specify interval.
            if (this.min != null && this.max != null && this.numberTicks != null) {
                this.tickInterval = null;
            }

            // if max, min, and interval specified and interval won't fit, ignore interval.
            if (this.min != null && this.max != null && this.tickInterval != null) {
                if (parseInt((this.max-this.min)/this.tickInterval, 10) != (this.max-this.min)/this.tickInterval) {
                    this.tickInterval = null;
                }
            }

            // find out how many categories are in the lines and collect labels
            var labels = [];
            var numcats = 0;
            var min = 0.5;
            var max, val;
            var isMerged = false;
            for (var i=0; i<this._series.length; i++) {
                var s = this._series[i];
                for (var j=0; j<s.data.length; j++) {
                    if (this.name == 'xaxis' || this.name == 'x2axis') {
                        val = s.data[j][0];
                    }
                    else {
                        val = s.data[j][1];
                    }
                    if ($.inArray(val, labels) == -1) {
                        isMerged = true;
                        numcats += 1;
                        labels.push(val);
                    }
                }
            }

            if (isMerged && this.sortMergedLabels) {
                labels.sort(function(a,b) { return a - b; });
            }

            // keep a reference to these tick labels to use for redrawing plot (see bug #57)
            this.ticks = labels;

            // now bin the data values to the right lables.
            for (var i=0; i<this._series.length; i++) {
                var s = this._series[i];
                for (var j=0; j<s.data.length; j++) {
                    if (this.name == 'xaxis' || this.name == 'x2axis') {
                        val = s.data[j][0];
                    }
                    else {
                        val = s.data[j][1];
                    }
                    // for category axis, force the values into category bins.
                    // we should have the value in the label array now.
                    var idx = $.inArray(val, labels)+1;
                    if (this.name == 'xaxis' || this.name == 'x2axis') {
                        s.data[j][0] = idx;
                    }
                    else {
                        s.data[j][1] = idx;
                    }
                }
            }

            // adjust with blanks if we have groups
            if (this.groups > 1 && !this._grouped) {
                var l = labels.length;
                var skip = parseInt(l/this.groups, 10);
                var count = 0;
                for (var i=skip; i<l; i+=skip+1) {
                    labels[i] = ' ';
                }
                this._grouped = true;
            }

            max = numcats + 0.5;
            if (this.numberTicks == null) {
                this.numberTicks = 2*numcats + 1;
            }

            var range = max - min;
            this.min = min;
            this.max = max;
            var track = 0;

            // todo: adjust this so more ticks displayed.
            var maxVisibleTicks = parseInt(3+dim/10, 10);
            var skip = parseInt(numcats/maxVisibleTicks, 10);

            if (this.tickInterval == null) {

                this.tickInterval = range / (this.numberTicks-1);

            }
            // if tickInterval is specified, we will ignore any computed maximum.
            for (var i=0; i<this.numberTicks; i++){
                tt = this.min + i * this.tickInterval;
                var t = new this.tickRenderer(this.tickOptions);
                // if even tick, it isn't a category, it's a divider
                if (i/2 == parseInt(i/2, 10)) {
                    t.showLabel = false;
                    t.showMark = true;
                }
                else {
                    if (skip>0 && track<skip) {
                        t.showLabel = false;
                        track += 1;
                    }
                    else {
                        t.showLabel = true;
                        track = 0;
                    }
                    t.label = t.formatter(t.formatString, labels[(i-1)/2]);
                    t.showMark = false;
                    t.showGridline = false;
                }
                t.setTick(tt, this.name);
                this._ticks.push(t);
            }
        }

    };

    // called with scope of axis
    $.jqplot.CategoryAxisRenderer.prototype.draw = function(ctx, plot) {
        if (this.show) {
            // populate the axis label and value properties.
            // createTicks is a method on the renderer, but
            // call it within the scope of the axis.
            this.renderer.createTicks.call(this);
            // fill a div with axes labels in the right direction.
            // Need to pregenerate each axis to get it's bounds and
            // position it and the labels correctly on the plot.
            var dim=0;
            var temp;
            // Added for theming.
            if (this._elem) {
                // this._elem.empty();
                // Memory Leaks patch
                this._elem.emptyForce();
            }

            this._elem = this._elem || $('<div class="jqplot-axis jqplot-'+this.name+'" style="position:absolute;"></div>');

            if (this.name == 'xaxis' || this.name == 'x2axis') {
                this._elem.width(this._plotDimensions.width);
            }
            else {
                this._elem.height(this._plotDimensions.height);
            }

            // create a _label object.
            this.labelOptions.axis = this.name;
            this._label = new this.labelRenderer(this.labelOptions);
            if (this._label.show) {
                var elem = this._label.draw(ctx, plot);
                elem.appendTo(this._elem);
            }

            var t = this._ticks;
            for (var i=0; i<t.length; i++) {
                var tick = t[i];
                if (tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {
                    var elem = tick.draw(ctx, plot);
                    elem.appendTo(this._elem);
                }
            }

            this._groupLabels = [];
            // now make group labels
            for (var i=0; i<this.groupLabels.length; i++)
            {
                var elem = $('<div style="position:absolute;" class="jqplot-'+this.name+'-groupLabel"></div>');
                elem.html(this.groupLabels[i]);
                this._groupLabels.push(elem);
                elem.appendTo(this._elem);
            }
        }
        return this._elem;
    };

    // called with scope of axis
    $.jqplot.CategoryAxisRenderer.prototype.set = function() {
        var dim = 0;
        var temp;
        var w = 0;
        var h = 0;
        var lshow = (this._label == null) ? false : this._label.show;
        if (this.show) {
            var t = this._ticks;
            for (var i=0; i<t.length; i++) {
                var tick = t[i];
                if (tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {
                    if (this.name == 'xaxis' || this.name == 'x2axis') {
                        temp = tick._elem.outerHeight(true);
                    }
                    else {
                        temp = tick._elem.outerWidth(true);
                    }
                    if (temp > dim) {
                        dim = temp;
                    }
                }
            }

            var dim2 = 0;
            for (var i=0; i<this._groupLabels.length; i++) {
                var l = this._groupLabels[i];
                if (this.name == 'xaxis' || this.name == 'x2axis') {
                    temp = l.outerHeight(true);
                }
                else {
                    temp = l.outerWidth(true);
                }
                if (temp > dim2) {
                    dim2 = temp;
                }
            }

            if (lshow) {
                w = this._label._elem.outerWidth(true);
                h = this._label._elem.outerHeight(true);
            }
            if (this.name == 'xaxis') {
                dim += dim2 + h;
                this._elem.css({'height':dim+'px', left:'0px', bottom:'0px'});
            }
            else if (this.name == 'x2axis') {
                dim += dim2 + h;
                this._elem.css({'height':dim+'px', left:'0px', top:'0px'});
            }
            else if (this.name == 'yaxis') {
                dim += dim2 + w;
                this._elem.css({'width':dim+'px', left:'0px', top:'0px'});
                if (lshow && this._label.constructor == $.jqplot.AxisLabelRenderer) {
                    this._label._elem.css('width', w+'px');
                }
            }
            else {
                dim += dim2 + w;
                this._elem.css({'width':dim+'px', right:'0px', top:'0px'});
                if (lshow && this._label.constructor == $.jqplot.AxisLabelRenderer) {
                    this._label._elem.css('width', w+'px');
                }
            }
        }
    };

    // called with scope of axis
    $.jqplot.CategoryAxisRenderer.prototype.pack = function(pos, offsets) {
        var ticks = this._ticks;
        var max = this.max;
        var min = this.min;
        var offmax = offsets.max;
        var offmin = offsets.min;
        var lshow = (this._label == null) ? false : this._label.show;
        var i;

        for (var p in pos) {
            this._elem.css(p, pos[p]);
        }

        this._offsets = offsets;
        // pixellength will be + for x axes and - for y axes becasue pixels always measured from top left.
        var pixellength = offmax - offmin;
        var unitlength = max - min;

        if (!this.reverse) {
            // point to unit and unit to point conversions references to Plot DOM element top left corner.

            this.u2p = function(u){
                return (u - min) * pixellength / unitlength + offmin;
            };

            this.p2u = function(p){
                return (p - offmin) * unitlength / pixellength + min;
            };

            if (this.name == 'xaxis' || this.name == 'x2axis'){
                this.series_u2p = function(u){
                    return (u - min) * pixellength / unitlength;
                };
                this.series_p2u = function(p){
                    return p * unitlength / pixellength + min;
                };
            }

            else {
                this.series_u2p = function(u){
                    return (u - max) * pixellength / unitlength;
                };
                this.series_p2u = function(p){
                    return p * unitlength / pixellength + max;
                };
            }
        }

        else {
            // point to unit and unit to point conversions references to Plot DOM element top left corner.

            this.u2p = function(u){
                return offmin + (max - u) * pixellength / unitlength;
            };

            this.p2u = function(p){
                return min + (p - offmin) * unitlength / pixellength;
            };

            if (this.name == 'xaxis' || this.name == 'x2axis'){
                this.series_u2p = function(u){
                    return (max - u) * pixellength / unitlength;
                };
                this.series_p2u = function(p){
                    return p * unitlength / pixellength + max;
                };
            }

            else {
                this.series_u2p = function(u){
                    return (min - u) * pixellength / unitlength;
                };
                this.series_p2u = function(p){
                    return p * unitlength / pixellength + min;
                };
            }

        }


        if (this.show) {
            if (this.name == 'xaxis' || this.name == 'x2axis') {
                for (i=0; i<ticks.length; i++) {
                    var t = ticks[i];
                    if (t.show && t.showLabel) {
                        var shim;

                        if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {
                            // will need to adjust auto positioning based on which axis this is.
                            var temp = (this.name == 'xaxis') ? 1 : -1;
                            switch (t.labelPosition) {
                                case 'auto':
                                    // position at end
                                    if (temp * t.angle < 0) {
                                        shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    }
                                    // position at start
                                    else {
                                        shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;
                                    }
                                    break;
                                case 'end':
                                    shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    break;
                                case 'start':
                                    shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;
                                    break;
                                case 'middle':
                                    shim = -t.getWidth()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    break;
                                default:
                                    shim = -t.getWidth()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    break;
                            }
                        }
                        else {
                            shim = -t.getWidth()/2;
                        }
                        var val = this.u2p(t.value) + shim + 'px';
                        t._elem.css('left', val);
                        t.pack();
                    }
                }

                var labeledge=['bottom', 0];
                if (lshow) {
                    var w = this._label._elem.outerWidth(true);
                    this._label._elem.css('left', offmin + pixellength/2 - w/2 + 'px');
                    if (this.name == 'xaxis') {
                        this._label._elem.css('bottom', '0px');
                        labeledge = ['bottom', this._label._elem.outerHeight(true)];
                    }
                    else {
                        this._label._elem.css('top', '0px');
                        labeledge = ['top', this._label._elem.outerHeight(true)];
                    }
                    this._label.pack();
                }

                // draw the group labels
                var step = parseInt(this._ticks.length/this.groups, 10);
                for (i=0; i<this._groupLabels.length; i++) {
                    var mid = 0;
                    var count = 0;
                    for (var j=i*step; j<=(i+1)*step; j++) {
                        if (this._ticks[j]._elem && this._ticks[j].label != " ") {
                            var t = this._ticks[j]._elem;
                            var p = t.position();
                            mid += p.left + t.outerWidth(true)/2;
                            count++;
                        }
                    }
                    mid = mid/count;
                    this._groupLabels[i].css({'left':(mid - this._groupLabels[i].outerWidth(true)/2)});
                    this._groupLabels[i].css(labeledge[0], labeledge[1]);
                }
            }
            else {
                for (i=0; i<ticks.length; i++) {
                    var t = ticks[i];
                    if (t.show && t.showLabel) {
                        var shim;
                        if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {
                            // will need to adjust auto positioning based on which axis this is.
                            var temp = (this.name == 'yaxis') ? 1 : -1;
                            switch (t.labelPosition) {
                                case 'auto':
                                // position at end
                                case 'end':
                                    if (temp * t.angle < 0) {
                                        shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;
                                    }
                                    else {
                                        shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;
                                    }
                                    break;
                                case 'start':
                                    if (t.angle > 0) {
                                        shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;
                                    }
                                    else {
                                        shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;
                                    }
                                    break;
                                case 'middle':
                                    // if (t.angle > 0) {
                                    //     shim = -t.getHeight()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    // }
                                    // else {
                                    //     shim = -t.getHeight()/2 - t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;
                                    // }
                                    shim = -t.getHeight()/2;
                                    break;
                                default:
                                    shim = -t.getHeight()/2;
                                    break;
                            }
                        }
                        else {
                            shim = -t.getHeight()/2;
                        }

                        var val = this.u2p(t.value) + shim + 'px';
                        t._elem.css('top', val);
                        t.pack();
                    }
                }

                var labeledge=['left', 0];
                if (lshow) {
                    var h = this._label._elem.outerHeight(true);
                    this._label._elem.css('top', offmax - pixellength/2 - h/2 + 'px');
                    if (this.name == 'yaxis') {
                        this._label._elem.css('left', '0px');
                        labeledge = ['left', this._label._elem.outerWidth(true)];
                    }
                    else {
                        this._label._elem.css('right', '0px');
                        labeledge = ['right', this._label._elem.outerWidth(true)];
                    }
                    this._label.pack();
                }

                // draw the group labels, position top here, do left after label position.
                var step = parseInt(this._ticks.length/this.groups, 10);
                for (i=0; i<this._groupLabels.length; i++) {
                    var mid = 0;
                    var count = 0;
                    for (var j=i*step; j<=(i+1)*step; j++) {
                        if (this._ticks[j]._elem && this._ticks[j].label != " ") {
                            var t = this._ticks[j]._elem;
                            var p = t.position();
                            mid += p.top + t.outerHeight()/2;
                            count++;
                        }
                    }
                    mid = mid/count;
                    this._groupLabels[i].css({'top':mid - this._groupLabels[i].outerHeight()/2});
                    this._groupLabels[i].css(labeledge[0], labeledge[1]);

                }
            }
        }
    };


})(jQuery);

/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.0b2_r1012
 *
 * Copyright (c) 2009-2011 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can
 * choose the license that best suits your project and use it accordingly.
 *
 * Although not required, the author would appreciate an email letting him
 * know of any substantial use of jqPlot.  You can reach the author at:
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     The author (Ash Searle) has placed this code in the public domain:
 *     "This code is unrestricted: you are free to use it however you like."
 *
 */
(function($) {

    /**
     * Class: $.jqplot.Cursor
     * Plugin class representing the cursor as displayed on the plot.
     */
    $.jqplot.Cursor = function(options) {
        // Group: Properties
        //
        // prop: style
        // CSS spec for cursor style
        this.style = 'crosshair';
        this.previousCursor = 'auto';
        // units to snap to when zooming
        // ie. "minutes" will set zoomed min/max minutes, seconds, milliseconds to zero
        this.snapZoomTo = null;
        // prop: show
        // wether to show the cursor or not.
        this.show = $.jqplot.config.enablePlugins;
        // prop: performOnZoom
        // function to perform on zoom
        this.performOnZoom = function(plot) {
        };

        // prop: performAfterZoom
        // function to perform after zooming complete
        this.performAfterZoom = function(plot) {
        };

        // prop: showTooltip
        // show a cursor position tooltip.  Location of the tooltip
        // will be controlled by followMouse and tooltipLocation.
        this.showTooltip = true;
        // prop: followMouse
        // Tooltip follows the mouse, it is not at a fixed location.
        // Tooltip will show on the grid at the location given by
        // tooltipLocation, offset from the grid edge by tooltipOffset.
        this.followMouse = false;
        // prop: tooltipLocation
        // Where to position tooltip.  If followMouse is true, this is
        // relative to the cursor, otherwise, it is relative to the grid.
        // One of 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'
        this.tooltipLocation = 'se';
        // prop: tooltipOffset
        // Pixel offset of tooltip from the grid boudaries or cursor center.
        this.tooltipOffset = 6;
        // prop: showTooltipGridPosition
        // show the grid pixel coordinates of the mouse.
        this.showTooltipGridPosition = false;
        // prop: showTooltipUnitPosition
        // show the unit (data) coordinates of the mouse.
        this.showTooltipUnitPosition = true;
        // prop: showTooltipDataPosition
        // Used with showVerticalLine to show intersecting data points in the tooltip.
        this.showTooltipDataPosition = false;
        // prop: tooltipFormatString
        // sprintf format string for the tooltip.
        // Uses Ash Searle's javascript sprintf implementation
        // found here: http://hexmen.com/blog/2007/03/printf-sprintf/
        // See http://perldoc.perl.org/functions/sprintf.html for reference
        // Note, if showTooltipDataPosition is true, the default tooltipFormatString
        // will be set to the cursorLegendFormatString, not the default given here.
        this.tooltipFormatString = '%.4P, %.4P';
        // prop: useAxesFormatters
        // Use the x and y axes formatters to format the text in the tooltip.
        this.useAxesFormatters = true;
        // prop: tooltipAxisGroups
        // Show position for the specified axes.
        // This is an array like [['xaxis', 'yaxis'], ['xaxis', 'y2axis']]
        // Default is to compute automatically for all visible axes.
        this.tooltipAxisGroups = [];
        // prop: zoom
        // Enable plot zooming.
        this.zoom = false;
        // zoomProxy and zoomTarget properties are not directly set by user.
        // They Will be set through call to zoomProxy method.
        this.zoomProxy = false;
        //if zoom proxy set up, this will zoom and zoom out on reset on the controller graph
        this.zoomOnController = true;
        this.zoomTarget = false;
        // prop: looseZoom
        // Will expand zoom range to provide more rounded tick values.
        // Works only with linear, log and date axes.
        this.looseZoom = true;
        // prop: clickReset
        // Will reset plot zoom if single click on plot without drag.
        this.clickReset = false;
        // prop: dblClickReset
        // Will reset plot zoom if double click on plot without drag.
        this.dblClickReset = true;
        // prop: showVerticalLine
        // draw a vertical line across the plot which follows the cursor.
        // When the line is near a data point, a special legend and/or tooltip can
        // be updated with the data values.
        this.showVerticalLine = false;
        // prop: showHorizontalLine
        // draw a horizontal line across the plot which follows the cursor.
        this.showHorizontalLine = false;
        // prop: constrainZoomTo
        // 'none', 'x' or 'y'
        this.constrainZoomTo = 'none';
        // // prop: autoscaleConstraint
        // // when a constrained axis is specified, true will
        // // auatoscale the adjacent axis.
        // this.autoscaleConstraint = true;
        this.shapeRenderer = new $.jqplot.ShapeRenderer();
        this._zoom = {
            start: [],
            end: [],
            started: false,
            zooming: false,
            isZoomed: false,
            axes: {
                start: {},
                end: {}
            },
            gridpos: {},
            datapos: {}
        };
        this._tooltipElem;
        this.zoomCanvas;
        this.cursorCanvas;
        // prop: intersectionThreshold
        // pixel distance from data point or marker to consider cursor lines intersecting with point.
        // If data point markers are not shown, this should be >= 1 or will often miss point intersections.
        this.intersectionThreshold = 2;
        // prop: showCursorLegend
        // Replace the plot legend with an enhanced legend displaying intersection information.
        this.showCursorLegend = false;
        // prop: cursorLegendFormatString
        // Format string used in the cursor legend.  If showTooltipDataPosition is true,
        // this will also be the default format string used by tooltipFormatString.
        this.cursorLegendFormatString = $.jqplot.Cursor.cursorLegendFormatString;
        // whether the cursor is over the grid or not.
        this._oldHandlers = {
            onselectstart: null,
            ondrag: null,
            onmousedown: null
        };
        // prop: constrainOutsideZoom
        // True to limit actual zoom area to edges of grid, even when zooming
        // outside of plot area.  That is, can't zoom out by mousing outside plot.
        this.constrainOutsideZoom = true;
        // prop: showTooltipOutsideZoom
        // True will keep updating the tooltip when zooming of the grid.
        this.showTooltipOutsideZoom = false;
        // true if mouse is over grid, false if not.
        this.onGrid = false;
        $.extend(true, this, options);
    };

    $.jqplot.Cursor.cursorLegendFormatString = '%s x:%s, y:%s';

    // called with scope of plot
    $.jqplot.Cursor.init = function(target, data, opts) {
        // add a cursor attribute to the plot
        var options = opts || {};
        this.plugins.cursor = new $.jqplot.Cursor(options.cursor);
        var c = this.plugins.cursor;
        if(c.show) {
            $.jqplot.eventListenerHooks.push(['jqplotMouseEnter', handleMouseEnter]);
            $.jqplot.eventListenerHooks.push(['jqplotMouseLeave', handleMouseLeave]);
            $.jqplot.eventListenerHooks.push(['jqplotMouseMove', handleMouseMove]);

            if(c.showCursorLegend) {
                opts.legend = opts.legend || {};
                opts.legend.renderer = $.jqplot.CursorLegendRenderer;
                opts.legend.formatString = this.plugins.cursor.cursorLegendFormatString;
                opts.legend.show = true;
            }

            if(c.zoom) {
                $.jqplot.eventListenerHooks.push(['jqplotMouseDown', handleMouseDown]);

                if(c.clickReset) {
                    $.jqplot.eventListenerHooks.push(['jqplotClick', handleClick]);
                }

                if(c.dblClickReset) {
                    $.jqplot.eventListenerHooks.push(['jqplotDblClick', handleDblClick]);
                }
            }

            this.resetZoom = function() {
                var axes = this.axes;

                if(!c.zoomProxy) {
                    var axesLen = axes.length;
                    for(var ax = 0, y = axesLen; ax < y; ax++) {
                        axes[ax].reset();
                        axes[ax]._ticks = [];
                        // fake out tick creation algorithm to make sure original auto
                        // computed format string is used if _overrideFormatString is true
                        if(c._zoom.axes[ax] !== undefined) {
                            axes[ax]._autoFormatString = c._zoom.axes[ax].tickFormatString;
                        }
                    }

                    this.redraw();
                }
                else {
                    var ctx = this.plugins.cursor.zoomCanvas._ctx;
                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                    ctx = null;
                }
                this.plugins.cursor._zoom.isZoomed = false;
                this.target.trigger('jqplotResetZoom', [this, this.plugins.cursor]);
            };

            if(c.showTooltipDataPosition) {
                c.showTooltipUnitPosition = false;
                c.showTooltipGridPosition = false;
                if(options.cursor.tooltipFormatString == undefined) {
                    c.tooltipFormatString = $.jqplot.Cursor.cursorLegendFormatString;
                }
            }
        }
    };

    // called with context of plot
    $.jqplot.Cursor.postDraw = function() {
        var c = this.plugins.cursor;

        // Memory Leaks patch
        if(c.zoomCanvas) {
            c.zoomCanvas.resetCanvas();
            c.zoomCanvas = null;
        }

        if(c.cursorCanvas) {
            c.cursorCanvas.resetCanvas();
            c.cursorCanvas = null;
        }

        if(c._tooltipElem) {
            c._tooltipElem.emptyForce();
            c._tooltipElem = null;
        }

        //if (c.zoom) {
        c.zoomCanvas = new $.jqplot.GenericCanvas();
        this.eventCanvas._elem.before(c.zoomCanvas.createElement(this._gridPadding, 'jqplot-zoom-canvas', this._plotDimensions, this));
        c.zoomCanvas.setContext();
        //}

        var elem = document.createElement('div');
        c._tooltipElem = $(elem);
        elem = null;
        c._tooltipElem.addClass('jqplot-cursor-tooltip');
        c._tooltipElem.css({
            position: 'absolute',
            display: 'none'
        });

        if(c.zoomCanvas) {
            c.zoomCanvas._elem.before(c._tooltipElem);
        }

        else {
            this.eventCanvas._elem.before(c._tooltipElem);
        }

        if(c.showVerticalLine || c.showHorizontalLine) {
            c.cursorCanvas = new $.jqplot.GenericCanvas();
            this.eventCanvas._elem.before(c.cursorCanvas.createElement(this._gridPadding, 'jqplot-cursor-canvas', this._plotDimensions, this));
            c.cursorCanvas.setContext();
        }

        // if we are showing the positions in unit coordinates, and no axes groups
        // were specified, create a default set.
        if(c.showTooltipUnitPosition) {
            if(c.tooltipAxisGroups.length === 0) {
                var series = this.series;
                var s;
                var temp = [];
                for(var i = 0; i < series.length; i++) {
                    s = series[i];
                    var ax = s.xaxis + ',' + s.yaxis;
                    if($.inArray(ax, temp) == -1) {
                        temp.push(ax);
                    }
                }
                for(var i = 0; i < temp.length; i++) {
                    c.tooltipAxisGroups.push(temp[i].split(','));
                }
            }
        }
    };

    // Group: methods
    //
    // method: $.jqplot.Cursor.zoomProxy
    // links targetPlot to controllerPlot so that plot zooming of
    // targetPlot will be controlled by zooming on the controllerPlot.
    // controllerPlot will not actually zoom, but acts as an
    // overview plot.  Note, the zoom options must be set to true for
    // zoomProxy to work.
    $.jqplot.Cursor.zoomProxy = function(targetPlot, controllerPlot, zoomOnController) {
        var tc = targetPlot.plugins.cursor;
        var cc = controllerPlot.plugins.cursor;
        tc.zoomTarget = true;
        tc.zoom = true;
        tc.style = 'auto';
        tc.dblClickReset = false;
        cc.zoom = true;
        cc.zoomProxy = true;

        controllerPlot.target.bind('jqplotZoom', plotZoom);
        controllerPlot.target.bind('jqplotResetZoom', plotReset);

        function plotZoom(ev, gridpos, datapos, plot, cursor) {
            tc.doZoom(gridpos, datapos, targetPlot, cursor);
        }

        function plotReset(ev, plot, cursor) {
            var cax = cursor._zoom.axes;
            var axes = targetPlot.axes;
            var axesLen = axes.length;

            for(var ax in axes) {
                axes[ax]._ticks = [];
                axes[ax].min = cax[ax].min;
                axes[ax].max = cax[ax].max;
                axes[ax].autoscale = cax[ax].autoscale;
                axes[ax].numberTicks = cax[ax].numberTicks;
                axes[ax].tickInterval = cax[ax].tickInterval;
                // for date axes
                axes[ax].specialFormat = cax[ax].specialFormat;
                axes[ax].specialFormatFlag = cax[ax].specialFormatFlag;
                axes[ax].useDST = cax[ax].useDST;
                axes[ax].daTickInterval = cax[ax].daTickInterval;
                //if minX, maxX, minY, maxY set, then update min and max respectively to their axis for absolute min/max of "show" series
                var newMin = Number.POSITIVE_INFINITY, newMax = Number.NEGATIVE_INFINITY;
                var targetPlotLen = targetPlot.series.length;

                for(var i = 0; i < targetPlotLen; i++) {
                    var sObj = targetPlot.series[i];
                    var dStr = ax.match(/^[xy]/);
                    if(sObj.show && sObj[dStr + "axis"] == ax) {
                        var minStr = (dStr == "x") ? "minX" : "minY";
                        var maxStr = (dStr == "x") ? "maxX" : "maxY";
                        if(sObj[minStr] && sObj[minStr] < newMin) {
                            newMin = sObj[minStr];
                        }
                        if(sObj[maxStr] && sObj[maxStr] > newMax) {
                            newMax = sObj[maxStr];
                        }
                    }
                }
                if(newMin != Number.POSITIVE_INFINITY) {
                    axes[ax].min = (newMin > 0 && (newMin * 0.9) < 0) ? 0 : newMin * 0.9;
                    axes[ax].numberTicks = null;
                    axes[ax].tickInterval = null;
                    axes[ax].daTickInterval = null;
                }
                if(newMax != Number.NEGATIVE_INFINITY) {
                    axes[ax].max = newMax * 1.1;
                    axes[ax].numberTicks = null;
                    axes[ax].tickInterval = null;
                    axes[ax].daTickInterval = null;
                }
            }
            targetPlot.redraw();
            cursor._zoom.isZoomed = false;
            //targetPlot.resetZoom();
        }

    };

    $.jqplot.Cursor.prototype.resetZoom = function(plot, cursor) {
        var axes = plot.axes;
        var cax = cursor._zoom.axes;
        if((!plot.plugins.cursor.zoomProxy || plot.plugins.cursor.zoomOnController) && cursor._zoom.isZoomed) {
            for(var ax in axes) {
                axes[ax]._ticks = [];
                axes[ax].min = cax[ax].min;
                axes[ax].max = cax[ax].max;

                axes[ax].autoscale = cax[ax].autoscale;
                axes[ax].numberTicks = cax[ax].numberTicks;
                axes[ax].tickInterval = cax[ax].tickInterval;
                // for date axes
                axes[ax].daTickInterval = cax[ax].daTickInterval;
                axes[ax].specialFormat = cax[ax].specialFormat;
                axes[ax].specialFormatFlag = cax[ax].specialFormatFlag;
                axes[ax].useDST = cax[ax].useDST;
            }
            plot.redraw();
            cursor._zoom.isZoomed = false;
        }
        else {
            var ctx = cursor.zoomCanvas._ctx;
            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
            ctx = null;
        }
        plot.target.trigger('jqplotResetZoom', [plot, cursor]);
    };

    $.jqplot.Cursor.resetZoom = function(plot) {

        plot.resetZoom();
    };

    $.jqplot.Cursor.prototype.doZoom = function(gridpos, datapos, plot, cursor) {
        this.performOnZoom(plot);
        var c = cursor;
        var axes = plot.axes;
        var zaxes = c._zoom.axes;
        var start = zaxes.start;
        var end = zaxes.end;
        var min, max, dp, span, newmin, newmax, curax, _numberTicks, ret;
        var ctx = plot.plugins.cursor.zoomCanvas._ctx;
        var Date = new $.jsDate();
        // don't zoom if zoom area is too small (in pixels)
        if((c.constrainZoomTo == 'none' && Math.abs(gridpos.x - c._zoom.start[0]) > 6 && Math.abs(gridpos.y - c._zoom.start[1]) > 6) || (c.constrainZoomTo == 'x' && Math.abs(gridpos.x - c._zoom.start[0]) > 6) || (c.constrainZoomTo == 'y' && Math.abs(gridpos.y - c._zoom.start[1]) > 6)) {
            if(!plot.plugins.cursor.zoomProxy || plot.plugins.cursor.zoomOnController) {
                for(var ax in datapos) {
                    // make a copy of the original axes to revert back.
                    if(c._zoom.axes[ax] == undefined) {
                        c._zoom.axes[ax] = {};
                        c._zoom.axes[ax].numberTicks = axes[ax].numberTicks;
                        c._zoom.axes[ax].tickInterval = axes[ax].tickInterval;
                        c._zoom.axes[ax].autoscale = axes[ax].autoscale;
                        // for date axes...
                        c._zoom.axes[ax].daTickInterval = axes[ax].daTickInterval;
                        c._zoom.axes[ax].specialFormat = axes[ax].specialFormat;
                        c._zoom.axes[ax].specialFormatFlag = axes[ax].specialFormatFlag;
                        c._zoom.axes[ax].useDST = axes[ax].useDST;
                        c._zoom.axes[ax].min = axes[ax].min;
                        var curmin = new $.jsDate(axes[ax].min);
                        c._zoom.axes[ax].max = axes[ax].max;
                        var curmax = new $.jsDate(axes[ax].max);
                        c._zoom.axes[ax].tickFormatString = (axes[ax].tickOptions != null) ? axes[ax].tickOptions.formatString : '';
                    }

                    if((c.constrainZoomTo == 'none') || (c.constrainZoomTo == 'x' && ax.charAt(0) == 'x') || (c.constrainZoomTo == 'y' && ax.charAt(0) == 'y')) {
                        dp = datapos[ax];
                        if(dp != null) {
                            if(dp > start[ax]) {
                                if(c.snapZoomTo != null) {
                                    var minDate = $.jsDate.createDate(start[ax]);
                                    newmin = round(minDate, c.snapZoomTo, 'down');
                                    var maxDate = $.jsDate.createDate(dp);
                                    newmax = round(maxDate, c.snapZoomTo, 'up');
                                }
                                else {
                                    newmin = start[ax];
                                    newmax = dp;
                                }
                            }
                            else {
                                span = start[ax] - dp;
                                if(c.snapZoomTo != null) {
                                    var minDate = $.jsDate.createDate(start[ax]);
                                    newmin = round(minDate, c.snapZoomTo, 'down');
                                    var maxDate = $.jsDate.createDate(dp);
                                    newmax = round(maxDate, c.snapZoomTo, 'up');
                                }
                                else {
                                    newmin = start[ax];
                                    newmax = dp;
                                }
                            }
                            curax = axes[ax];
                            _numberTicks = null;

                            // if aligning this axis, use number of ticks from previous axis.
                            // Do I need to reset somehow if alignTicks is changed and then graph is replotted??
                            if(curax.alignTicks) {
                                if(curax.name === 'x2axis' && plot.axes.xaxis.show) {
                                    _numberTicks = plot.axes.xaxis.numberTicks;
                                }
                                else if(curax.name.charAt(0) === 'y' && curax.name !== 'yaxis' && curax.name !== 'yMidAxis' && plot.axes.yaxis.show) {
                                    _numberTicks = plot.axes.yaxis.numberTicks;
                                }
                            }
                            if(this.looseZoom && (axes[ax].renderer.constructor === $.jqplot.LinearAxisRenderer || axes[ax].renderer.constructor === $.jqplot.LogAxisRenderer )) { //} || axes[ax].renderer.constructor === $.jqplot.DateAxisRenderer)) {

                                ret = $.jqplot.LinearTickGenerator(newmin, newmax, curax._scalefact, _numberTicks);

                                // if new minimum is less than "true" minimum of axis display, adjust it
                                if(axes[ax].tickInset && ret[0] < axes[ax].min + axes[ax].tickInset * axes[ax].tickInterval) {
                                    ret[0] += ret[4];
                                    ret[2] -= 1;
                                }

                                // if new maximum is greater than "true" max of axis display, adjust it
                                if(axes[ax].tickInset && ret[1] > axes[ax].max - axes[ax].tickInset * axes[ax].tickInterval) {
                                    ret[1] -= ret[4];
                                    ret[2] -= 1;
                                }

                                // for log axes, don't fall below current minimum, this will look bad and can't have 0 in range anyway.
                                if(axes[ax].renderer.constructor === $.jqplot.LogAxisRenderer && ret[0] < axes[ax].min) {
                                    // remove a tick and shift min up
                                    ret[0] += ret[4];
                                    ret[2] -= 1;
                                }
                                axes[ax].min = ret[0];
                                axes[ax].max = ret[1];
                                axes[ax]._autoFormatString = ret[3];
                                axes[ax].numberTicks = ret[2];
                                axes[ax].tickInterval = ret[4];
                                // for date axes...
                                axes[ax].daTickInterval = [ret[4] / 1000, 'seconds'];
                            }
                            else {
                                axes[ax].min = newmin;
                                var rmin = new $.jsDate(newmin).getTime();
                                axes[ax].max = newmax;
                                var rmax = new $.jsDate(newmax).getTime();
                                var nc = new $.jsDate(rmax).diff(rmin, c.snapZoomTo, true);
                                var tickIntervalStr = (Math.ceil(nc / axes[ax].numberTicks)) + " minutes";
                                axes[ax].tickInterval = tickIntervalStr;
                                axes[ax].numberTicks = null;
                                // for date axes...
                                axes[ax].daTickInterval = tickIntervalStr;
                            }

                            axes[ax]._ticks = [];
                        }

                        if(axes[ax].autoscaleOnZoom != null) {
                            axes[ax].autoscale = this.autoscaleOnZoom;
                        }
                    }

                    // if ((c.constrainZoomTo == 'x' && ax.charAt(0) == 'y' && c.autoscaleConstraint) || (c.constrainZoomTo == 'y' && ax.charAt(0) == 'x' && c.autoscaleConstraint)) {
                    //     dp = datapos[ax];
                    //     if (dp != null) {
                    //         axes[ax].max == null;
                    //         axes[ax].min = null;
                    //     }
                    // }
                }
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                plot.redraw();
                c._zoom.isZoomed = true;
                ctx = null;
            }
            this.performAfterZoom(plot);
            plot.target.trigger('jqplotZoom', [gridpos, datapos, plot, cursor]);
        }
    };

    $.jqplot.preInitHooks.push($.jqplot.Cursor.init);
    $.jqplot.postDrawHooks.push($.jqplot.Cursor.postDraw);

    /*
     This is used to set all unrelated time units to 0.
     unit entered will be set to zero as well as all other units smaller (only works for seconds, minutes, or hours)
     */
    function round(dateObj, unit, option) {
        //unit = "seconds";
        if(unit != null) {
            switch (unit.toLowerCase()) {
                case "seconds":
                    dateObj.setSeconds((option == "down") ? 0 : 60);
                    dateObj.setMilliseconds(0);
                    break;
                case "minutes":
                    dateObj.setMinutes((option == "down") ? 0 : 60);
                    dateObj.setSeconds(0);
                    dateObj.setMilliseconds(0);
                    break;
                case "hours":
                    dateObj.setHours((option == "down") ? 0 : 24);
                    dateObj.setMinutes(0);
                    dateObj.setSeconds(0);
                    dateObj.setMilliseconds(0);
                    break;
                default:
                    break;
            }
        }
        return dateObj;
    };

    function updateTooltip(gridpos, datapos, plot) {
        var c = plot.plugins.cursor;
        var s = '';
        var addbr = false;
        if(c.showTooltipGridPosition) {
            s = gridpos.x + ', ' + gridpos.y;
            addbr = true;
        }
        if(c.showTooltipUnitPosition) {
            var g;
            for(var i = 0; i < c.tooltipAxisGroups.length; i++) {
                g = c.tooltipAxisGroups[i];
                if(addbr) {
                    s += '<br />';
                }
                if(c.useAxesFormatters) {
                    var xf = plot.axes[g[0]]._ticks[0].formatter;
                    var yf = plot.axes[g[1]]._ticks[0].formatter;
                    var xfstr = plot.axes[g[0]]._ticks[0].formatString;
                    var yfstr = plot.axes[g[1]]._ticks[0].formatString;
                    s += xf(xfstr, datapos[g[0]]) + ', ' + yf(yfstr, datapos[g[1]]);
                }
                else {
                    s += $.jqplot.sprintf(c.tooltipFormatString, datapos[g[0]], datapos[g[1]]);
                }
                addbr = true;
            }
        }

        if(c.showTooltipDataPosition) {
            var series = plot.series;
            var ret = getIntersectingPoints(plot, gridpos.x, gridpos.y);
            var addbr = false;

            for(var i = 0; i < series.length; i++) {
                if(series[i].show) {
                    var idx = series[i].index;
                    var label = series[i].label.toString();
                    var cellid = $.inArray(idx, ret.indices);
                    var sx = undefined;
                    var sy = undefined;
                    if(cellid != -1) {
                        var data = ret.data[cellid].data;
                        if(c.useAxesFormatters) {
                            var xf = series[i]._xaxis._ticks[0].formatter;
                            var yf = series[i]._yaxis._ticks[0].formatter;
                            var xfstr = series[i]._xaxis._ticks[0].formatString;
                            var yfstr = series[i]._yaxis._ticks[0].formatString;
                            sx = xf(xfstr, data[0]);
                            sy = yf(yfstr, data[1]);
                        }
                        else {
                            sx = data[0];
                            sy = data[1];
                        }
                        if(addbr) {
                            s += '<br />';
                        }
                        s += $.jqplot.sprintf(c.tooltipFormatString, label, sx, sy);
                        addbr = true;
                    }
                }
            }

        }
        c._tooltipElem.html(s);
    }

    function moveLine(gridpos, plot) {
        var c = plot.plugins.cursor;
        var ctx = c.cursorCanvas._ctx;
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        if(c.showVerticalLine) {
            c.shapeRenderer.draw(ctx, [[gridpos.x, 0], [gridpos.x, ctx.canvas.height]]);
        }
        if(c.showHorizontalLine) {
            c.shapeRenderer.draw(ctx, [[0, gridpos.y], [ctx.canvas.width, gridpos.y]]);
        }
        var ret = getIntersectingPoints(plot, gridpos.x, gridpos.y);
        if(c.showCursorLegend) {
            var cells = $(plot.targetId + ' td.jqplot-cursor-legend-label');
            for(var i = 0; i < cells.length; i++) {
                var idx = $(cells[i]).data('seriesIndex');
                var series = plot.series[idx];
                var label = series.label.toString();
                var cellid = $.inArray(idx, ret.indices);
                var sx = undefined;
                var sy = undefined;
                if(cellid != -1) {
                    var data = ret.data[cellid].data;
                    if(c.useAxesFormatters) {
                        var xf = series._xaxis._ticks[0].formatter;
                        var yf = series._yaxis._ticks[0].formatter;
                        var xfstr = series._xaxis._ticks[0].formatString;
                        var yfstr = series._yaxis._ticks[0].formatString;
                        sx = xf(xfstr, data[0]);
                        sy = yf(yfstr, data[1]);
                    }
                    else {
                        sx = data[0];
                        sy = data[1];
                    }
                }
                if(plot.legend.escapeHtml) {
                    $(cells[i]).text($.jqplot.sprintf(c.cursorLegendFormatString, label, sx, sy));
                }
                else {
                    $(cells[i]).html($.jqplot.sprintf(c.cursorLegendFormatString, label, sx, sy));
                }
            }
        }
        ctx = null;
    }

    function getIntersectingPoints(plot, x, y) {
        var ret = {
            indices: [],
            data: []
        };
        var s, i, d0, d, j, r, p;
        var threshold;
        var c = plot.plugins.cursor;
        for(var i = 0; i < plot.series.length; i++) {
            s = plot.series[i];
            r = s.renderer;
            if(s.show) {
                threshold = c.intersectionThreshold;
                if(s.showMarker) {
                    threshold += s.markerRenderer.size / 2;
                }
                for(var j = 0; j < s.gridData.length; j++) {
                    p = s.gridData[j];
                    // check vertical line
                    if(c.showVerticalLine) {
                        if(Math.abs( x - p[0]) <= threshold) {
                            ret.indices.push(i);
                            ret.data.push({
                                seriesIndex: i,
                                pointIndex: j,
                                gridData: p,
                                data: s.data[j]
                            });
                        }
                    }
                }
            }
        }
        return ret;
    }

    function moveTooltip(gridpos, plot) {
        var c = plot.plugins.cursor;
        var elem = c._tooltipElem;
        switch (c.tooltipLocation) {
            case 'nw':
                var x = gridpos.x + plot._gridPadding.left -  elem.outerWidth(true) - c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top - c.tooltipOffset -  elem.outerHeight(true);
                break;
            case 'n':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) / 2;
                var y = gridpos.y + plot._gridPadding.top - c.tooltipOffset -  elem.outerHeight(true);
                break;
            case 'ne':
                var x = gridpos.x + plot._gridPadding.left + c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top - c.tooltipOffset -  elem.outerHeight(true);
                break;
            case 'e':
                var x = gridpos.x + plot._gridPadding.left + c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top - elem.outerHeight(true) / 2;
                break;
            case 'se':
                var x = gridpos.x + plot._gridPadding.left + c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top + c.tooltipOffset;
                break;
            case 's':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) / 2;
                var y = gridpos.y + plot._gridPadding.top + c.tooltipOffset;
                break;
            case 'sw':
                var x = gridpos.x + plot._gridPadding.left -  elem.outerWidth(true) - c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top + c.tooltipOffset;
                break;
            case 'w':
                var x = gridpos.x + plot._gridPadding.left -  elem.outerWidth(true) - c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top - elem.outerHeight(true) / 2;
                break;
            default:
                var x = gridpos.x + plot._gridPadding.left + c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top + c.tooltipOffset;
                break;
        }

        elem.css('left', x);
        elem.css('top', y);
        elem = null;
    }

    function positionTooltip(plot) {
        // fake a grid for positioning
        var grid = plot._gridPadding;
        var c = plot.plugins.cursor;
        var elem = c._tooltipElem;
        switch (c.tooltipLocation) {
            case 'nw':
                var a = grid.left + c.tooltipOffset;
                var b = grid.top + c.tooltipOffset;
                elem.css('left', a);
                elem.css('top', b);
                break;
            case 'n':
                var a = (grid.left + (plot._plotDimensions.width - grid.right)) / 2 - elem.outerWidth(true) / 2;
                var b = grid.top + c.tooltipOffset;
                elem.css('left', a);
                elem.css('top', b);
                break;
            case 'ne':
                var a = grid.right + c.tooltipOffset;
                var b = grid.top + c.tooltipOffset;
                elem.css({
                    right: a,
                    top: b
                });
                break;
            case 'e':
                var a = grid.right + c.tooltipOffset;
                var b = (grid.top + (plot._plotDimensions.height - grid.bottom)) / 2 - elem.outerHeight(true) / 2;
                elem.css({
                    right: a,
                    top: b
                });
                break;
            case 'se':
                var a = grid.right + c.tooltipOffset;
                var b = grid.bottom + c.tooltipOffset;
                elem.css({
                    right: a,
                    bottom: b
                });
                break;
            case 's':
                var a = (grid.left + (plot._plotDimensions.width - grid.right)) / 2 - elem.outerWidth(true) / 2;
                var b = grid.bottom + c.tooltipOffset;
                elem.css({
                    left: a,
                    bottom: b
                });
                break;
            case 'sw':
                var a = grid.left + c.tooltipOffset;
                var b = grid.bottom + c.tooltipOffset;
                elem.css({
                    left: a,
                    bottom: b
                });
                break;
            case 'w':
                var a = grid.left + c.tooltipOffset;
                var b = (grid.top + (plot._plotDimensions.height - grid.bottom)) / 2 - elem.outerHeight(true) / 2;
                elem.css({
                    left: a,
                    top: b
                });
                break;
            default:
                // same as 'se'
                var a = grid.right - c.tooltipOffset;
                var b = grid.bottom + c.tooltipOffset;
                elem.css({
                    right: a,
                    bottom: b
                });
                break;
        }
        elem = null;
    }

    function handleClick(ev, gridpos, datapos, neighbor, plot) {
        ev.preventDefault();
        ev.stopImmediatePropagation();
        var c = plot.plugins.cursor;
        if(c.clickReset) {
            c.resetZoom(plot, c);
        }
        var sel = window.getSelection;
        if(document.selection && document.selection.empty) {
            document.selection.empty();
        }
        else if(sel && !sel().isCollapsed) {
            sel().collapse();
        }
        return false;
    }

    function handleDblClick(ev, gridpos, datapos, neighbor, plot) {
        ev.preventDefault();
        ev.stopImmediatePropagation();
        var c = plot.plugins.cursor;
        if(c.dblClickReset) {
            c.resetZoom(plot, c);
        }
        var sel = window.getSelection;
        if(document.selection && document.selection.empty) {
            document.selection.empty();
        }
        else if(sel && !sel().isCollapsed) {
            sel().collapse();
        }
        return false;
    }

    function handleMouseLeave(ev, gridpos, datapos, neighbor, plot) {
        var c = plot.plugins.cursor;
        c.onGrid = false;
        if(c.show) {
            $(ev.target).css('cursor', c.previousCursor);
            if(c.showTooltip && !(c._zoom.zooming && c.showTooltipOutsideZoom && !c.constrainOutsideZoom)) {
                c._tooltipElem.hide();
            }
            if(c.zoom) {
                c._zoom.gridpos = gridpos;
                c._zoom.datapos = datapos;
            }
            if(c.showVerticalLine || c.showHorizontalLine) {
                var ctx = c.cursorCanvas._ctx;
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                ctx = null;
            }
            if(c.showCursorLegend) {
                var cells = $(plot.targetId + ' td.jqplot-cursor-legend-label');
                for(var i = 0; i < cells.length; i++) {
                    var idx = $(cells[i]).data('seriesIndex');
                    var series = plot.series[idx];
                    var label = series.label.toString();
                    if(plot.legend.escapeHtml) {
                        $(cells[i]).text($.jqplot.sprintf(c.cursorLegendFormatString, label, undefined, undefined));
                    }
                    else {
                        $(cells[i]).html($.jqplot.sprintf(c.cursorLegendFormatString, label, undefined, undefined));
                    }

                }
            }
        }
    }

    function handleMouseEnter(ev, gridpos, datapos, neighbor, plot) {
        var c = plot.plugins.cursor;
        c.onGrid = true;
        if(c.show) {
            c.previousCursor = ev.target.style.cursor;
            ev.target.style.cursor = c.style;
            if(c.showTooltip) {
                updateTooltip(gridpos, datapos, plot);
                if(c.followMouse) {
                    moveTooltip(gridpos, plot);
                }
                else {
                    positionTooltip(plot);
                }
                c._tooltipElem.show();
            }
            if(c.showVerticalLine || c.showHorizontalLine) {
                moveLine(gridpos, plot);
            }
        }

    }

    function handleMouseMove(ev, gridpos, datapos, neighbor, plot) {
        var c = plot.plugins.cursor;
        if(c.show) {
            if(c.showTooltip) {
                updateTooltip(gridpos, datapos, plot);
                if(c.followMouse) {
                    moveTooltip(gridpos, plot);
                }
            }
            if(c.showVerticalLine || c.showHorizontalLine) {
                moveLine(gridpos, plot);
            }
        }
    }

    function getEventPosition(ev) {
        var plot = ev.data.plot;
        var go = plot.eventCanvas._elem.offset();
        var gridPos = {
            x: ev.pageX - go.left,
            y: ev.pageY - go.top
        };
        //////
        // TO DO: handle yMidAxis
        //////
        var dataPos = {
            xaxis: null,
            yaxis: null,
            x2axis: null,
            y2axis: null,
            y3axis: null,
            y4axis: null,
            y5axis: null,
            y6axis: null,
            y7axis: null,
            y8axis: null,
            y9axis: null,
            yMidAxis: null
        };
        var an = ['xaxis', 'yaxis', 'x2axis', 'y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis', 'yMidAxis'];
        var ax = plot.axes;
        var n, axis;
        for( n = 11; n > 0; n--) {
            axis = an[ n - 1];
            if(ax[axis].show) {
                dataPos[axis] = ax[axis].series_p2u(gridPos[axis.charAt(0)]);
            }
        }

        return {
            offsets: go,
            gridPos: gridPos,
            dataPos: dataPos
        };
    }

    function handleZoomMove(ev) {
        var plot = ev.data.plot;
        var c = plot.plugins.cursor;
        // don't do anything if not on grid.
        if(c.show && c.zoom && c._zoom.started && !c.zoomTarget) {
            var ctx = c.zoomCanvas._ctx;
            var positions = getEventPosition(ev);
            var gridpos = positions.gridPos;
            var datapos = positions.dataPos;
            c._zoom.gridpos = gridpos;
            c._zoom.datapos = datapos;
            c._zoom.zooming = true;
            var xpos = gridpos.x;
            var ypos = gridpos.y;
            var height = ctx.canvas.height;
            var width = ctx.canvas.width;
            if(c.showTooltip && !c.onGrid && c.showTooltipOutsideZoom) {
                updateTooltip(gridpos, datapos, plot);
                if(c.followMouse) {
                    moveTooltip(gridpos, plot);
                }
            }
            if(c.constrainZoomTo == 'x') {
                c._zoom.end = [xpos, height];
            }
            else if(c.constrainZoomTo == 'y') {
                c._zoom.end = [width, ypos];
            }
            else {
                c._zoom.end = [xpos, ypos];
            }
            var sel = window.getSelection;
            if(document.selection && document.selection.empty) {
                document.selection.empty();
            }
            else if(sel && !sel().isCollapsed) {
                sel().collapse();
            }
            drawZoomBox.call(c);
            ctx = null;
        }
    }

    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {
        var c = plot.plugins.cursor;
        $(document).one('mouseup.jqplot_cursor', {
            plot: plot
        }, handleMouseUp);
        var axes = plot.axes;
        if(document.onselectstart != undefined) {
            c._oldHandlers.onselectstart = document.onselectstart;
            document.onselectstart = function() {
                return false;
            };

        }
        if(document.ondrag != undefined) {
            c._oldHandlers.ondrag = document.ondrag;
            document.ondrag = function() {
                return false;
            };

        }
        if(document.onmousedown != undefined) {
            c._oldHandlers.onmousedown = document.onmousedown;
            document.onmousedown = function() {
                return false;
            };

        }
        if(c.zoom) {
            if(!c.zoomProxy) {
                var ctx = c.zoomCanvas._ctx;
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                ctx = null;
            }
            if(c.constrainZoomTo == 'x') {
                c._zoom.start = [gridpos.x, 0];
            }
            else if(c.constrainZoomTo == 'y') {
                c._zoom.start = [0, gridpos.y];
            }
            else {
                c._zoom.start = [gridpos.x, gridpos.y];
            }
            c._zoom.started = true;
            for(var ax in datapos) {
                // get zoom starting position.
                c._zoom.axes.start[ax] = datapos[ax];
            }
            $(document).bind('mousemove.jqplotCursor', {
                plot: plot
            }, handleZoomMove);
        }
    }

    function handleMouseUp(ev) {
        var plot = ev.data.plot;
        var c = plot.plugins.cursor;
        if(c.zoom && c._zoom.zooming && !c.zoomTarget) {
            var xpos = c._zoom.gridpos.x;
            var ypos = c._zoom.gridpos.y;
            var datapos = c._zoom.datapos;
            var height = c.zoomCanvas._ctx.canvas.height;
            var width = c.zoomCanvas._ctx.canvas.width;
            var axes = plot.axes;

            if(c.constrainOutsideZoom && !c.onGrid) {
                if(xpos < 0) {
                    xpos = 0;
                }
                else if(xpos > width) {
                    xpos = width;
                }
                if(ypos < 0) {
                    ypos = 0;
                }
                else if(ypos > height) {
                    ypos = height;
                }

                for(var axis in datapos) {
                    if(datapos[axis]) {
                        if(axis.charAt(0) == 'x') {
                            datapos[axis] = axes[axis].series_p2u(xpos);
                        }
                        else {
                            datapos[axis] = axes[axis].series_p2u(ypos);
                        }
                    }
                }
            }

            if(c.constrainZoomTo == 'x') {
                ypos = height;
            }
            else if(c.constrainZoomTo == 'y') {
                xpos = width;
            }
            c._zoom.end = [xpos, ypos];
            c._zoom.gridpos = {
                x: xpos,
                y: ypos
            };
            c.doZoom(c._zoom.gridpos, datapos, plot, c);
        }
        c._zoom.started = false;
        c._zoom.zooming = false;

        $(document).unbind('mousemove.jqplotCursor', handleZoomMove);

        if(document.onselectstart != undefined && c._oldHandlers.onselectstart != null) {
            document.onselectstart = c._oldHandlers.onselectstart;
            c._oldHandlers.onselectstart = null;
        }
        if(document.ondrag != undefined && c._oldHandlers.ondrag != null) {
            document.ondrag = c._oldHandlers.ondrag;
            c._oldHandlers.ondrag = null;
        }
        if(document.onmousedown != undefined && c._oldHandlers.onmousedown != null) {
            document.onmousedown = c._oldHandlers.onmousedown;
            c._oldHandlers.onmousedown = null;
        }

    }

    $.jqplot.CursorLegendRenderer = function(options) {
        $.jqplot.TableLegendRenderer.call(this, options);
        this.formatString = '%s';
    };

    $.jqplot.CursorLegendRenderer.prototype = new $.jqplot.TableLegendRenderer();
    $.jqplot.CursorLegendRenderer.prototype.constructor = $.jqplot.CursorLegendRenderer;

    // called in context of a Legend
    $.jqplot.CursorLegendRenderer.prototype.draw = function() {
        if(this._elem) {
            this._elem.emptyForce();
            this._elem = null;
        }
        if(this.show) {
            var series = this._series, s;
            // make a table.  one line label per row.
            var elem = document.createElement('div');
            this._elem = $(elem);
            elem = null;
            this._elem.addClass('jqplot-legend jqplot-cursor-legend');
            this._elem.css('position', 'absolute');

            var pad = false;
            for(var i = 0; i < series.length; i++) {
                s = series[i];
                if(s.show && s.showLabel) {
                    var lt = $.jqplot.sprintf(this.formatString, s.label.toString());
                    if(lt) {
                        var color = s.color;
                        if(s._stack && !s.fill) {
                            color = '';
                        }
                        addrow.call(this, lt, color, pad, i);
                        pad = true;
                    }
                    // let plugins add more rows to legend.  Used by trend line plugin.
                    for(var j = 0; j < $.jqplot.addLegendRowHooks.length; j++) {
                        var item = $.jqplot.addLegendRowHooks[j].call(this, s);
                        if(item) {
                            addrow.call(this, item.label, item.color, pad);
                            pad = true;
                        }
                    }
                }
            }
            series = s = null; delete series; delete s;
        }

        function addrow(label, color, pad, idx) {
            var rs = (pad) ? this.rowSpacing : '0';
            var tr = $('<tr class="jqplot-legend jqplot-cursor-legend"></tr>').appendTo(this._elem);
            tr.data('seriesIndex', idx);
            $('<td class="jqplot-legend jqplot-cursor-legend-swatch" style="padding-top:'+rs+';">'+
            '<div style="border:1px solid #cccccc;padding:0.2em;">'+
            '<div class="jqplot-cursor-legend-swatch" style="background-color:'+color+';"></div>'+
            '</div></td>').appendTo(tr);
            var td = $('<td class="jqplot-legend jqplot-cursor-legend-label" style="vertical-align:middle;padding-top:' + rs + ';"></td>');
            td.appendTo(tr);
            td.data('seriesIndex', idx);
            if(this.escapeHtml) {
                td.text(label);
            }
            else {
                td.html(label);
            }
            tr = null;
            td = null;
        }

        return this._elem;
    };

})(jQuery);

function drawZoomBox() {
    var start = this._zoom.start;
    var end = this._zoom.end;
    var ctx = this.zoomCanvas._ctx;
    var l, t, h, w;
    if(end[0] > start[0]) {
        l = start[0];
        w = end[0] - start[0];
    }
    else {
        l = end[0];
        w = start[0] - end[0];
    }
    if(end[1] > start[1]) {
        t = start[1];
        h = end[1] - start[1];
    }
    else {
        t = end[1];
        h = start[1] - end[1];
    }
    ctx.fillStyle = 'rgba(0,0,0,0.2)';
    ctx.strokeStyle = '#999999';
    ctx.lineWidth = 1.0;
    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    ctx.clearRect(l, t, w, h);
    // IE won't show transparent fill rect, so stroke a rect also.
    ctx.strokeRect(l, t, w, h);
    if($.browser.msie) {
        ctx.fillRect(l, t, w, h);
    }
    ctx = null;
}

/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.0b2_r1012
 *
 * Copyright (c) 2009-2011 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can
 * choose the license that best suits your project and use it accordingly.
 *
 * Although not required, the author would appreciate an email letting him
 * know of any substantial use of jqPlot.  You can reach the author at:
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     The author (Ash Searle) has placed this code in the public domain:
 *     "This code is unrestricted: you are free to use it however you like."
 *
 */
(function($) {
    /**
     * Class: $.jqplot.DateAxisRenderer
     * A plugin for a jqPlot to render an axis as a series of date values.
     * This renderer has no options beyond those supplied by the <Axis> class.
     * It supplies it's own tick formatter, so the tickOptions.formatter option
     * should not be overridden.
     *
     * Thanks to Ken Synder for his enhanced Date instance methods which are
     * included with this code <http://kendsnyder.com/sandbox/date/>.
     *
     * To use this renderer, include the plugin in your source
     * > <script type="text/javascript" language="javascript" src="plugins/jqplot.dateAxisRenderer.js"></script>
     *
     * and supply the appropriate options to your plot
     *
     * > {axes:{xaxis:{renderer:$.jqplot.DateAxisRenderer}}}
     *
     * Dates can be passed into the axis in almost any recognizable value and
     * will be parsed.  They will be rendered on the axis in the format
     * specified by tickOptions.formatString.  e.g. tickOptions.formatString = '%Y-%m-%d'.
     *
     * Accecptable format codes
     * are:
     *
     * > Code    Result                  Description
     * >             == Years ==
     * > %Y      2008                Four-digit year
     * > %y      08                  Two-digit year
     * >             == Months ==
     * > %m      09                  Two-digit month
     * > %#m     9                   One or two-digit month
     * > %B      September           Full month name
     * > %b      Sep                 Abbreviated month name
     * >             == Days ==
     * > %d      05                  Two-digit day of month
     * > %#d     5                   One or two-digit day of month
     * > %e      5                   One or two-digit day of month
     * > %A      Sunday              Full name of the day of the week
     * > %a      Sun                 Abbreviated name of the day of the week
     * > %w      0                   Number of the day of the week (0 = Sunday, 6 = Saturday)
     * > %o      th                  The ordinal suffix string following the day of the month
     * >             == Hours ==
     * > %H      23                  Hours in 24-hour format (two digits)
     * > %#H     3                   Hours in 24-hour integer format (one or two digits)
     * > %I      11                  Hours in 12-hour format (two digits)
     * > %#I     3                   Hours in 12-hour integer format (one or two digits)
     * > %p      PM                  AM or PM
     * >             == Minutes ==
     * > %M      09                  Minutes (two digits)
     * > %#M     9                   Minutes (one or two digits)
     * >             == Seconds ==
     * > %S      02                  Seconds (two digits)
     * > %#S     2                   Seconds (one or two digits)
     * > %s      1206567625723       Unix timestamp (Seconds past 1970-01-01 00:00:00)
     * >             == Milliseconds ==
     * > %N      008                 Milliseconds (three digits)
     * > %#N     8                   Milliseconds (one to three digits)
     * >             == Timezone ==
     * > %O      360                 difference in minutes between local time and GMT
     * > %Z      Mountain Standard Time  Name of timezone as reported by browser
     * > %G      -06:00              Hours and minutes between GMT
     * >             == Shortcuts ==
     * > %F      2008-03-26          %Y-%m-%d
     * > %T      05:06:30            %H:%M:%S
     * > %X      05:06:30            %H:%M:%S
     * > %x      03/26/08            %m/%d/%y
     * > %D      03/26/08            %m/%d/%y
     * > %#c     Wed Mar 26 15:31:00 2008  %a %b %e %H:%M:%S %Y
     * > %v      3-Sep-2008          %e-%b-%Y
     * > %R      15:31               %H:%M
     * > %r      3:31:00 PM          %I:%M:%S %p
     * >             == Characters ==
     * > %n      \n                  Newline
     * > %t      \t                  Tab
     * > %%      %                   Percent Symbol
     */
    $.jqplot.DateAxisRenderer = function() {
        $.jqplot.LinearAxisRenderer.call(this);
        this.date = new $.jsDate();
    };

    var second = 1000;
    var minute = 60 * second;
    var hour = 60 * minute;
    var day = 24 * hour;
    var week = 7 * day;

    // these are less definitive
    var month = 30.4368499 * day;
    var year = 365.242199 * day;

    var daysInMonths = [31, 28, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30];
    // array of consistent nice intervals.  Longer intervals
    // will depend on days in month, days in year, etc.
    var niceFormatStrings = ['%M:%S.%#N', '%M:%S.%#N', '%M:%S.%#N', '%M:%S', '%M:%S', '%M:%S', '%M:%S', '%H:%M:%S', '%H:%M:%S', '%H:%M', '%H:%M', '%H:%M', '%H:%M', '%H:%M', '%H:%M', '%a %H:%M', '%a %H:%M', '%b %e %H:%M', '%b %e %H:%M', '%b %e %H:%M', '%b %e %H:%M', '%v', '%v', '%v', '%v', '%v', '%v', '%v'];
    var niceIntervals = [0.1 * second, 0.2 * second, 0.5 * second, second, 2 * second, 5 * second, 10 * second, 15 * second, 30 * second, minute, 2 * minute, 5 * minute, 10 * minute, 15 * minute, 30 * minute, hour, 2 * hour, 4 * hour, 6 * hour, 8 * hour, 12 * hour, day, 2 * day, 3 * day, 4 * day, 5 * day, week, 2 * week];

    var niceMonthlyIntervals = [];

    function bestDateInterval(min, max, titarget) {
        // iterate through niceIntervals to find one closest to titarget
        var badness = Number.MAX_VALUE;
        var temp, bestTi, bestfmt;
        for(var i = 0, l = niceIntervals.length; i < l; i++) {
            temp = Math.abs( titarget - niceIntervals[i]);
            if(temp < badness) {
                badness = temp;
                bestTi = niceIntervals[i];
                bestfmt = niceFormatStrings[i];
            }
        }

        return [bestTi, bestfmt];
    }

    $.jqplot.DateAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer();
    $.jqplot.DateAxisRenderer.prototype.constructor = $.jqplot.DateAxisRenderer;

    $.jqplot.DateTickFormatter = function(format, val) {
        if(!format) {
            format = '%Y/%m/%d';
        }
        return $.jsDate.strftime(val, format);
    };

    $.jqplot.DateTickFormatterSpecialPhys = function(format, val) {
        var iDate = $.jsDate.createDate(Math.abs(val));
        var df = MP_Util.GetDateFormatter();
        var iDate2 = df.format(iDate,mp_formatter.DateTimeFormatter.FULL_DATE_2YEAR);
        var iDate4 = df.format(iDate,mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
        var curDtTm = new Date;
        curDtTm.setMilliseconds(0);curDtTm.setSeconds(0);
        //if midnight, show date over time
        if (iDate.getMilliseconds()==0 && iDate.getSeconds()==0 && iDate.getMinutes() == 0 && iDate.getHours() == 0) {
            var nFormat = "<span>"+iDate2+"</span><br/><span>&nbsp;</span>%H:%M";
        }
        else {
            var nFormat = "<span>%H:%M</span>";
        }
        return $.jsDate.strftime(val, nFormat);
    };

    $.jqplot.DateTickFormatterSpecial = function(format, val) {
        var curDtTm = new Date();
        curDtTm.setMilliseconds(0);
        curDtTm.setSeconds(0);
        var nFormat = "<span class='jqplot-elem-showOnHover'>%#m/%#d/%Y&nbsp;%H:%M</span><span class='jqplot-elem-hideOnHover nowTime'>%H:%M</span>";
        return $.jsDate.strftime(val, nFormat);
    };

    $.jqplot.DateTickFormatterXSpecial = function(format, val) {
        var iDate = $.jsDate.createDate(Math.abs(val));
        var curDtTm = new Date();
        curDtTm.setMilliseconds(0);
        curDtTm.setSeconds(0);
        var nFormat = format;
        if(DAR_HELPERS.createdNow && iDate.getTime() == curDtTm.getTime()) {
            nFormat = "<span class='jqplot-elem-hideOnHover'>&nbsp;</span><span class='jqplot-elem-showOnHover'>%#m/%#d/%Y&nbsp;%H:%M</span>";
        }
        //if midnight, show time over date
        else if(siDate.getMilliseconds() == 0 && iDate.getSeconds() == 0 && iDate.getMinutes() == 0 && iDate.getHours() == 0) {
            nFormat = "<span class='jqplot-elem-showOnHover'>%#m/%#d/%Y&nbsp;</span>%H:%M<br class='jqplot-elem-hideOnHover'/><span class='jqplot-elem-hideOnHover'>%#m/%#d/%y</span>";
        }
        //show just time
        else {
            nFormat = "<span class='jqplot-elem-showOnHover'>%#m/%#d/%Y&nbsp;</span>%H:%M";
        }
        return $.jsDate.strftime(val, nFormat);
    };

    $.jqplot.DateTickFormatterX2Special = function(format, val) {
        var iDate = $.jsDate.createDate(Math.abs(val));
        var df = MP_Util.GetDateFormatter();
        var iDate2 = df.format(iDate, mp_formatter.DateTimeFormatter.FULL_DATE_2YEAR);
        var iDate4 = df.format(iDate, mp_formatter.DateTimeFormatter.FULL_DATE_4YEAR);
        var curDtTm = new Date();
        curDtTm.setMilliseconds(0);
        curDtTm.setSeconds(0);
        var nFormat = format;
        if(DAR_HELPERS.createdNow && iDate.getTime() == curDtTm.getTime()) {
            nFormat = "<span class='jqplot-elem-hideOnHover'>&nbsp;</span><span class='jqplot-elem-showOnHover'>" + iDate4 + "&nbsp;%H:%M</span>";
        }
        //if midnight, show time over date
        else if(iDate.getMilliseconds() == 0 && iDate.getSeconds() == 0 && iDate.getMinutes() == 0 && iDate.getHours() == 0) {
            nFormat = "<span class='jqplot-elem-showOnHover'>" + iDate4 + "</span><span class='jqplot-elem-hideOnHover'>" + iDate2 + "</span><br class='jqplot-elem-hideOnHover'/><span class='jqplot-elem-showOnHover'>&nbsp;</span>%H:%M";
        }
        //show just time
        else {
            nFormat = "<span class='jqplot-elem-showOnHover'>" + iDate4 + "</span>&nbsp;<br class='jqplot-elem-hideOnHover'/>%H:%M";
        }
        return $.jsDate.strftime(val, nFormat);
    };

    $.jqplot.DateTickFormatterYSpecial = function(format, val) {
        var iDate = $.jsDate.createDate(Math.abs(val));
        var curDtTm = new Date();
        curDtTm.setMilliseconds(0);
        curDtTm.setSeconds(0);
        var nFormat = format;
        if(DAR_HELPERS.createdNow && iDate.getTime() == curDtTm.getTime()) {
            nFormat = "<span class='jqplot-elem-hideOnHover'>&nbsp;</span><span class='jqplot-elem-showOnHover'>%#m/%#d/%Y&nbsp;%H:%M</span>";
        }
        //if midnight, show time over date
        else if(iDate.getMilliseconds() == 0 && iDate.getSeconds() == 0 && iDate.getMinutes() == 0 && iDate.getHours() == 0) {
            nFormat = "%#m/%#d/<span class='jqplot-elem-showOnHover'>%Y</span><span class='jqplot-elem-hideOnHover'>%y</span><br class='jqplot-elem-hideOnHover'/><span class='jqplot-elem-showOnHover'>&nbsp;</span>%H:%M";
        }
        //show just time
        else {
            nFormat = "<span class='jqplot-elem-showOnHover'>%#m/%#d/%Y&nbsp;</span>%H:%M";
        }
        return $.jsDate.strftime(val, nFormat);
    };

    $.jqplot.DateAxisRenderer.prototype.init = function(options) {
        // prop: tickRenderer
        // A class of a rendering engine for creating the ticks labels displayed on the plot,
        // See <$.jqplot.AxisTickRenderer>.
        // this.tickRenderer = $.jqplot.AxisTickRenderer;
        // this.labelRenderer = $.jqplot.AxisLabelRenderer;
        this.tickOptions.formatter = $.jqplot.DateTickFormatter;
        // prop: tickInset
        // Controls the amount to inset the first and last ticks from
        // the edges of the grid, in multiples of the tick interval.
        // 0 is no inset, 0.5 is one half a tick interval, 1 is a full
        // tick interval, etc.
        this.tickInset = 0;
        // prop: drawBaseline
        // True to draw the axis baseline.
        this.drawBaseline = true;
        // prop: baselineWidth
        // width of the baseline in pixels.
        this.baselineWidth = null;
        // prop: baselineColor
        // CSS color spec for the baseline.
        this.baselineColor = null;
        this.daTickInterval = null;
        this._daTickInterval = null;
        $.extend(true, this, options);

        if (this.specialFormat && this.specialFormatFlag!=null && this.specialFormatFlag == 3) //For Physiology View
        {
            this.tickOptions.formatter = $.jqplot.DateTickFormatterSpecialPhys;
        }
        else if(this.specialFormat && this.specialFormatFlag != null && this.specialFormatFlag == 1) {
            this.tickOptions.formatter = $.jqplot.DateTickFormatterSpecial;
        }
        else if(this.specialFormat && this.name.match("xaxis") != null) {
            this.tickOptions.formatter = $.jqplot.DateTickFormatterXSpecial;
        }
        else if(this.specialFormat && this.name.match(/^x/) != null) {
            this.tickOptions.formatter = $.jqplot.DateTickFormatterX2Special;
        }
        else if(this.specialFormat && this.name.match(/^y/) != null) {
            this.tickOptions.formatter = $.jqplot.DateTickFormatterYSpecial;
        }
        else {
            this.tickOptions.formatter = $.jqplot.DateTickFormatter;
        }

        var db = this._dataBounds, stats, sum, s, d, pd, sd, intv;

        // Go through all the series attached to this axis and find
        // the min/max bounds for this axis.
        for(var i = 0; i < this._series.length; i++) {
            stats = {
                intervals: [],
                frequencies: {},
                sortedIntervals: [],
                min: null,
                max: null,
                mean: null
            };
            sum = 0;
            s = this._series[i];
            d = s.data;
            pd = s._plotData;
            sd = s._stackData;
            intv = 0;

            for(var j = 0; j < d.length; j++) {
                if(this.name == 'xaxis' || this.name == 'x2axis') {
                    d[j][0] = new $.jsDate(d[j][0]).getTime();
                    pd[j][0] = new $.jsDate(d[j][0]).getTime();
                    sd[j][0] = new $.jsDate(d[j][0]).getTime();
                    if((d[j][0] != null && d[j][0] < db.min) || db.min == null) {
                        db.min = d[j][0];
                    }
                    if((d[j][0] != null && d[j][0] > db.max) || db.max == null) {
                        db.max = d[j][0];
                    }
                    if(j > 0) {
                        intv = Math.abs(d[j][0] - d[j-1][0]);
                        stats.intervals.push(intv);
                        if(stats.frequencies.hasOwnProperty(intv)) {
                            stats.frequencies[intv] += 1;
                        }
                        else {
                            stats.frequencies[intv] = 1;
                        }
                    }
                    sum += intv;

                }
                else {
                    d[j][1] = new $.jsDate(d[j][1]).getTime();
                    pd[j][1] = new $.jsDate(d[j][1]).getTime();
                    sd[j][1] = new $.jsDate(d[j][1]).getTime();
                    if((d[j][1] != null && d[j][1] < db.min) || db.min == null) {
                        db.min = d[j][1];
                    }
                    if((d[j][1] != null && d[j][1] > db.max) || db.max == null) {
                        db.max = d[j][1];
                    }
                    if(j > 0) {
                        intv = Math.abs(d[j][1] - d[j-1][1]);
                        stats.intervals.push(intv);
                        if(stats.frequencies.hasOwnProperty(intv)) {
                            stats.frequencies[intv] += 1;
                        }
                        else {
                            stats.frequencies[intv] = 1;
                        }
                    }
                }
                sum += intv;
            }

            if(s.renderer.bands) {
                if(s.renderer.bands.hiData.length) {
                    var bd = s.renderer.bands.hiData;
                    for(var j = 0, l = bd.length; j < l; j++) {
                        if(this.name === 'xaxis' || this.name === 'x2axis') {
                            bd[j][0] = new $.jsDate(bd[j][0]).getTime();
                            if((bd[j][0] != null && bd[j][0] > db.max) || db.max == null) {
                                db.max = bd[j][0];
                            }
                        }
                        else {
                            bd[j][1] = new $.jsDate(bd[j][1]).getTime();
                            if((bd[j][1] != null && bd[j][1] > db.max) || db.max == null) {
                                db.max = bd[j][1];
                            }
                        }
                    }
                }
                if(s.renderer.bands.lowData.length) {
                    var bd = s.renderer.bands.lowData;
                    for(var j = 0, l = bd.length; j < l; j++) {
                        if(this.name === 'xaxis' || this.name === 'x2axis') {
                            bd[j][0] = new $.jsDate(bd[j][0]).getTime();
                            if((bd[j][0] != null && bd[j][0] < db.min) || db.min == null) {
                                db.min = bd[j][0];
                            }
                        }
                        else {
                            bd[j][1] = new $.jsDate(bd[j][1]).getTime();
                            if((bd[j][1] != null && bd[j][1] < db.min) || db.min == null) {
                                db.min = bd[j][1];
                            }
                        }
                    }
                }
            }

            var tempf = 0, tempn = 0;
            for(var n in stats.frequencies) {
                stats.sortedIntervals.push({
                    interval: n,
                    frequency: stats.frequencies[n]
                });
            }
            stats.sortedIntervals.sort(function(a, b) {
                return b.frequency - a.frequency;
            });

            stats.min = $.jqplot.arrayMin(stats.intervals);
            stats.max = $.jqplot.arrayMax(stats.intervals);
            stats.mean = sum / d.length;
            this._intervalStats.push(stats);
            stats = sum = s = d = pd = sd = null;
        }
        db = null;

    };

    // called with scope of an axis
    $.jqplot.DateAxisRenderer.prototype.reset = function() {
        this.min = this._options.min;
        this.max = this._options.max;
        this.tickInterval = this._options.tickInterval;
        this.numberTicks = this._options.numberTicks;
        this._autoFormatString = '';
        if(this._overrideFormatString && this.tickOptions && this.tickOptions.formatString) {
            this.tickOptions.formatString = '';
        }
        this.daTickInterval = this._daTickInterval;
        this.useDST = this._useDST;
        this.specialFormat = this._specialFormat;
        this.specialFormatFlag = this._specialFormatFlag;
        // this._ticks = this.__ticks;
    };

    $.jqplot.DateAxisRenderer.prototype.createTicks = function() {
        // we're are operating on an axis here
        var ticks = this._ticks;
        var userTicks = this.ticks;
        var name = this.name;
        // databounds were set on axis initialization.
        var db = this._dataBounds;
        // determines if we need to have date/time on at least one tick for specialFormat == true
        var midnightExists = false;
        var dim, interval;
        var min, max;
        var pos1, pos2;
        var tt, i;
        // for special formatting of axis where date only shows on ticks for midnight, and
        // time shows on others with rule of two
        // all tick settings are disregarded
        if (this.specialFormat)
        {
            if (this.specialFormatFlag==null || (this.specialFormatFlag != 1 && this.specialFormatFlag != 3)){
                var minDtTm = $.jsDate.createDate(this.min);
                var maxDtTm = $.jsDate.createDate(this.max);
                DAR_HELPERS.createdNow = true;
                var tickVals = DAR_HELPERS.DynamicRangeTickCalc(minDtTm.getTime(),maxDtTm.getTime());
                this.numberTicks = tickVals.length;
                userTicks = tickVals;
                midnightExists = false;
                for (var i=0;i<userTicks.length;i++)
                {
                    var tDate = $.jsDate.createDate(userTicks[i]);
                    if (tDate.getMilliseconds()==0 && tDate.getSeconds()==0 && tDate.getMinutes()==0 && tDate.getHours()==0)
                        midnightExists = true;
                }
                this.min = tickVals[0];
                this.max = tickVals[tickVals.length-1];
                this.daTickInterval = [(this.max - this.min) / (this.numberTicks - 1)/1000, 'seconds'];
            }
            else if (this.specialFormatFlag == 3) {
                var threshold = 30;
                var insetMult = 1;
                var tickInterval = this.tickInterval;
                // if we already have ticks, use them.
                // ticks must be in order of increasing value.
                min = ((this.min != null) ? new $.jsDate(this.min).getTime() : db.min);
                max = ((this.max != null) ? new $.jsDate(this.max).getTime() : db.max);
                var range = max - min;

                if (this.tickOptions == null || !this.tickOptions.formatString) {
                    this._overrideFormatString = true;
                }
            }
            else if (this.specialFormatFlag == 1) {
                userTicks = [new Date().getTime()];
            }
            /* adding ticks if specialFormatFlag == 2.  This will help create table look */
            if (this.specialFormatFlag == 2)
            {
                var tempTicks = []
                    , cDiffOpt = null, cDiff = null;
                for (var i=0;i<userTicks.length;i++)
                {
                    var t1Time = (userTicks[i].constructor == Array)?userTicks[i][0]:userTicks[i];
                    if (i==0)
                        tempTicks.push(t1Time);
                    else
                    {
                        var t2Time = (userTicks[i-1].constructor == Array)?userTicks[i-1][0]:userTicks[i-1];
                        cDiff = t1Time - t2Time;
                        var t1Date = $.jsDate.createDate(t1Time), t2Date = $.jsDate.createDate(t2Time);
                        eval(["t1Date.set",DAR_HELPERS.tickDiff[1],"(t1Date.get",DAR_HELPERS.tickDiff[1],"()-DAR_HELPERS.tickDiff[0]);"].join(""));
                        if (t1Date.getTime()==t2Date.getTime())
                        {
                            tempTicks.push(Math.round(t2Time+(cDiff/2)));
                            tempTicks.push(t1Time);
                        }
                        else
                        {
                            if (DAR_HELPERS.tickDiff[0]==1 && DAR_HELPERS.tickDiff[1]=="Date")
                                t2Date.setHours(t2Date.getHours()+12);
                            else if (DAR_HELPERS.tickDiff[0]==1 && DAR_HELPERS.tickDiff[1]=="Month")
                                t2Date.setDate(t2Date.getDate()+15);
                            else
                                eval(["t2Date.set",DAR_HELPERS.tickDiff[1],"(t2Date.get",DAR_HELPERS.tickDiff[1],"()+Math.round(DAR_HELPERS.tickDiff[0]/2));"].join(""));
                            var t2TempTime = t2Date.getTime();
                            if (t2TempTime >= t1Time)
                            {
                                tempTicks.push(t1Time);
                            }
                            else
                            {
                                tempTicks.push(t2TempTime);
                                tempTicks.push(t1Time);
                            }
                        }
                    }
                }
                userTicks = tempTicks;
                this.numberTicks = userTicks.length;
            }
        }
        /* if we already have ticks, use them. Ticks must be in order of increasing value. */
        if (userTicks.length) {
            /* ticks could be 1D or 2D array of [val, val, ,,,] or [[val, label], [val, label], ...] or mixed */
            if (this.specialFormatFlag == 3) {
                for (i=0; i<userTicks.length; i++){
                    var ut = userTicks[i];
                    var t = new this.tickRenderer(this.tickOptions);
                    if (ut.constructor == Array) {
                        t.value = new $.jsDate(ut[0]).getTime();
                        t.label = ut[1];
                        if (!this.showTicks) {
                            t.showLabel = false;
                            t.showMark = false;
                        }
                        else if (!this.showTickMarks) {
                            t.showMark = false;
                        }
                        t.setTick(t.value, this.name);
                        this._ticks.push(t);
                    }

                    else {
                        t.value = new $.jsDate(ut).getTime();
                        if (!this.showTicks) {
                            t.showLabel = false;
                            t.showMark = false;
                        }
                        else if (!this.showTickMarks) {
                            t.showMark = false;
                        }
                        t.setTick(t.value, this.name);
                        this._ticks.push(t);
                    }
                }
            }
            else {
                for (i=0; i<userTicks.length; i++){
                    var t = new this.tickRenderer(this.tickOptions);
                    /* creating date first in case of value not in Milliseconds */
                    t.value = $.jsDate.createDate((userTicks[i].constructor == Array)?userTicks[i][0]:userTicks[i]).getTime();
                    if (t.value > this.max)
                        continue;
                    t.label = (userTicks[i].constructor == Array)?userTicks[i][1]:null;

                    if (this.specialFormat)
                    {
                        /* show date with time on first tick if all other ticks are just time */
                        if (this.specialFormatFlag != null && this.specialFormatFlag == 2)
                        {
                            if (i==0 || i==(userTicks.length-1))
                            {
                                t.showLabel = false;
                                t.showGridline = false;
                                t.showMark = false;
                            }
                            else if ((i%2)==0)
                            {
                                t.showGridline = false;
                                t.showLabel = true;
                                t.showMark = false;
                            }
                            else
                            {
                                t.showGridline = true;
                                t.showLabel = false;
                                t.showMark = true;
                            }
                        }
                        else if (userTicks.length >=2 && i==(userTicks.length-1) && userTicks[userTicks.length-1]==this.max)
                        {

                            var t1Date = $.jsDate.createDate((userTicks[i-1].constructor == Array)?userTicks[i-1][0]:userTicks[i-1]);
                            var t2Date = $.jsDate.createDate((userTicks[i].constructor == Array)?userTicks[i][0]:userTicks[i]);
                            eval(["t2Date.set",DAR_HELPERS.tickDiff[1],"(t2Date.get",DAR_HELPERS.tickDiff[1],"()-DAR_HELPERS.tickDiff[0]);"].join(""));

                            if (t1Date.getTime() != t2Date.getTime())
                            {
                                t.showLabel = false;
                                t.showGridline = false;
                                t.showMark = false;
                            }
                        }
                    }

                    if (!this.showTicks) {
                        t.showLabel = false;
                        t.showMark = false;
                    }
                    else if (!this.showTickMarks) {
                        t.showMark = false;
                    }
                    t.setTick(t.value, this.name);
                    this._ticks.push(t);
                }
            }
            this.numberTicks = this._ticks.length;
            //if (!this.specialFormat) {
            this.min = this._ticks[0].value;
            this.max = this._ticks[this.numberTicks-1].value;
            //}
            this.daTickInterval = [(this.max - this.min) / (this.numberTicks - 1)/1000, 'seconds'];
        }

        ////////
        // We don't have any ticks yet, let's make some!
        ////////

        // if user specified min and max are null, we set those to make best ticks.
        else if (this.min == null && this.max == null) {
            var opts = $.extend(true, {}, this.tickOptions, {name: this.name, value: null});
            // want to find a nice interval
            var nttarget,
                titarget;

            // if no tickInterval or numberTicks options specified,  make a good guess.
            if (!this.tickInterval && !this.numberTicks) {
                var tdim = Math.max(dim, threshold+1);
                // how many ticks to put on the axis?
                // date labels tend to be long.  If ticks not rotated,
                // don't use too many and have a high spacing factor.
                // If we are rotating ticks, use a lower factor.
                var spacingFactor = 100;
                if (this.tickRenderer === $.jqplot.CanvasAxisTickRenderer && this.tickOptions.angle) {
                    spacingFactor = 115 - 40 * Math.abs(Math.sin(this.tickOptions.angle/180*Math.PI));
                }

                nttarget =  Math.ceil((tdim-threshold)/spacingFactor + 1);
                titarget = (max - min) / (nttarget - 1);
            }

            // If tickInterval is specified, we'll try to honor it.
            // Not gauranteed to get this interval, but we'll get as close as
            // we can.
            // tickInterval will be used before numberTicks, that is if
            // both are specified, numberTicks will be ignored.
            else if (this.tickInterval) {
                titarget = this.tickInterval;
            }

            // if numberTicks specified, try to honor it.
            // Not gauranteed, but will try to get close.
            else if (this.numberTicks) {
                nttarget = this.numberTicks;
                titarget = (max - min) / (nttarget - 1);
            }

            // If we can use an interval of 2 weeks or less, pick best one
            if (titarget <= 19*day) {
                var ret = bestDateInterval(min, max, titarget);
                var tempti = ret[0];
                this._autoFormatString = ret[1];

                min = Math.floor(min/tempti) * tempti;
                min = new $.jsDate(min);
                min = min.getTime() + min.getUtcOffset();

                nttarget = Math.ceil((max - min) / tempti) + 1;
                this.min = min;
                this.max = min + (nttarget - 1) * tempti;

                // if max is less than max, add an interval
                if (this.max < max) {
                    this.max += tempti;
                    nttarget += 1;
                }
                this.tickInterval = tempti;
                this.numberTicks = nttarget;

                for (var i=0; i<nttarget; i++) {
                    opts.value = this.min + i * tempti;
                    t = new this.tickRenderer(opts);

                    if (this._overrideFormatString && this._autoFormatString != '') {
                        t.formatString = this._autoFormatString;
                    }
                    if (!this.showTicks) {
                        t.showLabel = false;
                        t.showMark = false;
                    }
                    else if (!this.showTickMarks) {
                        t.showMark = false;
                    }
                    this._ticks.push(t);
                }

                insetMult = this.tickInterval;
            }

            // should we use a monthly interval?
            else if (titarget <= 9 * month) {

                this._autoFormatString = '%v';

                // how many months in an interval?
                var intv = Math.round(titarget/month);
                if (intv < 1) {
                    intv = 1;
                }
                else if (intv > 6) {
                    intv = 6;
                }

                // figure out the starting month and ending month.
                var mstart = new $.jsDate(min).setDate(1).setHours(0,0,0,0);

                // See if max ends exactly on a month
                var tempmend = new $.jsDate(max);
                var mend = new $.jsDate(max).setDate(1).setHours(0,0,0,0);

                if (tempmend.getTime() !== mend.getTime()) {
                    mend = mend.add(1, 'month');
                }

                var nmonths = mend.diff(mstart, 'month');

                nttarget = Math.ceil(nmonths/intv) + 1;

                this.min = mstart.getTime();
                this.max = mstart.clone().add((nttarget - 1) * intv, 'month').getTime();
                this.numberTicks = nttarget;

                for (var i=0; i<nttarget; i++) {
                    if (i === 0) {
                        opts.value = mstart.getTime();
                    }
                    else {
                        opts.value = mstart.add(intv, 'month').getTime();
                    }
                    t = new this.tickRenderer(opts);

                    if (this._overrideFormatString && this._autoFormatString != '') {
                        t.formatString = this._autoFormatString;
                    }
                    if (!this.showTicks) {
                        t.showLabel = false;
                        t.showMark = false;
                    }
                    else if (!this.showTickMarks) {
                        t.showMark = false;
                    }
                    this._ticks.push(t);
                }

                insetMult = intv * month;
            }

            // use yearly intervals
            else {

                this._autoFormatString = '%v';

                // how many years in an interval?
                var intv = Math.round(titarget/year);
                if (intv < 1) {
                    intv = 1;
                }

                // figure out the starting and ending years.
                var mstart = new $.jsDate(min).setMonth(0, 1).setHours(0,0,0,0);
                var mend = new $.jsDate(max).add(1, 'year').setMonth(0, 1).setHours(0,0,0,0);

                var nyears = mend.diff(mstart, 'year');

                nttarget = Math.ceil(nyears/intv) + 1;

                this.min = mstart.getTime();
                this.max = mstart.clone().add((nttarget - 1) * intv, 'year').getTime();
                this.numberTicks = nttarget;

                for (var i=0; i<nttarget; i++) {
                    if (i === 0) {
                        opts.value = mstart.getTime();
                    }
                    else {
                        opts.value = mstart.add(intv, 'year').getTime();
                    }
                    t = new this.tickRenderer(opts);

                    if (this._overrideFormatString && this._autoFormatString != '') {
                        t.formatString = this._autoFormatString;
                    }
                    if (!this.showTicks) {
                        t.showLabel = false;
                        t.showMark = false;
                    }
                    else if (!this.showTickMarks) {
                        t.showMark = false;
                    }
                    this._ticks.push(t);
                }

                insetMult = intv * year;
            }
        }

        ////////
        // Some option(s) specified, work around that.
        ////////
        else {
            if (name.match(/^x/)) {
                dim = this._plotDimensions.width;
            }
            else {
                dim = this._plotDimensions.height;
            }

            // if min, max and number of ticks specified, user can't specify interval.
            if (this.min != null && this.max != null && this.numberTicks != null) {
                this.tickInterval = null;
            }

            // if user specified a tick interval, convert to usable.
            if (this.tickInterval != null)
            {
                // if interval is a number or can be converted to one, use it.
                // Assume it is in SECONDS!!!
                if (Number(this.tickInterval)) {
                    this.daTickInterval = [Number(this.tickInterval), 'seconds'];
                }
                // else, parse out something we can build from.
                else if (typeof this.tickInterval == "string") {
                    var parts = this.tickInterval.split(' ');
                    if (parts.length == 1) {
                        this.daTickInterval = [1, parts[0]];
                    }
                    else if (parts.length == 2) {
                        this.daTickInterval = [parts[0], parts[1]];
                    }
                }
            }

            min = ((this.min != null) ? $.jsDate.createDate(this.min).getTime() : db.min);
            max = ((this.max != null) ? $.jsDate.createDate(this.max).getTime() : db.max);

            // if min and max are same, space them out a bit
            if (min == max) {
                var adj = 24*60*60*500;  // 1/2 day
                min -= adj;
                max += adj;
            }

            var range = max - min;
            var rmin, rmax;

            rmin = (this.min != null) ? $.jsDate.createDate(this.min).getTime() : min - range/2*(this.padMin - 1);
            rmax = (this.max != null) ? $.jsDate.createDate(this.max).getTime() : max + range/2*(this.padMax - 1);
            this.min = rmin;
            this.max = rmax;
            range = this.max - this.min;

            if (this.numberTicks == null){
                // if tickInterval is specified by user, we will ignore computed maximum.
                // max will be equal or greater to fit even # of ticks.
                if (this.daTickInterval != null) {
                    var max = $.jsDate.createDate(this.max);
                    var nc = new $.jsDate(max).diff(this.min, this.daTickInterval[1], true);
                    this.numberTicks = Math.ceil(nc/this.daTickInterval[0]) +1;
                    var min = $.jsDate.createDate(this.min);
                    this.max = new $.jsDate(min).add((this.numberTicks-1) * this.daTickInterval[0], this.daTickInterval[1]).getTime();
                }
                else if (dim > 200) {
                    this.numberTicks = parseInt(3+(dim-200)/100, 10);
                }
                else {
                    this.numberTicks = 2;
                }
            }

            insetMult = range / (this.numberTicks-1)/1000;
            if (this.daTickInterval == null) {
                this.daTickInterval = [insetMult, 'seconds'];
            }

            if (this.specialFormatFlag == 3) {
                for (var i=0; i<this.numberTicks; i++){
                    var min = new $.jsDate(this.min);
                    tt = min.add(i*this.daTickInterval[0], this.daTickInterval[1]).getTime();
                    var t = new this.tickRenderer(this.tickOptions);
                    // var t = new $.jqplot.AxisTickRenderer(this.tickOptions);
                    if (!this.showTicks) {
                        t.showLabel = false;
                        t.showMark = false;
                    }
                    else if (!this.showTickMarks) {
                        t.showMark = false;
                    }
                    t.setTick(tt, this.name);
                    this._ticks.push(t);
                }
            }
            else {
                for (var i=0; i<this.numberTicks; i++){
                    var min = $.jsDate.createDate(this.min);
                    if (this.useDST){
                        tt = new $.jsDate(min).add(i*this.daTickInterval[0], this.daTickInterval[1]).getTime();
                    }
                    else{
                        tt = new $.jsDate(min).addNoDST(i*this.daTickInterval[0], this.daTickInterval[1]).getTime();
                    }
                    var t = new this.tickRenderer(this.tickOptions);
                    // var t = new $.jqplot.AxisTickRenderer(this.tickOptions);
                    if (!this.showTicks) {
                        t.showLabel = false;
                        t.showMark = false;
                    }
                    else if (!this.showTickMarks) {
                        t.showMark = false;
                    }
                    t.setTick(tt, this.name);
                    this._ticks.push(t);
                }
            }
        }
        if (this._daTickInterval == null) {
            this._daTickInterval = this.daTickInterval;
        }
    };
})(jQuery);

var DAR_HELPERS = function() {
    return {
        createdNow: false,
        tickDiff: null,
        minuteCntPerTickSpecial: 0,
        DynamicRangeTickCalc: function(iMin, iMax) {
            var unitSize = {
                "second": 1000,
                "minute": 60 * 1000,
                "hour": 60 * 60 * 1000,
                "day": 24 * 60 * 60 * 1000,
                "month": 30 * 24 * 60 * 60 * 1000,
                "year": 365.2425 * 24 * 60 * 60 * 1000
            };
            var minDtTm = $.jsDate.createDate(iMin);
            var maxDtTm = $.jsDate.createDate(iMax);
            var dtTmDiff = iMax - iMin;
            var tickVals = [], curDtTm = new Date(), noNowTick = false;
            var minuteCnt = DAR_HELPERS.minuteCntPerTickSpecial;
            curDtTm.setMilliseconds(0);
            curDtTm.setSeconds(0);
            if(minuteCnt > 0) //special tick calc for ICU Flowsheet
            {
                DAR_HELPERS.tickDiff = [minuteCnt, "Minutes"];
                if((maxDtTm.getMinutes() % minuteCnt) != 0 || ((maxDtTm.getMinutes() % minuteCnt) == 0 && (maxDtTm.getSeconds() > 0 || maxDtTm.getMilliseconds() > 0))) {
                    maxDtTm.setMinutes(maxDtTm.getMinutes() + ( minuteCnt - (maxDtTm.getMinutes() % minuteCnt)));
                }
                maxDtTm.setMilliseconds(0);
                maxDtTm.setSeconds(0);
                tickVals.push(maxDtTm.getTime());
                DAR_HELPERS.createdNow = false;
                while(maxDtTm.getTime() > minDtTm.getTime()) {
                    maxDtTm.setMinutes(maxDtTm.getMinutes() - minuteCnt);
                    tickVals.push(maxDtTm.getTime());
                }
                tickVals.reverse();
                return tickVals;
            }
            else {
                if(dtTmDiff <= (2 * unitSize["second"])) // <= 2 seconds
                {
                    DAR_HELPERS.tickDiff = [250, "Milliseconds"];
                    if((maxDtTm.getMilliseconds() % 250) != 0) {
                        maxDtTm.setMilliseconds(maxDtTm.getMilliseconds() + (250 - (maxDtTm.getMilliseconds() % 250)));
                    }
                    tickVals.push(maxDtTm.getTime());
                    while(maxDtTm.getTime() > minDtTm.getTime()) {
                        maxDtTm.setMilliseconds(maxDtTm.getMilliseconds() - 250);
                        if(maxDtTm.getTime() == curDtTm.getTime()) {
                            noNowTick = true;
                            /* removing curTick to prevent override of actual ticks */
                        }
                        else if(!noNowTick && !DAR_HELPERS.createdNow && maxDtTm.getTime() < curDtTm.getTime()) {
                            DAR_HELPERS.createdNow = true;
                            tickVals.push(curDtTm.getTime());
                        }
                        tickVals.push(maxDtTm.getTime());
                    }
                }
                else if(dtTmDiff <= ((2 * unitSize["minute"]) + (15 * unitSize["second"]))) // <= 2 minutes 15 seconds
                {
                    DAR_HELPERS.tickDiff = [15, "Seconds"];
                    if((maxDtTm.getSeconds() % 15) != 0 || ((maxDtTm.getSeconds() % 15) == 0 && maxDtTm.getMilliseconds() > 0)) {
                        maxDtTm.setSeconds(maxDtTm.getSeconds() + (15 - (maxDtTm.getSeconds() % 15)));
                    }
                    maxDtTm.setMilliseconds(0);
                    tickVals.push(maxDtTm.getTime());
                    while(maxDtTm.getTime() > minDtTm.getTime()) {
                        maxDtTm.setSeconds(maxDtTm.getSeconds() - 15);
                        if(maxDtTm.getTime() == curDtTm.getTime()) {
                            noNowTick = true;
                            /* removing curTick to prevent override of actual ticks */
                        }
                        else if(!noNowTick && !DAR_HELPERS.createdNow && maxDtTm.getTime() < curDtTm.getTime()) {
                            DAR_HELPERS.createdNow = true;
                            tickVals.push(curDtTm.getTime());
                        }
                        tickVals.push(maxDtTm.getTime());
                    }
                }
                else if(dtTmDiff <= ((2 * unitSize["hour"]) + (15 * unitSize["minute"]))) // <= 2 hours 15 minutes
                {
                    DAR_HELPERS.tickDiff = [15, "Minutes"];
                    if((maxDtTm.getMinutes() % 15) != 0 || ((maxDtTm.getMinutes() % 15) == 0 && (maxDtTm.getSeconds() > 0 || maxDtTm.getMilliseconds() > 0))) {
                        maxDtTm.setMinutes(maxDtTm.getMinutes() + (15 - (maxDtTm.getMinutes() % 15)));
                    }
                    maxDtTm.setMilliseconds(0);
                    maxDtTm.setSeconds(0);
                    tickVals.push(maxDtTm.getTime());
                    while(maxDtTm.getTime() > minDtTm.getTime()) {
                        maxDtTm.setMinutes(maxDtTm.getMinutes() - 15);
                        if(maxDtTm.getTime() == curDtTm.getTime()) {
                            noNowTick = true;
                            /* removing curTick to prevent override of actual ticks */
                        }
                        else if(!noNowTick && !DAR_HELPERS.createdNow && maxDtTm.getTime() < curDtTm.getTime()) {
                            DAR_HELPERS.createdNow = true;
                            tickVals.push(curDtTm.getTime());
                        }
                        tickVals.push(maxDtTm.getTime());
                    }
                }
                else if(dtTmDiff <= (unitSize["day"] + (2 * unitSize["hour"]))) // <= 1 day 2 hours
                {
                    DAR_HELPERS.tickDiff = [2, "Hours"];
                    if((maxDtTm.getHours() % 2) != 0 || ((maxDtTm.getHours() % 2) == 0 && (maxDtTm.getMinutes() > 0 || maxDtTm.getSeconds() > 0 || maxDtTm.getMilliseconds() > 0))) {
                        maxDtTm.setHours(maxDtTm.getHours() + (2 - (maxDtTm.getHours() % 2)));
                    }
                    maxDtTm.setMilliseconds(0);
                    maxDtTm.setSeconds(0);
                    maxDtTm.setMinutes(0);
                    tickVals.push(maxDtTm.getTime());
                    while(maxDtTm.getTime() > minDtTm.getTime()) {
                        maxDtTm.setHours(maxDtTm.getHours() - 2);
                        if(maxDtTm.getTime() == curDtTm.getTime()) {
                            noNowTick = true;
                            /* removing curTick to prevent override of actual ticks */
                        }
                        else if(!noNowTick && !DAR_HELPERS.createdNow && maxDtTm.getTime() < curDtTm.getTime()) {
                            DAR_HELPERS.createdNow = true;
                            tickVals.push(curDtTm.getTime());
                        }
                        tickVals.push(maxDtTm.getTime());
                    }
                }
                else if(dtTmDiff <= ((2 * unitSize["day"]) + (4 * unitSize["hour"]))) // <= 2 days 4 hours
                {
                    DAR_HELPERS.tickDiff = [4, "Hours"];
                    if((maxDtTm.getHours() % 4) != 0 || ((maxDtTm.getHours() % 4) == 0 && (maxDtTm.getMinutes() > 0 || maxDtTm.getSeconds() > 0 || maxDtTm.getMilliseconds() > 0))) {
                        maxDtTm.setHours(maxDtTm.getHours() + (4 - (maxDtTm.getHours() % 4)));
                    }
                    maxDtTm.setMilliseconds(0);
                    maxDtTm.setSeconds(0);
                    maxDtTm.setMinutes(0);
                    tickVals.push(maxDtTm.getTime());
                    while(maxDtTm.getTime() > minDtTm.getTime()) {
                        maxDtTm.setHours(maxDtTm.getHours() - 4);
                        if(maxDtTm.getTime() == curDtTm.getTime()) {
                            noNowTick = true;
                            /* removing curTick to prevent override of actual ticks */
                        }
                        else if(!noNowTick && !DAR_HELPERS.createdNow && maxDtTm.getTime() < curDtTm.getTime()) {
                            DAR_HELPERS.createdNow = true;
                            tickVals.push(curDtTm.getTime());
                        }
                        tickVals.push(maxDtTm.getTime());
                    }
                }
                else if(dtTmDiff <= (15 * unitSize["day"])) // <= 2 weeks 1 day
                {
                    DAR_HELPERS.tickDiff = [1, "Date"];
                    if(maxDtTm.getMilliseconds() > 0 || maxDtTm.getSeconds() > 0 || maxDtTm.getMinutes() > 0 || maxDtTm.getHours() > 0) {
                        maxDtTm.setDate(maxDtTm.getDate() + 1);
                    }
                    maxDtTm.setMilliseconds(0);
                    maxDtTm.setSeconds(0);
                    maxDtTm.setMinutes(0);
                    maxDtTm.setHours(0);
                    tickVals.push(maxDtTm.getTime());
                    while(maxDtTm.getTime() > minDtTm.getTime()) {
                        maxDtTm.setDate(maxDtTm.getDate() - 1);
                        if(maxDtTm.getTime() == curDtTm.getTime()) {
                            noNowTick = true;
                            /* removing curTick to prevent override of actual ticks */
                        }
                        else if(!noNowTick && !DAR_HELPERS.createdNow && maxDtTm.getTime() < curDtTm.getTime()) {
                            DAR_HELPERS.createdNow = true;
                            tickVals.push(curDtTm.getTime());
                        }
                        tickVals.push(maxDtTm.getTime());
                    }
                }
                else if(dtTmDiff <= ((2 * unitSize["month"]) + (7 * unitSize["day"]))) // <= 2 months 1 week
                {
                    DAR_HELPERS.tickDiff = [7, "Date"];
                    if(maxDtTm.getMilliseconds() > 0 || maxDtTm.getSeconds() > 0 || maxDtTm.getMinutes() > 0 || maxDtTm.getHours() > 0) {
                        maxDtTm.setDate(maxDtTm.getDate() + 1);
                    }
                    maxDtTm.setMilliseconds(0);
                    maxDtTm.setSeconds(0);
                    maxDtTm.setMinutes(0);
                    maxDtTm.setHours(0);
                    tickVals.push(maxDtTm.getTime());
                    while(maxDtTm.getTime() > minDtTm.getTime()) {
                        maxDtTm.setDate(maxDtTm.getDate() - 7);
                        if(maxDtTm.getTime() == curDtTm.getTime()) {
                            noNowTick = true;
                            /* removing curTick to prevent override of actual ticks */
                        }
                        else if(!noNowTick && !DAR_HELPERS.createdNow && maxDtTm.getTime() < curDtTm.getTime()) {
                            DAR_HELPERS.createdNow = true;
                            tickVals.push(curDtTm.getTime());
                        }
                        tickVals.push(maxDtTm.getTime());
                    }
                }
                else if (dtTmDiff > ((2 * unitSize["month"]) + (7 * unitSize["day"])) && dtTmDiff<=((12*unitSize["month"])))// <= 12 months
                {
                    DAR_HELPERS.tickDiff = [1,"Month"];
                    if (maxDtTm.getDate()>1 || (maxDtTm.getDate()==1 &&
                        (maxDtTm.getMilliseconds()>0 || maxDtTm.getSeconds()>0 || maxDtTm.getMinutes()>0 || maxDtTm.getHours()>0)))
                        maxDtTm.setMonth(maxDtTm.getMonth()+1);
                    maxDtTm.setMilliseconds(0);
                    maxDtTm.setSeconds(0);
                    maxDtTm.setMinutes(0);
                    maxDtTm.setHours(0);
                    maxDtTm.setDate(1);
                    tickVals.push(maxDtTm.getTime());
                    while (maxDtTm.getTime() > minDtTm.getTime())
                    {
                        maxDtTm.setMonth(maxDtTm.getMonth()-1);
                        if (maxDtTm.getTime() == curDtTm.getTime())
                            noNowTick = true; /* removing curTick to prevent override of actual ticks */
                        else if (!noNowTick && !DAR_HELPERS.createdNow && maxDtTm.getTime() < curDtTm.getTime())
                        {
                            DAR_HELPERS.createdNow = true;
                            tickVals.push(curDtTm.getTime());
                        }
                        tickVals.push(maxDtTm.getTime());
                    }
                }
                else if (dtTmDiff>((12*unitSize["month"])))// > 12 months
                {
                    DAR_HELPERS.tickDiff = [12,"Month"];
                    if (maxDtTm.getDate()>12 || (maxDtTm.getDate()==12 &&
                        (maxDtTm.getMilliseconds()>0 || maxDtTm.getSeconds()>0 || maxDtTm.getMinutes()>0 || maxDtTm.getHours()>0)))
                        maxDtTm.setMonth(maxDtTm.getMonth()+12);
                    maxDtTm.setMilliseconds(0);
                    maxDtTm.setSeconds(0);
                    maxDtTm.setMinutes(0);
                    maxDtTm.setHours(0);
                    maxDtTm.setDate(12);
                    tickVals.push(maxDtTm.getTime());
                    while (maxDtTm.getTime() > minDtTm.getTime())
                    {
                        maxDtTm.setMonth(maxDtTm.getMonth()-12);
                        if (maxDtTm.getTime() == curDtTm.getTime())
                            noNowTick = true; /* removing curTick to prevent override of actual ticks */
                        else if (!noNowTick && !DAR_HELPERS.createdNow && maxDtTm.getTime() < curDtTm.getTime())
                        {
                            DAR_HELPERS.createdNow = true;
                            tickVals.push(curDtTm.getTime());
                        }
                        tickVals.push(maxDtTm.getTime());
                    }
                }
            }
            tickVals.reverse();
            if(tickVals[tickVals.length - 1] > new Date().getTime()) {
                tickVals[tickVals.length - 1] = new Date().getTime();
            }
            return tickVals;
        }

    }
}();

/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.0b2_r1012
 *
 * Copyright (c) 2009-2011 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can
 * choose the license that best suits your project and use it accordingly.
 *
 * Although not required, the author would appreciate an email letting him
 * know of any substantial use of jqPlot.  You can reach the author at:
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     The author (Ash Searle) has placed this code in the public domain:
 *     "This code is unrestricted: you are free to use it however you like."
 *
 */
(function($) {
    $.jqplot.eventListenerHooks.push(['jqplotMouseMove', handleMove]);

    /**
     * Class: $.jqplot.Highlighter
     * Plugin which will highlight data points when they are moused over.
     *
     * To use this plugin, include the js
     * file in your source:
     *
     * > <script type="text/javascript" src="plugins/jqplot.highlighter.js"></script>
     *
     * A tooltip providing information about the data point is enabled by default.
     * To disable the tooltip, set "showTooltip" to false.
     *
     * You can control what data is displayed in the tooltip with various
     * options.  The "tooltipAxes" option controls wether the x, y or both
     * data values are displayed.
     *
     * Some chart types (e.g. hi-low-close) have more than one y value per
     * data point. To display the additional values in the tooltip, set the
     * "yvalues" option to the desired number of y values present (3 for a hlc chart).
     *
     * By default, data values will be formatted with the same formatting
     * specifiers as used to format the axis ticks.  A custom format code
     * can be supplied with the tooltipFormatString option.  This will apply
     * to all values in the tooltip.
     *
     * For more complete control, the "formatString" option can be set.  This
     * Allows conplete control over tooltip formatting.  Values are passed to
     * the format string in an order determined by the "tooltipAxes" and "yvalues"
     * options.  So, if you have a hi-low-close chart and you just want to display
     * the hi-low-close values in the tooltip, you could set a formatString like:
     *
     * > highlighter: {
     * >     tooltipAxes: 'y',
     * >     yvalues: 3,
     * >     formatString:'<table class="jqplot-highlighter">
     * >         <tr><td>hi:</td><td>%s</td></tr>
     * >         <tr><td>low:</td><td>%s</td></tr>
     * >         <tr><td>close:</td><td>%s</td></tr></table>'
     * > }
     *
     */
    $.jqplot.Highlighter = function(options) {
        // Group: Properties
        //
        //prop: show
        // true to show the highlight.
        this.show = $.jqplot.config.enablePlugins;
        // prop: markerRenderer
        // Renderer used to draw the marker of the highlighted point.
        // Renderer will assimilate attributes from the data point being highlighted,
        // so no attributes need set on the renderer directly.
        // Default is to turn off shadow drawing on the highlighted point.
        this.markerRenderer = new $.jqplot.MarkerRenderer({shadow:false});
        // prop: showMarker
        // true to show the marker
        this.showMarker  = true;
        // prop: lineWidthAdjust
        // Pixels to add to the lineWidth of the highlight.
        this.lineWidthAdjust = 2.5;
        // prop: sizeAdjust
        // Pixels to add to the overall size of the highlight.
        this.sizeAdjust = 5;
        // prop: showTooltip
        // Show a tooltip with data point values.
        this.showTooltip = true;
        // prop: tooltipLocation
        // Where to position tooltip, 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'
        this.tooltipLocation = 'nw';
        // prop: fadeTooltip
        // true = fade in/out tooltip, flase = show/hide tooltip
        this.fadeTooltip = true;
        // prop: tooltipFadeSpeed
        // 'slow', 'def', 'fast', or number of milliseconds.
        this.tooltipFadeSpeed = "fast";
        // prop: tooltipOffset
        // Pixel offset of tooltip from the highlight.
        this.tooltipOffset = 2;
        // prop: tooltipAxes
        // Which axes to display in tooltip, 'x', 'y' or 'both', 'xy' or 'yx'
        // 'both' and 'xy' are equivalent, 'yx' reverses order of labels.
        this.tooltipAxes = 'both';
        // prop; tooltipSeparator
        // String to use to separate x and y axes in tooltip.
        this.tooltipSeparator = ', ';
        // prop; tooltipContentEditor
        // Function used to edit/augment/replace the formatted tooltip contents.
        // Called as str = tooltipContentEditor(str, seriesIndex, pointIndex)
        // where str is the generated tooltip html and seriesIndex and pointIndex identify
        // the data point being highlighted. Should return the html for the tooltip contents.
        this.tooltipContentEditor = null;
        // prop: useAxesFormatters
        // Use the x and y axes formatters to format the text in the tooltip.
        this.useAxesFormatters = true;
        // prop: tooltipFormatString
        // sprintf format string for the tooltip.
        // Uses Ash Searle's javascript sprintf implementation
        // found here: http://hexmen.com/blog/2007/03/printf-sprintf/
        // See http://perldoc.perl.org/functions/sprintf.html for reference.
        // Additional "p" and "P" format specifiers added by Chris Leonello.
        this.tooltipFormatString = '%.5P';
        // prop: formatString
        // alternative to tooltipFormatString
        // will format the whole tooltip text, populating with x, y values as
        // indicated by tooltipAxes option.  So, you could have a tooltip like:
        // 'Date: %s, number of cats: %d' to format the whole tooltip at one go.
        // If useAxesFormatters is true, values will be formatted according to
        // Axes formatters and you can populate your tooltip string with
        // %s placeholders.
        this.formatString = null;
        // prop: yvalues
        // Number of y values to expect in the data point array.
        // Typically this is 1.  Certain plots, like OHLC, will
        // have more y values in each data point array.
        this.yvalues = 1;
        // prop: bringSeriesToFront
        // This option requires jQuery 1.4+
        // True to bring the series of the highlighted point to the front
        // of other series.
        this.bringSeriesToFront = false;
        this._tooltipElem;
        this.isHighlighting = false;
        this.currentNeighbor = null;

        $.extend(true, this, options);
    };

    var locations = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];
    var locationIndicies = {'nw':0, 'n':1, 'ne':2, 'e':3, 'se':4, 's':5, 'sw':6, 'w':7};
    var oppositeLocations = ['se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];

    // axis.renderer.tickrenderer.formatter

    // called with scope of plot
    $.jqplot.Highlighter.init = function (target, data, opts){
        var options = opts || {};
        this.plugins.highlighter = new $.jqplot.Highlighter(options.highlighter);
    };

    // called within scope of series
    $.jqplot.Highlighter.parseOptions = function (defaults, options) {
        // Add a showHighlight option to the series
        // and set it to true by default.
        this.showHighlight = true;
    };

    // called within context of plot
    // create a canvas which we can draw on.
    // insert it before the eventCanvas, so eventCanvas will still capture events.
    $.jqplot.Highlighter.postPlotDraw = function() {
        // Memory Leaks patch
        if (this.plugins.highlighter && this.plugins.highlighter.highlightCanvas) {
            this.plugins.highlighter.highlightCanvas.resetCanvas();
            this.plugins.highlighter.highlightCanvas = null;
        }

        if (this.plugins.highlighter && this.plugins.highlighter._tooltipElem) {
            this.plugins.highlighter._tooltipElem.emptyForce();
            this.plugins.highlighter._tooltipElem = null;
        }

        this.plugins.highlighter.highlightCanvas = new $.jqplot.GenericCanvas();

        this.eventCanvas._elem.before(this.plugins.highlighter.highlightCanvas.createElement(this._gridPadding, 'jqplot-highlight-canvas', this._plotDimensions, this));
        this.plugins.highlighter.highlightCanvas.setContext();

        var elem = document.createElement('div');
        this.plugins.highlighter._tooltipElem = $(elem);
        elem = null;
        this.plugins.highlighter._tooltipElem.addClass('jqplot-highlighter-tooltip');
        this.plugins.highlighter._tooltipElem.css({position:'absolute', display:'none'});

        this.eventCanvas._elem.before(this.plugins.highlighter._tooltipElem);
    };

    $.jqplot.preInitHooks.push($.jqplot.Highlighter.init);
    $.jqplot.preParseSeriesOptionsHooks.push($.jqplot.Highlighter.parseOptions);
    $.jqplot.postDrawHooks.push($.jqplot.Highlighter.postPlotDraw);

    function draw(plot, neighbor) {
        var hl = plot.plugins.highlighter;
        var s = plot.series[neighbor.seriesIndex];
        var smr = s.markerRenderer;
        var mr = hl.markerRenderer;
        mr.style = smr.style;
        mr.lineWidth = smr.lineWidth + hl.lineWidthAdjust;
        mr.size = smr.size + hl.sizeAdjust;
        var rgba = $.jqplot.getColorComponents(smr.color);
        var newrgb = [rgba[0], rgba[1], rgba[2]];
        var alpha = (rgba[3] >= 0.6) ? rgba[3]*0.6 : rgba[3]*(2-rgba[3]);
        mr.color = 'rgba('+newrgb[0]+','+newrgb[1]+','+newrgb[2]+','+alpha+')';
        mr.init();
        mr.draw(s.gridData[neighbor.pointIndex][0], s.gridData[neighbor.pointIndex][1], hl.highlightCanvas._ctx);
    }

    function showTooltip(plot, series, neighbor) {
        // neighbor looks like: {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]}
        // gridData should be x,y pixel coords on the grid.
        // add the plot._gridPadding to that to get x,y in the target.
        var hl = plot.plugins.highlighter;
        var elem = hl._tooltipElem;
        var serieshl = series.highlighter || {};

        var opts = $.extend(true, {}, hl, serieshl);

        if (opts.useAxesFormatters) {
            var xf = series._xaxis._ticks[0].formatter;
            var yf = series._yaxis._ticks[0].formatter;
            var xfstr = series._xaxis._ticks[0].formatString;
            var yfstr = series._yaxis._ticks[0].formatString;
            var str;
            var xstr = xf(xfstr, neighbor.data[0]);
            var ystrs = [];
            for (var i=1; i<opts.yvalues+1; i++) {
                ystrs.push(yf(yfstr, neighbor.data[i]));
            }
            if (typeof opts.formatString === 'string') {
                switch (opts.tooltipAxes) {
                    case 'both':
                    case 'xy':
                        ystrs.unshift(xstr);
                        ystrs.unshift(opts.formatString);
                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);
                        break;
                    case 'yx':
                        ystrs.push(xstr);
                        ystrs.unshift(opts.formatString);
                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);
                        break;
                    case 'x':
                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, [opts.formatString, xstr]);
                        break;
                    case 'y':
                        ystrs.unshift(opts.formatString);
                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);
                        break;
                    default: // same as xy
                        ystrs.unshift(xstr);
                        ystrs.unshift(opts.formatString);
                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);
                        break;
                }
            }
            else {
                switch (opts.tooltipAxes) {
                    case 'both':
                    case 'xy':
                        str = xstr;
                        for (var i=0; i<ystrs.length; i++) {
                            str += opts.tooltipSeparator + ystrs[i];
                        }
                        break;
                    case 'yx':
                        str = '';
                        for (var i=0; i<ystrs.length; i++) {
                            str += ystrs[i] + opts.tooltipSeparator;
                        }
                        str += xstr;
                        break;
                    case 'x':
                        str = xstr;
                        break;
                    case 'y':
                        str = ystrs.join(opts.tooltipSeparator);
                        break;
                    default: // same as 'xy'
                        str = xstr;
                        for (var i=0; i<ystrs.length; i++) {
                            str += opts.tooltipSeparator + ystrs[i];
                        }
                        break;

                }
            }
        }
        else {
            var str;
            if (typeof opts.formatString ===  'string') {
                str = $.jqplot.sprintf.apply($.jqplot.sprintf, [opts.formatString].concat(neighbor.data));
            }

            else {
                if (opts.tooltipAxes == 'both' || opts.tooltipAxes == 'xy') {
                    str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[0]) + opts.tooltipSeparator + $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[1]);
                }
                else if (opts.tooltipAxes == 'yx') {
                    str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[1]) + opts.tooltipSeparator + $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[0]);
                }
                else if (opts.tooltipAxes == 'x') {
                    str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[0]);
                }
                else if (opts.tooltipAxes == 'y') {
                    str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[1]);
                }
            }
        }
        if ($.isFunction(opts.tooltipContentEditor)) {
            // args str, seriesIndex, pointIndex are essential so the hook can look up
            // extra data for the point.
            str = opts.tooltipContentEditor(str, neighbor.seriesIndex, neighbor.pointIndex, plot);
        }
        str = str.replace(/%l/,series.label);
        if (neighbor.data[2]!=undefined && neighbor.data[2])
            str = str.replace(/%1/,neighbor.data[2]);
        else
            str = str.replace(/%1/,"");
        if (neighbor.data[3]!=undefined && neighbor.data[3])
            str = str.replace(/%2/,neighbor.data[3]);
        else
            str = str.replace(/%2/,"");
        if (neighbor.data[4]!=undefined && neighbor.data[4])
            str = str.replace(/%3/,neighbor.data[4]);
        else
            str = str.replace(/%3/,"");
        if (neighbor.data[5]!=undefined && neighbor.data[5])
            str = str.replace(/%4/,neighbor.data[5]);
        else
            str = str.replace(/%4/,"");
        if (neighbor.data[8]!=undefined&&neighbor.data[8])
            str=str.replace(/%5/,neighbor.data[8]);
        else
            str=str.replace(/%5/,"");
        if (neighbor.data[7]!=undefined&&neighbor.data[7])
            str=str.replace(/%6/,neighbor.data[7]);
        else
            str=str.replace(/%6/,"");
        elem.html(str);
        var gridpos = {x:neighbor.gridData[0], y:neighbor.gridData[1]};
        var ms = 0;
        var fact = 0.707;
        if (series.markerRenderer.show == true) {
            ms = (series.markerRenderer.size + opts.sizeAdjust)/2;
        }

        var loc = locations;
        if (series.fillToZero && series.fill && neighbor.data[1] < 0) {
            loc = oppositeLocations;
        }

        switch (loc[locationIndicies[opts.tooltipLocation]]) {
            case 'nw':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset - fact * ms;
                var y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true) - fact * ms;
                break;
            case 'n':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true)/2;
                var y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true) - ms;
                break;
            case 'ne':
                var x = gridpos.x + plot._gridPadding.left + opts.tooltipOffset + fact * ms;
                var y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true) - fact * ms;
                break;
            case 'e':
                var x = gridpos.x + plot._gridPadding.left + opts.tooltipOffset + ms;
                var y = gridpos.y + plot._gridPadding.top - elem.outerHeight(true)/2;
                break;
            case 'se':
                var x = gridpos.x + plot._gridPadding.left + opts.tooltipOffset + fact * ms;
                var y = gridpos.y + plot._gridPadding.top + opts.tooltipOffset + fact * ms;
                break;
            case 's':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true)/2;
                var y = gridpos.y + plot._gridPadding.top + opts.tooltipOffset + ms;
                break;
            case 'sw':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset - fact * ms;
                var y = gridpos.y + plot._gridPadding.top + opts.tooltipOffset + fact * ms;
                break;
            case 'w':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset - ms;
                var y = gridpos.y + plot._gridPadding.top - elem.outerHeight(true)/2;
                break;
            default: // same as 'nw'
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset - fact * ms;
                var y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true) - fact * ms;
                break;
        }
        elem.css('left', x);
        elem.css('top', y);
        if (opts.fadeTooltip) {
            // Fix for stacked up animations.  Thnanks Trevor!
            elem.stop(true,true).fadeIn(opts.tooltipFadeSpeed);
        }
        else {
            elem.show();
        }
        elem = null;

    }

    function handleMove(ev, gridpos, datapos, neighbor, plot) {
        var hl = plot.plugins.highlighter;
        var c = plot.plugins.cursor;
        if (hl.show) {
            if (neighbor == null && hl.isHighlighting && HIGHLIGHTER_HELPERS.isHighlighting) {
                var ctx = hl.highlightCanvas._ctx;
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                if (hl.fadeTooltip) {
                    hl._tooltipElem.fadeOut(hl.tooltipFadeSpeed);
                }
                else {
                    hl._tooltipElem.hide();
                }
                if (hl.bringSeriesToFront) {
                    plot.restorePreviousSeriesOrder();
                }
                hl.isHighlighting = false;
                HIGHLIGHTER_HELPERS.isHighlighting = false;
                hl.currentNeighbor = null;
                ctx = null;
            }
            else if (neighbor != null && plot.series[neighbor.seriesIndex].showHighlight && !hl.isHighlighting && !HIGHLIGHTER_HELPERS.isHighlighting) {
                hl.isHighlighting = true;
                HIGHLIGHTER_HELPERS.isHighlighting = true;
                hl.currentNeighbor = neighbor;
                if (hl.showMarker) {
                    draw(plot, neighbor);
                }
                if (hl.showTooltip && (!c || !c._zoom.started)) {
                    showTooltip(plot, plot.series[neighbor.seriesIndex], neighbor);
                }
                if (hl.bringSeriesToFront) {
                    plot.moveSeriesToFront(neighbor.seriesIndex);
                }
            }
            // check to see if we're highlighting the wrong point.
            else if (neighbor != null && hl.isHighlighting  && HIGHLIGHTER_HELPERS.isHighlighting && hl.currentNeighbor != neighbor) {
                // highlighting the wrong point.

                // if new series allows highlighting, highlight new point.
                if (plot.series[neighbor.seriesIndex].showHighlight) {
                    var ctx = hl.highlightCanvas._ctx;
                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                    hl.isHighlighting = true;
                    HIGHLIGHTER_HELPERS.isHighlighting = true;
                    hl.currentNeighbor = neighbor;
                    if (hl.showMarker) {
                        draw(plot, neighbor);
                    }
                    if (hl.showTooltip && (!c || !c._zoom.started)) {
                        showTooltip(plot, plot.series[neighbor.seriesIndex], neighbor);
                    }
                    if (hl.bringSeriesToFront) {
                        plot.moveSeriesToFront(neighbor.seriesIndex);
                    }
                }
            }
        }
    }
})(jQuery);

var HIGHLIGHTER_HELPERS = function(){
    return {
        isHighlighting: false
    };
}();

/**
 * Copyright (c) 2009 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects
 * under both the MIT and GPL version 2.0 licenses. This means that you can
 * choose the license that best suits your project and use it accordingly.
 *
 * The author would appreciate an email letting him know of any substantial
 * use of jqPlot.  You can reach the author at: chris dot leonello at gmail
 * dot com or see http://www.jqplot.com/info.php .  This is, of course,
 * not required.
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * Thanks for using jqPlot!
 *
 */
(function($) {
    // class: $.jqplot.MarkerRenderer
    // The default jqPlot marker renderer, rendering the points on the line.
    $.jqplot.MarkerRenderer = function(options){
        // Group: Properties
        // prop: show
        // wether or not to show the marker.
        this.show = true;
        // prop: style
        // One of diamond, circle, square, x, plus, dash, filledDiamond, filledCircle, filledSquare
        this.style = 'filledCircle';
        // prop: lineWidth
        // size of the line for non-filled markers.
        this.lineWidth = 2;
        // prop: size
        // Size of the marker (diameter or circle, length of edge of square, etc.)
        this.size = 9.0;
        // prop: color
        // color of marker.  Will be set to color of series by default on init.
        this.color = '#666666';
        // prop: shadow
        // wether or not to draw a shadow on the line
        this.shadow = true;
        // prop: shadowAngle
        // Shadow angle in degrees
        this.shadowAngle = 45;
        // prop: shadowOffset
        // Shadow offset from line in pixels
        this.shadowOffset = 1;
        // prop: shadowDepth
        // Number of times shadow is stroked, each stroke offset shadowOffset from the last.
        this.shadowDepth = 3;
        // prop: shadowAlpha
        // Alpha channel transparency of shadow.  0 = transparent.
        this.shadowAlpha = '0.07';
        // prop: shadowRenderer
        // Renderer that will draws the shadows on the marker.
        this.shadowRenderer = new $.jqplot.ShadowRenderer();
        // prop: shapeRenderer
        // Renderer that will draw the marker.
        this.shapeRenderer = new $.jqplot.ShapeRenderer();
        // prop: whiskerColor
        // line color for a whisker line if drawn.
        this.whiskerColor = "#000000";
        // prop: whiskerData
        // data that is converted into whisker lines according to the "x" values passed in.
        // format: [[x, y1, y2],...]]
        this.whiskerData = [];
        // prop: _whiskerData
        // data (in pixels) that is converted into whisker lines according to the "x" values passed in.
        // format: [[x, y1, y2],...]]
        this._whiskerData = [];

        $.extend(true, this, options);
    };

    $.jqplot.MarkerRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
        var sdopt = {angle:this.shadowAngle, offset:this.shadowOffset, alpha:this.shadowAlpha, lineWidth:this.lineWidth, depth:this.shadowDepth, closePath:true};
        if (this.style.indexOf('filled') != -1) {
            sdopt.fill = true;
        }
        if (this.style.indexOf('ircle') != -1) {
            sdopt.isarc = true;
            sdopt.closePath = false;
        }
        this.shadowRenderer.init(sdopt);
        var shopt = {fill:false, isarc:false, strokeStyle:this.color, fillStyle:this.color, lineWidth:this.lineWidth, closePath:true};
        if (this.style.indexOf('filled') != -1) {
            shopt.fill = true;
        }
        if (this.style.indexOf('ircle') != -1) {
            shopt.isarc = true;
            shopt.closePath = false;
        }
        this.shapeRenderer.init(shopt);
    };

    $.jqplot.MarkerRenderer.prototype.drawLine = function(x1, y1, x2, y2, ctx){
        ctx.save();
        ctx.beginPath();
        ctx.moveTo(x1,y1);
        ctx.lineTo(x2,y2);
        ctx.strokeStyle = this.color;
        ctx.stroke();
        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawLineOpt = function(p1, p2, ctx, fill, options) {
        var points = [p1, p2];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);
    };

    $.jqplot.MarkerRenderer.prototype.drawUpVee = function(x, y, ctx, fill, options) {
        var stretch = 1.2;
        var dx = this.size/1/stretch;
        var dy = this.size/1*stretch;
        var opts = $.extend(true, {}, this.options, {closePath:false});
        var points = [[x+dx,y+dy],[x,y],[x-dx,y+dy]];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points, {closePath:false});
        }
        this.shapeRenderer.draw(ctx, points, opts);

        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawDownVee = function(x, y, ctx, fill, options) {
        var stretch = 1.2;
        var dx = this.size/1/stretch;
        var dy = this.size/1*stretch;
        var opts = $.extend(true, {}, this.options, {closePath:false});
        var points = [[x+dx,y-dy],[x,y],[x-dx,y-dy]];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points, {closePath:false});
        }
        this.shapeRenderer.draw(ctx, points, opts);

        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawDiamond = function(x, y, ctx, fill, options) {
        var stretch = 1.2;
        var dx = this.size/2*stretch;
        var dy = this.size/2*stretch;
        var points = [[x-dx, y], [x, y+dy], [x+dx, y], [x, y-dy]];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);

        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawStar = function(x, y, ctx, fill, options) {
        var stretch = 1.2;
        var dx = this.size/2*stretch;
        var dy = 0-(this.size/2*stretch);
        var dyE = 0-(this.size/1.5*stretch);
        var points = [[x,y+dyE],[x+(dx/3),y+(dy/2)],[x+dx,y+(dy/2)],[x+(dx/2),y],[x+dx,y-dy],[x,y-(dy/2)],[x-dx,y-dy],[x-(dx/2),y],[x-dx,y+(dy/2)],[x-(dx/3),y+(dy/2)]];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);

        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawRectangleDiag = function(x, y, ctx, fill, options, direction) {
        var stretch = 1.2;
        var dx = this.size/2*stretch;
        var dy = this.size/2*stretch;
        var points = null;
        switch (direction)
        {
            case "l":
                points = [[x, y+dy], [x+dx, y+(dy/2)], [x, y-dx], [x-dx,y-(dy/2)]];
                break;
            default: //right
                points = [[x, y+dy], [x+dx, y-(dy/2)], [x, y-dx], [x-dx,y+(dy/2)]];
                break;
        }

        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);

        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawTriangle = function(x, y, ctx, fill, options, direction) {
        var stretch = 1.2;
        var dx = this.size/2*stretch;
        var dy = this.size/2*stretch;
        var points = null;
        switch (direction)
        {
            case "r":
                points = [[x+dx, y], [x-dx, y-dy], [x-dx, y+dx]];
                break;
            case "l":
                points = [[x-dx, y], [x+dx, y-dy], [x+dx, y+dx]];
                break;
            case "d":
                points = [[x, y+dy], [x-dx, y-dy], [x+dx, y-dx]];
                break;
            default: //up
                points = [[x, y-dy], [x-dx, y+dy], [x+dx, y+dx]];
                break;
        }

        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);

        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawRectangle = function(x, y, ctx, fill, options, direction) {
        var stretch = 1.2;
        var dx = this.size/2*stretch;
        var dy = this.size/2*stretch;
        switch (direction)
        {
            case "v":
                dx = this.size/4*stretch;
                break;
            default: //horizontal
                dy = this.size/4*stretch;
                break;
        }
        var points = [[x-dx, y-dy], [x-dx, y+dy], [x+dx, y+dy], [x+dx, y-dy]];

        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);

        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawHeart = function(x, y, ctx, fill, options) {
        var stretch = 1.5;
        var dx = this.size/2*stretch;
        var dy = 0-(this.size/2*stretch);
        var points = [[x, y+(dy/2)], [x+(dx/3), y+dy], [x+dx, y+dy], [x+dx, y], [x, y-dy], [x-dx, y], [x-dx, y+dy], [x-(dx/3), y+dy]];

        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);

        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawPlus = function(x, y, ctx, fill, options) {
        var stretch = 1.0;
        var dx = this.size/2*stretch;
        var dy = this.size/2*stretch;
        var points1 = [[x, y-dy], [x, y+dy]];
        var points2 = [[x+dx, y], [x-dx, y]];
        var opts = $.extend(true, {}, this.options, {closePath:false});
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points1, {closePath:false});
            this.shadowRenderer.draw(ctx, points2, {closePath:false});
        }
        this.shapeRenderer.draw(ctx, points1, opts);
        this.shapeRenderer.draw(ctx, points2, opts);

        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawX = function(x, y, ctx, fill, options) {
        var stretch = 1.0;
        var dx = this.size/2*stretch;
        var dy = this.size/2*stretch;
        var opts = $.extend(true, {}, this.options, {closePath:false});
        var points1 = [[x-dx, y-dy], [x+dx, y+dy]];
        var points2 = [[x-dx, y+dy], [x+dx, y-dy]];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points1, {closePath:false});
            this.shadowRenderer.draw(ctx, points2, {closePath:false});
        }
        this.shapeRenderer.draw(ctx, points1, opts);
        this.shapeRenderer.draw(ctx, points2, opts);

        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawDash = function(x, y, ctx, fill, options) {
        var stretch = 1.0;
        var dx = this.size/2*stretch;
        var dy = this.size/2*stretch;
        var points = [[x-dx, y], [x+dx, y]];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);

        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawSquare = function(x, y, ctx, fill, options) {
        var stretch = 1.0;
        var dx = this.size/2*stretch;
        var dy = this.size/2*stretch;
        var points = [[x-dx, y-dy], [x-dx, y+dy], [x+dx, y+dy], [x+dx, y-dy]];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);

        ctx.restore();
    };

    $.jqplot.MarkerRenderer.prototype.drawCircle = function(x, y, ctx, fill, options) {
        var radius = this.size/2;
        var end = 2*Math.PI;
        var points = [x, y, radius, 0, end, true];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);

        ctx.restore();
    };
    $.jqplot.MarkerRenderer.prototype.drawWhiskerLine = function( x, y, ctx, fill, options )
    {
        var y1 = y, y2 = y, wLen = (this._whiskerData)?this._whiskerData.length:0;
        for (var cnt = 0; cnt < wLen; cnt++) {
            if (this._whiskerData[cnt][0] == x) {
                y1 = this._whiskerData[cnt][1];
                y2 = this._whiskerData[cnt][2];
                break;
            }
        }
        var points = [];
        if (y1 !== y || y2 !== y) {
            ctx.save();
            ctx.beginPath();
            ctx.moveTo(x,y1);
            ctx.lineTo(x,y2);
            ctx.strokeStyle = this.whiskerColor;
            ctx.stroke();
            ctx.restore();
        }
    };

    $.jqplot.MarkerRenderer.prototype.draw = function(x, y, ctx, options) {
        options = options || {};
        this.drawWhiskerLine(x,y,ctx, false, options);
        switch (this.style) {
            case 'upVee':
                this.drawUpVee(x,y,ctx, false, options);
                break;
            case 'downVee':
                this.drawDownVee(x,y,ctx, false, options);
                break;
            case 'diamond':
                this.drawDiamond(x,y,ctx, false, options);
                break;
            case 'filledDiamond':
                this.drawDiamond(x,y,ctx, true, options);
                break;
            case 'star':
                this.drawStar(x,y,ctx, false, options);
                break;
            case 'filledStar':
                this.drawStar(x,y,ctx, true, options);
                break;
            case 'rectDiagRight':
                this.drawRectangleDiag(x,y,ctx, false, options, "r");
                break;
            case 'filledRectDiagRight':
                this.drawRectangleDiag(x,y,ctx, true, options, "r");
                break;
            case 'rectDiagLeft':
                this.drawRectangleDiag(x,y,ctx, false, options, "l");
                break;
            case 'filledRectDiagLeft':
                this.drawRectangleDiag(x,y,ctx, true, options, "l");
                break;
            case 'triangleRight':
                this.drawTriangle(x,y,ctx, false, options, "r");
                break;
            case 'filledTriangleRight':
                this.drawTriangle(x,y,ctx, true, options, "r");
                break;
            case 'triangleLeft':
                this.drawTriangle(x,y,ctx, false, options, "l");
                break;
            case 'filledTriangleLeft':
                this.drawTriangle(x,y,ctx, true, options, "l");
                break;
            case 'triangleUp':
                this.drawTriangle(x,y,ctx, false, options, "u");
                break;
            case 'filledTriangleUp':
                options = {fill:true, isarc:false, strokeStyle:this.color, fillStyle:this.color, lineWidth:this.lineWidth, closePath:true};
                this.drawTriangle(x,y,ctx, true, options, "u");
                break;
            case 'triangleDown':
                this.drawTriangle(x,y,ctx, false, options, "d");
                break;
            case 'filledTriangleDown':
                this.drawTriangle(x,y,ctx, true, options, "d");
                break;
            case 'rectHorizontal':
                this.drawRectangle(x,y,ctx, false, options, "h");
                break;
            case 'filledRectHorizontal':
                this.drawRectangle(x,y,ctx, true, options, "h");
                break;
            case 'rectVertical':
                this.drawRectangle(x,y,ctx, false, options, "v");
                break;
            case 'filledRectVertical':
                this.drawRectangle(x,y,ctx, true, options, "v");
                break;
            case 'heart':
                this.drawHeart(x,y,ctx, false, options);
                break;
            case 'filledHeart':
                this.drawHeart(x,y,ctx, true, options);
                break;
            case 'circle':
                this.drawCircle(x,y,ctx, false, options);
                break;
            case 'filledCircle':
                this.drawCircle(x,y,ctx, true, options);
                break;
            case 'square':
                this.drawSquare(x,y,ctx, false, options);
                break;
            case 'filledSquare':
                this.drawSquare(x,y,ctx, true, options);
                break;
            case 'x':
                this.drawX(x,y,ctx, true, options);
                break;
            case 'plus':
                this.drawPlus(x,y,ctx, true, options);
                break;
            case 'dash':
                this.drawDash(x,y,ctx, true, options);
                break;
            case 'line':
                this.drawLineOpt(x, y, ctx, false, options);
                break;
            default:
                this.drawDiamond(x,y,ctx, false, options);
                break;
        }
    };
})(jQuery);

/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.0b2_r1012
 *
 * Copyright (c) 2009-2011 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can
 * choose the license that best suits your project and use it accordingly.
 *
 * Although not required, the author would appreciate an email letting him
 * know of any substantial use of jqPlot.  You can reach the author at:
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     The author (Ash Searle) has placed this code in the public domain:
 *     "This code is unrestricted: you are free to use it however you like."
 *
 */
(function($) {

    /**
     * Class: $.jqplot.PointLabels
     * Plugin for putting labels at the data points.
     *
     * To use this plugin, include the js
     * file in your source:
     *
     * > <script type="text/javascript" src="plugins/jqplot.pointLabels.js"></script>
     *
     * By default, the last value in the data ponit array in the data series is used
     * for the label.  For most series renderers, extra data can be added to the
     * data point arrays and the last value will be used as the label.
     *
     * For instance,
     * this series:
     *
     * > [[1,4], [3,5], [7,2]]
     *
     * Would, by default, use the y values in the labels.
     * Extra data can be added to the series like so:
     *
     * > [[1,4,'mid'], [3 5,'hi'], [7,2,'low']]
     *
     * And now the point labels would be 'mid', 'low', and 'hi'.
     *
     * Options to the point labels and a custom labels array can be passed into the
     * "pointLabels" option on the series option like so:
     *
     * > series:[{pointLabels:{
	 * >    labels:['mid', 'hi', 'low'],
	 * >    location:'se',
	 * >    ypadding: 12
	 * >    }
	 * > }]
     *
     * A custom labels array in the options takes precendence over any labels
     * in the series data.  If you have a custom labels array in the options,
     * but still want to use values from the series array as labels, set the
     * "labelsFromSeries" option to true.
     *
     * By default, html entities (<, >, etc.) are escaped in point labels.
     * If you want to include actual html markup in the labels,
     * set the "escapeHTML" option to false.
     *
     */
    $.jqplot.PointLabels = function(options) {
        // Group: Properties
        //
        // prop: show
        // show the labels or not.
        this.show = $.jqplot.config.enablePlugins;
        // prop: location
        // compass location where to position the label around the point.
        // 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'
        this.location = 'n';
        // prop: labelsFromSeries
        // true to use labels within data point arrays.
        this.labelsFromSeries = false;
        // prop: seriesLabelIndex
        // array index for location of labels within data point arrays.
        // if null, will use the last element of the data point array.
        this.seriesLabelIndex = null;
        // prop: labels
        // array of arrays of labels, one array for each series.
        this.labels = [];
        // actual labels that will get displayed.
        // needed to preserve user specified labels in labels array.
        this._labels = [];
        // prop: stackedValue
        // true to display value as stacked in a stacked plot.
        // no effect if labels is specified.
        this.stackedValue = false;
        // prop: ypadding
        // vertical padding in pixels between point and label
        this.ypadding = 6;
        // prop: xpadding
        // horizontal padding in pixels between point and label
        this.xpadding = 6;
        // prop: escapeHTML
        // true to escape html entities in the labels.
        // If you want to include markup in the labels, set to false.
        this.escapeHTML = true;
        // prop: edgeTolerance
        // Number of pixels that the label must be away from an axis
        // boundary in order to be drawn.  Negative values will allow overlap
        // with the grid boundaries.
        this.edgeTolerance = -5;
        // prop: formatter
        // A class of a formatter for the tick text.  sprintf by default.
        this.formatter = $.jqplot.DefaultTickFormatter;
        // prop: formatString
        // string passed to the formatter.
        this.formatString = '';
        // prop: hideZeros
        // true to not show a label for a value which is 0.
        this.hideZeros = false;
        this._elems = [];

        $.extend(true, this, options);
    };

    var locations = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];
    var locationIndicies = {
        'nw': 0,
        'n': 1,
        'ne': 2,
        'e': 3,
        'se': 4,
        's': 5,
        'sw': 6,
        'w': 7
    };
    var oppositeLocations = ['se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];

    // called with scope of a series
    $.jqplot.PointLabels.init = function(target, data, seriesDefaults, opts, plot) {
        var options = $.extend(true, {}, seriesDefaults, opts);
        options.pointLabels = options.pointLabels || {};
        if(this.renderer.constructor === $.jqplot.BarRenderer && this.barDirection === 'horizontal' && !options.pointLabels.location) {
            options.pointLabels.location = 'e';
        }
        // add a pointLabels attribute to the series plugins
        this.plugins.pointLabels = new $.jqplot.PointLabels(options.pointLabels);
        this.plugins.pointLabels.setLabels.call(this);
    };

    // called with scope of series
    $.jqplot.PointLabels.prototype.setLabels = function() {
        var p = this.plugins.pointLabels;
        var labelIdx;
        if(p.seriesLabelIndex != null) {
            labelIdx = p.seriesLabelIndex;
        }
        else if(this.renderer.constructor === $.jqplot.BarRenderer && this.barDirection === 'horizontal') {
            labelIdx = 0;
        }
        else {
            labelIdx = (this._plotData.length === 0) ? 0 : this._plotData[0].length - 1;
        }
        p._labels = [];
        if(p.labels.length === 0 || p.labelsFromSeries) {
            if(p.stackedValue) {
                if(this._plotData.length && this._plotData[0].length) {
                    // var idx = p.seriesLabelIndex || this._plotData[0].length -1;
                    for(var i = 0; i < this._plotData.length; i++) {
                        p._labels.push(this._plotData[i][labelIdx]);
                    }
                }
            }
            else {
                var d = this._plotData;
                if(this.renderer.constructor === $.jqplot.BarRenderer && this.waterfall) {
                    d = this._data;
                }
                if(d.length && d[0].length) {
                    // var idx = p.seriesLabelIndex || d[0].length -1;
                    for(var i = 0; i < d.length; i++) {
                        p._labels.push(d[i][labelIdx]);
                    }
                }
                d = null;
            }
        }
        else if(p.labels.length) {
            p._labels = p.labels;
        }
    };

    $.jqplot.PointLabels.prototype.xOffset = function(elem, location, padding) {
        location = location || this.location;
        padding = padding || this.xpadding;
        var offset;

        switch (location) {
            case 'nw':
                offset = -elem.outerWidth(true) - this.xpadding;
                break;
            case 'n':
                offset = -elem.outerWidth(true) / 2;
                break;
            case 'ne':
                offset = this.xpadding;
                break;
            case 'e':
                offset = this.xpadding;
                break;
            case 'se':
                offset = this.xpadding;
                break;
            case 's':
                offset = -elem.outerWidth(true) / 2;
                break;
            case 'sw':
                offset = -elem.outerWidth(true) - this.xpadding;
                break;
            case 'w':
                offset = -elem.outerWidth(true) - this.xpadding;
                break;
            default:
                // same as 'nw'
                offset = -elem.outerWidth(true) - this.xpadding;
                break;
        }
        return offset;
    };

    $.jqplot.PointLabels.prototype.yOffset = function(elem, location, padding) {
        location = location || this.location;
        padding = padding || this.xpadding;
        var offset;

        switch (location) {
            case 'nw':
                offset = -elem.outerHeight(true) - this.ypadding;
                break;
            case 'n':
                offset = -elem.outerHeight(true) - this.ypadding;
                break;
            case 'ne':
                offset = -elem.outerHeight(true) - this.ypadding;
                break;
            case 'e':
                offset = -elem.outerHeight(true) / 2;
                break;
            case 'se':
                offset = this.ypadding;
                break;
            case 's':
                offset = this.ypadding;
                break;
            case 'sw':
                offset = this.ypadding;
                break;
            case 'w':
                offset = -elem.outerHeight(true) / 2;
                break;
            default:
                // same as 'nw'
                offset = -elem.outerHeight(true) - this.ypadding;
                break;
        }
        return offset;
    };

    // called with scope of series
    $.jqplot.PointLabels.draw = function(sctx, options, plot) {
        var p = this.plugins.pointLabels;
        // set labels again in case they have changed.
        p.setLabels.call(this);
        // remove any previous labels
        for(var i = 0; i < p._elems.length; i++) {
            // Memory Leaks patch
            // p._elems[i].remove();
            p._elems[i].emptyForce();
        }
        p._elems.splice(0, p._elems.length);

        if(p.show) {
            for(var i = 0; i < p.labels.length; i++) {
                var pd = this._plotData;
                var xax = this._xaxis;
                var yax = this._yaxis;
                var label = p.labels[i];

                if(p.hideZeros && parseInt(p.labels[i], 10) == 0) {
                    label = '';
                }

                var elem = $('<div class="jqplot-point-label" style="position:absolute"></div>');
                elem.insertAfter(sctx.canvas);
                if(p.escapeHTML) {
                    elem.text(label);
                }
                else {
                    elem.html(label);
                }
                var location = p.location;
                if(this.waterfall && parseInt(label, 10) < 0) {
                    location = oppositeLocations[locationIndicies[location]];
                }

                var ell = xax.u2p(pd[i][0]) + p.xOffset(elem, location);
                var elt = yax.u2p(pd[i][1]) + p.yOffset(elem, location);
                elem.css('left', ell);
                elem.css('top', elt);
                var elr = ell + $(elem).width();
                var elb = elt + $(elem).height();
                var et = p.edgeTolerance;
                var scl = $(sctx.canvas).position().left;
                var sct = $(sctx.canvas).position().top;
                var scr = sctx.canvas.width + scl;
                var scb = sctx.canvas.height + sct;
                // if label is outside of allowed area, remove it
                if( ell - et < scl || elt - et < sct || elr + et > scr || elb + et > scb) {
                    $(elem).remove();
                }
            }

        }
    };

    $.jqplot.postSeriesInitHooks.push($.jqplot.PointLabels.init);
    $.jqplot.postDrawSeriesHooks.push($.jqplot.PointLabels.draw);
})(jQuery);

(function($){
    $.jqplot.AdvancedCanvasGridRenderer = function(options){
        $.jqplot.CanvasGridRenderer.call(this, options);
    };

    $.jqplot.AdvancedCanvasGridRenderer.prototype = new $.jqplot.CanvasGridRenderer();
    $.jqplot.AdvancedCanvasGridRenderer.prototype.constructor = $.jqplot.AdvancedCanvasGridRenderer;

    $.jqplot.AdvancedCanvasGridRenderer.prototype.draw = function(){
        this._ctx = this._elem.get(0).getContext("2d");
        var ctx = this._ctx;
        var axes = this._axes;
        // Add the grid onto the grid canvas.  This is the bottom most layer.
        ctx.save();
        ctx.clearRect(0, 0, this._plotDimensions.width, this._plotDimensions.height);
        ctx.fillStyle = this.backgroundColor || this.background;
        ctx.fillRect(this._left, this._top, this._width, this._height);

        ctx.save();
        ctx.lineJoin = 'miter';
        ctx.lineCap = 'butt';
        ctx.lineWidth = this.gridLineWidth;
        ctx.strokeStyle = this.gridLineColor;
        var b, e, s, m;
        var ax = ['xaxis', 'yaxis', 'x2axis', 'y2axis'];
        for (var i=4; i>0; i--) {
            var name = ax[i-1];
            var axis = axes[name];
            var ticks = axis._ticks;
            var numticks = ticks.length;
            if (axis.show) {
                if (axis.drawBaseline) {
                    var bopts = {};
                    if (axis.baselineWidth !== null) {
                        bopts.lineWidth = axis.baselineWidth;
                    }
                    if (axis.baselineColor !== null) {
                        bopts.strokeStyle = axis.baselineColor;
                    }
                    switch (name) {
                        case 'xaxis':
                            drawLine (this._left, this._bottom, this._right, this._bottom, bopts);
                            break;
                        case 'yaxis':
                            drawLine (this._left, this._bottom, this._left, this._top, bopts);
                            break;
                        case 'x2axis':
                            drawLine (this._left, this._bottom, this._right, this._bottom, bopts);
                            break;
                        case 'y2axis':
                            drawLine (this._right, this._bottom, this._right, this._top, bopts);
                            break;
                    }
                }
                for (var j=numticks; j>0; j--) {
                    var t = ticks[j-1];
                    if (t.show) {
                        var pos = Math.round(axis.u2p(t.value)) + 0.5;
                        switch (name) {
                            case 'xaxis':
                                // draw the grid line if we should
                                if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines)) ) {
                                    drawLine(pos, this._top, pos, this._bottom, {strokeStyle:axis.lineColor, lineWidth:axis.lineWidth});
                                }
                                // draw the mark
                                if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks)) ) {
                                    s = t.markSize;
                                    m = t.mark;
                                    var pos = Math.round(axis.u2p(t.value)) + 0.5;
                                    switch (m) {
                                        case 'outside':
                                            b = this._bottom;
                                            e = this._bottom+s;
                                            break;
                                        case 'inside':
                                            b = this._bottom-s;
                                            e = this._bottom;
                                            break;
                                        case 'cross':
                                            b = this._bottom-s;
                                            e = this._bottom+s;
                                            break;
                                        default:
                                            b = this._bottom;
                                            e = this._bottom+s;
                                            break;
                                    }
                                    // draw the shadow
                                    if (this.shadow) {
                                        this.renderer.shadowRenderer.draw(ctx, [[pos,b],[pos,e]], {lineCap:'butt', lineWidth:this.gridLineWidth, offset:this.gridLineWidth*0.75, depth:2, fill:false, closePath:false});
                                    }
                                    // draw the line
                                    drawLine(pos, b, pos, e);
                                }
                                break;
                            case 'yaxis':
                                // draw the grid line
                                if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines)) ) {
                                    drawLine(this._right, pos, this._left, pos, {strokeStyle:axis.lineColor, lineWidth:axis.lineWidth});
                                }
                                // draw the mark
                                if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks)) ) {
                                    s = t.markSize;
                                    m = t.mark;
                                    var pos = Math.round(axis.u2p(t.value)) + 0.5;
                                    switch (m) {
                                        case 'outside':
                                            b = this._left-s;
                                            e = this._left;
                                            break;
                                        case 'inside':
                                            b = this._left;
                                            e = this._left+s;
                                            break;
                                        case 'cross':
                                            b = this._left-s;
                                            e = this._left+s;
                                            break;
                                        default:
                                            b = this._left-s;
                                            e = this._left;
                                            break;
                                    }
                                    // draw the shadow
                                    if (this.shadow) {
                                        this.renderer.shadowRenderer.draw(ctx, [[b, pos], [e, pos]], {lineCap:'butt', lineWidth:this.gridLineWidth*1.5, offset:this.gridLineWidth*0.75, fill:false, closePath:false});
                                    }
                                    drawLine(b, pos, e, pos);
                                }
                                break;
                            case 'x2axis':
                                // draw the grid line
                                if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines)) ) {
                                    drawLine(pos, this._bottom, pos, this._top, {strokeStyle:axis.lineColor, lineWidth:axis.lineWidth});
                                }
                                // draw the mark
                                if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks)) ) {
                                    s = t.markSize;
                                    m = t.mark;
                                    var pos = Math.round(axis.u2p(t.value)) + 0.5;
                                    switch (m) {
                                        case 'outside':
                                            b = this._top-s;
                                            e = this._top;
                                            break;
                                        case 'inside':
                                            b = this._top;
                                            e = this._top+s;
                                            break;
                                        case 'cross':
                                            b = this._top-s;
                                            e = this._top+s;
                                            break;
                                        default:
                                            b = this._top-s;
                                            e = this._top;
                                            break;
                                    }
                                    // draw the shadow
                                    if (this.shadow) {
                                        this.renderer.shadowRenderer.draw(ctx, [[pos,b],[pos,e]], {lineCap:'butt', lineWidth:this.gridLineWidth, offset:this.gridLineWidth*0.75, depth:2, fill:false, closePath:false});
                                    }
                                    drawLine(pos, b, pos, e);
                                }
                                break;
                            case 'y2axis':
                                // draw the grid line
                                if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines)) ) {
                                    drawLine(this._left, pos, this._right, pos, {strokeStyle:axis.lineColor, lineWidth:axis.lineWidth});
                                }
                                // draw the mark
                                if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks)) ) {
                                    s = t.markSize;
                                    m = t.mark;
                                    var pos = Math.round(axis.u2p(t.value)) + 0.5;
                                    switch (m) {
                                        case 'outside':
                                            b = this._right;
                                            e = this._right+s;
                                            break;
                                        case 'inside':
                                            b = this._right-s;
                                            e = this._right;
                                            break;
                                        case 'cross':
                                            b = this._right-s;
                                            e = this._right+s;
                                            break;
                                        default:
                                            b = this._right;
                                            e = this._right+s;
                                            break;
                                    }
                                    // draw the shadow
                                    if (this.shadow) {
                                        this.renderer.shadowRenderer.draw(ctx, [[b, pos], [e, pos]], {lineCap:'butt', lineWidth:this.gridLineWidth*1.5, offset:this.gridLineWidth*0.75, fill:false, closePath:false});
                                    }
                                    drawLine(b, pos, e, pos);
                                }
                                break;
                            default:
                                break;
                        }
                    }
                }
                t = null;
            }
            axis = null;
            ticks = null;
        }
        // Now draw grid lines for additional y axes
        //////
        // TO DO: handle yMidAxis
        //////
        ax = ['y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis', 'yMidAxis'];
        for (var i=7; i>0; i--) {
            var axis = axes[ax[i-1]];
            var ticks = axis._ticks;
            if (axis.show) {
                var tn = ticks[axis.numberTicks-1];
                var t0 = ticks[0];
                var left = axis.getLeft();
                var points = [[left, tn.getTop() + tn.getHeight()/2], [left, t0.getTop() + t0.getHeight()/2 + 1.0]];
                // draw the shadow
                if (this.shadow) {
                    this.renderer.shadowRenderer.draw(ctx, points, {lineCap:'butt', fill:false, closePath:false});
                }
                // draw the line
                drawLine(points[0][0], points[0][1], points[1][0], points[1][1], {lineCap:'butt', strokeStyle:axis.borderColor, lineWidth:axis.borderWidth});
                // draw the tick marks
                for (var j=ticks.length; j>0; j--) {
                    var t = ticks[j-1];
                    s = t.markSize;
                    m = t.mark;
                    var pos = Math.round(axis.u2p(t.value)) + 0.5;
                    if (t.showMark && t.mark) {
                        switch (m) {
                            case 'outside':
                                b = left;
                                e = left+s;
                                break;
                            case 'inside':
                                b = left-s;
                                e = left;
                                break;
                            case 'cross':
                                b = left-s;
                                e = left+s;
                                break;
                            default:
                                b = left;
                                e = left+s;
                                break;
                        }
                        points = [[b,pos], [e,pos]];
                        // draw the shadow
                        if (this.shadow) {
                            this.renderer.shadowRenderer.draw(ctx, points, {lineCap:'butt', lineWidth:this.gridLineWidth*1.5, offset:this.gridLineWidth*0.75, fill:false, closePath:false});
                        }
                        // draw the line
                        drawLine(b, pos, e, pos, {strokeStyle:axis.borderColor});
                    }
                    t = null;
                }
                t0 = null;
            }
            axis = null;
            ticks =  null;
        }

        ctx.restore();

        function drawLine(bx, by, ex, ey, opts) {
            ctx.save();
            opts = opts || {};
            if (opts.lineWidth == null || opts.lineWidth != 0){
                $.extend(true, ctx, opts);
                ctx.beginPath();
                ctx.moveTo(bx, by);
                ctx.lineTo(ex, ey);
                ctx.stroke();
                ctx.restore();
            }
        }

        if (this.shadow) {
            var points = [[this._left, this._bottom], [this._right, this._bottom], [this._right, this._top]];
            this.renderer.shadowRenderer.draw(ctx, points);
        }
        // Now draw border around grid.  Use axis border definitions. start at
        // upper left and go clockwise.
        if (this.borderWidth != 0 && this.drawBorder) {
            drawLine (this._left, this._top, this._right, this._top, {lineCap:'round', strokeStyle:axes.x2axis.borderColor, lineWidth:axes.x2axis.borderWidth});
            drawLine (this._right, this._top, this._right, this._bottom, {lineCap:'round', strokeStyle:axes.y2axis.borderColor, lineWidth:axes.y2axis.borderWidth});
            drawLine (this._right, this._bottom, this._left, this._bottom, {lineCap:'round', strokeStyle:axes.xaxis.borderColor, lineWidth:axes.xaxis.borderWidth});
            drawLine (this._left, this._bottom, this._left, this._top, {lineCap:'round', strokeStyle:axes.yaxis.borderColor, lineWidth:axes.yaxis.borderWidth});
        }
        // ctx.lineWidth = this.borderWidth;
        // ctx.strokeStyle = this.borderColor;
        // ctx.strokeRect(this._left, this._top, this._width, this._height);

        ctx.restore();
        ctx =  null;
        axes = null;
    };

})(jQuery);

(function($){
    $.jqplot.AdvancedTableLegendRenderer = function(options){
        $.jqplot.TableLegendRenderer.call(this, options);
        this.swatchColors = [];
    };

    $.jqplot.AdvancedTableLegendRenderer.prototype = new $.jqplot.TableLegendRenderer();
    $.jqplot.AdvancedTableLegendRenderer.prototype.constructor = $.jqplot.AdvancedTableLegendRenderer;

    $.jqplot.AdvancedTableLegendRenderer.prototype.init = function(options){
        $.extend(true, this, options);
    };

    $.jqplot.AdvancedTableLegendRenderer.prototype.draw = function() {
        if (this._elem) {
            this._elem.emptyForce();
            this._elem = null;
        }

        if (this.show) {
            var series = this._series;
            var sColors = [];
            sColors.push.apply(sColors, this.swatchColors);
            var legendSeries = [];
            legendSeries.push.apply(legendSeries, series);
            if (this.invert){
                legendSeries.reverse();
                sColors.reverse();
            }
            // make a table.  one line label per row.
            var elem = document.createElement('table');
            this._elem = $(elem);
            this._elem.addClass('jqplot-table-legend');

            var ss = {position:'absolute'};
            if (this.background) {
                ss['background'] = this.background;
            }
            if (this.border) {
                ss['border'] = this.border;
            }
            if (this.fontSize) {
                ss['fontSize'] = this.fontSize;
            }
            if (this.fontFamily) {
                ss['fontFamily'] = this.fontFamily;
            }
            if (this.textColor) {
                ss['textColor'] = this.textColor;
            }
            if (this.marginTop != null) {
                ss['marginTop'] = this.marginTop;
            }
            if (this.marginBottom != null) {
                ss['marginBottom'] = this.marginBottom;
            }
            if (this.marginLeft != null) {
                ss['marginLeft'] = this.marginLeft;
            }
            if (this.marginRight != null) {
                ss['marginRight'] = this.marginRight;
            }


            var pad = false,
                reverse = false,
                s;
            for (var i = 0; i< legendSeries.length; i++) {
                s = legendSeries[i];
                if (s._stack || s.renderer.constructor == $.jqplot.BezierCurveRenderer){
                    reverse = true;
                }
                if (s.show && s.showLabel) {
                    var lt = this.labels[i] || s.label.toString();
                    if (lt) {
                        var color;
                        if (sColors && sColors.length){
                            if (i < sColors.length){
                                color = sColors[i];
                            } else {
                                color = sColors[(i%sColors.length)];
                            }
                        } else {
                            color = s.color;
                        }
                        if (reverse && i < legendSeries.length - 1){
                            pad = true;
                        }
                        else if (reverse && i == legendSeries.length - 1){
                            pad = false;
                        }
                        this.renderer.addrow.call(this, lt, color, pad, reverse);
                        pad = true;
                    }
                    // let plugins add more rows to legend.  Used by trend line plugin.
                    for (var j=0; j<$.jqplot.addLegendRowHooks.length; j++) {
                        var item = $.jqplot.addLegendRowHooks[j].call(this, s);
                        if (item) {
                            this.renderer.addrow.call(this, item.label, item.color, pad);
                            pad = true;
                        }
                    }
                    lt = null;
                }
            }
        }
        return this._elem;
    };

})(jQuery);

/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: @VERSION
 * Revision: @REVISION
 *
 * Copyright (c) 2009-2013 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can
 * choose the license that best suits your project and use it accordingly.
 *
 * Although not required, the author would appreciate an email letting him
 * know of any substantial use of jqPlot.  You can reach the author at:
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     The author (Ash Searle) has placed this code in the public domain:
 *     "This code is unrestricted: you are free to use it however you like."
 *
 */
(function($) {
    /**
     * Class: $.jqplot.CanvasAxisLabelRenderer
     * Renderer to draw axis labels with a canvas element to support advanced
     * featrues such as rotated text.  This renderer uses a separate rendering engine
     * to draw the text on the canvas.  Two modes of rendering the text are available.
     * If the browser has native font support for canvas fonts (currently Mozila 3.5
     * and Safari 4), you can enable text rendering with the canvas fillText method.
     * You do so by setting the "enableFontSupport" option to true.
     *
     * Browsers lacking native font support will have the text drawn on the canvas
     * using the Hershey font metrics.  Even if the "enableFontSupport" option is true
     * non-supporting browsers will still render with the Hershey font.
     *
     */
    $.jqplot.CanvasAxisLabelRenderer = function(options) {
        // Group: Properties

        // prop: angle
        // angle of text, measured clockwise from x axis.
        this.angle = 0;
        // name of the axis associated with this tick
        this.axis;
        // prop: show
        // whether or not to show the tick (mark and label).
        this.show = true;
        // prop: showLabel
        // whether or not to show the label.
        this.showLabel = true;
        // prop: label
        // label for the axis.
        this.label = '';
        // prop: fontFamily
        // CSS spec for the font-family css attribute.
        // Applies only to browsers supporting native font rendering in the
        // canvas tag.  Currently Mozilla 3.5 and Safari 4.
        this.fontFamily = '"Trebuchet MS", Arial, Helvetica, sans-serif';
        // prop: fontSize
        // CSS spec for font size.
        this.fontSize = '11pt';
        // prop: fontWeight
        // CSS spec for fontWeight:  normal, bold, bolder, lighter or a number 100 - 900
        this.fontWeight = 'normal';
        // prop: fontStretch
        // Multiplier to condense or expand font width.
        // Applies only to browsers which don't support canvas native font rendering.
        this.fontStretch = 1.0;
        // prop: textColor
        // css spec for the color attribute.
        this.textColor = '#666666';
        // prop: enableFontSupport
        // true to turn on native canvas font support in Mozilla 3.5+ and Safari 4+.
        // If true, label will be drawn with canvas tag native support for fonts.
        // If false, label will be drawn with Hershey font metrics.
        this.enableFontSupport = true;
        // prop: pt2px
        // Point to pixel scaling factor, used for computing height of bounding box
        // around a label.  The labels text renderer has a default setting of 1.4, which
        // should be suitable for most fonts.  Leave as null to use default.  If tops of
        // letters appear clipped, increase this.  If bounding box seems too big, decrease.
        // This is an issue only with the native font renderering capabilities of Mozilla
        // 3.5 and Safari 4 since they do not provide a method to determine the font height.
        this.pt2px = null;

        this._elem;
        this._ctx;
        this._plotWidth;
        this._plotHeight;
        this._plotDimensions = {height:null, width:null};

        $.extend(true, this, options);

        if (options.angle == null && this.axis != 'xaxis' && this.axis != 'x2axis') {
            this.angle = -90;
        }

        var ropts = {fontSize:this.fontSize, fontWeight:this.fontWeight, fontStretch:this.fontStretch, fillStyle:this.textColor, angle:this.getAngleRad(), fontFamily:this.fontFamily};
        if (this.pt2px) {
            ropts.pt2px = this.pt2px;
        }

        if (this.enableFontSupport) {
            if ($.jqplot.support_canvas_text()) {
                this._textRenderer = new $.jqplot.CanvasFontRenderer(ropts);
            }

            else {
                this._textRenderer = new $.jqplot.CanvasTextRenderer(ropts);
            }
        }
        else {
            this._textRenderer = new $.jqplot.CanvasTextRenderer(ropts);
        }
    };

    $.jqplot.CanvasAxisLabelRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
        this._textRenderer.init({fontSize:this.fontSize, fontWeight:this.fontWeight, fontStretch:this.fontStretch, fillStyle:this.textColor, angle:this.getAngleRad(), fontFamily:this.fontFamily});
    };

    // return width along the x axis
    // will check first to see if an element exists.
    // if not, will return the computed text box width.
    $.jqplot.CanvasAxisLabelRenderer.prototype.getWidth = function(ctx) {
        if (this._elem) {
            return this._elem.outerWidth(true);
        }
        else {
            var tr = this._textRenderer;
            var l = tr.getWidth(ctx);
            var h = tr.getHeight(ctx);
            var w = Math.abs(Math.sin(tr.angle)*h) + Math.abs(Math.cos(tr.angle)*l);
            return w;
        }
    };

    // return height along the y axis.
    $.jqplot.CanvasAxisLabelRenderer.prototype.getHeight = function(ctx) {
        if (this._elem) {
            return this._elem.outerHeight(true);
        }
        else {
            var tr = this._textRenderer;
            var l = tr.getWidth(ctx);
            var h = tr.getHeight(ctx);
            var w = Math.abs(Math.cos(tr.angle)*h) + Math.abs(Math.sin(tr.angle)*l);
            return w;
        }
    };

    $.jqplot.CanvasAxisLabelRenderer.prototype.getAngleRad = function() {
        var a = this.angle * Math.PI/180;
        return a;
    };

    $.jqplot.CanvasAxisLabelRenderer.prototype.draw = function(ctx, plot) {
        // Memory Leaks patch
        if (this._elem) {
            if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
                window.G_vmlCanvasManager.uninitElement(this._elem.get(0));
            }

            this._elem.emptyForce();
            this._elem = null;
        }

        // create a canvas here, but can't draw on it untill it is appended
        // to dom for IE compatability.
        var elem = plot.canvasManager.getCanvas();

        this._textRenderer.setText(this.label, ctx);
        var w = this.getWidth(ctx);
        var h = this.getHeight(ctx);
        elem.width = w;
        elem.height = h;
        elem.style.width = w;
        elem.style.height = h;

        elem = plot.canvasManager.initCanvas(elem);

        this._elem = $(elem);
        this._elem.css({ position: 'absolute'});
        this._elem.addClass('jqplot-'+this.axis+'-label');

        elem = null;
        return this._elem;
    };

    $.jqplot.CanvasAxisLabelRenderer.prototype.pack = function() {
        this._textRenderer.draw(this._elem.get(0).getContext("2d"), this.label);
    };

})(jQuery);
/*******
Bilirubin End
********/

/* START - NICU POKE */
/* Using a modified namespace for css/html ids and classes - imh_nicu_poke_count */
MPage.namespace("imh.nicu_poke_count");
imh.nicu_poke_count = function(){};

//ANTHONY ARRIGO 07/15/2015
//CHAD HODGE 11/5/2014

imh.nicu_poke_count.prototype = new MPage.Component();
imh.nicu_poke_count.prototype.constructor = MPage.Component;
imh.nicu_poke_count.prototype.base = MPage.Component.prototype;
imh.nicu_poke_count.prototype.name = "imh.nicu_poke_count";
imh.nicu_poke_count.prototype.cclProgram = "";
imh.nicu_poke_count.prototype.cclParams = [];
imh.nicu_poke_count.prototype.cclDataType = ""; 
NICU_D351A = {powerformid : 0}; //not present
NICU_D351B = {powerformid : 15224859};
NICU_D351C = {powerformid : 24518341}; 
NICU_D351D = {powerformid : 0}; //no access
NICU_M351 = {powerformid : 0}; //no access
NICU_B351 = {powerformid : 24518341};
NICU_T351 = {powerformid : 0}; //no access
NICU_T351B = {powerformid : 0};
NICU_T351C = {powerformid : 0};
NICU_P351 = {powerformid : 24518341};
NICU_C351 = {powerformid : 24518341};
imh.nicu_poke_count.prototype.LatestTFHDate = 0;
imh.nicu_poke_count.prototype.LatestEncDate = 0;
imh.nicu_poke_count.prototype.SubT = "";

if (typeof ih === "undefined") {
	ih = {};
}
if (typeof ih.global === "undefined") {
	ih.global = {};
}
if (typeof ih.global.forkAndJoinCCLCalls === "undefined") {
	ih.global.forkAndJoinCCLCalls = function () {
		var handlerFunction = function () {
			var component = arguments[0][0];
			var callBackFunction = arguments[0][1];
			var totalcallcount = (arguments[0].length - 2);
			var eachFunctionCall = function () {
				var curArgs = [].slice.call(arguments);
				var cback = curArgs[2];
				component.loadCCL.call(component,curArgs[0], curArgs[1], function (data) {
					try {
						cback.call(component,data);
					} catch (err) {
					}
					totalcallcount--;
					if (totalcallcount <= 0) {
						callBackFunction.call(component);
					}
				}, "JSON");
			};
			$.each(arguments[0], function (index, item) {
				try {
					if (index >= 2) {
						new eachFunctionCall(item[0], item[1], item[2]);
					}
				} catch (err) {
				}
			});
		};
		new handlerFunction(arguments);
	};
}


imh.nicu_poke_count.prototype.addPokes = function() {
	MPAGES_EVENT("POWERFORM", this.cclParams[0] + "|" + this.cclParams[1] + "|" + this.getOption("powerformid") + "|0|0");
	this.refresh();
};

imh.nicu_poke_count.prototype.init = function(options) {
	//code to perform immediately before rendering
	var component = this;
	component.cclParams.push(this.getProperty("personId"));
	component.cclParams.push(this.getProperty("encounterId"));
	this.data = [null,null];
	imh.nicu_poke_count.prototype.SubT = this.getProperty("headerSubTitle");
	this.setProperty("headerSubTitle", "...Loading...");
};

imh.nicu_poke_count.prototype.loadData = function (callback){


	var finishCount = 0,
		self = this,
		personID = this.getProperty("personId"),
		encounterID = (this.getProperty("encounterId") == "undefined") ? 0 : this.getProperty("encounterId");

	try
	{
	ih.global.forkAndJoinCCLCalls(this, function () { this.render(); }, 
		["ih_get_nicu_poke_enc_cnt", [personID, encounterID],
			function (data) {
				this.data[1] = data;
			}
		], ["ih_get_nicu_poke_shift_cnt", [personID],
			function (datatwo) {
				this.data[0] = datatwo;
			}
		]);
	}
	catch (err)
	{	
		self.setProperty("headerSubTitle", "Error Loading POKES Data");
		alert(err);
	}
};


imh.nicu_poke_count.prototype.render = function() {
        try
        {
		var compId = this.getComponentUid();
		var target = this.getTarget();
		var targetHTML = [];
		
		//set the component to expanded (true) 
		this.setProperty("headerShowHideState",true);

		//parse json response for use in this component.
	        var shift = JSON.stringify(this.data[0]); //24 hour poke count from CCL
	        var encs = JSON.stringify(this.data[1]); //encounter poke data from CCL
	        var twentyFourHourCounts = JSON.parse(shift);
	        var encounterCounts = JSON.parse(encs);

		//calculate subtotals
		var tfhPokes = 0;
		var encPokes = 0;
		
		for (i=0;i<twentyFourHourCounts.POKE.POKES.length;i++)
		{
			//exclude radiation dose and blood out from teh totals
			if (twentyFourHourCounts.POKE.POKES[i].EVENT_NAME == "Blood Out" || twentyFourHourCounts.POKE.POKES[i].EVENT_NAME == "Radiation Dose")
			{
				tfhPokes  += 0;
			}					
			else
			{
				tfhPokes  += twentyFourHourCounts.POKE.POKES[i].AGGCOUNT;			
			}
			if (Date.parse(twentyFourHourCounts.POKE.POKES[i].UPDT_DT) > imh.nicu_poke_count.prototype.LatestTFHDate )
			{
				imh.nicu_poke_count.prototype.LatestTFHDate = Date.parse(twentyFourHourCounts.POKE.POKES[i].UPDT_DT);
			}
		}
		for (i=0;i<encounterCounts.POKE.POKES.length;i++)
		{
			if (encounterCounts.POKE.POKES[i].EVENT_NAME == "Blood Out" || encounterCounts.POKE.POKES[i].EVENT_NAME == "Radiation Dose" )
			{
				encPokes += 0;
			}
			else				
			{
				encPokes += encounterCounts.POKE.POKES[i].AGGCOUNT;
			}
			if (Date.parse(encounterCounts.POKE.POKES[i].UPDT_DT) > imh.nicu_poke_count.prototype.LatestEncDate )
			{				
				imh.nicu_poke_count.prototype.LatestEncDate = Date.parse(encounterCounts.POKE.POKES[i].UPDT_DT);
			}
		}		




		//link to open power form. 
		this.setProperty("headerSubTitle", imh.nicu_poke_count.prototype.SubT + "  ("+ tfhPokes  + " / " + encPokes+")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a id='AddPokes' title='Click to Record New POKEs' href='#'><font style='font-size:200%;height:15px' color='#3366cc'><b>+</b></font></a>" );

		if (twentyFourHourCounts.POKE.POKES.length == 0 && encounterCounts.POKE.POKES.length == 0)
		{
        		//no data whatsoever, so show messages.
			if (twentyFourHourCounts.POKE.STATMSG == encounterCounts.POKE.STATMSG)
			{
				target.innerHTML += "<font color='#c0c0c0'><b>"+twentyFourHourCounts.POKE.STATMSG + "</b></font>";
			}
			else
			{
		        	target.innerHTML += "<b>"+twentyFourHourCounts.POKE.STATMSG + "</b><br/>";
		        	target.innerHTML += "<b>"+encounterCounts.POKE.STATMSG + "</b><br/>";
			}

	    }
		else
		{
		    //somebody has results, so lets merge them together. what is missing will be filled in with zeros.

			//sort arrays in display order		    	
			this.SortArray(encounterCounts);
			this.SortArray(twentyFourHourCounts);	

			//build output
			target.innerHTML = "<table id='imh_nicu_poke_count_pokes'> <tr> <td> <b> <br/> POKE Type </b> </td> <td> <b> Counts <br/>24/Enc</b> </td>  <td> <b> <br/> POKE Type </b> </td> <td> <b> Counts <br/>24/Enc</b> </td> </tr> " + this.BuildRows(encounterCounts,twentyFourHourCounts) + " <tr bgcolor = '#B1CEEC'> <td> <b> <u> Painful Pokes This 24hr Period </u> </b> </td> <td> <b> <u> " + imh.nicu_poke_count.prototype.CalculatePainfulPokes(twentyFourHourCounts) + " </u> </b> </td> <td> <b> <u> Painful Pokes This Encounter </u> </b> </td> <td> <b> <u> " + imh.nicu_poke_count.prototype.CalculatePainfulPokes(encounterCounts) + " </u> </b> </td> </tr> <tr bgcolor = '#B1CEEC'> <td> <b> Total Pokes This 24hr Period </b> </td> <td> <b> <u> " + tfhPokes + " </u> </b> </td> <td> <b> Total Pokes This Encounter </b> </td> <td> <b> <u> " + encPokes + " </u> </b> </td> </tr> </table>";
		}

		//var self = this;
		//$( "#AddPokes" ).click(function() {
		//	self.OpenPowerFormz(self);
		//});

	}
	catch (err)
	{
	   alert(err);
	}
	var myself = this;
	$("#AddPokes").click(function() {myself.addPokes();});
};

imh.nicu_poke_count.prototype.CalculatePainfulPokes = function(pokearray) {
	//pass in either the encounter array or the 24hour array and calculate painful poke totals.
	var totalPainfulPokes =0;

	for (t=0;t<pokearray.POKE.POKES.length;t++)
	{
		//these are the non-painful pokes. all other pokes are painful.  this same logic is found about 200 lines below. if you change this, do so in both places.
		if (pokearray.POKE.POKES[t].EVENT_NAME  == "Arterial Line Access" || pokearray.POKE.POKES[t].EVENT_NAME  == "Central Venous Line Access" || pokearray.POKE.POKES[t].EVENT_NAME  == "Peripheral IV Medications/Flushes" || pokearray.POKE.POKES[t].EVENT_NAME  == "X-Rays"  || pokearray.POKE.POKES[t].EVENT_NAME == "Umbilical Venous/Art Line and Attempts" || pokearray.POKE.POKES[t].EVENT_NAME == "Blood Out" || pokearray.POKE.POKES[t].EVENT_NAME == "Radiation Dose")
		{
			totalPainfulPokes += 0;
		}
		else
		{
			totalPainfulPokes += pokearray.POKE.POKES[t].AGGCOUNT;
		}
	}

	return totalPainfulPokes;
}

imh.nicu_poke_count.prototype.SortArray = function(pokearray) {
	//for all present charted values, set in specific order defined by business.
	pokearray.POKE.POKES.forEach(function(element,index,array) { 
		if (element.EVENT_NAME == "Heelstick")
		{
			element.EVENT_CODE = "1";
		}
		else if (element.EVENT_NAME == "Venipuncture"){
			element.EVENT_CODE = "2";
		}
		else if (element.EVENT_NAME == "PIV and Attempts"){
			element.EVENT_CODE = "3";
		}
		else if (element.EVENT_NAME == "NG/OG and Attempts"){
			element.EVENT_CODE = "4";
		}
		else if (element.EVENT_NAME == "Umbilical Venous/Art Line and Attempts"){
			element.EVENT_CODE = "5";
		}
		else if (element.EVENT_NAME == "Central Venous Lines"){
			element.EVENT_CODE = "6";
		}
		else if (element.EVENT_NAME == "Any Surgical Procedure"){
			element.EVENT_CODE = "7";
		}
		else if (element.EVENT_NAME == "Arterial Line Access"){
			element.EVENT_CODE = "8";
		}
		else if (element.EVENT_NAME == "Central Venous Line Access"){
			element.EVENT_CODE = "9";
		}
		else if (element.EVENT_NAME == "Chest Tube and Attempts"){
			element.EVENT_CODE = "10";
		}
		else if (element.EVENT_NAME == "Deep Nasal Suction"){
			element.EVENT_CODE = "11";
		}
		else if (element.EVENT_NAME == "IM Injections"){
			element.EVENT_CODE = "12";
		}
		else if (element.EVENT_NAME == "Peripheral IV Medications/Flushes"){
			element.EVENT_CODE = "13";
		}
		else if (element.EVENT_NAME == "Blood Out"){
			element.EVENT_CODE = "14";
		}
		else if (element.EVENT_NAME == "Lumbar Punctures and Attempts"){
			element.EVENT_CODE = "15";
		}
		else if (element.EVENT_NAME == "Needle Aspiration"){
			element.EVENT_CODE = "16";
		}
		else if (element.EVENT_NAME == "Other Painful Procedures"){
			element.EVENT_CODE = "17";
		}
		else if (element.EVENT_NAME == "Sub Q Injection"){
			element.EVENT_CODE = "18";
		}
		else if (element.EVENT_NAME == "Supra Pubic Tap and Attempts"){
			element.EVENT_CODE = "19";
		}
		else if (element.EVENT_NAME == "Urinary Catheter and Attempts"){
			element.EVENT_CODE = "20";
		}
		else if (element.EVENT_NAME == "X-Rays"){
			element.EVENT_CODE = "21";
		}
		else if (element.EVENT_NAME == "Intubation and Attempts"){
			element.EVENT_CODE = "22";
		}
		else if (element.EVENT_NAME == "Surfactant Administration"){
			element.EVENT_CODE = "23";
		}
		else if (element.EVENT_NAME == "ET/Trach Suction - Closed System"){
			element.EVENT_CODE = "24";
		}
		else if (element.EVENT_NAME == "ET/Trach Suction - Open System"){
			element.EVENT_CODE = "25";
		}
		else if (element.EVENT_NAME == "Peripheral Arterial Line and Attempts"){
			element.EVENT_CODE = "26";
		}
		else if (element.EVENT_NAME == "Arterial Puncture"){
			element.EVENT_CODE = "27";
		}
		else if (element.EVENT_NAME == "Radiation Dose"){
			element.EVENT_CODE = "28";
		}
	 } );

	//then sort on those values to be in display order
	pokearray.POKE.POKES.sort(function(a, b){return b.EVENT_CODE-a.EVENT_CODE});
	pokearray.POKE.POKES.reverse();
};

imh.nicu_poke_count.prototype.BuildZeroRow = function(pokearray, enc) {
	var rowz = "";

	var splitcount = Math.round(pokearray.POKE.POKES.length / 2);
	for (i=0;i<splitcount;i++)
	{
		if (i > pokearray.POKE.POKES.length || (i+splitcount) > pokearray.POKE.POKES.length) {break;}
		if (!enc)
		{
			if (i%2)
			{
				rowz += "<tr>";
			}
			else
			{
				rowz += "<tr class='imh_nicu_poke_count_alt'>";
			}

			if (pokearray.POKE.POKES[i] != null)
			{
				rowz += this.BoldFullCellNumbers(pokearray.POKE.POKES[i].EVENT_NAME, pokearray.POKE.POKES[i].AGGCOUNT, pokearray.POKE.POKES[i].UPDT_DT, 0, "");
			}

			if (pokearray.POKE.POKES[i+splitcount] != null)
			{
				rowz += this.BoldFullCellNumbers(pokearray.POKE.POKES[i+splitcount].EVENT_NAME, pokearray.POKE.POKES[i+splitcount].AGGCOUNT, pokearray.POKE.POKES[i+splitcount].UPDT_DT, 0, "");
			}
			rowz += "</tr>";									
		}
		else
		{
			if (i%2)
			{
				rowz += "<tr>";
			}
			else
			{
				rowz += "<tr class='imh_nicu_poke_count_alt'>";
			}


			if (pokearray.POKE.POKES[i] != null)
			{
				rowz += this.BoldFullCellNumbers(pokearray.POKE.POKES[i].EVENT_NAME, 0, "", pokearray.POKE.POKES[i].AGGCOUNT, pokearray.POKE.POKES[i].UPDT_DT);
			}

			if (pokearray.POKE.POKES[i+splitcount] != null)
			{
				rowz += this.BoldFullCellNumbers(pokearray.POKE.POKES[i+splitcount].EVENT_NAME, 0, "", pokearray.POKE.POKES[i+splitcount].AGGCOUNT, pokearray.POKE.POKES[i+splitcount].UPDT_DT);
			}
			rowz += "</tr>";			
		}
	}
	return rowz;
};


imh.nicu_poke_count.prototype.BuildFullCell = function(encarray, tfarray,ix) {
	var rowz = "";
	var tidx=-1;

	if (encarray.POKE.POKES[ix] == null)
	{
		//this is necessary because the split index may be empty, since its just dividing by 2, and it may be an odd count.
		rowz += "<td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;&nbsp;</td>";
		return rowz;
	}

	for (t=0;t<tfarray.POKE.POKES.length;t++)
	{
		if (tfarray.POKE.POKES[t].EVENT_NAME == encarray.POKE.POKES[ix].EVENT_NAME )
		{
			tidx=t;
			break;
		}
	}

	rowz += this.BoldFullCellNumbers(encarray.POKE.POKES[ix].EVENT_NAME, ((tidx==-1) ? "0" : tfarray.POKE.POKES[tidx].AGGCOUNT), ((tfarray.POKE.POKES[tidx] == null) ? "" : tfarray.POKE.POKES[tidx].UPDT_DT), encarray.POKE.POKES[ix].AGGCOUNT, ((encarray.POKE.POKES[ix] == null) ? "" : encarray.POKE.POKES[ix].UPDT_DT));

	return rowz;
};


imh.nicu_poke_count.prototype.BuildRows = function(Encounters, TwentyFourHours) {	
	var rows = "";

	if (Encounters.POKE.POKES.length == 0)
	{
		rows = this.BuildZeroRow(TwentyFourHours,false);
	}

	if (TwentyFourHours.POKE.POKES.length == 0)
	{
		rows = this.BuildZeroRow(Encounters,true);
	}

	if (Encounters.POKE.POKES.length != 0 && TwentyFourHours.POKE.POKES.length != 0)
	{
		//need to align both result sets.
		var splitcount = Math.round(Encounters.POKE.POKES.length / 2);
		for (i=0;i<splitcount;i++)
		{
			if (i%2)
			{
				rows += "<tr >";
			}
			else
			{
				rows += "<tr class='imh_nicu_poke_count_alt' >";
			}

			rows +=	this.BuildFullCell(Encounters,TwentyFourHours,i);
			rows +=	this.BuildFullCell(Encounters,TwentyFourHours,splitcount+i);
			rows += "</tr>";
		}
	}

	return rows;
}

imh.nicu_poke_count.prototype.BoldFullCellNumbers = function(EventName, TFHAggCount, TFHTime, EncAggCount, EncTime ) {
	//bold only certain row numerics, based on business logic
	var bold = 1;
	var row = "";

	//this logic is not sound, but best I can do for now. codes would be better, but they change by environment...
	if (EventName == "Arterial Line Access" || EventName == "Central Venous Line Access" || EventName == "Peripheral IV Medications/Flushes" || EventName == "X-Rays" || EventName == "Umbilical Venous/Art Line and Attempts" || EventName == "Blood Out" || EventName == "Radiation Dose")
	{
		bold = 0;	
	}




	if (bold == 1)
	{
		row += "<td class='imh_nicu_poke_count_bld ";
	}	
	else
	{
		row += "<td class='" ;
	}


	//if latest date, turn red 
	if (Date.parse(TFHTime) == imh.nicu_poke_count.prototype.LatestTFHDate || Date.parse(EncTime) == imh.nicu_poke_count.prototype.LatestEncDate)
	{
		row += "imh_nicu_poke_count_new";
	}





	row += "' > " ;	

	row +=  "<span>" + EventName + " </span></td> <td>";

	row += "<span title='" + TFHTime + "'>" + TFHAggCount + "</span> / <span title='" + EncTime + "'>"+ EncAggCount + "</span>" ;

	row +=  " </td> ";






	return row;
}

/*end nicu poke */

/* Label Printing - Start */
MPage.namespace("ih_cc.ih_barcode_print");

ih_cc.ih_barcode_print = function(){};
ih_cc.ih_barcode_print.prototype = new MPage.Component();
ih_cc.ih_barcode_print.prototype.constructor = MPage.Component;
ih_cc.ih_barcode_print.prototype.base = MPage.Component.prototype;
ih_cc.ih_barcode_print.prototype.name = "ih_cc.ih_barcode_print";
ih_cc.ih_barcode_print.prototype.cclProgram = "ih_barcode_printer";

ih_cc.ih_barcode_print.prototype.cclParams = [];
ih_cc.ih_barcode_print.prototype.cclDataType = "JSON";
ih_cc.ih_barcode_print.prototype.init = function(options){
  var params = [];
  params.push("MINE");
	//Use the getProperty methods to get properties made accessible through the architecture
	//Those properties inclue; id, parentComp, personId, userId, encounterId, pprCd, staticContent, positionCd, categoryMean, viewableEncounters, headerTitle, headerOverflowState
 
  params.push(this.getProperty("userId"));
  params.push(this.getProperty("encounterId"));  
  params.push("");  
  params.push("");  
  params.push("");
  params.push("2");
  
  this.cclParams = params;
  this.data = "";
}

ih_cc.ih_barcode_print.prototype.render = function() {
  var uid = this.getProperty("userId");
  var eid = this.getProperty("encounterId");
    
  var optionsHTML = "<div class='ui-widget'>";
  optionsHTML +=      "<table>";
  optionsHTML +=        "<tr>";
  optionsHTML +=          "<td>";
  optionsHTML +=            "Number of Labels:";
  optionsHTML +=          "</td>";
  optionsHTML +=          "<td>";
  optionsHTML +=            "<input id='Copies' type='text' size='6' maxlength='2' value='1' onkeypress='ih_cc.ih_barcode_print.prototype.allowWholeNumbersOnly();' onblur='ih_cc.ih_barcode_print.prototype.validateData()'>";  
  optionsHTML +=            "</>";
  optionsHTML +=          "</td>";
  optionsHTML +=        "</tr>";
  optionsHTML +=        "<tr>";
  optionsHTML +=          "<td colspan=2>";
  optionsHTML +=            "&nbsp;";
  optionsHTML +=          "</td>";
  optionsHTML +=        "</tr>";
  optionsHTML +=        "<tr>";
  optionsHTML +=          "<td>";
  optionsHTML +=            "Printer:";
  optionsHTML +=          "</td>";
  optionsHTML +=          "<td>";
  optionsHTML +=            "<select id='PrinterSelect' onchange='ih_cc.ih_barcode_print.prototype.changePrintOption(\" "+ eid +" \")'>";
  optionsHTML += '<option value="">select printer</option>';  
  
  $.each(this.data.RESPONSE_PRINTERS_SELECTED.LIST, function(key, value) {
    optionsHTML = optionsHTML + '<option value="' + value.ID + '">' + value.NAME + '</option>';	
  });
  optionsHTML += '<option value="LoadPrinters">Find Printer...</option>';
  optionsHTML +=            "</select>";
  optionsHTML +=          "</td>";
  optionsHTML +=          "<td>";
  optionsHTML +=            "&nbsp;";
  optionsHTML +=          "</td>";
  optionsHTML +=          "<td>";
  optionsHTML +=    "<input id='btnPrint' style='width:58px;height:20px' type='button' value='Print' onclick='ih_cc.ih_barcode_print.prototype.printBarcodes(\" "+ uid +" \",\"" + eid + "\");'>"        
  optionsHTML +=    "</>";   
  optionsHTML +=          "</td>";
  optionsHTML +=        "</tr>";
  optionsHTML +=        "<tr>";
  optionsHTML +=          "<td colspan=2 id='td_print'>";
  optionsHTML +=            "&nbsp;";
  optionsHTML +=          "</td>";
  optionsHTML +=        "</tr>";  
  optionsHTML +=      "</table>";
  optionsHTML +=    "</div>";
  
  var target = this.getTarget();
  target.innerHTML = optionsHTML;
  
	  if(this.data.RESPONSE_PRINTERS_SELECTED.LIST.length > 0){
		$("#Copies").val(this.data.RESPONSE_PRINTERS_SELECTED.LIST[0].COPIES);
		$("#PrinterSelect").val(this.data.RESPONSE_PRINTERS_SELECTED.LIST[0].ID);  
	  }
  
   $("#btnPrint").css('cursor','pointer');
}

ih_cc.ih_barcode_print.prototype.changePrintOption = function(eid){
  var selectedOption = $("#PrinterSelect option:selected").val();  
  $("#td_print").html("");
  var info = new XMLCclRequest(); 
  
   if(selectedOption == "LoadPrinters") {
	info.onreadystatechange = function () {	
		if (info.readyState == 4 && info.status == 200) {
			var jsonEval = JSON.parse(this.responseText);	
			
			$('#PrinterSelect option[value="LoadPrinters"]').remove();
			$.each(jsonEval.RESPONSE_PRINTERS.LIST, function(key, value) {	 
						if($('#PrinterSelect option[value="'+value.ID+'"]').length == 0) {
						   $('#PrinterSelect').append('<option value="' + value.ID + '">' + value.NAME + '</option>');	
						}   
			});
			
		}
	};	
    
  uid = "";
  pcd = "";
  pname = "";
  copies = "";
  ftype = "1"  
  var sendArr = ["^MINE^", "^" + uid + "^", "^" + eid + "^", "^" + pcd + "^", "^" + pname + "^", "^" + copies + "^" , "^" + ftype + "^"];  
 
   info.open('GET', "ih_barcode_printer",false);
   info.send(sendArr.join(","));
 }  
}

ih_cc.ih_barcode_print.prototype.printBarcodes = function(uid,encId) {
    $("#td_print").html("");
	var copies = $("#Copies").val();
    var selected = $("#PrinterSelect option:selected").val();
	if(selected.length == 0){	   
	   $("#td_print").html('<p style="color:red">Please select the printer from the dropdown list.</p>');
	   $("#PrinterSelect").focus();
	   return;
	}
	var info = new XMLCclRequest();
	info.onreadystatechange = function () {
		if (info.readyState == 4 && info.status == 200) {		
			 if(this.responseText) {			
			   if(copies == 1){
					$("#td_print").html('<p style="color:green">&nbsp;&nbsp;'+copies+' Label was sent to the printer successfully.</p>');
				}else if(copies > 1){
					$("#td_print").html('<p style="color:green">&nbsp;&nbsp;'+copies+' Labels were sent to the printer successfully.</p>');
				}	
				ih_cc.ih_barcode_print.prototype.savePrintOption(uid,encId);
			 }else {
			     $("#td_print").html('<p style="color:red">Sending the Label to the printer was unsuccessful.</p>');
			 }			 
		}
	};
	
	var pname = $("#PrinterSelect option:selected").text();	
	
	var sendArr = ["^" + pname + "^", "^" + encId + "^", "^" + copies + "^"];
	info.open('GET', "ih_barcode_patient_summary", false);
	info.send(sendArr.join(","));
  
}

ih_cc.ih_barcode_print.prototype.savePrintOption = function(uid,eid){
  var info = new XMLCclRequest();
	info.onreadystatechange = function () {
		if (info.readyState == 4 && info.status == 200) {		    	
			//alert('saved');
		}
	};	
    
  var pcd = $("#PrinterSelect option:selected").val();
  var pname = $("#PrinterSelect option:selected").text();
  var copies = $("#Copies").val();
  var ftype = "3";
	  
  var sendArr = ["^MINE^", "^" + uid + "^", "^" + eid + "^", "^" + pcd + "^", "^" + pname + "^", "^" + copies + "^", "^" + ftype + "^"];  
  info.open('GET', "ih_barcode_printer",false);
  info.send(sendArr.join(","));
}

ih_cc.ih_barcode_print.prototype.validateData = function() {
  	var copies = $("#Copies").val();
	$("#td_print").html("");
	if(copies > 10){	   
	   $("#td_print").html('<p style="color:red">The maximum number of labels you can print at one time is 10.</p>');
	   $("#Copies").val(10);
	   $("#Copies").focus();
	} else if(copies.length == 0){	  
	  $("#td_print").html('<p style="color:red">Please enter the number of labels you want to print.\nThe field cannot be left blank.</p>');
	  $("#Copies").val(1);
	  $("#Copies").focus();
	} else if(copies == 0){	   
	   $("#td_print").html('<p style="color:red">The number of labels cannot be zero.</p>');
	   $("#Copies").val(1);
	   $("#Copies").focus();
	}
}

ih_cc.ih_barcode_print.prototype.allowWholeNumbersOnly = function() {
    (event.keyCode < 48 || event.keyCode > 57) 
	&& (event.returnValue = false);
}

/* Label Printing - end */

/* START FOR THE USIIS BATCH */

/**
 * Created by jcamney on 1/26/2015.
 */

MPage.namespace("ih_cc.usiis");

ih_cc.usiis = function(){};
ih_cc.usiis.prototype = new MPage.Component();
ih_cc.usiis.prototype.constructor = MPage.Component;
ih_cc.usiis.prototype.base = MPage.Component.prototype;
ih_cc.usiis.prototype.name = "ih_cc.usiis";

ih_cc.usiis.prototype.cclProgram = "ih_usiis_patient_empi";
ih_cc.usiis.prototype.cclParams = [];
ih_cc.usiis.prototype.cclDataType = "JSON"; //possible values=> JSON, TEXT, XML

ih_cc.usiis.b351URL = { USIIS_URL : "https://webedgedev.co.ihc.com/USIISWrapper/servlet/USIISWrapperServlet"};
ih_cc.usiis.c351URL = { USIIS_URL : "https://webedgever.co.ihc.com/USIISWrapper/servlet/USIISWrapperServlet"};
ih_cc.usiis.p351URL = { USIIS_URL : "https://webedge.co.ihc.com/USIISWrapper/servlet/USIISWrapperServlet"};

ih_cc.usiis.prototype.init = function(options) {
    //code to perform before immediately rendering
    var component = this;
    component.cclParams.push("MINE");

    //CAN USE ANY OR ALL OF THE FOLLOWING IN ORDER AS NEEDED:
    var pid = this.getProperty("personId");
    component.cclParams.push(this.getProperty("personId"));
    var encounterId = this.getProperty("encounterId");
    component.cclParams.push(this.getProperty("encounterId"));

    // call CCL to get the Intermountain EMPI
    // call CCL to check if the encounter location is a USIIS location
    // if not, disable links and supply message.
    //this.data = [null,null];
    this.noempi = false;
    this.usiisProviderId = "IHC900";
    this.patientEmpi = "";
    this.encounterId = "";
       
};

ih_cc.usiis.prototype.loadData = function (callback){

    try
    {
    	var finishCount = 0;
        this.loadCCL(
            "ih_usiis_patient_empi",
            ["MINE", this.getProperty("personId")],
            function(data){
            	// is expecting json
            	var empiJson = JSON.stringify(data);
            	var ej = JSON.parse(empiJson);
            	if(ej.REPLY.CONTENTS[0]== undefined) {
            		this.noempi = true;
            		finishCount++;
            		if(finishCount == 2) {
            			this.render();
            		}
            	} else {
            		this.patientEmpi = ej.REPLY.CONTENTS[0].PERSON_ALIAS;
            		finishCount++;
            		if(finishCount == 2) {
            			this.render();
            		}
            	}                                
            },
            "JSON"
        ); 
        
        this.loadCCL(
            "ih_usiis_facitlity_provider",
            ["MINE", this.getProperty("encounterId")],
            function(data){
            	
            	// is expecting json
            	var empiJson = JSON.stringify(data);
            	var ej = JSON.parse(empiJson);
            	if(ej.REPLY.CONTENTS[0]== undefined) {
            		this.usiisProviderId = "IHC900";
            		finishCount++;
            		if(finishCount == 2) {
            			this.render();
            		}
            	} else {
            		this.usiisProviderId = ej.REPLY.CONTENTS[0].USIIS_PROVIDER;
            		finishCount++;
            		if(finishCount == 2) {
            			this.render();
            		}
            	} 
            },
            "JSON"
        );       
		
    }
    catch (err)
    {
        alert(err);
    }
};

ih_cc.usiis.prototype.addEventHandlers = function() {
    //alert("top of event handlers");
    //Storing 'this' instance of component in 'self' so we can access it within sub functions (closures)
    var self = this;
    var compId = this.getComponentUid();
    var jqMainContainer;

    //Get the main container as a jQuery object
    jqMainContainer = $("#" + compId + "MainContainer");

    //Attach event delegate
    jqMainContainer.on("click", "a", function(event){
        //Since we're inside a new function, 'this' now refers to the jQuery object, not the component
        //Use 'self' to access the component
        //currentTarget will be the element that matches the 2nd argument passed into 'on()', in this case, an 'input' element.
		
		var url2Call = self.getOption("USIIS_URL");
		
        if(this.id == "batch") {
            
            //$('#batchReportSpinner').css('display', 'inline');
            
            $('#batchForm').attr('action', url2Call); // url.value);
            $('#batchForm').attr('method', 'post');
            $('#batchForm').submit();

        } else if(this.id == "school") {
            //$('#schoolReportSpinner').css('display', 'inline');

            $('#schoolForm').attr('action', url2Call); //url.value);
            $('#schoolForm').attr('method', 'post');
            $('#schoolForm').submit();

        } else if(this.id == "detailedHx") {
            //$('#detailHxReportSpinner').css('display', 'inline');

            $('#detailedHxForm').attr('action', url2Call); //url.value);
            $('#detailedHxForm').attr('method', 'post');
            $('#detailedHxForm').submit();

        } else if(this.id == "personalHx") {
            //$('#personalHxReportSpinner').css('display', 'inline');

            $('#personalHxForm').attr('action', url2Call); //url.value);
            $('#personalHxForm').attr('method', 'post');
            $('#personalHxForm').submit();
        }
        var jqComponent = $(event.currentTarget);


    });

};

ih_cc.usiis.prototype.getSubHeader = function( str ) {
    //note that inline styles could be put in their own class and put as a second class for the div
    return ["<div class='sub-title-disp' style='margin:-6px -6px 6px -6px;border-left:none;border-right:none;'>",str,"</div>"].join("");
};

ih_cc.usiis.prototype.render = function() {
    var component = this;
    var compId = component.getComponentUid();
    var target = component.getTarget();

	var targetHTML = "<div id='" + compId + "MainContainer'>";
	var disableLink = "";
	if(this.noempi == true) {
		targetHTML += "<b>No Intermountain EMPI was found mapped in iCentra for this Patient</b><br/>";	
		targetHTML += "Unable to run Individual Forecast Report<br/>";
    	targetHTML += "Unable to run School Report<br/>";
    	targetHTML += "Unable to run Detailed History Report<br/>";
    	targetHTML += "Unable to run Personal History Report<br/>";
		target.innerHTML = targetHTML;

    	component.addEventHandlers();
    	return;
	}
	//alert(this.noempi);
	//alert("empi=" + component.patientEmpi);    
    
    targetHTML += "<a href='#' id='batch' >Individual Forecast Report</a><div id='batchReportSpinner' style='display: none'>&nbsp;<label class=\"spinner\" /></div> <br/>";
    targetHTML += "<a href='#' id='school' >School Report</a><div id='schoolReportSpinner' style='display: none'>&nbsp;<label class=\"spinner\" /></div><br/>";
    targetHTML += "<a href='#' id='detailedHx' >Detailed History Report</a><div id='detailHxReportSpinner' style='display: none'>&nbsp;<label class=\"spinner\" /></div><br/>";
    targetHTML += "<a href='#' id='personalHx' >Personal History Report</a><div id='personalHxReportSpinner' style='display: none'>&nbsp;<label class=\"spinner\" /></div><br/>";

    // setup the forms for the reports
    targetHTML += "<form id=\"batchForm\" method=\"post\" target=\"blank\" >";
    targetHTML += "    <input type=\"hidden\" name=\"v1460288\"   value=\"providerID+patientID\" />";
    targetHTML += "    <input type=\"hidden\" name=\"providerID\" id=\"providerTxt\" value=\""+ component.usiisProviderId +"\" />";
    targetHTML += "    <input type=\"hidden\" name=\"patientID\"  id=\"empiTxt\" value=\""+ component.patientEmpi +"\" />";
    targetHTML += "</form>";

    targetHTML += "<form id=\"schoolForm\" method=\"post\" target=\"blank\" >";
    targetHTML += "    <input type=\"hidden\" name=\"v1460289\"   value=\"providerID+patientID\" />";
    targetHTML += "    <input type=\"hidden\" name=\"providerID\" id=\"providerTxt\" value=\""+ component.usiisProviderId +"\" />";
    targetHTML += "    <input type=\"hidden\" name=\"patientID\"  id=\"empiTxt\" value=\""+ component.patientEmpi +"\" />";
    targetHTML += "</form>";

    targetHTML += "<form id=\"personalHxForm\" method=\"post\" target=\"blank\" >";
    targetHTML += "    <input type=\"hidden\" name=\"v6b3c9e6db2ad0c9ff840\"   value=\"reportID+providerID+patientID\" />";
    targetHTML += "    <input type=\"hidden\" name=\"reportID\" id=\"reportID\" value=\"personal_vaccine_history\" />";
    targetHTML += "    <input type=\"hidden\" name=\"providerID\" id=\"providerTxt\" value=\""+ component.usiisProviderId +"\" />";
    targetHTML += "    <input type=\"hidden\" name=\"patientID\"  id=\"empiTxt\" value=\""+ component.patientEmpi +"\" />";
    targetHTML += "</form>";

    targetHTML += "<form id=\"detailedHxForm\" method=\"post\" target=\"blank\" >";
    targetHTML += "    <input type=\"hidden\" name=\"v6b3c9e6db2ad0c9ff840\"   value=\"reportID+providerID+patientID\" />";
    targetHTML += "    <input type=\"hidden\" name=\"reportID\" id=\"reportID\" value=\"detailed_vaccine_history\" />";
    targetHTML += "    <input type=\"hidden\" name=\"providerID\" id=\"providerTxt\" value=\""+ component.usiisProviderId +"\" />";
    targetHTML += "    <input type=\"hidden\" name=\"patientID\"  id=\"empiTxt\" value=\""+ component.patientEmpi +"\" />";
    targetHTML += "</form>";

	//targetHTML += "<input type='hidden' id='url' value='https://webedgedev.co.ihc.com/USIISWrapper/servlet/USIISWrapperServlet' />";
    // close the MainContainer div
    targetHTML += "</div>";

    target.innerHTML = targetHTML;

    //this may or may not be needed.
    component.addEventHandlers();
}

ih_cc.usiis.prototype.alertError = function(err) {
    txt="There was an error on this page.\n\n";
    txt+="Error description: " + err.message + "\n\n";
    txt+= "name=" +err.name + "\n\n";
    txt+="at=" +err.at + "\n\n";
    txt+="error=" +err.text + "\n\n";
    txt+="Click OK to continue.\n\n";
    alert(txt);


}


ih_cc.usiis.prototype.loadForecastPDF = function(url) {
    // open the report in a new window
    window.open(url);
    $('#batchReportSpinner').css('display', 'none');
}

/* END FOR THE USIIS BATCH */


MPage.namespace("cerner");

/*Initialize Cloud Outcomes Component*/
cerner.cloud_outcomes = function(){};
cerner.cloud_outcomes.prototype = new MPage.Component();
cerner.cloud_outcomes.prototype.constructor = MPage.Component;
cerner.cloud_outcomes.prototype.base = MPage.Component.prototype;
cerner.cloud_outcomes.prototype.name = "cerner.cloud_outcomes";
cerner.cloud_outcomes.prototype.cclProgram = "MP_GET_OUTCOMES";
cerner.cloud_outcomes.prototype.cclParams = [];
cerner.cloud_outcomes.prototype.cclDataType = "JSON";

/* Initialize the cclParams variable */
cerner.cloud_outcomes.prototype.init = function(options){
	var params = [];
	//Set the params for the component
	params.push("MINE");
	params.push(this.getProperty("personId"));
	this.cclParams = params;
	this.data = "";
};

/* Render the basic layout of the component */
cerner.cloud_outcomes.prototype.render = function(){
	var outcome;
	var detail;
	var factor;
	var fdetail;
	var num;
	var contentArea = this.getTarget();
	
	$(contentArea).addClass("cloud_outcomes");
	
	//Retrieve the outcomes
	outcomes = this.data.OUTCOMEINFO;

	var divElement = document.createElement("div");
	var trElement = null;
	var tableElement = document.createElement("table");
	var thElement = document.createElement('thead');
	var thRowElement = document.createElement('tr');
	var tableBodyElement = document.createElement("tbody");
	var och = document.createElement("th");
	var dth = document.createElement("th");
	var sch = document.createElement("th");
	och.innerHTML = "Outcome";
	och.className = 'cerner_outcomes_header';
	dth.innerHTML = "Date";
	dth.className = 'cerner_outcomes_header';
	sch.innerHTML = "Score";
	sch.className = 'cerner_outcomes_header';
	thRowElement.appendChild(och);
	thRowElement.appendChild(dth);
	thRowElement.appendChild(sch);
	thElement.appendChild(thRowElement);
	
	for(var x = 0; x < outcomes.OUTCOMES.length; x++){
	
		outcome = outcomes.OUTCOMES[x];
		var dateString;
		var outcomeDate = new Date(outcome.OUTCOME_DATE);
		var outcomeType;
		var score;
		var day = outcomeDate.getDate();
		var month = outcomeDate.getMonth()+1;
		var year = outcomeDate.getFullYear();
		var hour = outcomeDate.getHours();
		var minute = outcomeDate.getMinutes();
		dateString = (month<=9?'0'+month:month) + '/' + (day<=9?'0'+day:day) + '/' + year + " " + (hour<=9?'0'+hour:hour) + ":" + (minute<=9?'0'+minute:minute);

				num = outcome.RISK_SCORE;
				var trElement = document.createElement("tr");
				var oc = document.createElement("td");
				var dt = document.createElement("td");
				var sc = document.createElement("td");
				if (outcome.OUTCOME_NAME > "") {
					outcomeType = outcome.OUTCOME_NAME;
				} else {
					outcomeType = outcome.OUTCOME_TYPE
				}
				oc.innerHTML = outcomeType;
				oc.className = 'cerner_outcomes_row';
				dt.innerHTML = dateString;
				dt.className = 'cerner_outcomes_row';
				if (num > 0 && num < 21) {
					score = "Very Low";
				} else if (num > 20 && num < 41) {
					score = "Low";
				} else if (num > 40 && num < 61) {
					score = "Moderate";
				} else if (num > 60 && num < 81) {
					score = "High";
				} else if (num > 80 && num < 101) {
					score = "Very High";
				} else if (num == 0) {
					score = "Not Available";
				}
				sc.innerHTML = score;
				sc.className = 'cerner_outcomes_row';

				var ftrElement = null;
				var ftableElement = document.createElement("table");
				var ftableHElement = document.createElement("thead");
				var fthRowElement = document.createElement('tr');
				var fnameh = document.createElement("th");
				var finfoh = document.createElement("th");
				fnameh.innerHTML = "Contributing Risk Factors";
				fnameh.className = 'cerner_outcomes_detail_header';
				finfoh.innerHTML = "";
				finfoh.className = 'cerner_outcomes_detail_header';
				fthRowElement.appendChild(fnameh);
				fthRowElement.appendChild(finfoh);
				ftableHElement.appendChild(fthRowElement);
			
				var ftableBodyElement = document.createElement("tbody");
				for (var z = 0; z < outcome.OUTCOME_FACTORS.length; z++) {
					factor = outcome.OUTCOME_FACTORS[z];
					var ftrElement = document.createElement("tr");
					var fname = document.createElement("td");
					var finfo = document.createElement("td");
					fname.innerHTML = factor.NAME;
					fname.className = 'cerner_outcomes_detail_row';
					var infoStr = "";
					for (var j = 0; j < factor.DETAILS.length; j++) {
						fdetail = factor.DETAILS[j];
						if (fdetail.DETAIL_TYPE == "INTERPRETATION_STRING") {
							if (infoStr.length == 0) {
								infoStr = fdetail.DETAIL_INFO;
							} else {
								infoStr = infoStr + "; " + fdetail.DETAIL_INFO;
							}
						} else if (fdetail.DETAIL_TYPE == "INTERPRETATION_NUMERIC") {
							if (infoStr.length == 0) {
								infoStr = fdetail.DETAIL_INFO;
							} else {
								infoStr = infoStr + "; " + fdetail.DETAIL_INFO;
							}
						} else if (fdetail.DETAIL_TYPE == "UNIT") {
							if (infoStr.length == 0) {
								infoStr = fdetail.DETAIL_INFO;
							} else {
								infoStr = infoStr + "; " + fdetail.DETAIL_INFO;
							}
						} else if (fdetail.DETAIL_TYPE == "FACT_IDENTIFIER") {
							infoStr = infoStr;
						} else if (fdetail.DETAIL_TYPE == "INTERPRETATION_BOOLEAN") {
							var iInd;
							if (fdetail.DETAIL_INFO == "false") {
								iInd = "No";
							} else {
								iInd = "Yes";
							}
							if (infoStr.length == 0) {
								infoStr = iInd;
							} else {
								infoStr = infoStr + "; " + iInd;
							}
						}
					}
					finfo.innerHTML = infoStr;
					finfo.className = 'cerner_outcomes_detail_row';
					ftrElement.appendChild(fname);
					ftrElement.appendChild(finfo);
					ftableBodyElement.appendChild(ftrElement);
				}
				ftableElement.appendChild(ftableHElement);
				ftableElement.appendChild(ftableBodyElement);
			
				trElement.setAttribute('data-factorInfo', ftableElement.outerHTML);
				var title = "Risk Score: " + num;
				trElement.setAttribute('data-factorTitle', title);
				trElement.className = 'cerner_cloud_outcomes';
				trElement.appendChild(oc);
				trElement.appendChild(dt);
				trElement.appendChild(sc);

				var clickHandler = function (event) {
					var factorInfo = event.currentTarget.getAttribute("data-factorInfo");
					var factorTitle = event.currentTarget.getAttribute("data-factorTitle");
					
					// pop-up for alert details
					cerner.cloud_outcomes_factors(factorInfo, factorTitle);
				};
				$(trElement).click(clickHandler);

				tableBodyElement.appendChild(trElement);
	}

	tableElement.appendChild(thElement);
	tableElement.appendChild(tableBodyElement);
	divElement.appendChild(tableElement);
	divElement.className = 'cerner_outcomes_div';

	if(outcomes.OUTCOMES.length > 0){
		contentArea.appendChild(divElement);
	} else {
		contentArea.innerHTML = "No results found";
	}
};

// factor details pop up dialog
cerner.cloud_outcomes_factors = function(factorInfo ,title){

	var factorInfoUtil = new ModalDialog("factorDetails")
			.setHeaderTitle(title)
			.setShowCloseIcon(true)
			.setTopMarginPercentage(15)
			.setRightMarginPercentage(30)
			.setBottomMarginPercentage(15)
			.setLeftMarginPercentage(30)
			.setIsBodySizeFixed(false)
			.setIsFooterAlwaysShown(true);

	factorInfoUtil.setBodyDataFunction(
		function(modalObj){
			modalObj.setBodyHTML(factorInfo);
		}
	);

	MP_ModalDialog.updateModalDialogObject(factorInfoUtil);
	MP_ModalDialog.showModalDialog(factorInfoUtil.getId());
};

/*START of Cerner Ambulatory PowerWorks Components*/

jQuery.support.cors = true;

/*** Jquery tab function ***/
(function( $, undefined ) {

var tabId = 0,
	listId = 0;

function getNextTabId() {
	return ++tabId;
}

function getNextListId() {
	return ++listId;
}

$.widget( "ui.tabs", {
	options: {
		add: null,
		ajaxOptions: null,
		cache: false,
		cookie: null, // e.g. { expires: 7, path: '/', domain: 'jquery.com', secure: true }
		collapsible: false,
		disable: null,
		disabled: [],
		enable: null,
		event: "click",
		fx: null, // e.g. { height: 'toggle', opacity: 'toggle', duration: 200 }
		idPrefix: "ui-tabs-",
		load: null,
		panelTemplate: "<div></div>",
		remove: null,
		select: null,
		show: null,
		spinner: "<em>Loading&#8230;</em>",
		tabTemplate: "<li><a href='#{href}'><span>#{label}</span></a></li>"
	},

	_create: function() {
		this._tabify( true );
	},

	_setOption: function( key, value ) {
		if ( key == "selected" ) {
			if (this.options.collapsible && value == this.options.selected ) {
				return;
			}
			this.select( value );
		} else {
			this.options[ key ] = value;
			this._tabify();
		}
	},

	_tabId: function( a ) {
		return a.title && a.title.replace( /\s/g, "_" ).replace( /[^\w\u00c0-\uFFFF-]/g, "" ) ||
			this.options.idPrefix + getNextTabId();
	},

	_sanitizeSelector: function( hash ) {
		// we need this because an id may contain a ":"
		return hash.replace( /:/g, "\\:" );
	},

	_cookie: function() {
		var cookie = this.cookie ||
			( this.cookie = this.options.cookie.name || "ui-tabs-" + getNextListId() );
		return $.cookie.apply( null, [ cookie ].concat( $.makeArray( arguments ) ) );
	},

	_ui: function( tab, panel ) {
		return {
			tab: tab,
			panel: panel,
			index: this.anchors.index( tab )
		};
	},

	_cleanup: function() {
		// restore all former loading tabs labels
		this.lis.filter( ".ui-state-processing" )
			.removeClass( "ui-state-processing" )
			.find( "span:data(label.tabs)" )
				.each(function() {
					var el = $( this );
					el.html( el.data( "label.tabs" ) ).removeData( "label.tabs" );
				});
	},

	_tabify: function( init ) {
		var self = this,
			o = this.options,
			fragmentId = /^#.+/; // Safari 2 reports '#' for an empty hash

		this.list = this.element.find( "ol,ul" ).eq( 0 );
		this.lis = $( " > li:has(a[href])", this.list );
		this.anchors = this.lis.map(function() {
			return $( "a", this )[ 0 ];
		});
		this.panels = $( [] );

		this.anchors.each(function( i, a ) {
			var href = $( a ).attr( "href" );
			// For dynamically created HTML that contains a hash as href IE < 8 expands
			// such href to the full page url with hash and then misinterprets tab as ajax.
			// Same consideration applies for an added tab with a fragment identifier
			// since a[href=#fragment-identifier] does unexpectedly not match.
			// Thus normalize href attribute...
			var hrefBase = href.split( "#" )[ 0 ],
				baseEl;
			if ( hrefBase && ( hrefBase === location.toString().split( "#" )[ 0 ] ||
					( baseEl = $( "base" )[ 0 ]) && hrefBase === baseEl.href ) ) {
				href = a.hash;
				a.href = href;
			}

			// inline tab
			if ( fragmentId.test( href ) ) {
				self.panels = self.panels.add( self.element.find( self._sanitizeSelector( href ) ) );
			// remote tab
			// prevent loading the page itself if href is just "#"
			} else if ( href && href !== "#" ) {
				// required for restore on destroy
				$.data( a, "href.tabs", href );

				// TODO until #3808 is fixed strip fragment identifier from url
				// (IE fails to load from such url)
				$.data( a, "load.tabs", href.replace( /#.*$/, "" ) );

				var id = self._tabId( a );
				a.href = "#" + id;
				var $panel = self.element.find( "#" + id );
				if ( !$panel.length ) {
					$panel = $( o.panelTemplate )
						.attr( "id", id )
						.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
						.insertAfter( self.panels[ i - 1 ] || self.list );
					$panel.data( "destroy.tabs", true );
				}
				self.panels = self.panels.add( $panel );
			// invalid tab href
			} else {
				o.disabled.push( i );
			}
		});

		// initialization from scratch
		if ( init ) {
			// attach necessary classes for styling
			this.element.addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" );
			this.list.addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" );
			this.lis.addClass( "ui-state-default ui-corner-top" );
			this.panels.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" );

			// Selected tab
			// use "selected" option or try to retrieve:
			// 1. from fragment identifier in url
			// 2. from cookie
			// 3. from selected class attribute on <li>
			if ( o.selected === undefined ) {
				if ( location.hash ) {
					this.anchors.each(function( i, a ) {
						if ( a.hash == location.hash ) {
							o.selected = i;
							return false;
						}
					});
				}
				if ( typeof o.selected !== "number" && o.cookie ) {
					o.selected = parseInt( self._cookie(), 10 );
				}
				if ( typeof o.selected !== "number" && this.lis.filter( ".ui-tabs-selected" ).length ) {
					o.selected = this.lis.index( this.lis.filter( ".ui-tabs-selected" ) );
				}
				o.selected = o.selected || ( this.lis.length ? 0 : -1 );
			} else if ( o.selected === null ) { // usage of null is deprecated, TODO remove in next release
				o.selected = -1;
			}

			// sanity check - default to first tab...
			o.selected = ( ( o.selected >= 0 && this.anchors[ o.selected ] ) || o.selected < 0 )
				? o.selected
				: 0;

			// Take disabling tabs via class attribute from HTML
			// into account and update option properly.
			// A selected tab cannot become disabled.
			o.disabled = $.unique( o.disabled.concat(
				$.map( this.lis.filter( ".ui-state-disabled" ), function( n, i ) {
					return self.lis.index( n );
				})
			) ).sort();

			if ( $.inArray( o.selected, o.disabled ) != -1 ) {
				o.disabled.splice( $.inArray( o.selected, o.disabled ), 1 );
			}

			// highlight selected tab
			this.panels.addClass( "ui-tabs-hide" );
			this.lis.removeClass( "ui-tabs-selected ui-state-active" );
			// check for length avoids error when initializing empty list
			if ( o.selected >= 0 && this.anchors.length ) {
				self.element.find( self._sanitizeSelector( self.anchors[ o.selected ].hash ) ).removeClass( "ui-tabs-hide" );
				this.lis.eq( o.selected ).addClass( "ui-tabs-selected ui-state-active" );

				// seems to be expected behavior that the show callback is fired
				self.element.queue( "tabs", function() {
					self._trigger( "show", null,
						self._ui( self.anchors[ o.selected ], self.element.find( self._sanitizeSelector( self.anchors[ o.selected ].hash ) ) ) );
				});

				this.load( o.selected );
			}

			// clean up to avoid memory leaks in certain versions of IE 6
			// TODO: namespace this event
			$( window ).bind( "unload", function() {
				self.lis.add( self.anchors ).unbind( ".tabs" );
				self.lis = self.anchors = self.panels = null;
			});
		// update selected after add/remove
		} else {
			o.selected = this.lis.index( this.lis.filter( ".ui-tabs-selected" ) );
		}

		// update collapsible
		// TODO: use .toggleClass()
		this.element[ o.collapsible ? "addClass" : "removeClass" ]( "ui-tabs-collapsible" );

		// set or update cookie after init and add/remove respectively
		if ( o.cookie ) {
			this._cookie( o.selected, o.cookie );
		}

		// disable tabs
		for ( var i = 0, li; ( li = this.lis[ i ] ); i++ ) {
			$( li )[ $.inArray( i, o.disabled ) != -1 &&
				// TODO: use .toggleClass()
				!$( li ).hasClass( "ui-tabs-selected" ) ? "addClass" : "removeClass" ]( "ui-state-disabled" );
		}

		// reset cache if switching from cached to not cached
		if ( o.cache === false ) {
			this.anchors.removeData( "cache.tabs" );
		}

		// remove all handlers before, tabify may run on existing tabs after add or option change
		this.lis.add( this.anchors ).unbind( ".tabs" );

		if ( o.event !== "mouseover" ) {
			var addState = function( state, el ) {
				if ( el.is( ":not(.ui-state-disabled)" ) ) {
					el.addClass( "ui-state-" + state );
				}
			};
			var removeState = function( state, el ) {
				el.removeClass( "ui-state-" + state );
			};
			this.lis.bind( "mouseover.tabs" , function() {
				addState( "hover", $( this ) );
			});
			this.lis.bind( "mouseout.tabs", function() {
				removeState( "hover", $( this ) );
			});
			this.anchors.bind( "focus.tabs", function() {
				addState( "focus", $( this ).closest( "li" ) );
			});
			this.anchors.bind( "blur.tabs", function() {
				removeState( "focus", $( this ).closest( "li" ) );
			});
		}

		// set up animations
		var hideFx, showFx;
		if ( o.fx ) {
			if ( $.isArray( o.fx ) ) {
				hideFx = o.fx[ 0 ];
				showFx = o.fx[ 1 ];
			} else {
				hideFx = showFx = o.fx;
			}
		}

		// Reset certain styles left over from animation
		// and prevent IE's ClearType bug...
		function resetStyle( $el, fx ) {
			$el.css( "display", "" );
			if ( !$.support.opacity && fx.opacity ) {
				$el[ 0 ].style.removeAttribute( "filter" );
			}
		}

		// Show a tab...
		var showTab = showFx
			? function( clicked, $show ) {
				$( clicked ).closest( "li" ).addClass( "ui-tabs-selected ui-state-active" );
				$show.hide().removeClass( "ui-tabs-hide" ) // avoid flicker that way
					.animate( showFx, showFx.duration || "normal", function() {
						resetStyle( $show, showFx );
						self._trigger( "show", null, self._ui( clicked, $show[ 0 ] ) );
					});
			}
			: function( clicked, $show ) {
				$( clicked ).closest( "li" ).addClass( "ui-tabs-selected ui-state-active" );
				$show.removeClass( "ui-tabs-hide" );
				self._trigger( "show", null, self._ui( clicked, $show[ 0 ] ) );
			};

		// Hide a tab, $show is optional...
		var hideTab = hideFx
			? function( clicked, $hide ) {
				$hide.animate( hideFx, hideFx.duration || "normal", function() {
					self.lis.removeClass( "ui-tabs-selected ui-state-active" );
					$hide.addClass( "ui-tabs-hide" );
					resetStyle( $hide, hideFx );
					self.element.dequeue( "tabs" );
				});
			}
			: function( clicked, $hide, $show ) {
				self.lis.removeClass( "ui-tabs-selected ui-state-active" );
				$hide.addClass( "ui-tabs-hide" );
				self.element.dequeue( "tabs" );
			};

		// attach tab event handler, unbind to avoid duplicates from former tabifying...
		this.anchors.bind( o.event + ".tabs", function() {
			var el = this,
				$li = $(el).closest( "li" ),
				$hide = self.panels.filter( ":not(.ui-tabs-hide)" ),
				$show = self.element.find( self._sanitizeSelector( el.hash ) );

			// If tab is already selected and not collapsible or tab disabled or
			// or is already loading or click callback returns false stop here.
			// Check if click handler returns false last so that it is not executed
			// for a disabled or loading tab!
			if ( ( $li.hasClass( "ui-tabs-selected" ) && !o.collapsible) ||
				$li.hasClass( "ui-state-disabled" ) ||
				$li.hasClass( "ui-state-processing" ) ||
				self.panels.filter( ":animated" ).length ||
				self._trigger( "select", null, self._ui( this, $show[ 0 ] ) ) === false ) {
				this.blur();
				return false;
			}

			o.selected = self.anchors.index( this );

			self.abort();

			// if tab may be closed
			if ( o.collapsible ) {
				if ( $li.hasClass( "ui-tabs-selected" ) ) {
					o.selected = -1;

					if ( o.cookie ) {
						self._cookie( o.selected, o.cookie );
					}

					self.element.queue( "tabs", function() {
						hideTab( el, $hide );
					}).dequeue( "tabs" );

					this.blur();
					return false;
				} else if ( !$hide.length ) {
					if ( o.cookie ) {
						self._cookie( o.selected, o.cookie );
					}

					self.element.queue( "tabs", function() {
						showTab( el, $show );
					});

					// TODO make passing in node possible, see also http://dev.jqueryui.com/ticket/3171
					self.load( self.anchors.index( this ) );

					this.blur();
					return false;
				}
			}

			if ( o.cookie ) {
				self._cookie( o.selected, o.cookie );
			}

			// show new tab
			if ( $show.length ) {
				if ( $hide.length ) {
					self.element.queue( "tabs", function() {
						hideTab( el, $hide );
					});
				}
				self.element.queue( "tabs", function() {
					showTab( el, $show );
				});

				self.load( self.anchors.index( this ) );
			} else {
				throw "jQuery UI Tabs: Mismatching fragment identifier.";
			}

			// Prevent IE from keeping other link focussed when using the back button
			// and remove dotted border from clicked link. This is controlled via CSS
			// in modern browsers; blur() removes focus from address bar in Firefox
			// which can become a usability and annoying problem with tabs('rotate').
			if ( $.browser.msie ) {
				this.blur();
			}
		});

		// disable click in any case
		this.anchors.bind( "click.tabs", function(){
			return false;
		});
	},

    _getIndex: function( index ) {
		// meta-function to give users option to provide a href string instead of a numerical index.
		// also sanitizes numerical indexes to valid values.
		if ( typeof index == "string" ) {
			index = this.anchors.index( this.anchors.filter( "[href$=" + index + "]" ) );
		}

		return index;
	},

	destroy: function() {
		var o = this.options;

		this.abort();

		this.element
			.unbind( ".tabs" )
			.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" )
			.removeData( "tabs" );

		this.list.removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" );

		this.anchors.each(function() {
			var href = $.data( this, "href.tabs" );
			if ( href ) {
				this.href = href;
			}
			var $this = $( this ).unbind( ".tabs" );
			$.each( [ "href", "load", "cache" ], function( i, prefix ) {
				$this.removeData( prefix + ".tabs" );
			});
		});

		this.lis.unbind( ".tabs" ).add( this.panels ).each(function() {
			if ( $.data( this, "destroy.tabs" ) ) {
				$( this ).remove();
			} else {
				$( this ).removeClass([
					"ui-state-default",
					"ui-corner-top",
					"ui-tabs-selected",
					"ui-state-active",
					"ui-state-hover",
					"ui-state-focus",
					"ui-state-disabled",
					"ui-tabs-panel",
					"ui-widget-content",
					"ui-corner-bottom",
					"ui-tabs-hide"
				].join( " " ) );
			}
		});

		if ( o.cookie ) {
			this._cookie( null, o.cookie );
		}

		return this;
	},

	add: function( url, label, index ) {
		if ( index === undefined ) {
			index = this.anchors.length;
		}

		var self = this,
			o = this.options,
			$li = $( o.tabTemplate.replace( /#\{href\}/g, url ).replace( /#\{label\}/g, label ) ),
			id = !url.indexOf( "#" ) ? url.replace( "#", "" ) : this._tabId( $( "a", $li )[ 0 ] );

		$li.addClass( "ui-state-default ui-corner-top" ).data( "destroy.tabs", true );

		// try to find an existing element before creating a new one
		var $panel = self.element.find( "#" + id );
		if ( !$panel.length ) {
			$panel = $( o.panelTemplate )
				.attr( "id", id )
				.data( "destroy.tabs", true );
		}
		$panel.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide" );

		if ( index >= this.lis.length ) {
			$li.appendTo( this.list );
			$panel.appendTo( this.list[ 0 ].parentNode );
		} else {
			$li.insertBefore( this.lis[ index ] );
			$panel.insertBefore( this.panels[ index ] );
		}

		o.disabled = $.map( o.disabled, function( n, i ) {
			return n >= index ? ++n : n;
		});

		this._tabify();

		if ( this.anchors.length == 1 ) {
			o.selected = 0;
			$li.addClass( "ui-tabs-selected ui-state-active" );
			$panel.removeClass( "ui-tabs-hide" );
			this.element.queue( "tabs", function() {
				self._trigger( "show", null, self._ui( self.anchors[ 0 ], self.panels[ 0 ] ) );
			});

			this.load( 0 );
		}

		this._trigger( "add", null, this._ui( this.anchors[ index ], this.panels[ index ] ) );
		return this;
	},

	remove: function( index ) {
		index = this._getIndex( index );
		var o = this.options,
			$li = this.lis.eq( index ).remove(),
			$panel = this.panels.eq( index ).remove();

		// If selected tab was removed focus tab to the right or
		// in case the last tab was removed the tab to the left.
		if ( $li.hasClass( "ui-tabs-selected" ) && this.anchors.length > 1) {
			this.select( index + ( index + 1 < this.anchors.length ? 1 : -1 ) );
		}

		o.disabled = $.map(
			$.grep( o.disabled, function(n, i) {
				return n != index;
			}),
			function( n, i ) {
				return n >= index ? --n : n;
			});

		this._tabify();

		this._trigger( "remove", null, this._ui( $li.find( "a" )[ 0 ], $panel[ 0 ] ) );
		return this;
	},

	enable: function( index ) {
		index = this._getIndex( index );
		var o = this.options;
		if ( $.inArray( index, o.disabled ) == -1 ) {
			return;
		}

		this.lis.eq( index ).removeClass( "ui-state-disabled" );
		o.disabled = $.grep( o.disabled, function( n, i ) {
			return n != index;
		});

		this._trigger( "enable", null, this._ui( this.anchors[ index ], this.panels[ index ] ) );
		return this;
	},

	disable: function( index ) {
		index = this._getIndex( index );
		var self = this, o = this.options;
		// cannot disable already selected tab
		if ( index != o.selected ) {
			this.lis.eq( index ).addClass( "ui-state-disabled" );

			o.disabled.push( index );
			o.disabled.sort();

			this._trigger( "disable", null, this._ui( this.anchors[ index ], this.panels[ index ] ) );
		}

		return this;
	},

	select: function( index ) {
		index = this._getIndex( index );
		if ( index == -1 ) {
			if ( this.options.collapsible && this.options.selected != -1 ) {
				index = this.options.selected;
			} else {
				return this;
			}
		}
		this.anchors.eq( index ).trigger( this.options.event + ".tabs" );
		return this;
	},

	load: function( index ) {
		index = this._getIndex( index );
		var self = this,
			o = this.options,
			a = this.anchors.eq( index )[ 0 ],
			url = $.data( a, "load.tabs" );

		this.abort();

		// not remote or from cache
		if ( !url || this.element.queue( "tabs" ).length !== 0 && $.data( a, "cache.tabs" ) ) {
			this.element.dequeue( "tabs" );
			return;
		}

		// load remote from here on
		this.lis.eq( index ).addClass( "ui-state-processing" );

		if ( o.spinner ) {
			var span = $( "span", a );
			span.data( "label.tabs", span.html() ).html( o.spinner );
		}

		this.xhr = $.ajax( $.extend( {}, o.ajaxOptions, {
			url: url,
			success: function( r, s ) {
				self.element.find( self._sanitizeSelector( a.hash ) ).html( r );

				// take care of tab labels
				self._cleanup();

				if ( o.cache ) {
					$.data( a, "cache.tabs", true );
				}

				self._trigger( "load", null, self._ui( self.anchors[ index ], self.panels[ index ] ) );
				try {
					o.ajaxOptions.success( r, s );
				}
				catch ( e ) {}
			},
			error: function( xhr, s, e ) {
				// take care of tab labels
				self._cleanup();

				self._trigger( "load", null, self._ui( self.anchors[ index ], self.panels[ index ] ) );
				try {
					// Passing index avoid a race condition when this method is
					// called after the user has selected another tab.
					// Pass the anchor that initiated this request allows
					// loadError to manipulate the tab content panel via $(a.hash)
					o.ajaxOptions.error( xhr, s, index, a );
				}
				catch ( e ) {}
			}
		} ) );

		// last, so that load event is fired before show...
		self.element.dequeue( "tabs" );

		return this;
	},

	abort: function() {
		// stop possibly running animations
		this.element.queue( [] );
		this.panels.stop( false, true );

		// "tabs" queue must not contain more than two elements,
		// which are the callbacks for the latest clicked tab...
		this.element.queue( "tabs", this.element.queue( "tabs" ).splice( -2, 2 ) );

		// terminate pending requests from other tabs
		if ( this.xhr ) {
			this.xhr.abort();
			delete this.xhr;
		}

		// take care of tab labels
		this._cleanup();
		return this;
	},

	url: function( index, url ) {
		this.anchors.eq( index ).removeData( "cache.tabs" ).data( "load.tabs", url );
		return this;
	},

	length: function() {
		return this.anchors.length;
	}
});

$.extend( $.ui.tabs, {
	version: "1.8.7"
});
/*
 * Tabs Extensions
 */

/*
 * Rotate
 */
$.extend( $.ui.tabs.prototype, {
	rotation: null,
	rotate: function( ms, continuing ) {
		var self = this,
			o = this.options;

		var rotate = self._rotate || ( self._rotate = function( e ) {
			clearTimeout( self.rotation );
			self.rotation = setTimeout(function() {
				var t = o.selected;
				self.select( ++t < self.anchors.length ? t : 0 );
			}, ms );
			
			if ( e ) {
				e.stopPropagation();
			}
		});

		var stop = self._unrotate || ( self._unrotate = !continuing
			? function(e) {
				if (e.clientX) { // in case of a true click
					self.rotate(null);
				}
			}
			: function( e ) {
				t = o.selected;
				rotate();
			});

		// start rotation
		if ( ms ) {
			this.element.bind( "tabsshow", rotate );
			this.anchors.bind( o.event + ".tabs", stop );
			rotate();
		// stop rotation
		} else {
			clearTimeout( self.rotation );
			this.element.unbind( "tabsshow", rotate );
			this.anchors.unbind( o.event + ".tabs", stop );
			delete this._rotate;
			delete this._unrotate;
		}

		return this;
	}
});
})( jQuery );
/*
 * jQuery UI Position 1.8.7
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Position
 */
(function( $, undefined ) {

$.ui = $.ui || {};

var horizontalPositions = /left|center|right/,
	verticalPositions = /top|center|bottom/,
	center = "center",
	_position = $.fn.position,
	_offset = $.fn.offset;

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var target = $( options.of ),
		targetElem = target[0],
		collision = ( options.collision || "flip" ).split( " " ),
		offset = options.offset ? options.offset.split( " " ) : [ 0, 0 ],
		targetWidth,
		targetHeight,
		basePosition;

	if ( targetElem.nodeType === 9 ) {
		targetWidth = target.width();
		targetHeight = target.height();
		basePosition = { top: 0, left: 0 };
	// TODO: use $.isWindow() in 1.9
	} else if ( targetElem.setTimeout ) {
		targetWidth = target.width();
		targetHeight = target.height();
		basePosition = { top: target.scrollTop(), left: target.scrollLeft() };
	} else if ( targetElem.preventDefault ) {
		// force left top to allow flipping
		options.at = "left top";
		targetWidth = targetHeight = 0;
		basePosition = { top: options.of.pageY, left: options.of.pageX };
	} else {
		targetWidth = target.outerWidth();
		targetHeight = target.outerHeight();
		basePosition = target.offset();
	}

	// force my and at to have valid horizontal and veritcal positions
	// if a value is missing or invalid, it will be converted to center 
	$.each( [ "my", "at" ], function() {
		var pos = ( options[this] || "" ).split( " " );
		if ( pos.length === 1) {
			pos = horizontalPositions.test( pos[0] ) ?
				pos.concat( [center] ) :
				verticalPositions.test( pos[0] ) ?
					[ center ].concat( pos ) :
					[ center, center ];
		}
		pos[ 0 ] = horizontalPositions.test( pos[0] ) ? pos[ 0 ] : center;
		pos[ 1 ] = verticalPositions.test( pos[1] ) ? pos[ 1 ] : center;
		options[ this ] = pos;
	});

	// normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	// normalize offset option
	offset[ 0 ] = parseInt( offset[0], 10 ) || 0;
	if ( offset.length === 1 ) {
		offset[ 1 ] = offset[ 0 ];
	}
	offset[ 1 ] = parseInt( offset[1], 10 ) || 0;

	if ( options.at[0] === "right" ) {
		basePosition.left += targetWidth;
	} else if (options.at[0] === center ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[1] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[1] === center ) {
		basePosition.top += targetHeight / 2;
	}

	basePosition.left += offset[ 0 ];
	basePosition.top += offset[ 1 ];

	return this.each(function() {
		var elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseInt( $.curCSS( this, "marginLeft", true ) ) || 0,
			marginTop = parseInt( $.curCSS( this, "marginTop", true ) ) || 0,
			collisionWidth = elemWidth + marginLeft +
				parseInt( $.curCSS( this, "marginRight", true ) ) || 0,
			collisionHeight = elemHeight + marginTop +
				parseInt( $.curCSS( this, "marginBottom", true ) ) || 0,
			position = $.extend( {}, basePosition ),
			collisionPosition;

		if ( options.my[0] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[0] === center ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[1] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[1] === center ) {
			position.top -= elemHeight / 2;
		}

		// prevent fractions (see #5280)
		position.left = Math.round( position.left );
		position.top = Math.round( position.top );

		collisionPosition = {
			left: position.left - marginLeft,
			top: position.top - marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[i] ] ) {
				$.ui.position[ collision[i] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: offset,
					my: options.my,
					at: options.at
				});
			}
		});

		if ( $.fn.bgiframe ) {
			elem.bgiframe();
		}
		elem.offset( $.extend( position, { using: options.using } ) );
	});
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var win = $( window ),
				over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft();
			position.left = over > 0 ? position.left - over : Math.max( position.left - data.collisionPosition.left, position.left );
		},
		top: function( position, data ) {
			var win = $( window ),
				over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop();
			position.top = over > 0 ? position.top - over : Math.max( position.top - data.collisionPosition.top, position.top );
		}
	},

	flip: {
		left: function( position, data ) {
			if ( data.at[0] === center ) {
				return;
			}
			var win = $( window ),
				over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft(),
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					-data.targetWidth,
				offset = -2 * data.offset[ 0 ];
			position.left += data.collisionPosition.left < 0 ?
				myOffset + atOffset + offset :
				over > 0 ?
					myOffset + atOffset + offset :
					0;
		},
		top: function( position, data ) {
			if ( data.at[1] === center ) {
				return;
			}
			var win = $( window ),
				over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop(),
				myOffset = data.my[ 1 ] === "top" ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					-data.targetHeight,
				offset = -2 * data.offset[ 1 ];
			position.top += data.collisionPosition.top < 0 ?
				myOffset + atOffset + offset :
				over > 0 ?
					myOffset + atOffset + offset :
					0;
		}
	}
};

// offset setter from jQuery 1.4
if ( !$.offset.setOffset ) {
	$.offset.setOffset = function( elem, options ) {
		// set position first, in-case top/left are set even on static elem
		if ( /static/.test( $.curCSS( elem, "position" ) ) ) {
			elem.style.position = "relative";
		}
		var curElem   = $( elem ),
			curOffset = curElem.offset(),
			curTop    = parseInt( $.curCSS( elem, "top",  true ), 10 ) || 0,
			curLeft   = parseInt( $.curCSS( elem, "left", true ), 10)  || 0,
			props     = {
				top:  (options.top  - curOffset.top)  + curTop,
				left: (options.left - curOffset.left) + curLeft
			};
		
		if ( 'using' in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	};

	$.fn.offset = function( options ) {
		var elem = this[ 0 ];
		if ( !elem || !elem.ownerDocument ) { return null; }
		if ( options ) { 
			return this.each(function() {
				$.offset.setOffset( this, options );
			});
		}
		return _offset.call( this );
	};
}

}( jQuery ));


/*Custom Component source code*/
//define the PowerWorks namespace
if (pwx == undefined) {
	var pwx = new Object();
}

//create the form launch function
pwx_form_launch = function (persId, encntrId, formId, activityId, chartMode, compId) {
	//var pwxFormObj = window.external.DiscernObjectFactory('POWERFORM');
	//pwxFormObj.OpenForm(persId, encntrId, formId, activityId, chartMode);
	var paramString = persId + "|" + encntrId + "|" + formId + "|" + activityId + "|" + chartMode;
	MPAGES_EVENT("POWERFORM", paramString);
	if (compId != null) {
		var comp = MPage.getCustomComp(compId);
		if (comp != null) {
			comp.refresh();
		}
	}
}

// function to take a whole Javascript object and creat the grouping based on keyname
Array.prototype.pwxgroupBy = function (keyName) {
	var res = {};
	$.each(this, function (i, val) {
		var k = val[keyName];
		var v = res[k];
		if (!v)
			v = res[k] = [];
		v.push(val);
	});
	return res;
};

//create form menu function
pwx_form_menu = function (form_menu_id, compId) {
	var element;
	if (document.getElementById && (element = document.getElementById(form_menu_id))) {
		if (document.getElementById(form_menu_id).style.display == 'block') {
			document.getElementById(form_menu_id).style.display = 'none';
			$('#' + compId).css('z-index', '1')
		} else {
			document.getElementById(form_menu_id).style.display = 'block';
			$('#' + compId).css('z-index', '2')
		}
	}
}

//create expand collapse function
pwx_expand_collapse = function (tbody_class, title_class, tgl_class) {
	var element;
	if (document.getElementById && (element = document.getElementById(tbody_class))) {
		if (document.getElementById(tbody_class).style.display == 'block') {
			document.getElementById(tbody_class).style.display = 'none';
			document.getElementById(title_class).title = 'Expand';
			document.getElementById(tgl_class).className = 'pwx-sub-sec-hd-tgl-close';
		} else {
			document.getElementById(tbody_class).style.display = 'block';
			document.getElementById(title_class).title = 'Collapse';
			document.getElementById(tgl_class).className = 'pwx-sub-sec-hd-tgl';
		}
	}
}

//create expand collapse with scroll check function
pwx_expand_collapse_scroll = function (tbody_class, title_class, tgl_class, scroll_div_id, scroll_setting) {
	var element;
	if (document.getElementById && (element = document.getElementById(tbody_class))) {
		if (document.getElementById(tbody_class).style.display == 'block') {
			document.getElementById(tbody_class).style.display = 'none';
			document.getElementById(title_class).title = 'Expand';
			document.getElementById(tgl_class).className = 'pwx-sub-sec-hd-tgl-close';
			var pwxclientheightcheck = document.getElementById(scroll_div_id).clientHeight;
			var pwxscrollheightcheck = document.getElementById(scroll_div_id).scrollHeight;
			if (pwxscrollheightcheck <= pwxclientheightcheck) {
				document.getElementById(scroll_div_id).style.height = '';
			}
		} else {
			document.getElementById(tbody_class).style.display = 'block';
			document.getElementById(title_class).title = 'Collapse';
			document.getElementById(tgl_class).className = 'pwx-sub-sec-hd-tgl';
			document.getElementById(title_class).title
		}
	}
	var pwxdivh = document.getElementById(scroll_div_id).offsetHeight;
	if (pwxdivh > scroll_setting) {
		var div_height = scroll_setting + 'px';
		document.getElementById(scroll_div_id).style.height = div_height;
	}
}
function clone(from, to) {
	if (from == null || typeof from != "object")
		return from;
	if (from.constructor != Object && from.constructor != Array)
		return from;
	if (from.constructor == Date || from.constructor == RegExp || from.constructor == Function ||
		from.constructor == String || from.constructor == Number || from.constructor == Boolean)
		return new from.constructor(from);

	to = to || new from.constructor();

	for (var name in from) {
		to[name] = typeof to[name] == "undefined" ? clone(from[name], null) : to[name];
	}

	return to;
}

/** Copy this object into another varible **/
function pwx_copy_obj(o) {
	var c = new Object();
	for (var e in o) {
		c[e] = o[e];
	}
	return c;
}
/** clear the height based upon scrollbar height **/
pwxclearheight = function (pwx_id_scroll, scrollsetting) {
	var pwxclientheightcheck = document.getElementById(pwx_id_scroll).clientHeight;
	var pwxscrollheightcheck = document.getElementById(pwx_id_scroll).scrollHeight;
	if (pwxscrollheightcheck <= pwxclientheightcheck) {
		document.getElementById(pwx_id_scroll).style.height = '';
	}
	var pwxdivh = document.getElementById(pwx_id_scroll).offsetHeight;
	if (pwxdivh > scrollsetting) {
		var div_height = scrollsetting + 'px';
		document.getElementById(pwx_id_scroll).style.height = div_height;
	}
}
function pwx_create_tabs(tabArray, tabid) {
	var listVar = '';
	var divVar = '';
	var tabHTML = '';
	if (tabArray.length > 0) {
		tabArray.sort(pwx_sort_num_col2_asc);
		var tabcnt = 0
			for (var i = 0; i < tabArray.length; i++) {
				tabcnt++
				listVar += '<li><a href="#' + tabid + '-' + tabcnt + '">' + tabArray[i][0] + '</a></li>';
				divVar += '<div id="' + tabid + '-' + tabcnt + '">' + tabArray[i][1] + '</div>';
			}
	}
	tabHTML += '<div id="' + tabid + '"><ul>' + listVar + '</ul>' + divVar + '</div>';
	return tabHTML;
}
//sort numerical ascending  on column 3function
function pwx_sort_num_col2_asc(a, b) {
	return a[2] - b[2];
}

// Generic Error dialog function 
function pwxerrormodal(status,requesttext,title){
    var error_text = "Failed to Remove! Status: " + status + " Request Text: " + requesttext;
    MP_ModalDialog.deleteModalDialogObject("pwxerrormodal")
    var pwxerrorModalobj = new ModalDialog("pwxerrormodal")
    	.setHeaderTitle('<span class="pwx_alert">'+title+'</span>')
    	.setTopMarginPercentage(20)
    	.setRightMarginPercentage(35)
    	.setBottomMarginPercentage(30)
    	.setLeftMarginPercentage(35)
    	.setIsBodySizeFixed(true)
    	.setHasGrayBackground(true)
    	.setIsFooterAlwaysShown(true);
    pwxerrorModalobj.setBodyDataFunction(
    	function (modalObj) {
    	modalObj.setBodyHTML('<div style="padding-top:10px;"><p class="pwx_small_text">' + error_text + '</p></div>');
    });
    var closebtn = new ModalButton("addCancel");
    closebtn.setText("OK").setCloseOnClick(true);
    pwxerrorModalobj.addFooterButton(closebtn)
    MP_ModalDialog.addModalDialogObject(pwxerrorModalobj);
    MP_ModalDialog.showModalDialog("pwxerrormodal")
}

/*Histories Summary Component*/
if (typeof i18n == "undefined") {
	var i18n = {};
}
if (typeof i18n.discernabu == "undefined") {
	i18n.discernabu = {};
}
i18n.discernabu.history_comp_o1 = {
	PROBLEM : "Problem",
	ANNOTED_DISP:"Annotated Display",
	ONSET_DATE:"Onset Date",
	RESOLVED_DATE : "Resolved Date",
	REVIEWED_DT : "Reviewed Date",
	STATUS: "Status",
	REVIEWED_BY: "Reviewed By",
	COMMENTS : "Comments",
	NAME : "Name",
	DISP_AS: "Display As",
	PROCEDURE_DATE:"Procedure Date",
	LOCATION:"Location",
	PROVIDER: "Provider",
	REVIEWED_DATE:"Reviewed Date",
	CATEGORY:"Category",
	UPDATED_DATE:"Updated Date",
	UPDATED_BY:"Updated By",
	DETAILS:"Details",
	DELIVERY_DATE:"Delivery Date",
	DELIVERY_HOSPITAL:"Delivery Hospital",
	CHILD_GENDER: "Child Gender",
	GEST_BIRTH: "Gestation at Birth",
	INFANT_WEIGHT:"Infant Weight",
	CHILD_NAME:"Child Name",
	FATHER_NAME:"Father Name",
	NEONATE_OUTCOME:"Neonate Outcome",
	LABOR_LEN:"Length of the Labor",
	PREGNANCY_OUTCOME:"Pregnancy Outcome",
	ANES_TYPE:"Anesthesia Type",
	PRETERM_LABOR:"Preterm Labor",
	FETAL_COMPLICATIONS:"Fetal Complications",
	NEONATE_COMPLICATIONS:"NEONATE Complications",
	MATERNAL_COMPLICATIONS:"Maternal complications",
	BABY:"Baby",
	DEATH_CAUSE:"Death Cause",
	DEATH_AGE:"Age at death",
	DECEASED:"Deceased",
	REDIR_SURG_HIST:"Go to Surgical Histories",
	REDIR_PMH:"Go to Past Medical Histories",
	REDIR_FAM_HIST:"Go to Family Histories",
	REDIR_SOC_HIST:"Go to Social Histories",
	REDIR_OB_HIST: "Go to OB Histories",
	NO_RESULT:"No results found",
	HIST_SUMMARY: "Histories Summary",
	ERROR_TEXT_SEG1:"Failed to Remove! Status",
	ERROR_TEXT_SEG2:"Request Text",
	ERROR_TEXT_SEG3:"Error!",
	SAVE_TEXT:"Save or override tab as default",
	REDIR_PAST_MED:"Go to Past Medical Histories",
	REDIR_FAMILY:"Go to Family Histories",
	REDIR_SOCIAL:"Go to Social Histories",
	REDIR_OB:"Go to OB Histories",
	CLEAR_PREF:"Clear Preference",
	DISP_FAM:"Display by Family Member",
	DISP_COND:"Display by Condition",
	NEG_FAM_HIST:"Family History Negative",
	UNABLE_OBTAIN:"Unable to Obtain",
	UNKNOWN_FAM_HIST:"Family History Unknown",
	PAT_ADOPTED:"Patient Adopted",
	PREGNANCY:"Pregnancy",
	COND:"Condition",
	MATERNAL_COMMENTS: "Comments",
	REMOVE_TAB_PREF_TEXT:"Remove defaulted tab preference. Selecting save on an alternative tab will override this default.",
	COLLAPSE:"Collapse",
	EXPAND:"Expand"
};

pwx.histories_summary = function () {};
pwx.histories_summary.prototype = new MPage.Component();
pwx.histories_summary.prototype.constructor = MPage.Component;
pwx.histories_summary.prototype.base = MPage.Component.prototype;
pwx.histories_summary.prototype.name = "pwx.histories_summary";
pwx.histories_summary.prototype.cclProgram = "AMB_MP_HIST_COMP";
pwx.histories_summary.prototype.cclParams = [];
pwx.histories_summary.prototype.cclDataType = "JSON";
pwx.histories_summary.prototype.init = function (options) {
	var params = [];
	//set params
	params.push("MINE");
	params.push(this.getProperty("personId"));
	params.push(this.getProperty("userId"));
	params.push(this.getProperty("encounterId"));
	params.push(this.getProperty("positionCd"));
	params.push(this.getProperty("pprCd"));
	this.cclParams = params;
};

//set the MinimumSpecVersion
pwx.histories_summary.prototype.componentMinimumSpecVersion = 1.0;

// Display tabs in Mpages
pwx.histories_summary.prototype.render = function () {
	//Takes the data in this.data and loads it into target
	thiz = this
	var element = this.getTarget();
	var histHTML = '';
	var scrollsetting = (this.data.HISTORIES.SCROLL_LINES * 18) + 6;
	var histtabid = 'ambhisttabs';
	var pmhHvrArray = new Array();
	var surgicalHvrArray = new Array();
	var familymemberHvrArray = new Array();
	var familyconditionHvrArray = new Array();
	var socialHvrArray = new Array();
	var socialhxHvrArray = new Array();
	var obHvrArray = new Array();
	var histArray = new Array()
	var histcnt = 0;
	var pid = this.getProperty("userId");
	this.histI18nObj = i18n.discernabu.history_comp_o1;
	if (this.data.HISTORIES.PAST_MED_DISP_IND == 1) {
		histcnt++
		histArray.length = histcnt;
		histArray[histcnt - 1] = new Array(3);
		if (this.data.HISTORIES.PAST_MED.length > 0) {
			histArray[histcnt - 1][0] = '<span id="amb_hist_tab_lbl">'+this.data.HISTORIES.PAST_MED_TITLE + '</span><span class="pwx_grey"  id="amb_hist_tab_lbl_text_count">&nbsp;' + this.data.HISTORIES.PAST_MED.length + '</span></span><span id="pmhind" style="display:none">PMHIND</span>';
		} else {
			histArray[histcnt - 1][0] = '<span id="amb_hist_tab_lbl">'+this.data.HISTORIES.PAST_MED_TITLE + '</span><span id="pmhind" style="display:none">PMHIND</span>';
		}
		histArray[histcnt - 1][2] = this.data.HISTORIES.PAST_MED_SEQ;
		histArray[histcnt - 1][1] = '';
		//create the sub title
		if (this.data.HISTORIES.PAST_MED_LINK != "") {
			histArray[histcnt - 1][1] += '<dl class="amb_sub_title_tab_disp"><dt class="pwx_add_icon_dt"><a class="pwx_no_text_decor " title="'+this.histI18nObj.REDIR_PAST_MED+'" href="javascript:APPLINK(0,\'Powerchart.exe\',\'/PERSONID=' + this.getProperty("personId") + ' /ENCNTRID=' + this.getProperty("encounterId") + ' /FIRSTTAB=^' + this.data.HISTORIES.PAST_MED_LINK + '^\')">' +
			'<span class="pwx-add-icon">&nbsp;</span></a></dt>';
		}

		if (this.data.HISTORIES.TAB_INDEX == 'PMH') {
			histArray[histcnt - 1][1] += '<dt class="amb_histories_filterbar_left_icon pwx_pointer" id="amb_clear_histories_tabid_pref_dt_pmh"><span id="save-ico" title="'+this.histI18nObj.REMOVE_TAB_PREF_TEXT+'" class="pwx-discsave_checkmark-icon">&nbsp;</span>' +
			'</dt></dl>';
		} else {
			histArray[histcnt - 1][1] += '<dt class="amb_histories_filterbar_left_icon pwx_pointer" id="amb_new_histories_tabids_pref_dt_pmh"><span id="amb_new_histories_tabids_pref" title="'+ this.histI18nObj.SAVE_TEXT + '" class="pwx-discsave-icon">&nbsp;</span></dt></dl>';
		}
		if (this.data.HISTORIES.PAST_MED.length > 0) {
		
			var border_type = 'pwx_grey_border_top-info';
			var temp_onset_dt_text= "--"
			var temp_onset_dt = new Date();
			var onset_date = "--"
			var resolved_date = "--"
			
			for (var i = 0; i < this.data.HISTORIES.PAST_MED.length; i++) {
			
				var Hvr = new Array(7);				
				Hvr[0] = new Array(2);
				Hvr[0][0] = this.histI18nObj.PROBLEM + ":";
				Hvr[0][1] = this.data.HISTORIES.PAST_MED[i].PROBLEM;
				Hvr[1] = new Array(2);
				Hvr[1][0] = this.histI18nObj.ANNOTED_DISP+ ":";
				Hvr[1][1] = this.data.HISTORIES.PAST_MED[i].ANNON_DISPLAY;
				Hvr[2] = new Array(2);
				Hvr[2][0] = this.histI18nObj.ONSET_DATE+ ":";
				
				if(this.data.HISTORIES.PAST_MED[i].ONSET_DATE!="--")
				{
					temp_onset_dt.setISO8601(this.data.HISTORIES.PAST_MED[i].ONSET_DATE)
					temp_onset_dt_text = temp_onset_dt.format("shortDate2")
					if(this.data.HISTORIES.PAST_MED[i].ONSET_DT_FLAG == 0)
					{
						onset_date = temp_onset_dt_text;
					}
					else if(this.data.HISTORIES.PAST_MED[i].ONSET_DT_FLAG == 1)
					{
						onset_date = temp_onset_dt_text.substring(0,temp_onset_dt_text.indexOf('/'))+temp_onset_dt_text.substring(temp_onset_dt_text.lastIndexOf('/'))
					}
					else if(this.data.HISTORIES.PAST_MED[i].ONSET_DT_FLAG == 2)
					{
						onset_date = temp_onset_dt_text.substring(temp_onset_dt_text.lastIndexOf('/')+1)
					}
				}
				Hvr[2][1] = onset_date
				var resolved_date = "--"
				Hvr[3] = new Array(2);
				Hvr[3][0] = this.histI18nObj.RESOLVED_DATE+ ":";		
				var pastMedResolvedDt = new Date();
				var pastMedResolvedDt_text = "--";
				if (this.data.HISTORIES.PAST_MED[i].RESOLVED_DATE != '--') {
					pastMedResolvedDt.setISO8601(this.data.HISTORIES.PAST_MED[i].RESOLVED_DATE);
					pastMedResolvedDt_text = pastMedResolvedDt.format("shortDate2");
					if(this.data.HISTORIES.PAST_MED[i].LIFE_CYCLE_DT_FLAG == 0)				
					{
						resolved_date = pastMedResolvedDt_text;
					}
					else if(this.data.HISTORIES.PAST_MED[i].LIFE_CYCLE_DT_FLAG == 1)
					{
						resolved_date = pastMedResolvedDt_text.substring(0,pastMedResolvedDt_text.indexOf('/'))+pastMedResolvedDt_text.substring(pastMedResolvedDt_text.lastIndexOf('/'))
					}
					else if(this.data.HISTORIES.PAST_MED[i].LIFE_CYCLE_DT_FLAG == 2)
					{
						resolved_date = pastMedResolvedDt_text.substring(pastMedResolvedDt_text.lastIndexOf('/')+1)
					}
				}
				Hvr[3][1] = resolved_date;
				Hvr[4] = new Array(2);
				Hvr[4][0] = this.histI18nObj.STATUS+ ":";
				Hvr[4][1] = this.data.HISTORIES.PAST_MED[i].STATUS;
				Hvr[5] = new Array(2);
				Hvr[5][0] = this.histI18nObj.REVIEWED_DT+ ":";
				var pastMedReviewedDt = new Date();
				var pastMedReviewedDt_text = "--";
				if (this.data.HISTORIES.PAST_MED[i].REVIEWED_DT != '--') {
					pastMedReviewedDt.setISO8601(this.data.HISTORIES.PAST_MED[i].REVIEWED_DT);
					pastMedReviewedDt_text = pastMedReviewedDt.format("shortDate2");
				}
				Hvr[5][1] = pastMedReviewedDt_text;
				Hvr[6] = new Array(2);
				Hvr[6][0] = this.histI18nObj.COMMENTS+ ":";
				Hvr[6][1] = this.data.HISTORIES.PAST_MED[i].COMMENTS;
				
				pmhHvrArray.push(Hvr);
				histArray[histcnt - 1][1] += '<dl id="pmh_hist_row_'+i+'" class="' + border_type + ' hist-info"><dt class="amb_hist_text_dt_wpad">';
				histArray[histcnt - 1][1] += this.data.HISTORIES.PAST_MED[i].DISPLAY_AS;
				if (this.data.HISTORIES.PAST_MED[i].CODE != "") {
					histArray[histcnt - 1][1] += '<span class="pwx_smallest_text pwx_grey"> (' + this.data.HISTORIES.PAST_MED[i].CODE + ')</span>';
				}
				if (this.data.HISTORIES.PAST_MED[i].COMMENTS != '--') {
					histArray[histcnt - 1][1] += '<span id="amb_hist_dot_comment_margin_left" class="pwx-comment-dot-icon" style="padding-bottom:3px;"></span>';
				}
				histArray[histcnt - 1][1] += '</dt>';
				histArray[histcnt - 1][1] += '</dl>';
				border_type = 'pwx_grey_border-info';
			}			
		} else {
			histArray[histcnt - 1][1] += '<dl class="pwx_grey_border_top-info"><dt class="pwx_single_dt_wpad "><span class="res-none">'+this.histI18nObj.NO_RESULT+'</span></dt></dl>';
		}
	}
	/*Surgery History*/
	if (this.data.HISTORIES.PROC_DISP_IND == 1) {
		histcnt++
		histArray.length = histcnt;
		histArray[histcnt - 1] = new Array(3);
		if (this.data.HISTORIES.PROC.length > 0) {
			histArray[histcnt - 1][0] = '<span id="amb_hist_tab_lbl">'+this.data.HISTORIES.PROC_TITLE + '</span><span class="pwx_grey" id="amb_hist_tab_lbl_text_count">&nbsp;' + this.data.HISTORIES.PROC.length + '<span id="surgery_ind" style="display:none">SURGERYIND</span></span></span>';
		} else {
			histArray[histcnt - 1][0] = '<span id="amb_hist_tab_lbl">'+this.data.HISTORIES.PROC_TITLE + '</span><span id="surgery_ind" style="display:none">SURGERYIND</span>';
		}
		histArray[histcnt - 1][2] = this.data.HISTORIES.PROC_SEQ;
		histArray[histcnt - 1][1] = '';
		if (this.data.HISTORIES.PROC_LINK != "") {
			histArray[histcnt - 1][1] += '<dl class="amb_sub_title_tab_disp"><dt class="pwx_add_icon_dt"><a class="pwx_no_text_decor " title="' +this.histI18nObj.REDIR_SURG_HIST+
			'" href="javascript:APPLINK(0,\'Powerchart.exe\',\'/PERSONID=' + this.getProperty("personId") + ' /ENCNTRID=' + this.getProperty("encounterId") + ' /FIRSTTAB=^' + this.data.HISTORIES.PROC_LINK + '^\')">' +
			'<span class="pwx-add-icon">&nbsp;</span></a></dt>';
		}
		if (this.data.HISTORIES.TAB_INDEX == 'Surgery') {
			histArray[histcnt - 1][1] += '<dt class="amb_histories_filterbar_left_icon pxw_pointer" id="amb_clear_histories_tabid_pref_dt_surgery"><span id="save-ico" title="'+this.histI18nObj.REMOVE_TAB_PREF_TEXT+'" class="pwx-discsave_checkmark-icon">&nbsp;</span>' +
			'</dt></dl>';
		} else {
			histArray[histcnt - 1][1] += '<dt class="amb_histories_filterbar_left_icon pwx_pointer" id="amb_new_histories_tabids_pref_dt_surgery"><span id="amb_new_histories_tabids_pref" title="'+this.histI18nObj.SAVE_TEXT+'" class="pwx-discsave-icon">&nbsp;</span></dt></dl>';
		}
		if (this.data.HISTORIES.PROC.length > 0) {
			var border_type = 'pwx_grey_border_top-info';
			for (var i = 0; i < this.data.HISTORIES.PROC.length; i++) {
				var pastmedhvr = "";
				var memhtml = [];
				var shtml = '';
				var b1 = '--'
				var myHvr = new Array(8);
				myHvr[0] = new Array(2);
				myHvr[0][0] = this.histI18nObj.NAME+":"
				myHvr[0][1] = this.data.HISTORIES.PROC[i].NAME;
				myHvr[1] = new Array(2);
				myHvr[1][0] = this.histI18nObj.DISP_AS+":"
				myHvr[1][1] = this.data.HISTORIES.PROC[i].DISPLAY_AS;
				myHvr[2] = new Array(2);
				myHvr[2][0] = this.histI18nObj.PROCEDURE_DATE+":"
				
				var temp_proc_onset_dt=new Date();
				var temp_proc_onset_dt_text = "--"
				var proc_onset_date = ""
				
				if(this.data.HISTORIES.PROC[i].ONSET!="--")
				{
					temp_proc_onset_dt.setISO8601(this.data.HISTORIES.PROC[i].ONSET)					
					temp_proc_onset_dt_text = temp_proc_onset_dt.format("shortDate2")
					//alert(this.data.HISTORIES.PROC[i].ONSET_FLAG)
					if(this.data.HISTORIES.PROC[i].ONSET_FLAG <=1)
					{
						proc_onset_date = temp_proc_onset_dt_text;
					}
					else if(this.data.HISTORIES.PROC[i].ONSET_FLAG == 2)
					{
						proc_onset_date = temp_proc_onset_dt_text.substring(0,temp_proc_onset_dt_text.indexOf('/'))+temp_proc_onset_dt_text.substring(temp_proc_onset_dt_text.lastIndexOf('/'))
					}
					else if(this.data.HISTORIES.PROC[i].ONSET_FLAG == 3)
					{
						proc_onset_date = temp_proc_onset_dt_text.substring(temp_proc_onset_dt_text.lastIndexOf('/')+1)
					}
				}
				myHvr[2][1] = proc_onset_date;
				myHvr[3] = new Array(2);
				myHvr[3][0] = this.histI18nObj.LOCATION+":"
				myHvr[3][1] = this.data.HISTORIES.PROC[i].LOCATION;
				myHvr[4] = new Array(2);
				myHvr[4][0] = this.histI18nObj.PROVIDER+":"
				myHvr[4][1] = this.data.HISTORIES.PROC[i].PROVIDER;
				myHvr[5] = new Array(2);
				myHvr[5][0] = this.histI18nObj.STATUS+":"
				myHvr[5][1] = this.data.HISTORIES.PROC[i].STATUS;
				myHvr[6] = new Array(2);
				myHvr[6][0] = this.histI18nObj.REVIEWED_DATE+":"
				var surgReviewedDt = new Date();
				var surgReviewedDt_text = "--";
				if (this.data.HISTORIES.PROC[i].REVIEWED_DT != '--') {
					surgReviewedDt.setISO8601(this.data.HISTORIES.PROC[i].REVIEWED_DT);
					surgReviewedDt_text = surgReviewedDt.format("shortDate2");
				}
				myHvr[6][1] = surgReviewedDt_text;
				myHvr[7] = new Array(2);
				myHvr[7][0] = this.histI18nObj.COMMENTS+ ":";
				if (this.data.HISTORIES.PROC[i].COMMENTS.length > 0) {
					for (var cc = 0; cc < this.data.HISTORIES.PROC[i].COMMENTS.length; cc++) {
					    var surgBegDt = new Date();
						var surgBegDt_text = "--";
						if (this.data.HISTORIES.PROC[i].COMMENTS[cc].BEG_DT!= '--') {
							surgBegDt.setISO8601(this.data.HISTORIES.PROC[i].COMMENTS[cc].BEG_DT);
							surgBegDt_text = surgBegDt.format("shortDate2");
						}
						shtml += surgBegDt_text;
						shtml += " - ";
						shtml += this.data.HISTORIES.PROC[i].COMMENTS[cc].NAME;
						shtml += " ";
						shtml += "<br/>";
						shtml += this.data.HISTORIES.PROC[i].COMMENTS[cc].LONG_TEXT;
						shtml += "<br/>";
					}
					myHvr[7][1] = shtml;
				} else {
					myHvr[7] = new Array(2);
					myHvr[7][0] = this.histI18nObj.COMMENTS+ ":";
					myHvr[7][1] = b1;
				}
				/*
				if(shtml.length>=54)
				{
					myHvr[7][1] = shtml.substring(0,54)
					myHvr[8] = new Array(2);
					myHvr[8][0]='<span style="display:block;padding-left:15%;">'+shtml.substring(59)+'</span>';	
					myHvr[8][1]='&nbsp;'
				}
				else{
					myHvr[8] = new Array(2);
					myHvr[8][0]='&nbsp;'
					myHvr[8][1]='&nbsp;'
				}
				*/
				
				surgicalHvrArray.push(myHvr);
				histArray[histcnt - 1][1] += '<dl id="Surgery_hist_row_'+i+'" class="' + border_type + ' hist-info"><dt class="amb_2_col_srg_lbl">';
				histArray[histcnt - 1][1] += this.data.HISTORIES.PROC[i].DISPLAY_AS;
				if (this.data.HISTORIES.PROC[i].COMMENTS.length > 0) {
					histArray[histcnt - 1][1] += '<span id="amb_hist_dot_comment_margin_left" class="pwx-comment-dot-icon" style="padding-bottom:3px;"></span>';
				}
				histArray[histcnt - 1][1] += '</dt><dt class="amb_2_col_srg_value pwx_small_text">' + myHvr[2][1] + '</dt>';
				histArray[histcnt - 1][1] += '</dl>';
				border_type = 'pwx_grey_border-info';
			}
		} else {
			histArray[histcnt - 1][1] += '<dl class="pwx_grey_border_top-info"><dt class="pwx_single_dt_wpad "><span class="res-none">'+this.histI18nObj.NO_RESULT+'</span></dt></dl>';
		}
	}
	/* Family tab content goes here */
	if (this.data.HISTORIES.FAM_HX_DISP_IND == 1) {
		histcnt++
		histArray.length = histcnt;
		histArray[histcnt - 1] = new Array(3);
		if (this.data.HISTORIES.FAMHXCOND.length > 0) {
			histArray[histcnt - 1][0] = '<span id="amb_hist_tab_lbl">'+ this.data.HISTORIES.FAM_HX_TITLE + '</span><span id="amb_hist_cond_total_rec_length" class="pwx_grey amb_custom_rec_none">&nbsp;' + this.data.HISTORIES.FAMHXCOND.length + '</span>' +
				'<span id="amb_hist_family_total_rec_length" class="pwx_grey amb_custom_rec">' + this.data.HISTORIES.FAMHXVIEW.length + '</span></span><span id="familyind" style="display:none">FAMILYIND</span>';
		} else {
			histArray[histcnt - 1][0] = '<span id="amb_hist_tab_lbl">'+ this.data.HISTORIES.FAM_HX_TITLE + '</span><span id="familyind" style="display:none">FAMILYIND</span>';
		}
		histArray[histcnt - 1][2] = this.data.HISTORIES.FAM_HX_SEQ;
		/** Set the Main html string to blank **/
		histArray[histcnt - 1][1] = '';
		if (this.data.HISTORIES.FAM_HX_LINK != "" || this.data.HISTORIES.ADOPTED_FLAG == 1) {
			histArray[histcnt - 1][1] += '<dl class="amb_sub_title_tab_disp">';
			if (this.data.HISTORIES.FAM_HX_LINK != "") {
				histArray[histcnt - 1][1] += '<dt class="pwx_add_icon_dt"><a class="pwx_no_text_decor " title="' +this.histI18nObj.REDIR_FAMILY+'" href="javascript:APPLINK(0,\'Powerchart.exe\',\'/PERSONID=' + this.getProperty("personId") + ' /ENCNTRID=' + this.getProperty("encounterId") + ' /FIRSTTAB=^' + this.data.HISTORIES.FAM_HX_LINK + '^\')">' +
				'<span class="pwx-add-icon">&nbsp;</span></a></dt>';
			}
		}
		histArray[histcnt - 1][1] += '<dt id="ambhistoriesshowfamilyview"><a id="ambhistoriesshowfamilyviewanchor" class="pwx_blue_link ambhistoriesshowfamilyviewanchor" title="'+this.histI18nObj.DISP_FAM+'">'+this.histI18nObj.DISP_FAM+'</a></dt>';
		histArray[histcnt - 1][1] += '<dt id="ambhistoriesshowconditionview"><a id="ambhistoriesshowconditionviewanchor" class="pwx_blue_link ambhistoriesshowconditionviewanchor" title="'+this.histI18nObj.DISP_COND+'">'+this.histI18nObj.DISP_COND+'</a></dt>';
		if (this.data.HISTORIES.TAB_INDEX == 'Family') {
			histArray[histcnt - 1][1] += '<dt class="amb_histories_filterbar_left_icon pwx_pointer" id="amb_clear_histories_tabid_pref_dt_family"><span id="save-ico" title="'+this.histI18nObj.REMOVE_TAB_PREF_TEXT+'" class="pwx-discsave_checkmark-icon" title="'+this.histI18nObj.CLEAR_PREF+'">&nbsp;</span></dt></dl>';
		} else {
			histArray[histcnt - 1][1] += '<dt class="amb_histories_filterbar_left_icon pwx_pointer" id="amb_new_histories_tabids_pref_dt_family"><span id="amb_new_histories_tabids_pref" title="'+this.histI18nObj.SAVE_TEXT+'" class="pwx-discsave-icon">&nbsp;</span></dt></dl>';
		}
		if (this.data.HISTORIES.FAM_HX_LINK != "" || this.data.HISTORIES.ADOPTED_FLAG == 1) {
			var amb_hist_family_hist_neg = '<span id="amb_hist_status_font" class="pwx_grey"> Status: </span><span id="amb_hist_status_font">'+this.histI18nObj.NEG_FAM_HIST+'</span>';
			var amb_hist_family_hist_unable_obtain = '<span id="amb_hist_status_font" class="pwx_grey"> Status: </span><span id="amb_hist_status_font">'+this.histI18nObj.UNABLE_OBTAIN+'</span>';
			var amb_hist_family_hist_unknown = '<span style="font-size:12px;" class="pwx_grey"> Status: </span><span style="font-size:12px;">'+this.histI18nObj.UNKNOWN_FAM_HIST+'</span>';
			if (this.data.HISTORIES.ADOPTED_FLAG == 1 || this.data.HISTORIES.NEGATIVE_FLAG == 1 || this.data.HISTORIES.UNABLE_FLAG == 1 || this.data.HISTORIES.UNKNOWN_FLAG == 1) {
				var border_type = 'pwx_grey_border_top-info';
				histArray[histcnt - 1][1] += '<dl class="' + border_type + '"><dt class="pwx_single_dt_wpad ">';
				var sub_title_cnt = 0;
			}
			if (this.data.HISTORIES.ADOPTED_FLAG == 1) {
				histArray[histcnt - 1][1] += '<span id="ambhistoriesshowfamilyviewfloatstyle">'+this.histI18nObj.PAT_ADOPTED+'</span>';
				sub_title_cnt += 1;
			}
			if (this.data.HISTORIES.NEGATIVE_FLAG == 1) {
				if (sub_title_cnt > 0) {
					histArray[histcnt - 1][1] += '</br>' + amb_hist_family_hist_neg;
				} else {
					histArray[histcnt - 1][1] += amb_hist_family_hist_neg;
					sub_title_cnt += 1;
				}
			}
			if (this.data.HISTORIES.UNABLE_FLAG == 1) {
				if (sub_title_cnt > 0) {
					histArray[histcnt - 1][1] += '</br>' + amb_hist_family_hist_unable_obtain;
				} else {
					histArray[histcnt - 1][1] += amb_hist_family_hist_unable_obtain;
					sub_title_cnt += 1;
				}
			}
			if (this.data.HISTORIES.UNKNOWN_FLAG == 1) {
				if (sub_title_cnt > 0) {
					histArray[histcnt - 1][1] += '</br>' + amb_hist_family_hist_unknown;
				} else {
					histArray[histcnt - 1][1] += amb_hist_family_hist_unknown;
					sub_title_cnt += 1;
				}
			}
			if (this.data.HISTORIES.ADOPTED_FLAG == 1 || this.data.HISTORIES.NEGATIVE_FLAG == 1 || this.data.HISTORIES.UNABLE_FLAG == 1 || this.data.HISTORIES.UNKNOWN_FLAG == 1) {
				histArray[histcnt - 1][1] += '</dt></dl>';
				border_type = 'pwx_grey_border-info';
			}
		}
		histArray[histcnt - 1][1] += '<div id="ambhistoriesshowfamilyviewcontentdiv">';
		// Family view mode
		if (this.data.HISTORIES.FAMHXVIEW.length > 0) {
			if (this.data.HISTORIES.ADOPTED_FLAG != 1) {
				var border_type = 'pwx_grey_border_top-info';
			}
			for (var i = 0; i < this.data.HISTORIES.FAMHXVIEW.length; i++) {
				var ambhistsummhvr = "";
				var fvhtml = '';
				var hvhtml = '';
				/* Pull the family member */
				if (this.data.HISTORIES.FAMHXVIEW[i].MEMBER != "") {
					var amb_hist_member_name = "";
					amb_hist_member_name = this.data.HISTORIES.FAMHXVIEW[i].MEMBER;
				}
				if (this.data.HISTORIES.FAMHXVIEW[i].FAMILY.length > 0) {
					for (var cc = 0; cc < this.data.HISTORIES.FAMHXVIEW[i].FAMILY.length; cc++) {
						fvhtml += this.data.HISTORIES.FAMHXVIEW[i].FAMILY[cc].CONDITION;
						if ((cc + 1) != this.data.HISTORIES.FAMHXVIEW[i].FAMILY.length) {
							fvhtml += ', ';
						} else {
							fvhtml += ' ';
						}
						if (this.data.HISTORIES.FAMHXVIEW[i].FAMILY[cc].CONDITION != "--" && this.data.HISTORIES.FAMHXVIEW[i].FAMILY[cc].REVIEWED_DT != "--"){
							var familyReviewedDt = new Date();
							var familyReviewedDt_text = "--";
							if (this.data.HISTORIES.FAMHXVIEW[i].FAMILY[cc].REVIEWED_DT != '--') {
								familyReviewedDt.setISO8601(this.data.HISTORIES.FAMHXVIEW[i].FAMILY[cc].REVIEWED_DT);
								familyReviewedDt_text = familyReviewedDt.format("shortDate2");
							}
							hvhtml += this.data.HISTORIES.FAMHXVIEW[i].FAMILY[cc].CONDITION + ' <span class="pwx_grey">(' +familyReviewedDt_text + ')</span></br>';
						}else {
							hvhtml += '--';
						}
					}
					var myHvr = new Array(1);
					myHvr[0] = new Array(2);
					myHvr[0][0] = thiz.histI18nObj.COND+":";
					myHvr[0][1] = '' + hvhtml;
					if (this.data.HISTORIES.FAMHXVIEW[i].DECEASED_CD_IND == 1) {
						if (this.data.HISTORIES.FAMHXVIEW[i].DEATH_CAUSE != '') {
							hvrlen = myHvr.length;
							myHvr.length = hvrlen + 1
							myHvr[hvrlen] = new Array(2);
							myHvr[hvrlen][0] = this.histI18nObj.DEATH_CAUSE;
							myHvr[hvrlen][1] = this.data.HISTORIES.FAMHXVIEW[i].DEATH_CAUSE;
						}
						if (this.data.HISTORIES.FAMHXVIEW[i].DEATH_AT_AGE != '') {
							hvrlen = myHvr.length;
							myHvr.length = hvrlen + 1
							myHvr[hvrlen] = new Array(2);
							myHvr[hvrlen][0] = this.histI18nObj.DEATH_AGE;
							myHvr[hvrlen][1] = this.data.HISTORIES.FAMHXVIEW[i].DEATH_AT_AGE + ' ' + this.data.HISTORIES.FAMHXVIEW[i].DEATH_AT_AGE_UNIT;
						}
					}
					familymemberHvrArray.push(myHvr);  
					histArray[histcnt - 1][1] += '<dl id="Familymemberview_hist_row_'+i+'" class="' + border_type + ' hist-info"><dt class="pwx_single_dt_wpad ">';
					histArray[histcnt - 1][1] += '<span id="ambhistoriesshowfamilyviewmembername">' + amb_hist_member_name + '</span> ';
					histArray[histcnt - 1][1] += '<span style="float:left" class="pwx_grey">';
					if (this.data.HISTORIES.FAMHXVIEW[i].PERSON_F_NAME != "" || this.data.HISTORIES.FAMHXVIEW[i].PERSON_AGE !== "0days" || this.data.HISTORIES.FAMHXVIEW[i].PERSON_L_NAME != "") {
						histArray[histcnt - 1][1] += '(';
					}
					if (this.data.HISTORIES.FAMHXVIEW[i].PERSON_F_NAME != "") {
						histArray[histcnt - 1][1] += this.data.HISTORIES.FAMHXVIEW[i].PERSON_F_NAME;
						if (this.data.HISTORIES.FAMHXVIEW[i].PERSON_L_NAME != "" || this.data.HISTORIES.FAMHXVIEW[i].PERSON_AGE !== "0days") {
							histArray[histcnt - 1][1] += ',';
						}
					}
					if (this.data.HISTORIES.FAMHXVIEW[i].PERSON_L_NAME != "") {
						histArray[histcnt - 1][1] += this.data.HISTORIES.FAMHXVIEW[i].PERSON_L_NAME;
						if (this.data.HISTORIES.FAMHXVIEW[i].PERSON_AGE !== "0days") {
							histArray[histcnt - 1][1] += ',';
						}
					}
					if (this.data.HISTORIES.FAMHXVIEW[i].PERSON_AGE !== "0days") {
						histArray[histcnt - 1][1] += this.data.HISTORIES.FAMHXVIEW[i].PERSON_AGE;
					}
					if (this.data.HISTORIES.FAMHXVIEW[i].PERSON_F_NAME != "" || this.data.HISTORIES.FAMHXVIEW[i].PERSON_AGE !== "0days" || this.data.HISTORIES.FAMHXVIEW[i].PERSON_L_NAME != "") {
						histArray[histcnt - 1][1] += ')';
					}
					histArray[histcnt - 1][1] += '</span>';
					if (this.data.HISTORIES.FAMHXVIEW[i].DECEASED_CD_IND == 1) {
						histArray[histcnt - 1][1] += '<span class="pwx_grey" id="ambhistoriesshowfamilyviewdeceaseds">'+this.histI18nObj.DECEASED+'</span>';
					}
					histArray[histcnt - 1][1] += '</br>';
					histArray[histcnt - 1][1] += '<span id="ambhistoriesshowfamilyviewfloatstyle" class="pwx_grey">' + fvhtml + '</span>';
					histArray[histcnt - 1][1] += '</dt></dl>';
					border_type = 'pwx_grey_border-info';
				}
			}
		} else {
			if (this.data.HISTORIES.ADOPTED_FLAG != 1 && this.data.HISTORIES.NEGATIVE_FLAG != 1 && this.data.HISTORIES.UNABLE_FLAG != 1 && this.data.HISTORIES.UNKNOWN_FLAG != 1) {
				histArray[histcnt - 1][1] += '<dl class="pwx_grey_border_top-info"><dt class="pwx_single_dt_wpad "><span class="res-none">'+this.histI18nObj.NO_RESULT+'</span></dt></dl>';
			}
		}
		histArray[histcnt - 1][1] += '</div>';
		histArray[histcnt - 1][1] += '<div id="ambhistoriesshowconditionviewcontentdiv" style="display:none;">';
		//condition view
		if (this.data.HISTORIES.FAMHXCOND.length > 0) {
			if (this.data.HISTORIES.ADOPTED_FLAG != 1) {
				var border_type = 'pwx_grey_border_top-info';
			}
			for (var i = 0; i < this.data.HISTORIES.FAMHXCOND.length; i++) {
				var pastmedhvr = "";
				var fhtml = '';
				/* Pull the family member */
				if (this.data.HISTORIES.FAMHXCOND[i].FAMILY.length > 0) {
					for (var cc = 0; cc < this.data.HISTORIES.FAMHXCOND[i].FAMILY.length; cc++) {
						fhtml += this.data.HISTORIES.FAMHXCOND[i].FAMILY[cc].MEMBER;
						if (this.data.HISTORIES.FAMHXCOND[i].FAMILY[cc].DECEASED_CD_IND == 1) {
							fhtml += ' ('+this.histI18nObj.DECEASED+')';
						}
						if ((cc + 1) != this.data.HISTORIES.FAMHXCOND[i].FAMILY.length) {
							fhtml += ', ';
						} else {
							fhtml += ' ';
						}
					}
					var myHvr = new Array(2);
					myHvr[0] = new Array(2);
					myHvr[0][0] =  this.data.HISTORIES.FAMHXCOND[i].CONDITION + ':';
					myHvr[0][1] = '' + fhtml;
					myHvr[1] = new Array(2);
					myHvr[1][0] = this.histI18nObj.REVIEWED_DATE+":"
					var famReviewedDt = new Date();
					var famReviewedDt_text = "--";
					if (this.data.HISTORIES.FAMHXCOND[i].REVIEWED_DT!= '--') {
						famReviewedDt.setISO8601(this.data.HISTORIES.FAMHXCOND[i].REVIEWED_DT);
						famReviewedDt_text = famReviewedDt.format("shortDate2");
					}
					myHvr[1][1] = famReviewedDt_text;
					familyconditionHvrArray.push(myHvr);					
					histArray[histcnt - 1][1] += '<dl id="Familyconditionview_hist_row_'+i+'" class="' + border_type + ' hist-info"><dt class="pwx_single_dt_wpad">';
					histArray[histcnt - 1][1] += this.data.HISTORIES.FAMHXCOND[i].CONDITION + '(' + this.data.HISTORIES.FAMHXCOND[i].FAMILY.length + ')</span>:&nbsp;&nbsp;';
					histArray[histcnt - 1][1] += '<span style="font-size:12px;float:none" class="pwx_grey">' + fhtml;
					histArray[histcnt - 1][1] += '</span></dt></dl>';
					border_type = 'pwx_grey_border-info';
				}
			}
		} else {
			if (this.data.HISTORIES.ADOPTED_FLAG != 1 && this.data.HISTORIES.NEGATIVE_FLAG != 1 && this.data.HISTORIES.UNABLE_FLAG != 1 && this.data.HISTORIES.UNKNOWN_FLAG != 1) {
				histArray[histcnt - 1][1] += '<dl class="pwx_grey_border_top-info"><dt class="pwx_single_dt_wpad "><span class="res-none">'+this.histI18nObj.NO_RESULT+'</span></dt></dl>';
			}
		}
		histArray[histcnt - 1][1] += '</div>';
	}
	/*Social History*/
	if (this.data.HISTORIES.SOCIAL_HX_DISP_IND == 1 && this.data.HISTORIES.SOCIAL_HX_PRIV_IND == 1) {
		histcnt++
		histArray.length = histcnt;
		var jsoniddetail = 0;
		histArray[histcnt - 1] = new Array(3);
		if (this.data.HISTORIES.SOCIALHX.length > 0) {
			histArray[histcnt - 1][0] = '<span id="amb_hist_tab_lbl">'+ this.data.HISTORIES.SOCIAL_HX_TITLE + '</span><span class="pwx_grey" id="amb_hist_tab_lbl_text_count">&nbsp;' + this.data.HISTORIES.SOCIALHX.length + '</span></span><span id="socialind" style="display:none">SOCIALIND</span>';
		} else {
			histArray[histcnt - 1][0] = '<span id="amb_hist_tab_lbl">'+ this.data.HISTORIES.SOCIAL_HX_TITLE + '</span><span id="socialind" style="display:none">SOCIALIND</span>';
		}
		histArray[histcnt - 1][2] = this.data.HISTORIES.SOCIAL_SEQ;
		histArray[histcnt - 1][1] = '';
		if (this.data.HISTORIES.SOCIAL_HX_LINK != "") {
			histArray[histcnt - 1][1] += '<dl class="amb_sub_title_tab_disp"><dt class="pwx_add_icon_dt"><a class="pwx_no_text_decor " title="'+this.histI18nObj.REDIR_SOCIAL+'" href="javascript:APPLINK(0,\'Powerchart.exe\',\'/PERSONID=' + this.getProperty("personId") + ' /ENCNTRID=' + this.getProperty("encounterId") + ' /FIRSTTAB=^' + this.data.HISTORIES.SOCIAL_HX_LINK + '^\')">' +
			'<span class="pwx-add-icon">&nbsp;</span></a></dt>';
		}
		if (this.data.HISTORIES.TAB_INDEX == 'Social') {
			histArray[histcnt - 1][1] += '<dt class="amb_histories_filterbar_left_icon pwx_pointer" id="amb_clear_histories_tabid_pref_dt_social"><span id="save-ico" title="'+this.histI18nObj.REMOVE_TAB_PREF_TEXT+'" class="pwx-discsave_checkmark-icon">&nbsp;</span>' +
			'</dt></dl>';
		} else {
			histArray[histcnt - 1][1] += '<dt class="amb_histories_filterbar_left_icon pwx_pointer" id="amb_new_histories_tabids_pref_dt_social"><span id="amb_new_histories_tabids_pref" title="'+this.histI18nObj.SAVE_TEXT+'" class="pwx-discsave-icon">&nbsp;</span></dt></dl>';
		}
		if (this.data.HISTORIES.SOCIALHX.length > 0) {
			var border_type = 'pwx_grey_border_top-info';			
			for (var i = 0; i < this.data.HISTORIES.SOCIALHX.length; i++) {
				var pastmedhvr = "";
				var memdhvr = "";
				var cmhtml = '';
				var myHvr = new Array(6);
				myHvr[0] = new Array(2);
				myHvr[0][0] = this.histI18nObj.CATEGORY+ ":";
				myHvr[0][1] = this.data.HISTORIES.SOCIALHX[i].CATEGORY;
				myHvr[1] = new Array(2);
				myHvr[2] = new Array(2);
				myHvr[3] = new Array(2);
				myHvr[4] = new Array(2);
				myHvr[5] = new Array(2);
				// Pull all the comment
				if (this.data.HISTORIES.SOCIALHX[i].COMMENTS.length > 0) {	
					for (var cc = 0; cc < this.data.HISTORIES.SOCIALHX[i].COMMENTS.length; cc++) {
						cmhtml += this.data.HISTORIES.SOCIALHX[i].COMMENTS[cc].COMMENT_TEXT;
						cmhtml += "<br/>";
					}
				} else {
					cmhtml += '--';
				}
				
				myHvr[1][0] = this.histI18nObj.COMMENTS+ ":";
				myHvr[1][1] = cmhtml.substring(0,30);
				myHvr[2][0] = '<span style="display:block;padding-left:15%">'+cmhtml.substring(30)+'</span>';
				myHvr[2][1] = '&nbsp;'
				myHvr[3][0] = this.histI18nObj.REVIEWED_DATE+":"
				var socReviewedDt = new Date();
				var socReviewedDt_text = "--";
				if (this.data.HISTORIES.SOCIALHX[i].REVIEWED_DT!= '--') {
					socReviewedDt.setISO8601(this.data.HISTORIES.SOCIALHX[i].REVIEWED_DT);
					socReviewedDt_text = socReviewedDt.format("shortDate2");
				}
				myHvr[3][1] = socReviewedDt_text;
				myHvr[4][0] = this.histI18nObj.UPDATED_DATE+":"
				var socUpdtDt = new Date();
				var socUpdtDt_text = "--";
				if (this.data.HISTORIES.SOCIALHX[i].UPDATED_DT!= '--') {
					socUpdtDt.setISO8601(this.data.HISTORIES.SOCIALHX[i].UPDATED_DT);
					socUpdtDt_text = socUpdtDt.format("shortDate2");
				}
				myHvr[4][1]= socUpdtDt_text;
				myHvr[5][0] = this.histI18nObj.UPDATED_BY+":"
				myHvr[5][1] = this.data.HISTORIES.SOCIALHX[i].UPDATED_BY;
				socialhxHvrArray.push(myHvr);
				histArray[histcnt - 1][1] += '<dl id="Socialhx_hist_row_'+i+'" class="' + border_type + ' hist-info"><dt class="amb_hist_text_dt_wpad">';
				histArray[histcnt - 1][1] += this.data.HISTORIES.SOCIALHX[i].CATEGORY;
				histArray[histcnt - 1][1] += '</span>';
				if (this.data.HISTORIES.SOCIALHX[i].COMMENTS.length > 0) {
					histArray[histcnt - 1][1] += '<span id="amb_hist_dot_comment_margin_left" class="pwx-comment-dot-icon" style="padding-bottom:3px;"></span>';
				}
				histArray[histcnt - 1][1] += '</dt>';
				histArray[histcnt - 1][1] += '</dl>'; 
				border_type = 'pwx_grey_border-info';
				if (this.data.HISTORIES.SOCIALHX[i].RISK_ASSESSMENT != "") {
					histArray[histcnt - 1][1] += '<dl id="Socialhx_hist_row_'+i+'" class="' + border_type + ' hist-info"><dt class="amb_hist_text_dt_wpad">';
					histArray[histcnt - 1][1] += '<span id="amb_hist_soc_risk_assessment" class="pwx_grey">' + this.data.HISTORIES.SOCIALHX[i].RISK_ASSESSMENT;
					histArray[histcnt - 1][1] += '</span></dt>';
					histArray[histcnt - 1][1] += '</dl>';
					border_type = 'pwx_grey_border-info';
				}				
				if (this.data.HISTORIES.SOCIALHX[i].SHX_DETAILS.length > 0) {
				    var memdetail = '';                    
					for (var cc = 0; cc < this.data.HISTORIES.SOCIALHX[i].SHX_DETAILS.length; cc++) {
						var memhtml = '';
						var dhtml = '';
						dhtml += this.data.HISTORIES.SOCIALHX[i].SHX_DETAILS[cc].DETAIL_TEXT;
						if (this.data.HISTORIES.SOCIALHX[i].SHX_DETAILS[cc].DETAIL_TEXT.length >= 50) {
							memhtml += this.data.HISTORIES.SOCIALHX[i].SHX_DETAILS[cc].DETAIL_TEXT.substring(0, 50);
							memhtml += '...';
						} else {
							memhtml += this.data.HISTORIES.SOCIALHX[i].SHX_DETAILS[cc].DETAIL_TEXT;
						} 
                        var myHvr = new Array(7);
					    myHvr[0] = new Array(2);
                        myHvr[0][0] = 'Category :';
					    myHvr[0][1] = this.data.HISTORIES.SOCIALHX[i].CATEGORY;
					    myHvr[1] = new Array(2);
					    myHvr[2] = new Array(2);
					    myHvr[3] = new Array(2);
					    myHvr[4] = new Array(2);
					    myHvr[5] = new Array(2);						
						myHvr[6] = new Array(2);
						myHvr[1][0] = this.histI18nObj.DETAILS+ ":";
						myHvr[1][1] = dhtml;
						myHvr[2][0] = this.histI18nObj.COMMENTS+ ":";
						myHvr[2][1] = cmhtml.substring(0,30);
						myHvr[3][0] = '<span style="display:block;padding-left:14%">'+cmhtml.substring(30)+'</span>';
						myHvr[3][1] = '&nbsp;'
						
						myHvr[4][0] = this.histI18nObj.REVIEWED_DATE+ ":";
						var socHistReviewedDt = new Date();
						var socHistReviewedDt_text = "--";
						if (this.data.HISTORIES.SOCIALHX[i].REVIEWED_DT.REVIEWED_DT!= '--') {
							socHistReviewedDt.setISO8601(this.data.HISTORIES.SOCIALHX[i].REVIEWED_DT);
							socHistReviewedDt_text = socHistReviewedDt.format("shortDate2");
						}
						myHvr[4][1] = socHistReviewedDt_text;
						myHvr[5][0] = this.histI18nObj.UPDATED_DATE+ ":";
						var socHistUpdatedDt = new Date();
						var socHistUpdatedDt_text = "--";
						if (this.data.HISTORIES.SOCIALHX[i].UPDATED_DT!= '--') {
							socHistUpdatedDt.setISO8601(this.data.HISTORIES.SOCIALHX[i].UPDATED_DT);
							socHistUpdatedDt_text = socHistUpdatedDt.format("shortDate2");
						}
						myHvr[5][1] = socHistUpdatedDt_text;
						myHvr[6][0] = this.histI18nObj.UPDATED_BY+ ":";
						myHvr[6][1] = this.data.HISTORIES.SOCIALHX[i].UPDATED_BY;	
						socialHvrArray.push(myHvr);					
						memhtml += "<br/>";
						histArray[histcnt - 1][1] += '<dl id="Social_hist_row_'+jsoniddetail+'" class="' + border_type + ' hist-info"><dt class="amb_single_dt_sc_wpad"><span class="pwx_small_text">';
						histArray[histcnt - 1][1] += memhtml;
						histArray[histcnt - 1][1] += '</span></dt></dl>';
                        jsoniddetail = jsoniddetail + 1;                       					
					}  				
				}				
			}
		} else {
			histArray[histcnt - 1][1] += '<dl class="pwx_grey_border_top-info"><dt class="pwx_single_dt_wpad "><span class="res-none">'+this.histI18nObj.NO_RESULT+'</span></dt></dl>';
		}
	}
	/*Pregnacy History*/
	if (this.data.HISTORIES.OB_DISP_IND == 1 && this.data.HISTORIES.GENDER_IND == 1) {
		histcnt++
		histArray.length = histcnt;
		histArray[histcnt - 1] = new Array(3);
		if (this.data.HISTORIES.OBLIST.length > 0) {
			histArray[histcnt - 1][0] = '<span id="amb_hist_tab_lbl">'+ this.data.HISTORIES.OB_TITLE + '</span><span class="pwx_grey" id="amb_hist_tab_lbl_text_count">&nbsp;' + this.data.HISTORIES.OBLIST.length + '</span></span><span id="obind" style="display:none">OBIND</span>';
		} else {
			histArray[histcnt - 1][0] = '<span id="amb_hist_tab_lbl">'+ this.data.HISTORIES.OB_TITLE + '</span><span id="obind" style="display:none">OBIND</span>';
		}
		histArray[histcnt - 1][2] = this.data.HISTORIES.OB_SEQ;
		histArray[histcnt - 1][1] = '';
		if (this.data.HISTORIES.OB_LINK != '') {
			histArray[histcnt - 1][1] += '<dl class="amb_sub_title_tab_disp"><dt class="pwx_add_icon_dt"><a class="pwx_no_text_decor " title="'+this.histI18nObj.REDIR_OB+'" href="javascript:APPLINK(0,\'Powerchart.exe\',\'/PERSONID=' + this.getProperty("personId") + ' /ENCNTRID=' + this.getProperty("encounterId") + ' /FIRSTTAB=^' + this.data.HISTORIES.OB_LINK + '^\')">' +
			'<span class="pwx-add-icon">&nbsp;</span></a>';
		}
		histArray[histcnt - 1][1] += '<span style="padding-left:20px;">' + this.data.HISTORIES.OB_GRAV_PARA + '</span>';
		histArray[histcnt - 1][1] += '</dt>';
		if (this.data.HISTORIES.TAB_INDEX == 'OB') {
			histArray[histcnt - 1][1] += '<dt class="amb_histories_filterbar_left_icon pwx_pointer" id="amb_clear_histories_tabid_pref_dt_ob"><span id="save-ico" title="'+this.histI18nObj.REMOVE_TAB_PREF_TEXT+'" class="pwx-discsave_checkmark-icon">&nbsp;</span>' +
			'</dt></dl>';
		} else {
			histArray[histcnt - 1][1] += '<dt class="amb_histories_filterbar_left_icon pwx_pointer" id="amb_new_histories_tabids_pref_dt_ob"><span id="amb_new_histories_tabids_pref" title="'+this.histI18nObj.SAVE_TEXT+'" class="pwx-discsave-icon">&nbsp;</span></dt></dl>';
		}
		if (this.data.HISTORIES.OBLIST.length > 0) {
			var border_type = 'pwx_grey_border_top-info';
			var obindex = 0;
			for (var i = 0; i < this.data.HISTORIES.OBLIST.length; i++) {
				var pastmedhvr = "";
				var flaghtml = '';
				if (this.data.HISTORIES.OBLIST[i].SENSITIVE_IND == 1) {
					flaghtml += '<span class="pwx-redflag-icon"></span>';
				}
				histArray[histcnt - 1][1] += '<dl class="ambnopad-info"><dt class="pwx_single_sub_sec_dt"><a id="pwx' + i + '_reg_preg_title" class="pwx_sub_sec_link" title="'+ this.histI18nObj.COLLAPSE +'" onclick="pwx_expand_collapse_scroll(\'pwx' + i + '_reg_preg_rows\',\'pwx' + i + '_reg_preg_title\',\'pwx' + i + '_reg_preg_tgl\',\'amb_hist_summ_scroll_div\',' + scrollsetting + ')">' +
				'<h3 class="sub-sec-hd"><span id="pwx' + i + '_reg_preg_tgl" class="pwx-sub-sec-hd-tgl">-</span>';
				histArray[histcnt - 1][1] += flaghtml + '<span class="pwx_header_black">'+this.histI18nObj.PREGNANCY +'#'+ (i + 1) + '</span></h3></a></dt></dl>' +
				'<div id="pwx' + i + '_reg_preg_rows" style="display:block">';
				if (this.data.HISTORIES.OBLIST[i].CHILD.length > 0) {
					for (var cc = 0; cc < this.data.HISTORIES.OBLIST[i].CHILD.length; cc++) {
						var myhvr = new Array(17);
						myhvr[0] = new Array(2);
						myhvr[1] = new Array(2);
						myhvr[2] = new Array(2);
						myhvr[3] = new Array(2);
						myhvr[4] = new Array(2);
						myhvr[5] = new Array(2);
						myhvr[6] = new Array(2);
						myhvr[7] = new Array(2);
						myhvr[8] = new Array(2);
						myhvr[9] = new Array(2);
						myhvr[10] = new Array(2);
						myhvr[11] = new Array(2);
						myhvr[12] = new Array(2);
						myhvr[13] = new Array(2);
						myhvr[14] = new Array(2);
						myhvr[15] = new Array(2);
						myhvr[16] = new Array(2);
						myhvr[0][0] = this.histI18nObj.DELIVERY_DATE+ ":";	
						var temp_dlv_dt = new Date()
						var temp_dlv_dt_text = ""
						var dlv_date = ""
						if(this.data.HISTORIES.OBLIST[i].CHILD[cc].DLV_DATE!="--")
						{
							temp_dlv_dt.setISO8601(this.data.HISTORIES.OBLIST[i].CHILD[cc].DLV_DATE)
							temp_dlv_dt_text = temp_dlv_dt.format("shortDate2")
							if(this.data.HISTORIES.OBLIST[i].CHILD[cc].DLV_DATE_PRECISION_FLG == 0)
							{
								dlv_date = temp_dlv_dt_text;
							}
							else if(this.data.HISTORIES.OBLIST[i].CHILD[cc].DLV_DATE_PRECISION_FLG == 1)
							{
								dlv_date = temp_dlv_dt_text.substring(0,temp_dlv_dt_text.indexOf('/'))+temp_dlv_dt_text.substring(temp_dlv_dt_text.lastIndexOf('/'))
							}
							else if(this.data.HISTORIES.OBLIST[i].CHILD[cc].DLV_DATE_PRECISION_FLG == 2)
							{
								dlv_date = temp_dlv_dt_text.substring(temp_dlv_dt_text.lastIndexOf('/')+1)
							}
						}
						
						myhvr[0][1] = dlv_date;
						myhvr[1][0] = this.histI18nObj.DELIVERY_HOSPITAL+ ":";
						myhvr[1][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].DLV_HOSP;
						myhvr[2][0] = this.histI18nObj.CHILD_GENDER+ ":";
						myhvr[2][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].CHILD_GENDER;
						myhvr[3][0] = this.histI18nObj.GEST_BIRTH+ ":";
						myhvr[3][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].GEST_AT_BIRTH;
						myhvr[4][0] = this.histI18nObj.INFANT_WEIGHT+ ":";
						myhvr[4][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].INFANT_WT;
						myhvr[5][0] = this.histI18nObj.CHILD_NAME+ ":";
						myhvr[5][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].CHILD_NAME;
						myhvr[6][0] = this.histI18nObj.FATHER_NAME+ ":";
						myhvr[6][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].FATHER_NAME;
						myhvr[7][0] = this.histI18nObj.NEONATE_OUTCOME+ ":";
						myhvr[7][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].NEONATE_OUTCOME;
						myhvr[8][0] = this.histI18nObj.LABOR_LEN+ ":";
						myhvr[8][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].LENGTH_LABOR;
						myhvr[9][0] = this.histI18nObj.PREGNANCY_OUTCOME+ ":";
						myhvr[9][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].PREG_OUTCOME;
						myhvr[10][0] = this.histI18nObj.ANES_TYPE+ ":";
						myhvr[10][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].ANESTH_TYPE;
						myhvr[11][0] = this.histI18nObj.PRETERM_LABOR+ ":";
						myhvr[11][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].PRETERM_LABOR;
						myhvr[12][0] = this.histI18nObj.FETAL_COMPLICATIONS+ ":";
						myhvr[12][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].FETAL_COMPLIC;
						myhvr[13][0] = this.histI18nObj.NEONATE_COMPLICATIONS+ ":";
						myhvr[13][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].NEONATE_COMPLIC;
						myhvr[14][0] = this.histI18nObj.MATERNAL_COMPLICATIONS+ ":";
						myhvr[14][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].MATERNAL_COMPLIC;
						myhvr[15][0] = this.histI18nObj.MATERNAL_COMMENTS+ ":";
						myhvr[15][1] = this.data.HISTORIES.OBLIST[i].CHILD[cc].CHILD_COMMENT.substring(0,24)
						myhvr[16][0] = '<span style="display:block;padding-left:15%">'+this.data.HISTORIES.OBLIST[i].CHILD[cc].CHILD_COMMENT.substring(24)+'</span>';
						myhvr[16][1] = '&nbsp;'

						obHvrArray.push(myhvr);						
						histArray[histcnt - 1][1] += '<dl id="OB_hist_row_'+obindex+'" class="' + border_type + ' hist-info"><dt class="amb_hist_text_dt_wpad">';
						histArray[histcnt - 1][1] += this.histI18nObj.BABY + (cc + 1);
						if (this.data.HISTORIES.OBLIST[i].CHILD[cc].CHILD_COMMENT != '--') {
							histArray[histcnt - 1][1] += '<span id="amb_hist_dot_comment_margin_left" class="pwx-comment-dot-icon" style="padding-bottom:3px;"></span>';
						}
						histArray[histcnt - 1][1] += ' :  <span class="pwx_grey">' + myhvr[0][1] + ', ' + myhvr[7][1] + ', ' + myhvr[9][1] + ', ' + myhvr[3][1] + '</span>'
						histArray[histcnt - 1][1] += '</dt>';
						histArray[histcnt - 1][1] += '</dl>' ;
                        obindex = obindex + 1;
					}
				} else {
					histArray[histcnt - 1][1] += '<dl class="pwx_grey_border_top-info"><dt class="pwx_single_dt_wpad "><span class="res-none">'+this.histI18nObj.NO_RESULT+'</span></dt></dl>';
				}
				histArray[histcnt - 1][1] += '</div>';
			}
		} else {
			histArray[histcnt - 1][1] += '<dl class="pwx_grey_border_top-info"><dt class="pwx_single_dt_wpad "><span class="res-none">'+this.histI18nObj.NO_RESULT+'</span></dt></dl>';
		}
	}
	histHTML = '<h3 class="info-hd">'+this.histI18nObj.HIST_SUMMARY+'</h3><div class="pwx_div_scroll" id="amb_hist_summ_scroll_div">' + pwx_create_tabs(histArray, histtabid) + '</div>';
	element.innerHTML = histHTML;
	switch (this.data.HISTORIES.TAB_INDEX) {
	case "PMH":
		$('#' + histtabid).tabs();
		$('#ambhisttabs ul li span:contains(PMHIND)').parents('li').each(function () {
			$('#' + histtabid).tabs({
				selected : $(this).index()
			});
		});
		break;
	case "Surgery":
		$('#' + histtabid).tabs();
		$('#ambhisttabs ul li span:contains(SURGERYIND)').parents('li').each(function () {
			$('#' + histtabid).tabs({
				selected : $(this).index()
			});
		});
		break;
	case "Family":
		$('#' + histtabid).tabs();
		$('#ambhisttabs ul li span:contains(FAMILYIND)').parents('li').each(function () {
			$('#' + histtabid).tabs({
				selected : $(this).index()
			});
		});
		break;
	case "Social":
		$('#' + histtabid).tabs();
		$('#ambhisttabs ul li span:contains(SOCIALIND)').parents('li').each(function () {
			$('#' + histtabid).tabs({
				selected : $(this).index()
			});
		});
		break;
	case "OB":
		$('#' + histtabid).tabs();
		$('#ambhisttabs ul li span:contains(OBIND)').parents('li').each(function () {
			$('#' + histtabid).tabs({
				selected : $(this).index()
			});
		});
		break;
	default:
		$('#' + histtabid).tabs();
	}
	var hist_content_div = $('#amb_hist_summ_scroll_div');
	hist_content_div.off("click", "a.ambhistoriesshowfamilyviewanchor");
	hist_content_div.on("click", "a.ambhistoriesshowfamilyviewanchor", function (event) {
		$('#amb_hist_cond_total_rec_length').hide();
		$('#amb_hist_family_total_rec_length').show();
		$('#ambhistoriesshowfamilyview').hide();
		$('#ambhistoriesshowfamilyviewcontentdiv').show();
		$('#ambhistoriesshowconditionviewcontentdiv').hide();
		$('#ambhistoriesshowconditionview').show();
	});

	hist_content_div.off("click", "a.ambhistoriesshowconditionviewanchor");
	hist_content_div.on("click", "a.ambhistoriesshowconditionviewanchor", function (event) {
		$('#amb_hist_cond_total_rec_length').show();
		$('#amb_hist_family_total_rec_length').hide();
		$('#ambhistoriesshowconditionview').hide();
		$('#ambhistoriesshowconditionviewcontentdiv').show();
		$('#ambhistoriesshowfamilyviewcontentdiv').hide();
		$('#ambhistoriesshowfamilyview').show();
	});
	

	var elementMap = {};
		// remove event if there is any
	hist_content_div.off("mouseenter","dl.hist-info");
	hist_content_div.off("mouseleave","dl.hist-info");
		// attach event
	hist_content_div.on("mouseenter", "dl.hist-info", function (event) {
	    var anchor = this;
		$(this).css("background-color","#FFC")
		var anchorId = $(this).attr("id");
		//If there is a hover class specified, add it to the element
		$(this).addClass("mpage-tooltip-hover");
		if (!elementMap[anchorId]) {
		elementMap[anchorId] = {};
		}
		//Store of a flag that we're hovered inside this element
		elementMap[anchorId].TIMEOUT = setTimeout(function () {
			var Historieshvr = [];
			Historieshvr.push('<div class="result-details">');
			var jsonId = $(anchor).attr("id").split("_"); 
			switch (jsonId[0]) {
			case "pmh":
				var ambindexarray = pmhHvrArray[jsonId[3]];
				for (var i = 0; i < ambindexarray.length; i++) {
					Historieshvr.push('<dl class="Histories-det">',
        		'<dt><span>' + ambindexarray[i][0] + '</span></dt><dd><span>' + ambindexarray[i][1] + '</span></dd></dl>');
				}
			break;
			case "Surgery":
				var surgicalindexarray = surgicalHvrArray[jsonId[3]];
				for (var i = 0; i < surgicalindexarray.length; i++) {
					Historieshvr.push('<dl class="Histories-det">',
        		'<dt><span>' + surgicalindexarray[i][0] + '</span></dt><dd><span>' + surgicalindexarray[i][1] + '</span></dd></dl>');
				}
			break;
			case "Familymemberview":
				var familymemberviewindexarray = familymemberHvrArray[jsonId[3]];
				for (var i = 0; i < familymemberviewindexarray.length; i++) {
					Historieshvr.push('<dl class="Histories-det">',
        		'<dt><span>' + familymemberviewindexarray[i][0] + '</span></dt><dd><span>' + familymemberviewindexarray[i][1] + '</span></dd></dl>');
				}
			break;
			case "Familyconditionview":
				var familyconditionviewindexarray = familyconditionHvrArray[jsonId[3]];
				for (var i = 0; i < familyconditionviewindexarray.length; i++) {
					Historieshvr.push('<dl class="Histories-det">',
        		'<dt><span>' + familyconditionviewindexarray[i][0] + '</span></dt><dd><span>' + familyconditionviewindexarray[i][1] + '</span></dd></dl>');
				}
				break;
			case "Socialhx":
				var socialhxviewindexarray = socialhxHvrArray[jsonId[3]];
				for (var i = 0; i < socialhxviewindexarray.length; i++) {
					Historieshvr.push('<dl class="Histories-det">',
        		'<dt><span>' + socialhxviewindexarray[i][0] + '</span></dt><dd><span>' + socialhxviewindexarray[i][1] + '</span></dd></dl>');
				}
			break; 			
			case "Social":
				var socialviewindexarray = socialHvrArray[jsonId[3]];				
				for (var i = 0; i < socialviewindexarray.length; i++) {
					Historieshvr.push('<dl class="Histories-det">',
        		'<dt><span>' + socialviewindexarray[i][0] + '</span></dt><dd><span>' + socialviewindexarray[i][1] + '</span></dd></dl>');
				}
			break;
			case "OB":
				var obindexarray = obHvrArray[jsonId[3]];
				for (var i = 0; i < obindexarray.length; i++) {
					Historieshvr.push('<dl class="Histories-det">',
        		'<dt><span>' + obindexarray[i][0] + '</span></dt><dd><span>' + obindexarray[i][1] + '</span></dd></dl>');
				}
			break;	 
			}
			 //Create a new tooltip
			Historieshvr.push('</div>');
			var Historieshvrtooltip = new MPageTooltip();
			Historieshvrtooltip.setX(event.pageX).setY(event.pageY).setAnchor(anchor).setContent(Historieshvr.join(""));
			Historieshvrtooltip.show();
			$('html').css('overflow', 'hidden');
		}, 500);
	});
	hist_content_div.on("mouseleave", "dl.hist-info", function (event) {
		$(this).css("background-color","#FFF")
		$(this).removeClass("mpage-tooltip-hover");
		clearTimeout(elementMap[$(this).attr("id")].TIMEOUT);
	});	
	hist_content_div.on("click", "dt.pwx_pointer", function (event) {
		var tab_id = $(this).attr('id');
		var index = '';
		var amb_clear_histories_tabid_pref_dt = '';
		var amb_new_histories_tabids_pref_dt = ''
		
		if(tab_id.indexOf("pmh")!=-1)
		{
			if(tab_id.indexOf("new")!=-1){
				index = 'PMH';
			}
			amb_clear_histories_tabid_pref_dt = 'amb_clear_histories_tabid_pref_dt_pmh';
			amb_new_histories_tabids_pref_dt = 'amb_new_histories_tabids_pref_dt_pmh';
		}
		else if(tab_id.indexOf("surgery")!=-1)
		{
			if(tab_id.indexOf("new")!=-1){
				index = 'Surgery';
			}
			amb_clear_histories_tabid_pref_dt = 'amb_clear_histories_tabid_pref_dt_surgery';
			amb_new_histories_tabids_pref_dt = 'amb_new_histories_tabids_pref_dt_surgery';
		}
		else if(tab_id.indexOf("family")!=-1)
		{
			if(tab_id.indexOf("new")!=-1){
				index = 'Family';
			}
			amb_clear_histories_tabid_pref_dt = 'amb_clear_histories_tabid_pref_dt_family';
			amb_new_histories_tabids_pref_dt = 'amb_new_histories_tabids_pref_dt_family';
		}
		else if(tab_id.indexOf("social")!=-1)
		{
			if(tab_id.indexOf("new")!=-1){
				index = 'Social';
			}
			amb_clear_histories_tabid_pref_dt = 'amb_clear_histories_tabid_pref_dt_social';
			amb_new_histories_tabids_pref_dt = 'amb_new_histories_tabids_pref_dt_social';
		}
		else if(tab_id.indexOf("ob")!=-1)
		{
			if(tab_id.indexOf("new")!=-1){
				index = 'OB';
			}
			amb_clear_histories_tabid_pref_dt = 'amb_clear_histories_tabid_pref_dt_ob';
			amb_new_histories_tabids_pref_dt = 'amb_new_histories_tabids_pref_dt_ob';
		}
		PWX_CCL_Request_User_Pref('pwx_mp_maintain_user_prefs', pid, "PWX_MPAGE_HISTORY_TAB_ID", index, true)
		if(tab_id.indexOf("new")!=-1){
			pwx_histories_previous_tabid_check(pid);
		}
		pwx_histories_tabid_pref_save(amb_clear_histories_tabid_pref_dt, amb_new_histories_tabids_pref_dt, index, pid)
	});	
    var pwxdivh = hist_content_div.height();
	if (pwxdivh > scrollsetting) {
		var div_height = scrollsetting + 'px';
		hist_content_div.css("height", div_height);
	} 

	//Added timeout for component loading
	setTimeout(function () {
		hist_content_div.find('a').bind('click', function () {
			var pwxdivh = hist_content_div.height();
		    if (pwxdivh > scrollsetting) {
				var div_height = scrollsetting + 'px';				
				hist_content_div.css("height", div_height);
			}
		});
	}, 0);
	
	function pwx_histories_previous_tabid_check(pid) {
		if ($('span').hasClass('pwx-discsave_checkmark-icon')) {
			var amb_clear_histories_tabid_back_id = $('span#save-ico').closest("dt").attr("id");
			if (('#' + amb_clear_histories_tabid_back_id).indexOf('pmh') >= 0) {
				var amb_clear_histories_tabid_back_id = 'amb_clear_histories_tabid_pref_dt_pmh';
				var amb_new_histories_tabid_back_id = 'amb_new_histories_tabids_pref_dt_pmh';
				var index = 'PMH';
				amb_histories_check_previous_icon(amb_clear_histories_tabid_back_id, amb_new_histories_tabid_back_id, index, pid);
			} else if (('#' + amb_clear_histories_tabid_back_id).indexOf('surgery') >= 0) {
				var amb_clear_histories_tabid_back_id = 'amb_clear_histories_tabid_pref_dt_surgery';
				var amb_new_histories_tabid_back_id = 'amb_new_histories_tabids_pref_dt_surgery';
				var index = 'Surgery';
				amb_histories_check_previous_icon(amb_clear_histories_tabid_back_id, amb_new_histories_tabid_back_id, index, pid);
			} else if (('#' + amb_clear_histories_tabid_back_id).indexOf('family') >= 0) {
				var amb_clear_histories_tabid_back_id = 'amb_clear_histories_tabid_pref_dt_family';
				var amb_new_histories_tabid_back_id = 'amb_new_histories_tabids_pref_dt_family';
				var index = 'Family';
				amb_histories_check_previous_icon(amb_clear_histories_tabid_back_id, amb_new_histories_tabid_back_id, index, pid);
			} else if (('#' + amb_clear_histories_tabid_back_id).indexOf('social') >= 0) {
				var amb_clear_histories_tabid_back_id = 'amb_clear_histories_tabid_pref_dt_social';
				var amb_new_histories_tabid_back_id = 'amb_new_histories_tabids_pref_dt_social';
				var index = 'Social';
				amb_histories_check_previous_icon(amb_clear_histories_tabid_back_id, amb_new_histories_tabid_back_id, index, pid);
			} else if (('#' + amb_clear_histories_tabid_back_id).indexOf('ob') >= 0) {
				var amb_clear_histories_tabid_back_id = 'amb_clear_histories_tabid_pref_dt_ob';
				var amb_new_histories_tabid_back_id = 'amb_new_histories_tabids_pref_dt_ob';
				var index = 'OB';
				amb_histories_check_previous_icon(amb_clear_histories_tabid_back_id, amb_new_histories_tabid_back_id, index, pid);
			}
		}
	}
	function amb_histories_check_previous_icon(amb_clear_histories_tabid_back_id, amb_new_histories_tabid_back_id, index, pid) {
	$('#' + amb_clear_histories_tabid_back_id).unbind('click');
	$('#' + amb_clear_histories_tabid_back_id).html("").attr("id", amb_new_histories_tabid_back_id);
	$('#' + amb_new_histories_tabid_back_id).html('<span id=' + amb_new_histories_tabid_back_id + ' title="Save or override tab as default" class="pwx-discsave-icon pwx_pointer_cursor">&nbsp;</span>');
	$('#' + amb_new_histories_tabid_back_id).bind('click', {
		indexvalue : index,
		Personid : pid
	}, function (event) {
		var index = event.data.indexvalue;
		var pid = event.data.Personid;
		PWX_CCL_Request_User_Pref('pwx_mp_maintain_user_prefs', pid, "PWX_MPAGE_HISTORY_TAB_ID", index, true)
		pwx_histories_tabid_pref_save(amb_clear_histories_tabid_back_id, amb_new_histories_tabid_back_id, index, pid)
	});
}
	function PWX_CCL_Request_User_Pref(program, param1, param2, param3, async) {
		var info = new XMLCclRequest();
		info.onreadystatechange = function () {
			if (info.readyState == 4 && info.status == 200) {
				var jsonEval = JSON.parse(this.responseText);
				var recordData = jsonEval.JSON_RETURN;
				//alert(JSON.stringify(jsonEval));
				if (recordData.STATUS_DATA.STATUS != "S") {
					var error_text = this.histI18nObj.ERROR_TEXT_SEG1+": " + this.status + " " + this.histI18nObj.ERROR_TEXT_SEG2 + " :" + this.requestText;
					MP_ModalDialog.deleteModalDialogObject("pwxerrormodal")
					var pwxerrorModalobj = new ModalDialog("pwxerrormodal")
						.setHeaderTitle('<span class="pwx_alert">'+this.histI18nObj.ERROR_TEXT_SEG3+'</span>')
						.setTopMarginPercentage(20)
						.setRightMarginPercentage(35)
						.setBottomMarginPercentage(30)
						.setLeftMarginPercentage(35)
						.setIsBodySizeFixed(true)
						.setHasGrayBackground(true)
						.setIsFooterAlwaysShown(true);
					pwxerrorModalobj.setBodyDataFunction(
						function (modalObj) {
						modalObj.setBodyHTML('<div style="padding-top:10px;"><p class="pwx_small_text">' + error_text + '</p></div>');
					});
					var closebtn = new ModalButton("addCancel");
					closebtn.setText("OK").setCloseOnClick(true);
					pwxerrorModalobj.addFooterButton(closebtn)
					MP_ModalDialog.addModalDialogObject(pwxerrorModalobj);
					MP_ModalDialog.showModalDialog("pwxerrormodal")
				}
			}
		};
		var sendArr = ["^MINE^", param1 + ".0", "^" + param2 + "^", "^" + param3 + "^"];
		info.open('GET', program, async);
		info.send(sendArr.join(","));
	}
	function pwx_histories_tabid_pref_save(amb_clear_histories_tabid_pref_dt, amb_new_histories_tabids_pref_dt, index, pid) {
		if ($('#' + amb_clear_histories_tabid_pref_dt).length > 0) {
			$('#' + amb_clear_histories_tabid_pref_dt).unbind('click');
			$('#' + amb_clear_histories_tabid_pref_dt).html("").attr("id", amb_new_histories_tabids_pref_dt);
			$('#' + amb_new_histories_tabids_pref_dt).html('<span id=' + amb_new_histories_tabids_pref_dt + ' title="'+thiz.histI18nObj.SAVE_TEXT+'" class="pwx-discsave-icon pwx_pointer_cursor">&nbsp;</span>');
			$('#' + amb_new_histories_tabids_pref_dt).bind('click', {
				indexvalue : index,
				Personid : pid
			}, function (event) {
				var index = event.data.indexvalue;
				var pid = event.data.Personid;
				PWX_CCL_Request_User_Pref('pwx_mp_maintain_user_prefs', pid, "PWX_MPAGE_HISTORY_TAB_ID", index, true)
				pwx_histories_tabid_pref_save(amb_clear_histories_tabid_pref_dt, amb_new_histories_tabids_pref_dt, index, pid)
			});
		} else if ($('#' + amb_new_histories_tabids_pref_dt).length > 0) {
			if ($('span').hasClass('pwx-discsave_checkmark-icon')) {
				var pwx_clear_histories_tabid_back_id = $('span#save-ico').closest("dt").attr("id");
				if (('#' + pwx_clear_histories_tabid_back_id).indexOf('pmh') >= 0) {
					var pwx_clear_histories_tabid_back_id = 'amb_clear_histories_tabid_pref_dt_pmh';
					var pwx_new_histories_tabid_back_id = 'amb_new_histories_tabids_pref_dt_pmh';
					var index = 'PMH';
				} else if (('#' + pwx_clear_histories_tabid_back_id).indexOf('surgery') >= 0) {
					var pwx_clear_histories_tabid_back_id = 'amb_clear_histories_tabid_pref_dt_surgery';
					var pwx_new_histories_tabid_back_id = 'amb_new_histories_tabids_pref_dt_surgery';
					var index = 'Surgery';
				} else if (('#' + pwx_clear_histories_tabid_back_id).indexOf('family') >= 0) {
					var pwx_clear_histories_tabid_back_id = 'amb_clear_histories_tabid_pref_dt_family';
					var pwx_new_histories_tabid_back_id = 'amb_new_histories_tabids_pref_dt_family';
					var index = 'Family';
				} else if (('#' + pwx_clear_histories_tabid_back_id).indexOf('social') >= 0) {
					var pwx_clear_histories_tabid_back_id = 'amb_clear_histories_tabid_pref_dt_social';
					var pwx_new_histories_tabid_back_id = 'amb_new_histories_tabids_pref_dt_social';
					var index = 'Social';
				} else if (('#' + pwx_clear_histories_tabid_back_id).indexOf('ob') >= 0) {
					var pwx_clear_histories_tabid_back_id = 'amb_clear_histories_tabid_pref_dt_ob';
					var pwx_new_histories_tabid_back_id = 'amb_new_histories_tabids_pref_dt_ob';
					var index = 'OB';
				}
				$('#' + pwx_clear_histories_tabid_back_id).unbind('click');
				$('#' + pwx_clear_histories_tabid_back_id).html("").attr("id", pwx_new_histories_tabid_back_id);
				$('#' + pwx_new_histories_tabid_back_id).html('<span id=' + pwx_new_histories_tabid_back_id + ' title="'+thiz.histI18nObj.SAVE_TEXT+'" class="pwx-discsave-icon pwx_pointer_cursor">&nbsp;</span>');
				$('#' + pwx_new_histories_tabid_back_id).bind('click', {
					indexvalue : index,
					Personid : pid
				}, function (event) {
					var index = event.data.indexvalue;
					var pid = event.data.Personid;
					PWX_CCL_Request_User_Pref('pwx_mp_maintain_user_prefs', pid, "PWX_MPAGE_HISTORY_TAB_ID", index, true)
					pwx_histories_tabid_pref_save(pwx_clear_histories_tabid_back_id, pwx_new_histories_tabid_back_id, index, pid)
				});
			}
			$('#' + amb_new_histories_tabids_pref_dt).unbind('click').html("").attr("id", amb_clear_histories_tabid_pref_dt);
			//$('#'+amb_clear_histories_tabid_pref_dt).find("span").css("background-color","red");
			var historiesiconHTML = '<span id="save-ico" class="pwx-discsave_checkmark-icon" title="'+thiz.histI18nObj.REMOVE_TAB_PREF_TEXT+'">&nbsp;</span>';
			$('#' + amb_clear_histories_tabid_pref_dt).html(historiesiconHTML);
			$('#' + amb_clear_histories_tabid_pref_dt).bind('click', {
				indexvalue : index,
				Personid : pid
			}, function () {
				PWX_CCL_Request_User_Pref('pwx_mp_maintain_user_prefs', pid, "AMB_MPAGE_HISTORY_TAB_ID", "", true)
				pwx_histories_tabid_pref_save(amb_clear_histories_tabid_pref_dt, amb_new_histories_tabids_pref_dt, index, pid)
			});
		}
	}
}


/*Start of charted Forms*/

if (typeof ambi18n == "undefined") 
    var ambi18n = {};

if (typeof ambi18n.custcomp == "undefined") 
    ambi18n.custcomp = {};

ambi18n.custcomp.charted_forms_o1 = {
	LOADING_TEXT: "Loading",
	GROUPBY: "Group By",
	STATUS: "Status",
	MY_FORMS: "My Forms",
	FORM: "Form",
	FORM_NAME: "Form Name",
	CHARTED_BY: "Charted By",
	DATE: "Date",
	CHARTED_DATE: "Charted Date",
	VISIT: "Visit",
	CHARTEDONVISIT: "Form charted on selected encounter",
	ALL: "All",
	ACTIVE: "Active",
	INPROGRESS: "In Progress",
	UNCHARTED: "Uncharted",
	LISTVIEW: "List View",
	ENC_VISIT: "Encounter/Visit",
	FILTERED_FORMS_NOTFOUND: "Selected filters do not display any forms",
	VIEW_FORM: "View Form",
	NEW_FORM: "New",
	MODIFY_FORM: "Modify",
	UNCHART_FORM: "Unchart",
	UNCHART_FORM_TITLE: "Unchart Form",
	CANCEL: "Cancel",
	UNCHART_COMMENT: "Unchart Comment",
	MULTIPLE_CONTRIBS: "Multiple Contributors...",
	REQUEST_TEXT: "Request Text",
	ADD_POWERFORM: "Add PowerForm",
	ADD_QUICK_POWERFORMS: "Add Quick PowerForms",
	THIS_VISIT: "This Visit",
	LAST: "Last", //as in Last X Years
	YEARS: "Years",
	DATE_RANGE: "Date Range",
	FROM: "From",
	TO: "to",
	DISPLAY: "Display",
	EXPAND: "Expand",
	COLLAPSE: "Collapse",
	CHARTED_FORMS: "Charted Forms",
	NO_RESULTS_FOUND: "No results found"
};



var pwx_chartform_header_id = "pwx_chf_header_dt";
var pwx_chartform_sort_ind = "1";
var pwx_charted_submenu_clicked_task_id = "0";
var pwx_charted_submenu_clicked_newcharted_id = "0";
/*global variable for all different filter (change on unchart happen)*/
var pwx_chartform_checkbox_status = "myforms_inactive";
var pwx_chartform_display_filter_status = "lpback";
var pwx_chartform_status_filter_status = "active";
var pwx_chartform_groupby_filter_status = "listview";
var pwx_chartform_from_date = "";
var pwx_chartform_to_date = "";
var pwx_charted_date_range_box_datechange_ind = 0;
var pwxformlistHvrArray = [];
var pwxformgroupHvrArray = [];
//function to take date/times and sort and then reload the Task
// sorting for group by filter on desceding
function pwx_sort_by_chartedform_date_groupby(a, b) {
	return new Date(b.VISIT_DATE).getTime() - new Date(a.VISIT_DATE).getTime()
}
function pwx_sort_by_chartedform_date(a, b) {
	var nameA = a.FORM_SORT_DT,
	nameB = b.FORM_SORT_DT
		if (nameA < nameB) //sort string ascending
			return -1
			if (nameA > nameB)
				return 1
				return 0
}
function pwx_sort_by_chartedform_type_groupby(a, b) {
	var nameA = a.CHARTED_BY_COPY.toLowerCase(),
	nameB = b.CHARTED_BY_COPY.toLowerCase()
		if (nameA < nameB) //sort string ascending
			return -1
			if (nameA > nameB)
				return 1
				return 0 //default return value (no sorting)
}
function pwx_sort_by_chartedform_type(a, b) {
	var nameA = a.CHARTED_BY_COPY.toLowerCase(),
	nameB = b.CHARTED_BY_COPY.toLowerCase()
		if (nameA < nameB) //sort string ascending
			return -1
			if (nameA > nameB)
				return 1
				return 0 //default return value (no sorting)
}
function pwx_sort_by_charted_status(a, b) {
	var nameA = a.FORM_NAME.toLowerCase(),
	nameB = b.FORM_NAME.toLowerCase()
		if (nameA < nameB) //sort string ascending
			return -1
			if (nameA > nameB)
				return 1
				return 0 //default return value (no sorting)
}
function pwx_chartedform_sort(pwxObj, clicked_header_id, pid, encid, uid, posid, scrollsetting, rvalue) {
	if (clicked_header_id == pwx_chartform_header_id) {
		if (pwx_chartform_sort_ind == '0') {
			var sort_ind = '1'
		} else {
			var sort_ind = '0'
		}
		pwxObj.CHARTFORM.FORM.reverse()
		pwx_chartform_header_id = clicked_header_id
			pwx_chartform_sort_ind = sort_ind
			RenderChartedFormContent(pwxObj, pid, encid, uid, posid, scrollsetting, rvalue);
	} else {
		switch (clicked_header_id) {
		case 'pwx_chf_header_form':
			pwxObj.CHARTFORM.FORM.sort(pwx_sort_by_charted_status)
			pwx_chartform_header_id = clicked_header_id
				pwx_chartform_sort_ind = '0'
				RenderChartedFormContent(pwxObj, pid, encid, uid, posid, scrollsetting, rvalue);
			break;
		case 'pwx_chf_header_nm':
			pwxObj.CHARTFORM.FORM.sort(pwx_sort_by_chartedform_type)
			pwx_chartform_header_id = clicked_header_id
				pwx_chartform_sort_ind = '0'
				RenderChartedFormContent(pwxObj, pid, encid, uid, posid, scrollsetting, rvalue);
			break;
		case 'pwx_chf_header_dt':
			pwxObj.CHARTFORM.FORM.sort(pwx_sort_by_chartedform_date)
			pwx_chartform_header_id = clicked_header_id
				pwx_chartform_sort_ind = '0'
				RenderChartedFormContent(pwxObj, pid, encid, uid, posid, scrollsetting, rvalue);
			break;
		}
	}
}
function PWX_CCL_CHART_FORM_Request(program, paramAr, async, callback) {
	var info = new XMLCclRequest();
	info.onreadystatechange = function () {
		if (info.readyState == 4 && info.status == 200) {
			var jsonEval = JSON.parse(this.responseText);
			//var recordData = jsonEval.CHARTFORM;
			var recordData = jsonEval;
			if (recordData.CHARTFORM.STATUS_DATA.STATUS === "S") {
				callback.call(recordData);
				//alert(recordData.FORM.length);
			} else {
				callback.call(recordData);
				alert("Status: ", this.status, "<br />" + ambi18n.custcomp.charted_forms_o1 + ": ", this.requestText);
			}
		}
	};
	info.open('GET', program, async);
	info.send(paramAr.join(","));
}
/*Charted Form Component*/
pwx.Charted_Forms = function () {};
pwx.Charted_Forms.prototype = new MPage.Component();
pwx.Charted_Forms.prototype.constructor = MPage.Component;
pwx.Charted_Forms.prototype.base = MPage.Component.prototype;
pwx.Charted_Forms.prototype.name = "pwx.Charted_Forms";
pwx.Charted_Forms.prototype.cclProgram = "AMB_CUST_MP_CHARTED_FORM";
pwx.Charted_Forms.prototype.cclParams = [];
pwx.Charted_Forms.prototype.cclDataType = "JSON";
pwx.Charted_Forms.prototype.init = function (options) {
	var params = [];
	//set params
	params.push("MINE");
	params.push(this.getProperty("personId"));
	params.push(this.getProperty("encounterId"));
	params.push(this.getProperty("userId"));
	params.push(this.getProperty("positionCd"));

	if (pwx_chartform_from_date != "") {
		params.push(pwx_chartform_from_date);
	} else {
		params.push("");
	}
	if (pwx_chartform_to_date != "") {
		params.push(pwx_chartform_to_date);
	} else {
		params.push("");
	}
	if (pwx_chartform_display_filter_status == "all") {
		params.push("all");
	}
	if (pwx_chartform_display_filter_status == "cvisit") {
		params.push("cvisit");
	}
	if (pwx_chartform_display_filter_status == "lpback") {
		params.push("lpback");
	}
	if (pwx_chartform_checkbox_status == "myforms_inactive") {
		params.push("myforms_inactive");
	}
	if (pwx_chartform_checkbox_status == "myforms") {
		params.push("myforms");
	}
	params.push("myforms_inactive");
	this.cclParams = params;
};

//set the MinimumSpecVersion
pwx.Charted_Forms.prototype.componentMinimumSpecVersion = 1.0;

//set render to display the component
var pwx_charted_forms_compId = '';
pwx.Charted_Forms.prototype.render = function () {
	//Takes the data in this.data and loads it into target
	var element = this.getTarget();
	var pid = this.getProperty("personId");
	var encid = this.getProperty("encounterId");
	var uid = this.getProperty("userId");
	var posid = this.getProperty("positionCd");
	var scrollsetting = (this.data.CHARTFORM.SCROLL_LINES * 18) + 6;
	var loopback_years = this.data.CHARTFORM.LOOPBACKYEAR_COUNT;
	pwx_charted_forms_compId = this.getComponentUid();
	//add the add icon to the title
	var dateclearind = 'dateclear';
	// convert this into another object and pass into pwxchartedcompstatusfilter
	pwxchartedcopymainobj = pwx_copy_obj(this);
	
	/* We can't be copying just to get a count. This is alot of processing for a number we can simple add after counting in our render. 
	var pwxcharteddefaultcount = clone(this.data);

	if (pwx_chartform_status_filter_status == "active") {
		pwxcharteddefaultcountcount = $.grep(pwxcharteddefaultcount.CHARTFORM.FORM, function (el, i) {
				return el.FORM_STATUS_IND === 1 || el.FORM_STATUS_IND === 2
			});
	} else if (pwx_chartform_status_filter_status == "inprogress") {
		pwxcharteddefaultcountcount = $.grep(pwxcharteddefaultcount.CHARTFORM.FORM, function (el, i) {
				return el.FORM_STATUS_CD === 1
			});
	} else if (pwx_chartform_status_filter_status == "uncharted") {
		pwxcharteddefaultcountcount = $.grep(pwxcharteddefaultcount.CHARTFORM.FORM, function (el, i) {
				return el.FORM_STATUS_CD === 3
			});
	}
	*/
	//pwxcharteddefaultcount.CHARTFORM.FORM = pwxcharteddefaultcountcount
	
	//FIX ME
	var pwx_chartedform_default_status_length = 0;//pwxcharteddefaultcount.CHARTFORM.FORM.length;

	var pwx_chart_sub_title = [];
	var custcompId = this.getComponentUid();
	pwx_chart_sub_title.push('<span id="pwx_charted_forms_header_count">(' + pwx_chartedform_default_status_length + ')</span>');
	if (this.data.CHARTFORM.ADD_PFORM.length > 0) {
		if (this.data.CHARTFORM.ADD_PFORM.length == 1) {
			pwx_chart_sub_title.push('<a class="pwx_no_text_decor" style="margin-left:2px;" title="',ambi18n.custcomp.charted_forms_o1.ADD_POWERFORM,'" ',
				'onClick="pwx_form_launch(' + pid + ',' + encid + ',' + this.data.CHARTFORM.ADD_PFORM[0].FORM_ID + ',0.0,0,\'' + custcompId + '\')">',
				'<span class="pwx-add-icon pwx_no_text_decor">&nbsp;</span></a>');
		} else {
			pwx_chart_sub_title.push('<a class="pwx_no_text_decor"  style="margin-left:2px;" title="',ambi18n.custcomp.charted_forms_o1.ADD_POWERFORM,'" ',
				'onClick="pwx_form_launch(' + pid + ',' + encid + ',0.0,0.0,0)">',
				'<span class="pwx-add-icon-plus pwx_no_text_decor">&nbsp;</span></a>',
				'<a class="pwx_no_text_decor" title="',ambi18n.custcomp.charted_forms_o1.ADD_QUICK_POWERFORM,'" ',
				'onClick="pwx_form_menu(\'pwx_chart_form_div\',\'' + custcompId + '\')">',
				'<span class="pwx-add-icon-plus-arrow pwx_no_text_decor">&nbsp;</span></a>',
				'<div class="pwx_form-menu" id="pwx_chart_form_div" style="display:none;">');
			for (var i = 0; i < this.data.CHARTFORM.ADD_PFORM.length; i++) {
				pwx_chart_sub_title.push('<a class="pwx_formmenu_link"',
					'onClick="pwx_form_launch(' + pid + ',' + encid + ',' + this.data.CHARTFORM.ADD_PFORM[i].FORM_ID + ',0.0,0,\'' + custcompId + '\')">',
					this.data.CHARTFORM.ADD_PFORM[i].FORM_NAME + '</a></br>');
			}
			pwx_chart_sub_title.push('<a style="color:#3380E5;font-weight:normal;" ',
				'onClick="pwx_form_launch(' + pid + ',' + encid + ',0.0,0.0,0,\'' + custcompId + '\')">',
				'All Forms...</a></div>');
		}
	}
	this.setProperty("headerSubTitle", pwx_chart_sub_title.join(""));
	setTimeout(function() {
		$( document ).on('mouseleave','#pwx_chart_form_div', function (event) {
		  pwx_form_menu('pwx_chart_form_div',custcompId)
		});
	}, 0);
	var pwxcharteddisplayfilterArray = new Array(4)
	var pwxcharteddisplayfilterArrayHTML = "";
	pwxcharteddisplayfilterArray[0] = new Array(2);
	pwxcharteddisplayfilterArray[0][0] = ambi18n.custcomp.charted_forms_o1.ALL;
	pwxcharteddisplayfilterArray[0][1] = "all";
	pwxcharteddisplayfilterArray[1] = new Array(2);
	pwxcharteddisplayfilterArray[1][0] = ambi18n.custcomp.charted_forms_o1.THIS_VISIT;
	pwxcharteddisplayfilterArray[1][1] = "cvisit";
	pwxcharteddisplayfilterArray[2] = new Array(2);
	pwxcharteddisplayfilterArray[2][0] = ambi18n.custcomp.charted_forms_o1.LAST + ' ' + loopback_years + ' ' + ambi18n.custcomp.charted_forms_o1.YEARS;
	pwxcharteddisplayfilterArray[2][1] = "lpback";
	pwxcharteddisplayfilterArray[3] = new Array(2);
	pwxcharteddisplayfilterArray[3][0] = ambi18n.custcomp.charted_forms_o1.DATE_RANGE;
	pwxcharteddisplayfilterArray[3][1] = "drange";

	if (pwxcharteddisplayfilterArray.length > 0) {
		for (var i = 0; i < pwxcharteddisplayfilterArray.length; i++) {
			if (pwxcharteddisplayfilterArray[i][1] == pwx_chartform_display_filter_status) {
				pwxcharteddisplayfilterArrayHTML += '<option value="' + pwxcharteddisplayfilterArray[i][1] + '" selected="selected"> ' + pwxcharteddisplayfilterArray[i][0] + '</option>';
			} else {
				pwxcharteddisplayfilterArrayHTML += '<option value="' + pwxcharteddisplayfilterArray[i][1] + '" > ' + pwxcharteddisplayfilterArray[i][0] + '</option>';
			}
		}
	}

	//Create the filter's area
    //status drop down
    var pwxchartedstatusfilterArrayHTML = "";
    var pwxchartedstatusfilterArray = [[ambi18n.custcomp.charted_forms_o1.ALL, "allstatus"], [ambi18n.custcomp.charted_forms_o1.ACTIVE, "active"], [ambi18n.custcomp.charted_forms_o1.INPROGRESS, "inprogress"], [ambi18n.custcomp.charted_forms_o1.UNCHARTED, "uncharted"]];
    if (pwxchartedstatusfilterArray.length > 0) {
        for (var i = 0; i < pwxchartedstatusfilterArray.length; i++) {
            if (pwxchartedstatusfilterArray[i][1] === pwx_chartform_status_filter_status) {
                pwxchartedstatusfilterArrayHTML += '<option value="' + pwxchartedstatusfilterArray[i][1] + '" selected="selected"> ' + pwxchartedstatusfilterArray[i][0] + '</option>';
            }
            else {
                pwxchartedstatusfilterArrayHTML += '<option value="' + pwxchartedstatusfilterArray[i][1] + '" > ' + pwxchartedstatusfilterArray[i][0] + '</option>';
            }
        }
    }
	
	
	var pwxchartedgroupbyfilterArray = new Array(4)
	var pwxchartedgroupbyfilterArrayHTML = "";
	pwxchartedgroupbyfilterArray[0] = new Array(2);
	pwxchartedgroupbyfilterArray[0][0] = ambi18n.custcomp.charted_forms_o1.LISTVIEW;
	pwxchartedgroupbyfilterArray[0][1] = "listview";
	pwxchartedgroupbyfilterArray[1] = new Array(2);
	pwxchartedgroupbyfilterArray[1][0] = ambi18n.custcomp.charted_forms_o1.FORM;
	pwxchartedgroupbyfilterArray[1][1] = "FORM_NAME";
	pwxchartedgroupbyfilterArray[2] = new Array(2);
	pwxchartedgroupbyfilterArray[2][0] = ambi18n.custcomp.charted_forms_o1.CHARTED_BY;
	pwxchartedgroupbyfilterArray[2][1] = "CHARTED_BY_COPY";
	pwxchartedgroupbyfilterArray[3] = new Array(2);
	pwxchartedgroupbyfilterArray[3][0] = ambi18n.custcomp.charted_forms_o1.ENC_VISIT;
	pwxchartedgroupbyfilterArray[3][1] = "VISIT_DATE";

	if (pwxchartedgroupbyfilterArray.length > 0) {
		for (var i = 0; i < pwxchartedgroupbyfilterArray.length; i++) {
			if (pwxchartedgroupbyfilterArray[i][1] == pwx_chartform_groupby_filter_status) {
				pwxchartedgroupbyfilterArrayHTML += '<option value="' + pwxchartedgroupbyfilterArray[i][1] + '" selected="selected"> ' + pwxchartedgroupbyfilterArray[i][0] + '</option>';
			} else {
				pwxchartedgroupbyfilterArrayHTML += '<option value="' + pwxchartedgroupbyfilterArray[i][1] + '" > ' + pwxchartedgroupbyfilterArray[i][0] + '</option>';
			}
		}
	}

	var pwxchartedgroupbydaterange = "";
	if (pwx_chartform_from_date != "" && pwx_chartform_to_date != "") {
		pwxchartedgroupbydaterange += '<label for="pwx_form_from">' + ambi18n.custcomp.charted_forms_o1.FROM + ' </label><input type="text" id="pwx_form_from" name="pwx_form_from" value="' + pwx_chartform_from_date + '" class="pwx_chf_date_box"/>' +
		'<label for="pwx_form_to"> ' + ambi18n.custcomp.charted_forms_o1.TO + ' </label><input type="text" id="pwx_form_to" name="pwx_form_to" value="' + pwx_chartform_to_date + '" class="pwx_chf_date_box"/>';
	} else {
		pwxchartedgroupbydaterange += '<label for="pwx_form_from">' + ambi18n.custcomp.charted_forms_o1.FROM + ' </label><input type="text" id="pwx_form_from" name="pwx_form_from" class="pwx_chf_date_box"/>' +
		'<label for="pwx_form_to"> ' + ambi18n.custcomp.charted_forms_o1.TO + ' </label><input type="text" id="pwx_form_to" name="pwx_form_to" class="pwx_chf_date_box"/>';
	}
	var hhtml = [];
	var all = "0";
	var rvalue = "lpback";
	hhtml.push('<div id="pwx_header_chf"><div class="pwx_2_col_chf_lbl"><label style="vertical-top:2px;">',ambi18n.custcomp.charted_forms_o1.DISPLAY,': </label>',
		'<select id="pwx_chart_form_range" onchange="pwxcharteddaterange(pwxchartedcopymainobj.data,' + all + ',' + pid + ',' + encid + ',' + uid + ',' + posid + ',' + scrollsetting + ',\'' + dateclearind + '\');">',
		pwxcharteddisplayfilterArrayHTML,
		'</select></div>',
		'<div class="pwx_2_col_chf_value"><label style="vertical-top:2px;">',ambi18n.custcomp.charted_forms_o1.STATUS,': </label><select  id="pwx_chart_form_filter" onchange="pwxchartedcompstatusfilter(pwxchartedcopymainobj.data,' + all + ',' + pid + ',' + encid + ',' + uid + ',' + posid + ',' + scrollsetting + ',\'' + rvalue + '\');">',
		pwxchartedstatusfilterArrayHTML,
		'</select></div>',
		'<div class="pwx_chartedform_expand_collapse">',
		'<a id="pwx_chartedform_expand_title" class="pwx_sub_sec_link" title="',ambi18n.custcomp.charted_forms_o1.EXPAND,'" onclick="pwx_expand_collapse(\'pwx_chartedform_groupby_dropdown\',\'pwx_chartedform_expand_title\',\'pwx_chartedform_tgl\')">',
		'<span id="pwx_chartedform_tgl" class="pwx-sub-sec-hd-tgl-close">-</span></a>',
		'</div>',
		'<div id="pwx_chart_date_area">',
		'<dt class="pwx_2_col_chf">',
		pwxchartedgroupbydaterange,
		'</dt>',
		'</div>',
		'<div id="pwx_chartedform_groupby_dropdown" style="display:none;">',
		'<label style="vertical-top:2px;">',ambi18n.custcomp.charted_forms_o1.GROUPBY,': </label>',
		'<select id="pwx_chartedform_range_groupby" onchange="pwxchartedcompgroupbyfilter(pwxchartedcopymainobj.data,' + all + ',' + pid + ',' + encid + ',' + uid + ',' + posid + ',' + scrollsetting + ',\'' + rvalue + '\');">',
		pwxchartedgroupbyfilterArrayHTML,
		'</select>',
		'<label for="id" class="pwx-charted-checkbox-class"><input type="checkbox" id="pwx-charted-checkbox" value="myforms" /> <span id="pwx-charted-checkbox-label" style="vertical-align:2px;font-size:11px;"> ',ambi18n.custcomp.charted_forms_o1.MY_FORMS,' </span></label>',
		'</div>',
		'</div>',
		'<div id="pwx_chart_form_contentid"></div>');
	//alert(this.data.CHARTFORM.S_TEMP);
	$(element).html(hhtml.join(""));
	if (pwx_chartform_checkbox_status == "myforms") {
		document.getElementById("pwx-charted-checkbox").checked = true
	} else {
		document.getElementById("pwx-charted-checkbox").checked = false
	}
	if (pwx_chartform_from_date == "" && pwx_chartform_to_date == "") {
		$("#pwx_chart_date_area").hide();
	} else {
		if (pwx_charted_date_range_box_datechange_ind == 0) {
			$("#pwx_chart_date_area").hide();
		} else {
			$("#pwx_chart_date_area").show();
		}
	}
	RenderChartedFormList(this.data, "0", "0", "0", pid, encid, uid, posid, scrollsetting, rvalue);
};
//display the list
function RenderChartedFormList(pwxdata, from, to, date, pid, encid, uid, posid, scrollsetting, rvalue) {
	//clear the date ranges for the date range change function
	from_date = '';
	to_date = '';
	date = '';

	function RenderDateRangeFormList(selectedDate, dateId) {
		if (dateId == 'pwx_form_to') {
			to_date = selectedDate;
			$("#pwx_form_from").datepicker("option", "maxDate", selectedDate);
			if ($("#pwx_form_from").val() != "" && from_date == '') {
				$("#pwx_form_from").val("");
			}
		} else {
			from_date = selectedDate;
			$("#pwx_form_to").datepicker("option", "minDate", selectedDate);
			if ($("#pwx_form_to").val() != "" && to_date == '') {
				$("#pwx_form_to").val("");
			}
		}
		if (from_date != '' && to_date != '') {
			//both dates found relaunch list
			var contentelement = $('#pwx_chart_form_contentid')
			contentelement.empty()
			var rvaluedatechange = ""; //just pass blank string to match promte in ccl otherwise there is no need to pass
			//check the current status of checkmark if on pass value in ccl parameter
			if ($("#pwx-charted-checkbox").is(':checked')) {
				var m_forms = "myforms";
			} else {
				var m_forms = "myforms_inactive";
			}
			$('#pwx-charted-checkbox').off('click');
			contentelement.html('<div class="pwx_loading_div" id="pwx-loading_text">' + ambi18n.custcomp.charted_forms_o1.LOADING_TEXT + '...</div>');
			var sendarr = ["^mine^", pid + ".0", encid + ".0", uid + ".0", posid + ".0", "^" + from_date + "^", "^" + to_date + "^", "^" + rvaluedatechange + "^", "^" + m_forms + "^"];
			PWX_CCL_CHART_FORM_Request("AMB_CUST_MP_CHARTED_FORM", sendarr, true, function () {
				RenderChartedFormList(this, from_date, to_date, date, pid, encid, uid, posid, scrollsetting, rvalue);
				pwx_charted_date_range_box_datechange_ind = 1;
				$("#pwx_chart_date_area").show();
			});
		}
	}
	var dates = $("#pwx_form_from, #pwx_form_to").datepicker({
			dateFormat : "mm/dd/yy",
			showOn : "focus",
			changeMonth : true,
			changeYear : true,
			onSelect : function (selectedDate) {
				RenderDateRangeFormList(selectedDate, this.id);
			}
		});
	$("#pwx_form_from, #pwx_form_to").attr( 'readOnly' , 'true' );
	switch (pwx_chartform_header_id) {
	case 'pwx_chf_header_form':
		pwxdata.CHARTFORM.FORM.sort(pwx_sort_by_charted_status)
		break;
	case 'pwx_chf_header_nm':
		pwxdata.CHARTFORM.FORM.sort(pwx_sort_by_chartedform_type)
		break;
	case 'pwx_chf_header_dt':
		pwxdata.CHARTFORM.FORM.sort(pwx_sort_by_chartedform_date)
		break;
	}
	if (pwx_chartform_sort_ind == "1") {
		pwxdata.CHARTFORM.FORM.reverse()
	}
	RenderChartedFormContent(pwxdata, pid, encid, uid, posid, scrollsetting, rvalue);
}
// Render the form content
function RenderChartedFormContent(pwxdata, pid, encid, uid, posid, scrollsetting, rvalue) {
	//Takes the data in this.data and loads it into target
	var contentelement = $('#pwx_chart_form_contentid')
	var chflistviewHTML = [];
	var custcompId = pwxchartedcopymainobj.getComponentUid();

	// check for status filter
	var e = document.getElementById("pwx_chart_form_filter");
	var svalue = e.options[e.selectedIndex].value;

	// Check for group by filter
	var e = document.getElementById("pwx_chartedform_range_groupby");
	var dvalue = e.options[e.selectedIndex].value;

	chflistviewHTML.push('<h3 class="info-hd">',ambi18n.custcomp.charted_forms_o1.CHARTED_FORMS,'</h3><div style="overflow-x:hidden" class="pwx_div_scroll" id="pwx_charted_scroll_div">');

	/** Action menu **/
	if (pwxdata.CHARTFORM.CAN_NEW == 1 || pwxdata.CHARTFORM.CAN_MODIFY == 1 || pwxdata.CHARTFORM.CAN_UNCHART == 1) {
		var enable_menu = 1;
		chflistviewHTML.push('<div class="pwx_form-menu_chf" id="pwx_chart_form_menu" style="display:none;">');
		if (pwxdata.CHARTFORM.CAN_NEW == 1) {
			chflistviewHTML.push('<a class="pwx_formmenu_link pwx_form_open"><span style="font-weight:bold;">',ambi18n.custcomp.charted_forms_o1.NEW_FORM,'</span></a>');
		}
		if (pwxdata.CHARTFORM.CAN_MODIFY == 1) {
			if (pwxdata.CHARTFORM.CAN_NEW == 1) {
				chflistviewHTML.push('</br>');
			}
			chflistviewHTML.push('<a class="pwx_formmenu_link pwx_form_modify"><span style="font-weight:bold;">',ambi18n.custcomp.charted_forms_o1.MODIFY_FORM,'</span></a>');
		}
		if (pwxdata.CHARTFORM.CAN_UNCHART == 1) {
			chflistviewHTML.push('</br><a class="pwx_formmenu_link pwx_form_unchart"><span style="font-weight:bold;">',ambi18n.custcomp.charted_forms_o1.UNCHART_FORM,'</span></a>');
		}
		chflistviewHTML.push('</div>');
	} else {
		var enable_menu = 0;
	}

	/** changing required  **/
	var finalCnt = 0;
	if (dvalue == "listview") {
		var pwxlistviewstatusfilter = clone(pwxdata);
		var pwx_chartedform_listview_org_length = pwxdata.CHARTFORM.FORM.length;
		if (svalue == "active") {
			pwxlistviewstatusfiltercount = $.grep(pwxlistviewstatusfilter.CHARTFORM.FORM, function (el, i) {
					return el.FORM_STATUS_IND === 1 || el.FORM_STATUS_IND === 2
				});
			pwxlistviewstatusfilter.CHARTFORM.FORM = pwxlistviewstatusfiltercount;
		} else if (svalue == "inprogress") {
			pwxlistviewstatusfiltercount = $.grep(pwxlistviewstatusfilter.CHARTFORM.FORM, function (el, i) {
					return el.FORM_STATUS_IND === 1
				});
			pwxlistviewstatusfilter.CHARTFORM.FORM = pwxlistviewstatusfiltercount;
		} else if (svalue == "uncharted") {
			pwxlistviewstatusfiltercount = $.grep(pwxlistviewstatusfilter.CHARTFORM.FORM, function (el, i) {
					return el.FORM_STATUS_IND === 3
				});
			pwxlistviewstatusfilter.CHARTFORM.FORM = pwxlistviewstatusfiltercount;
		}
		var pwx_chartedform_listview_status_length = pwxlistviewstatusfilter.CHARTFORM.FORM.length;
		chflistviewHTML = pwxchartedformlistviewrendercontent(pwxlistviewstatusfilter, pid, encid, uid, posid, scrollsetting, rvalue, chflistviewHTML, pwx_chartedform_listview_org_length, pwx_chartedform_listview_status_length, enable_menu);

		if (svalue != "allstatus") {
			//pwxchartedcompstatuscountfilter(pwx_chartedform_listview_status_length);
			finalCnt = pwx_chartedform_listview_status_length;
		}
		else if (svalue == "allstatus") {
			//pwxchartedcompstatuscountfilter(pwx_chartedform_listview_org_length);
			finalCnt =  pwx_chartedform_listview_org_length;
		}
		else {
			//pwxchartedcompstatuscountfilter(pwxlistviewstatusfilter.CHARTFORM.FORM.length);
			finalCnt =  pwxlistviewstatusfilter.CHARTFORM.FORM.length;
		}
	} else {
		if (dvalue == "FORM_NAME") {
			pwxdata.CHARTFORM.FORM.sort(pwx_sort_by_charted_status)
		}
		if (dvalue == "CHARTED_BY_COPY") {
			pwxdata.CHARTFORM.FORM.sort(pwx_sort_by_chartedform_type_groupby)
		}
		if (dvalue == "VISIT_DATE") {
			pwxdata.CHARTFORM.FORM.sort(pwx_sort_by_chartedform_date_groupby)
		}
		var pwx_chartedform_groupview_org_length = pwxdata.CHARTFORM.FORM.length;
		var authorcopyobj = clone(pwxdata);
		if (svalue == "active") {
			groupdatastatus = $.grep(authorcopyobj.CHARTFORM.FORM, function (el, i) {
					return el.FORM_STATUS_IND === 1 || el.FORM_STATUS_IND === 2
				});
			authorcopyobj.CHARTFORM.FORM = groupdatastatus;
		} else if (svalue == "inprogress") {
			groupdatastatus = $.grep(authorcopyobj.CHARTFORM.FORM, function (el, i) {
					return el.FORM_STATUS_IND === 1
				});
			authorcopyobj.CHARTFORM.FORM = groupdatastatus;
		} else if (svalue == "uncharted") {
			groupdatastatus = $.grep(authorcopyobj.CHARTFORM.FORM, function (el, i) {
					return el.FORM_STATUS_IND === 3
				});
			authorcopyobj.CHARTFORM.FORM = groupdatastatus;
		}
		var chartedformgroup = authorcopyobj.CHARTFORM.FORM.pwxgroupBy(dvalue);
		var pwx_chartedform_groupview_status_length = authorcopyobj.CHARTFORM.FORM.length;
		chflistviewHTML = pwxchartedformRendergroupbyContent(authorcopyobj, chartedformgroup, pid, encid, uid, posid, scrollsetting, rvalue, chflistviewHTML, pwx_chartedform_groupview_org_length, pwx_chartedform_groupview_status_length, enable_menu);
		if (svalue != "allstatus") {
			//pwxchartedcompstatuscountfilter(groupdatastatus.length);
			finalCnt = groupdatastatus.length;
		}
		else if (svalue == "allstatus") {
			//pwxchartedcompstatuscountfilter(pwx_chartedform_groupview_org_length);
			finalCnt = pwx_chartedform_groupview_org_length;
		}
		else {
			//pwxchartedcompstatuscountfilter(authorcopyobj.CHARTFORM.FORM.length);
			finalCnt = authorcopyobj.CHARTFORM.FORM.length;
		}
	}

	chflistviewHTML.push('</div>');

	contentelement.html(chflistviewHTML.join(""));
	//PWxInitHovers("pwxchartformhvr");
	//hovers and check scrolling activate hovers
	var elementMap = {};
	var scrollelement = $('#pwx_charted_scroll_div');
	// remove event if there is any
	scrollelement.off("mouseenter","dl.form-info");
	scrollelement.off("mouseleave","dl.form-info");
	// attach event
	scrollelement.on("mouseenter", "dl.form-info", function (event) {
	    var anchor = this;
		$(this).css("background-color","#FFC")
		var anchorId = $(this).attr("id");
		//If there is a hover class specified, add it to the element
		$(this).addClass("mpage-tooltip-hover");
		if (!elementMap[anchorId]) {
		elementMap[anchorId] = {};
		}
		//Store of a flag that we're hovered inside this element
		elementMap[anchorId].TIMEOUT = setTimeout(function () {
		showFormHover(event,anchor);
		}, 500);
	});
	scrollelement.on("mouseleave", "dl.form-info", function (event) {
		$(this).css("background-color","#FFF")
		$(this).removeClass("mpage-tooltip-hover");
		clearTimeout(elementMap[$(this).attr("id")].TIMEOUT);
	});	
	function showFormHover(event,anchor){
	    var jsonId = $(anchor).attr("id").split("_");       	
		switch (jsonId[0]) {
	    case "formlistview":
		    var formlistindexarray = pwxformlistHvrArray[jsonId[2]];
	        showChartFormHoverHTML(event,anchor,formlistindexarray)
	    break;
	    case "formgroupview":
	    	var formgroupindexarray = pwxformgroupHvrArray[jsonId[2]];
			showChartFormHoverHTML(event,anchor,formgroupindexarray)
	    break;	    
        }
	}	
    function showChartFormHoverHTML(event,anchor,chartedformhoverarray){
        var ChartedFormhvr = [];
        ChartedFormhvr.push('<div class="result-details">');
        for (var i = 0; i < chartedformhoverarray.length; i++) {
        	ChartedFormhvr.push('<dl class="Chartedform-det">',
        		'<dt><span>' + chartedformhoverarray[i][0] + '</span></dt><dd><span>' + chartedformhoverarray[i][1] + '</span></dd></dl>');
        }
        //Create a new tooltip
        ChartedFormhvr.push('</div>');
        var Chartedformhvrtooltip = new MPageTooltip();
        Chartedformhvrtooltip.setX(event.pageX).setY(event.pageY).setAnchor(anchor).setContent(ChartedFormhvr.join(""));
        Chartedformhvrtooltip.show();
    }	
	

	var pwxdivh = document.getElementById('pwx_charted_scroll_div').offsetHeight;
	if (pwxdivh > scrollsetting) {
		var div_height = scrollsetting + 'px';
		document.getElementById('pwx_charted_scroll_div').style.height = div_height;
	}
	pwxclearheight('pwx_charted_scroll_div', scrollsetting);

	$('#pwx_chf_header_form').on('click', function () {
		pwx_chartedform_sort(pwxdata, 'pwx_chf_header_form', pid, encid, uid, posid, scrollsetting, rvalue)
	});
	$('#pwx_chf_header_nm').on('click', function () {
		pwx_chartedform_sort(pwxdata, 'pwx_chf_header_nm', pid, encid, uid, posid, scrollsetting, rvalue)
	});
	$('#pwx_chf_header_dt').on('click', function () {
		pwx_chartedform_sort(pwxdata, 'pwx_chf_header_dt', pid, encid, uid, posid, scrollsetting, rvalue)
	});
	contentelement.on('click', '.pwx-icon_submenu_arrow-icon',  function (event) {
		pwx_charted_submenu_clicked_task_id = $(this).parent('.pwx_chart_action_menu_icon').siblings('.pwx_chart_form_id_hidden').html();
		pwx_charted_submenu_clicked_newcharted_id = $(this).parent('.pwx_chart_action_menu_icon').siblings('.pwx_chart_form_ref_id_hidden').html();
		var dt_pos = $(this).position();
		var testheight = contentelement.offsetTop
			testheight += contentelement.offsetHeight
			var formMenuElement = $('#pwx_chart_form_menu');
			var menu_bottom = formMenuElement.outerHeight() + dt_pos.top
			if (menu_bottom > testheight) {
				formMenuElement.css('top', dt_pos.top - (menu_bottom - testheight));
			} else {
				formMenuElement.css('top', dt_pos.top + 5);
			}
			formMenuElement.css('left', dt_pos.left - 45);
		formMenuElement.css('display', 'block');
	});

	$('#pwx_chart_form_menu').on('mouseleave', function (event) {
		$(this).css('display', 'none');
	});
	$('.pwx_form_open').on('click', function (e) {
		pwx_form_launch(pid, encid, pwx_charted_submenu_clicked_newcharted_id, "0", "0", pwx_charted_forms_compId)
	});
	$('.pwx_form_modify').on('click', function (e) {
		pwx_form_launch(pid, encid, "0", pwx_charted_submenu_clicked_task_id, "0", pwx_charted_forms_compId)
	});
	$('.pwx_form_unchart').on('click', function (e) {
	    var chfunchartmodalHTML = [];
		chfunchartmodalHTML.push('<div id="pwx-unchart-dialog-confirm"<p class="pwx_small_text"><label for="pwx_unchart_form_comment">',ambi18n.custcomp.charted_forms_o1.UNCHART_COMMENT,': <br/><textarea  class="text ui-widget-content ui-corner-all" rows="5" cols="35" ',
		'id="pwx_unchart_form_comment" name="pwx_unchart_form_comment" /></textarea></label></p></div>');
		MP_ModalDialog.deleteModalDialogObject("ChartedFormunchartModal")
	    var formunchartmodal = new ModalDialog("ChartedFormunchartModal")
		    .setHeaderTitle(ambi18n.custcomp.charted_forms_o1.UNCHART_FORM)
		    .setTopMarginPercentage(20)
		    .setRightMarginPercentage(28)
		    .setBottomMarginPercentage(30)
		    .setLeftMarginPercentage(28)
		    .setIsBodySizeFixed(true)
		    .setHasGrayBackground(true)
		    .setIsFooterAlwaysShown(true);
	    formunchartmodal.setBodyDataFunction(
		    function (modalObj) {
	        modalObj.setBodyHTML(chfunchartmodalHTML.join(""));     				
	    });
	    var closebtn = new ModalButton("addCancel");
	    closebtn.setText(ambi18n.custcomp.charted_forms_o1.CANCEL).setCloseOnClick(true);
	    var unchartbtn = new ModalButton("unchartbutton");
	    unchartbtn.setText(ambi18n.custcomp.charted_forms_o1.UNCHART_FORM).setCloseOnClick(true).setOnClickFunction(function () {
	        var comment_text = $('#pwx_unchart_form_comment').text()
			PWX_CCL_Request_Remove_Chart('amb_cust_srv_unchart_form', pwx_charted_submenu_clicked_task_id, uid, comment_text, custcompId, false)   
	    });
	    formunchartmodal.addFooterButton(unchartbtn)
	    formunchartmodal.addFooterButton(closebtn)
	    MP_ModalDialog.addModalDialogObject(formunchartmodal);
	    MP_ModalDialog.showModalDialog("ChartedFormunchartModal")
	});

	//Added timeout for component loading
	setTimeout(function() {
		//check if checkmark is on call main ccl filter and pass unique value
		$('#pwx-charted-checkbox').click(function () {
			if ($(this).is(':checked')) {
				$('#pwx_chart_form_contentid').empty()
				pwxcharteddaterange(pwxdata, "0", pid, encid, uid, posid, scrollsetting, "");
			} else {
				$('#pwx_chart_form_contentid').empty()
				pwxcharteddaterange(pwxdata, "0", pid, encid, uid, posid, scrollsetting, "");
			}
		});
		pwxchartedcompstatuscountfilter(finalCnt);
	}, 0);

}
/** Render the form name with list view content **/
function pwxchartedformlistviewrendercontent(pwxdata, pid, encid, uid, posid, scrollsetting, rvalue, chflistviewHTML, pwx_chartedform_listview_org_length, pwx_chartedform_listview_status_length, enable_menu) {
	pwxformlistHvrArray = [];
	if (pwxdata.CHARTFORM.FORM.length > 0) {
		var border_type = 'pwx_grey_border_top-info';
		var border_type_chf = 'pwx_grey_border_col_row_chf';

		if (pwx_chartform_sort_ind == '1') {
			var sort_icon = 'pwx-sort_up-icon';
		} else {
			var sort_icon = 'pwx-sort_down-icon';
		}
		chflistviewHTML.push('<dl class="pwx_grey_border_top-info_chf">');
		if (pwx_chartform_header_id == 'pwx_chf_header_form') {
			chflistviewHTML.push('<dt id="pwx_chf_header_form">',ambi18n.custcomp.charted_forms_o1.FORM,'<span style="vertical-align: middle;padding-top:3%" id="task_sort_tgl" class="' + sort_icon + '" >&nbsp;</span></dt>');
		} else {
			chflistviewHTML.push('<dt id="pwx_chf_header_form">',ambi18n.custcomp.charted_forms_o1.FORM,'</dt>');
		}
		if (pwx_chartform_header_id == 'pwx_chf_header_nm') {
			chflistviewHTML.push('<dt id="pwx_chf_header_nm">',ambi18n.custcomp.charted_forms_o1.CHARTED_BY,'<span style="vertical-align: middle;padding-top:3%" id="task_sort_tgl" class="' + sort_icon + '" >&nbsp;</span></dt>');
		} else {
			chflistviewHTML.push('<dt id="pwx_chf_header_nm">',ambi18n.custcomp.charted_forms_o1.CHARTED_BY,'</dt>');
		}
		if (pwx_chartform_header_id == 'pwx_chf_header_dt') {
			chflistviewHTML.push('<dt id="pwx_chf_header_dt"><span>',ambi18n.custcomp.charted_forms_o1.DATE,'</span><span style="vertical-align:middle;padding-top:3%" class="' + sort_icon + '" ></span></dt></dl>');
		} else {
			chflistviewHTML.push('<dt id="pwx_chf_header_dt">',ambi18n.custcomp.charted_forms_o1.DATE,'</dt>');
		}
		chflistviewHTML.push('</dl>');
		for (var i = 0; i < pwxdata.CHARTFORM.FORM.length; i++) {
			var visitast = '';
			var visithoverast = 0;
			var myHvr = new Array(6);
			myHvr[0] = new Array(2);
			myHvr[0][0] = ambi18n.custcomp.charted_forms_o1.FORM_NAME + ':';
			myHvr[0][1] = pwxdata.CHARTFORM.FORM[i].FORM_NAME;
			myHvr[1] = new Array(2);
			myHvr[1][0] = ambi18n.custcomp.charted_forms_o1.CHARTED_DATE + ':';
			//myHvr[1][1] = pwxdata.CHARTFORM.FORM[i].FORM_HOVER_DT;
			if(pwxdata.CHARTFORM.FORM[i].FORM_CHART_DT != "") {
				var formUTCDate = new Date();
				formUTCDate.setISO8601(pwxdata.CHARTFORM.FORM[i].FORM_CHART_DT);
				myHvr[1][1] =  formUTCDate.format("longDateTime3");
			}
			else {
				myHvr[1][1] =  "--";
			}
			if (pwxdata.CHARTFORM.FORM[i].VISIT_IND == 1 && rvalue != "cvisit") {
				visitast = myHvr[1][1] + '<span id="chf_visitdate">*</span>';
				visithoverast = 1;
			} else {
				visitast = myHvr[1][1];
			}
			myHvr[2] = new Array(2);
			myHvr[2][0] = ambi18n.custcomp.charted_forms_o1.CHARTED_BY + ':';
			myHvr[2][1] = '';
			if (pwxdata.CHARTFORM.FORM[i].PERSON.length > 0) {
				myHvr[3] = new Array(2);
				myHvr[3][0] = '<span class="pwx_small_text" style="padding-left:5px;">&nbsp;</span>';
				myHvr[3][1] = '<span class="pwx_normal_line_height_chf pwx_small_text">';
				for (var cc = 0; cc < pwxdata.CHARTFORM.FORM[i].PERSON.length; cc++) {
					if (cc != 0) {
						myHvr[3][1] += '<br/>';
					}
					if(pwxdata.CHARTFORM.FORM[i].PERSON[cc].ACTION_DT != "") {
						var actUTCDate = new Date();
						actUTCDate.setISO8601(pwxdata.CHARTFORM.FORM[i].PERSON[cc].ACTION_DT);
						var actDt =  actUTCDate.format("shortDate2");
					} else {
						var actDt =  "--";
					}
					myHvr[3][1] += pwxdata.CHARTFORM.FORM[i].PERSON[cc].CHARTED_BY + '<span class="pwx_grey"> (' + actDt + ')</span>';
				}
				myHvr[3][1] += '</span>';
			}
			myHvr[4] = new Array(2);
			myHvr[4][0] = ambi18n.custcomp.charted_forms_o1.STATUS + ':';
			myHvr[4][1] = pwxdata.CHARTFORM.FORM[i].FORM_STATUS_CD;
			myHvr[5] = new Array(2);
			myHvr[5][0] = ambi18n.custcomp.charted_forms_o1.VISIT + ':';
			if(pwxdata.CHARTFORM.FORM[i].VISIT_DATE != "") {
					var visUTCDate = new Date();
					visUTCDate.setISO8601(pwxdata.CHARTFORM.FORM[i].VISIT_DATE);
					var visitDt =  visUTCDate.format("shortDate2");
			} else {
				var visitDt =  "--";
			}
			myHvr[5][1] = visitDt + ' | ' + pwxdata.CHARTFORM.FORM[i].VISIT_LOC + ' | ' + 'FIN:' + pwxdata.CHARTFORM.FORM[i].FIN;
			if (visithoverast == 1) {
				hvrlen = myHvr.length;
				myHvr.length = hvrlen + 1
				myHvr[hvrlen] = new Array(2);
				myHvr[hvrlen][0] = '<span class="pwx_small_text">* ' + ambi18n.custcomp.charted_forms_o1.CHARTEDONVISIT + '</span>'
				myHvr[hvrlen][1] = '';
			}
		    pwxformlistHvrArray.push(myHvr);
			chflistviewHTML.push('<dl id="formlistview_row_'+i+'" class="' + border_type_chf + ' form-info">');

			if (pwxdata.CHARTFORM.FORM[i].FORM_STATUS_IND == 1) {
				if (pwxdata.CHARTFORM.FORM[i].PERSON[0].CHARTFORM_USER_IND == '1') {
					chflistviewHTML.push('<dt class="chfrowfname" style="font-style:italic;font-weight:bold;">');
				} else {
					chflistviewHTML.push('<dt class="chfrowfname" style="font-style:italic;">');
				}
			} else if (pwxdata.CHARTFORM.FORM[i].FORM_STATUS_IND == 3) {
				if (pwxdata.CHARTFORM.FORM[i].PERSON[0].CHARTFORM_USER_IND == '1') {
					chflistviewHTML.push('<dt class="chfrowfname" style="font-weight:bold;">');
				} else {
					chflistviewHTML.push('<dt class="chfrowfname">');
				}

				chflistviewHTML.push('<a class="pwx_inerror_link" title="',ambi18n.custcomp.charted_forms_o1.VIEW_FORM,'"',
					'onClick="pwx_form_launch(' + pid + ',' + encid + ',0.0,' + pwxdata.CHARTFORM.FORM[i].FORM_ACTIVITY_ID + ',1)">',
					pwxdata.CHARTFORM.FORM[i].FORM_NAME,
					'</a>',
					'</dt>');
			} else {
				if (pwxdata.CHARTFORM.FORM[i].PERSON[0].CHARTFORM_USER_IND == '1') {
					chflistviewHTML.push('<dt class="chfrowfname" style="font-weight:bold;">');
				} else {
					chflistviewHTML.push('<dt class="chfrowfname">');
				}
			}
			if (pwxdata.CHARTFORM.FORM[i].FORM_STATUS_IND != 3) {
				chflistviewHTML.push('<a class="pwx_result_link" title="',ambi18n.custcomp.charted_forms_o1.VIEW_FORM,'"',
					'onClick="pwx_form_launch(' + pid + ',' + encid + ',0.0,' + pwxdata.CHARTFORM.FORM[i].FORM_ACTIVITY_ID + ',1)">',
					pwxdata.CHARTFORM.FORM[i].FORM_NAME,
					'</a>',
					'</dt>');
			}
			chflistviewHTML.push('<dt class="pwx_chart_action_menu_icon">');
			if (enable_menu == 1) {
				if (pwxdata.CHARTFORM.FORM[i].FORM_STATUS_IND == 3) {
					chflistviewHTML.push('<span style="width:12px">&nbsp;</span>');
				}
				else{
					chflistviewHTML.push('<span class="pwx-icon_submenu_arrow-icon">&nbsp;</span>');
				}
			}
			else{
				chflistviewHTML.push('<span style="width:12px">&nbsp;</span>');
			}
			chflistviewHTML.push('</dt>',
				'<dt class="pwx_chart_form_id_hidden">' + pwxdata.CHARTFORM.FORM[i].FORM_ACTIVITY_ID + '</dt>',
				'<dt class="pwx_chart_form_ref_id_hidden">' + pwxdata.CHARTFORM.FORM[i].FORM_REF_ID + '</dt>',
				'<dt class="pwx_2_col_chfn_row_value_auth chfrowname pwx_grey pwx_small_text">' + pwxdata.CHARTFORM.FORM[i].CHARTED_BY_COPY + '</dt>',
				'<dt class="pwx_2_col_chfd_row_value_auth chfrowdate pwx_grey pwx_small_text">' + visitast + '</dt>',
				'</dl>');

		}
	}
	if (pwx_chartedform_listview_status_length == 0) {
		if (pwx_chartedform_listview_org_length != 0) {
			chflistviewHTML.push('<dl class="pwx_grey_border_top-info-error-text"><dt class="pwx_single_dt_wpad"><span class="res-none">',ambi18n.custcomp.charted_forms_o1.FILTERED_FORMS_NOTFOUND,'</span></dt></dl>');
		} else {
			chflistviewHTML.push('<dl class="pwx_grey_border_top-info"><dt class="pwx_single_dt_wpad"><span class="res-none">',ambi18n.custcomp.charted_forms_o1.NO_RESULTS_FOUND,'</span></dt></dl>');
		}
	}
	return chflistviewHTML;
}
/** Render the form name with Group By content **/
function pwxchartedformRendergroupbyContent(pwxdata, chartedformgroup, pid, encid, uid, posid, scrollsetting, rvalue, chflistviewHTML, pwx_chartedform_groupview_org_length, pwx_chartedform_groupview_status_length, enable_menu) {
	// Check for group by filter
	pwxformgroupHvrArray = [];
	var e = document.getElementById("pwx_chartedform_range_groupby");
	var dvalue = e.options[e.selectedIndex].value;
    var pwxformgroupjsonindex = 0;
	if (pwxdata.CHARTFORM.FORM.length > 0) {
		var border_type = 'pwx_grey_border_top-info';
		var border_type_chf = 'pwx_grey_border_col_row_chf';
		var pwx_chartedform_collapse_cnt = 0;

		for (var author in chartedformgroup) {
			var visitast = '';
			var visithoverast = 0;			
			chflistviewHTML.push('<dl style="width:99.5%;" class="pwxnopad-info"><dt class="pwx_single_sub_sec_dt"><a id="pwx_chartedform_groupby_title' + pwx_chartedform_collapse_cnt + '" class="pwx_sub_sec_link" title="' + ambi18n.custcomp.charted_forms_o1.COLLAPSE + '" ',
				'onclick="pwx_expand_collapse_scroll(\'pwx_chartedform_groupby_collapse' + pwx_chartedform_collapse_cnt + '\',\'pwx_chartedform_groupby_title' + pwx_chartedform_collapse_cnt + '\',\'pwx_chartedform_groupby_tgl' + pwx_chartedform_collapse_cnt + '\',\'pwx_charted_scroll_div\',' + scrollsetting + ')">',
				'<h3 class="sub-sec-hd"><span id="pwx_chartedform_groupby_tgl' + pwx_chartedform_collapse_cnt + '" class="pwx-sub-sec-hd-tgl">-</span>');
			if (dvalue == "VISIT_DATE") {
				if(author != "") {
					var headvisUTCDate = new Date();
					headvisUTCDate.setISO8601(author);
					var headvisitDt =  headvisUTCDate.format("shortDate2");
				} else {
					var headvisitDt =  "--";
				}
				chflistviewHTML.push('<span class="pwx_header_black">' + ambi18n.custcomp.charted_forms_o1.VISIT+ ': ' + headvisitDt + '<span class="pwx_small_text"> (' + chartedformgroup[author].length + ')</span></span></h3></a></dt></dl>');
			} else {
				chflistviewHTML.push('<span class="pwx_header_black">' + author + '<span class="pwx_small_text"> (' + chartedformgroup[author].length + ')</span></span></h3></a></dt></dl>');
			}
			chflistviewHTML.push('<div id="pwx_chartedform_groupby_collapse' + pwx_chartedform_collapse_cnt + '" style="display:block">');

			$.each(chartedformgroup[author], function (i, val) {
				var pastchartedgrouphvr = "";
				var myHvr = new Array(6);
				myHvr[0] = new Array(2);
				myHvr[0][0] = ambi18n.custcomp.charted_forms_o1.FORM_NAME + ':';
				myHvr[0][1] = val.FORM_NAME;
				myHvr[1] = new Array(2);
				myHvr[1][0] = ambi18n.custcomp.charted_forms_o1.CHARTED_DATE + ':';
				//myHvr[1][1] = pwxdata.CHARTFORM.FORM[i].FORM_HOVER_DT;
				if(val.FORM_CHART_DT != "") {
					var formUTCDate = new Date();
					formUTCDate.setISO8601(val.FORM_CHART_DT);
					myHvr[1][1] =  formUTCDate.format("longDateTime3");
				}
				else {
					myHvr[1][1] =  "--";
				}
				if (val.VISIT_IND == 1 && rvalue != "cvisit") {
					visitast = myHvr[1][1] + '<span id="chf_visitdate">*</span>';
					visithoverast = 1;
				} else {
					visitast = myHvr[1][1];
				}

				myHvr[2] = new Array(2);
				myHvr[2][0] = ambi18n.custcomp.charted_forms_o1.CHARTED_BY + ':';
				myHvr[2][1] = '';
				if (val.PERSON.length > 0) {
					myHvr[3] = new Array(2);
					myHvr[3][0] = '<span class="pwx_small_text" style="padding-left:5px;">&nbsp;</span>';
					myHvr[3][1] = '<span class="pwx_normal_line_height_chf pwx_small_text">';
					for (var cc = 0; cc < val.PERSON.length; cc++) {
						if (cc != 0) {
							myHvr[3][1] += '<br/>';
						}
						if(val.PERSON[cc].ACTION_DT != "") {
							var actUTCDate = new Date();
							actUTCDate.setISO8601(val.PERSON[cc].ACTION_DT);
							var actDt =  actUTCDate.format("shortDate2");
						} else {
							var actDt =  "--";
						}
						myHvr[3][1] += val.PERSON[cc].CHARTED_BY + '<span class="pwx_grey"> (' + actDt + ')</span>';						
					}
					myHvr[3][1] += '</span>';
				}
				myHvr[4] = new Array(2);
				myHvr[4][0] = 'Status:';
				myHvr[4][1] = val.FORM_STATUS_CD;

				myHvr[5] = new Array(2);
				myHvr[5][0] = 'Visit:';
				if(val.VISIT_DATE != "") {
					var visUTCDate = new Date();
					visUTCDate.setISO8601(val.VISIT_DATE);
					var visitDt =  visUTCDate.format("shortDate2");
				} else {
					var visitDt =  "--";
				}
				myHvr[5][1] = visitDt + ' | ' + val.VISIT_LOC + ' | ' + 'FIN:' + val.FIN;

				if (visithoverast == 1) {
					hvrlen = myHvr.length;
					myHvr.length = hvrlen + 1
						myHvr[hvrlen] = new Array(2);
					myHvr[hvrlen][0] = '<span class="pwx_small_text">* ' + ambi18n.custcomp.charted_forms_o1.CHARTEDONVISIT + '</span>'
						myHvr[hvrlen][1] = '';
				}
                pwxformgroupHvrArray.push(myHvr);
				chflistviewHTML.push('<dl id="formgroupview_row_'+pwxformgroupjsonindex+'" class="' + border_type_chf + ' form-info">');

				if (val.FORM_STATUS_IND == 1) {
					if (val.PERSON[0].CHARTFORM_USER_IND == '1') {
						chflistviewHTML.push('<dt class="chfrowfname" style="font-style:italic;font-weight:bold;">');
					} else {
						chflistviewHTML.push('<dt class="chfrowfname" style="font-style:italic;">');
					}
				} else if (val.FORM_STATUS_IND == 3) {
					if (val.PERSON[0].CHARTFORM_USER_IND == '1') {
						chflistviewHTML.push('<dt class="chfrowfname" style="font-weight:bold;">');
					} else {
						chflistviewHTML.push('<dt class="chfrowfname">');
					}

					chflistviewHTML.push('<a class="pwx_inerror_link" title="' + ambi18n.custcomp.charted_forms_o1.VIEW_FORM + '"',
						'onClick="pwx_form_launch(' + pid + ',' + encid + ',0.0,' + val.FORM_ACTIVITY_ID + ',1)">',
						val.FORM_NAME,
						'</a>',
						'</dt>');
				} else {
					if (val.PERSON[0].CHARTFORM_USER_IND == '1') {
						chflistviewHTML.push('<dt class="chfrowfname" style="font-weight:bold;">');
					} else {
						chflistviewHTML.push('<dt class="chfrowfname">');
					}
				}
				if (val.FORM_STATUS_IND != 3) {
					chflistviewHTML.push('<a class="pwx_result_link" title="' + ambi18n.custcomp.charted_forms_o1.VIEW_FORM + '"',
						'onClick="pwx_form_launch(' + pid + ',' + encid + ',0.0,' + val.FORM_ACTIVITY_ID + ',1)">',
						val.FORM_NAME,
						'</a>',
						'</dt>');
				}
				chflistviewHTML.push('<dt class="pwx_chart_action_menu_icon">');
				if (enable_menu == 1) {
					if (val.FORM_STATUS_IND == 3) {
						chflistviewHTML.push('<span style="width:12px">&nbsp;</span>');
					}
					else {
						chflistviewHTML.push('<span class="pwx-icon_submenu_arrow-icon">&nbsp;</span>');
					}
				}else{
				chflistviewHTML.push('<span style="width:12px">&nbsp;</span>');
				}
				chflistviewHTML.push('</dt>',
					'<dt class="pwx_chart_form_id_hidden">' + val.FORM_ACTIVITY_ID + '</dt>',
					'<dt class="pwx_chart_form_ref_id_hidden">' + val.FORM_REF_ID + '</dt>',
					'<dt class="pwx_2_col_chfn_row_value_auth chfrowname pwx_grey pwx_small_text">' + val.CHARTED_BY_COPY + '</dt>',
					'<dt class="pwx_2_col_chfd_row_value_auth chfrowdate pwx_grey pwx_small_text">' + visitast + '</dt>',
					'</dl>');
				border_type = 'pwx_grey_border-info';
				pwxformgroupjsonindex = pwxformgroupjsonindex + 1;
			});
			chflistviewHTML.push('</div>');
			pwx_chartedform_collapse_cnt = pwx_chartedform_collapse_cnt + 1;
		}
	}
	if (pwx_chartedform_groupview_status_length == 0) {
		if (pwx_chartedform_groupview_org_length != 0) {
			chflistviewHTML.push('<dl class="pwx_grey_border_top-info-error-text"><dt class="pwx_single_dt_wpad"><span class="res-none"> ',ambi18n.custcomp.charted_forms_o1.FILTERED_FORMS_NOTFOUND,'</span></dt></dl>');
		} else {
			chflistviewHTML.push('<dl class="pwx_grey_border_top-info"><dt class="pwx_single_dt_wpad"><span class="res-none">',ambi18n.custcomp.charted_forms_o1.NO_RESULTS_FOUND,'</span></dt></dl>');
		}
	}
	return chflistviewHTML;
}
/** Set the counter value in the header by calling this dynamic function **/
function pwxchartedcompstatuscountfilter(cnt) {
	$("#pwx_charted_forms_header_count").html('(' + cnt + ')');
}
/* Filter the content based on drop down selection  */
function pwxcharteddaterange(pwxdata, all, pid, encid, uid, posid, scrollsetting, dateclearind) {
	var e = document.getElementById("pwx_chart_form_range");
	var rvalue = e.options[e.selectedIndex].value;

	var e = document.getElementById("pwx_chart_form_filter");
	var svalue = e.options[e.selectedIndex].value;

	//check the current status of checkmark if on pass value in ccl parameter
	if ($("#pwx-charted-checkbox").is(':checked')) {
		var m_forms = "myforms";
	} else {
		var m_forms = "myforms_inactive";
	}

	$('#pwx-charted-checkbox').off('click');

	// check the value of look back and clear the date box if previous date selected
	if (dateclearind == 'dateclear') {
		var pwx_chartedform_loop_back_year_count = pwxdata.CHARTFORM.LOOPBACKYEAR_COUNT;
		$("#pwx_form_from").val("");
		$("#pwx_form_to").val("");
		$("#pwx_form_from").datepicker('setDate', 'c-' + pwx_chartedform_loop_back_year_count + 'y')
		$("#pwx_form_to").datepicker('setDate', 'c-0y')
	}
	if (rvalue == "all") {
		var f = "";
		var t = "";
		var contentelement = $('#pwx_chart_form_contentid');
		contentelement.html('<div class="pwx_loading_div" id="pwx-loading_text">' + ambi18n.custcomp.charted_forms_o1.LOADING_TEXT + '...</div>');
		var sendarr = ["^mine^", pid + ".0", encid + ".0", uid + ".0", posid + ".0", "^" + f + "^", "^" + t + "^", "^" + rvalue + "^", "^" + m_forms + "^"];
		PWX_CCL_CHART_FORM_Request("AMB_CUST_MP_CHARTED_FORM", sendarr, true, function () {
			RenderChartedFormList(this, from_date, to_date, all, pid, encid, uid, posid, scrollsetting, rvalue);
			$("#pwx_chart_date_area").hide();
		});
		// FIX THIS, check on this code repeated a bunch
	} else {
		$('#pwx_chart_date_area').show();
	}
	if (rvalue == "cvisit") {
		var f = "";
		var t = "";
		var contentelement = $('#pwx_chart_form_contentid');
		contentelement.html('<div class="pwx_loading_div" id="pwx-loading_text">' + ambi18n.custcomp.charted_forms_o1.LOADING_TEXT + '...</div>');
		var sendarr = ["^mine^", pid + ".0", encid + ".0", uid + ".0", posid + ".0", "^" + f + "^", "^" + t + "^", "^" + rvalue + "^", "^" + m_forms + "^"];
		PWX_CCL_CHART_FORM_Request("AMB_CUST_MP_CHARTED_FORM", sendarr, true, function () {
			RenderChartedFormList(this, from_date, to_date, all, pid, encid, uid, posid, scrollsetting, rvalue);
			$("#pwx_chart_date_area").hide();
		});
	} else {
		$('#pwx_chart_date_area').show();
	}
	if (rvalue == "lpback") {
		var f = "";
		var t = "";
		var contentelement = $('#pwx_chart_form_contentid');
		contentelement.html('<div class="pwx_loading_div" id="pwx-loading_text">' + ambi18n.custcomp.charted_forms_o1.LOADING_TEXT + '...</div>');
		var sendarr = ["^mine^", pid + ".0", encid + ".0", uid + ".0", posid + ".0", "^" + f + "^", "^" + t + "^", "^" + rvalue + "^", "^" + m_forms + "^"];
		PWX_CCL_CHART_FORM_Request("AMB_CUST_MP_CHARTED_FORM", sendarr, true, function () {
			RenderChartedFormList(this, from_date, to_date, all, pid, encid, uid, posid, scrollsetting, rvalue);
			$("#pwx_chart_date_area").hide();
		});
	} else {
		$('#pwx_chart_date_area').show();
	}
	if (rvalue == "drange") {
		$('#pwx_chart_date_area').show();
		var from_date1 = $("#pwx_form_from").val();
		var to_date1 = $("#pwx_form_to").val();
		var rvaluedate = ""; //just pass blank string to match promte in ccl otherwise there is no need to pass
		if (from_date1 != "" && to_date1 != "") {
			var contentelement = $('#pwx_chart_form_contentid');
			contentelement.html('<div class="pwx_loading_div" id="pwx-loading_text">' + ambi18n.custcomp.charted_forms_o1.LOADING_TEXT + '...</div>');
			var sendarr = ["^mine^", pid + ".0", encid + ".0", uid + ".0", posid + ".0", "^" + from_date1 + "^", "^" + to_date1 + "^", "^" + rvaluedate + "^", "^" + m_forms + "^"];
			PWX_CCL_CHART_FORM_Request("AMB_CUST_MP_CHARTED_FORM", sendarr, true, function () {
				RenderChartedFormList(this, from_date, to_date, all, pid, encid, uid, posid, scrollsetting, rvalue);
				pwx_charted_date_range_box_datechange_ind = 1;
			});
		}
	} else {
		$('#pwx_chart_date_area').hide();
	}
}
/* Filter the content based on group by drop down  */
function pwxchartedcompgroupbyfilter(pwxdata, all, pid, encid, uid, posid, scrollsetting, rvalue) {
	$('#pwx_chart_form_contentid').empty()
	pwxcharteddaterange(pwxdata, all, pid, encid, uid, posid, scrollsetting, "");
}
/* filter the content based on status */
function pwxchartedcompstatusfilter(pwxorig, all, pid, encid, uid, posid, scrollsetting, rvalue) {
	$('#pwx_chart_form_contentid').empty()
	pwxcharteddaterange(pwxorig, all, pid, encid, uid, posid, scrollsetting, "");
}
//function to call a ccl script to remove prsnl_reltns or encounter_reltns
function PWX_CCL_Request_Remove_Chart(program, param1, param2, param3, param4, async) {
	var pid = pwxchartedcopymainobj.getProperty("personId");
	var encid = pwxchartedcopymainobj.getProperty("encounterId");
	var uid = pwxchartedcopymainobj.getProperty("userId");
	var posid = pwxchartedcopymainobj.getProperty("positionCd");
	var pwxcharteddatedate1 = "";
	var pwxcharteddatedate2 = "";
	var info = new XMLCclRequest();
	info.onreadystatechange = function () {
		if (info.readyState == 4 && info.status == 200) {
			var jsonEval = JSON.parse(this.responseText);
			var recordData = jsonEval.JSON_RETURN;
			if (recordData.STATUS_DATA.STATUS != "S") {
		        pwxerrormodal(this.status,this.requestText,"Error!") 
			} else {
				var e = document.getElementById("pwx_chart_form_range");
				pwx_chartform_display_filter_status = e.options[e.selectedIndex].value;
				var e = document.getElementById("pwx_chart_form_filter");
				pwx_chartform_status_filter_status = e.options[e.selectedIndex].value;
				var e = document.getElementById("pwx_chartedform_range_groupby");
				pwx_chartform_groupby_filter_status = e.options[e.selectedIndex].value;
				pwx_chartform_from_date = $("#pwx_form_from").val();
				pwx_chartform_to_date = $("#pwx_form_to").val();
				if ($("#pwx-charted-checkbox").is(':checked')) {
					pwx_chartform_checkbox_status = "myforms";
				} else {
					pwx_chartform_checkbox_status = "myforms_inactive";
				}
				var comp = MPage.getCustomComp(param4);
				comp.refresh();
			}
		}
	};
	var sendArr = ["^MINE^", param1 + ".0", param2 + ".0", "^" + param3 + "^"];
	info.open('GET', program, async);
	info.send(sendArr.join(","));
}




/*Begin of Custom Component source code Core Measures*/
/*Updating for 4.4 CCL script*/
MPage.namespace("cerner");

//sl014066:  These are options that are loaded into the components option structure and can be accessable through getOption() and setOption()
var LH_QM_customCompOptions = {
	encntrFilter: 2,
	lookbackNum: 2,
	lookbackUnit: 2,
	conditionId: 0.0
};

MPage.namespace("cerner");
cerner.lh_quality_measures_44 = function(){};
cerner.lh_quality_measures_44.prototype = new MPage.Component();
cerner.lh_quality_measures_44.prototype.constructor = MPage.Component;
cerner.lh_quality_measures_44.prototype.base = MPage.Component.prototype;
cerner.lh_quality_measures_44.prototype.name = "cerner.lh_quality_measures_44"; //Version 4.4
//sl014066:  This is where you can define the script to use when your component loads
cerner.lh_quality_measures_44.prototype.cclProgram = "lh_mp_component"; // wrap ccl script for all versions
//sl014066;  You can have predefined parameters here, but most likely you will load the in the init() function
cerner.lh_quality_measures_44.prototype.cclParams = [];
//sl014066:  The custom component framework will create a JavaScript object automagically for you if you set this variable to JSON.  Same deal with XML.
cerner.lh_quality_measures_44.prototype.cclDataType = "JSON";
cerner.lh_quality_measures_44.prototype.init = function(options){
    var index = cerner.lh_quality_measures_44.prototype.PrepCookie(this);
    var cookieContent = JSON.parse(cerner.lh_quality_measures_44.prototype.getCookie('lh_quality_measures_44'));
	var params = [];

	params.push("mine");
	//sl014066:  Use the getPorperty methods to get properties made accassable through the architecture
	//Those properties inclue; id, parentComp, personId, userId, encounterId, pprCd, staticContent, positionCd, categoryMean, viewableEncounters, headerTitle, headerOverflowState
	params.push(this.getProperty("personId"));
	params.push(this.getProperty("encounterId"));
	params.push(this.getProperty("userId"));
	params.push(this.getProperty("positionCd"));
	params.push(this.getProperty("pprCd"));
	//sl014066:  These are the options defined in the customCompOptions1 variable above.
	params.push(this.getOption("encntrFilter"));
	params.push(this.getOption("lookbackNum"));
	params.push(this.getOption("lookbackUnit"));
	
	var condition = cookieContent.data[index].selectedIndex;
	if (!isNaN(condition))
	{
		params.push(condition);
	}
	else
	{
		params.push(0.0);
	}

	this.cclParams = params;
//}

};

cerner.lh_quality_measures_44.prototype.render = function(){
    var index = cerner.lh_quality_measures_44.prototype.PrepCookie(this);
    var cookieContent = JSON.parse(cerner.lh_quality_measures_44.prototype.getCookie('lh_quality_measures_44'));
	//Takes the data in this.data and loads it into target
	var element = this.getTarget();
	var ar=[];
	var comp = this;
	var compId = this.getComponentUid();

	try{
		//sl014066:  No need to parse any JSON since the architecture does it for us
		var jsonObj = this.data;
    	var recordData = jsonObj.RECORD_DATA;
		//sl014066:  If you want to show the total outcomes as a count in the subheader you can use component.setProperty("headerSubTitle", "("+totalOutcomes+")").  See three lines below
		var totalOutcomes=recordData.OUTCOMES_COMPLETE.length+recordData.OUTCOMES_INCOMPLETE.length;
		var custComp = this;
		custComp.setProperty("headerSubTitle", "("+totalOutcomes+")");
		ar.push("<div class='lh-content-body scrollable'>");

		//Show all Qualifying Conditions in drop down list
		ar.push("<div class='lh-qm-cbo'><form><span class='lh-qm-cond-lbl'>", recordData.FILTERDISPLAY, "</span><select id='qmTask",compId,"'>");

		//Debugging
		//ar.push("<option value='testing condition 1 id' selected='selected'>testing 1</option>");
		//ar.push("<option value='testing condition 2 id'>testing 2</option>");

		var strAlarmClock = "";
		var path = this.getProperty("compSourceLocation");
		
		//if path exists, this is Mpages 5.X, otherwise it is pre-5.X
		if (path && path != 'undefined')
		{
			var strAlarmIcon = "'" + path + "img/4798_16.png'";
		}
		else
		{
			path = this.getProperty("staticContent");
			var strAlarmIcon = "'" + path + "\\custom-components\\img\\4798_16.png'";
		}

		for(var i=0;i<recordData.CONDITIONS.length;i++){
			if(recordData.CONDITIONS[i].CONDITION_ID==recordData.SELECTED_CONDITION_ID)
			{
				ar.push("<option value="+recordData.CONDITIONS[i].CONDITION_ID
						+" selected='selected'>"+recordData.CONDITIONS[i].CONDITION_NAME+"</option>");
			}else{
			ar.push("<option value="+recordData.CONDITIONS[i].CONDITION_ID+">"
					+recordData.CONDITIONS[i].CONDITION_NAME+"</option>");
			}
		}

		ar.push("</select></form></div>");

		//DIV for Incomplete and Compelete
		ar.push("<div id='condID",compId,"'>");

		//Incomplete Section
		ar.push("<div id='incomp" + compId + "' class='lh-sub-sec'>");

			ar.push("<h3 class='lh-sub-sec-hd'><span class='lh-sub-sec-hd-tgl' title=",i18n.HIDE_SECTION,">-</span><span class='lh-sub-sec-title'>"
					,i18n.QM_INCOMPLETE," (",recordData.OUTCOMES_INCOMPLETE.length,")</span></h3>");

			ar.push("<div class='lh-sub-sec-content'>");

			if(recordData.OUTCOMES_INCOMPLETE.length>0)
			{
				for(var j=0;j<recordData.OUTCOMES_INCOMPLETE.length;j++){

					//*Create new section for each outcome (ex:VTE Overlap Therapy)
					ar.push("<div class='lh-sub-sub-sec-content'>"); //*001 New class

						var tip = "Tip" + j;

						var hoverDisplay = "";
						hoverDisplay = recordData.OUTCOMES_INCOMPLETE[j].HOVERDISPLAY;

							//Hover Div
							ar.push("<div id= ",tip," left='' top='' style='position:absolute; z-index:1000;background-color:#FFC;border:1px solid #000;padding:5px; visibility: hidden;'>"
							,hoverDisplay,"</div>");

						//*Create Outcome header with toggle

						strAlarmClock = "";
						if (recordData.OUTCOMES_INCOMPLETE[j].SHOWICONIND == '1')
						{
							strAlarmClock += "<span>&nbsp;&nbsp;&nbsp;";
							strAlarmClock += "<img src=" + strAlarmIcon + "/>" ;
							strAlarmClock += "</span>"
						}

						ar.push("<h3 class='lh-sub-sec-hd-test'><span class='lh-sub-sec-hd-tgl' title=",i18n.HIDE_SECTION
							,">-</span><span class='lh-sub-sec-title' onmouseover='cerner.lh_quality_measures_44.prototype.ShowHover(\"" + recordData.OUTCOMES_INCOMPLETE[j].HOVERDISPLAY + "\"," + j + "," + 0 + "," + -15 + ");' onmouseout='cerner.lh_quality_measures_44.prototype.HideHover(",j,");'>"
							,recordData.OUTCOMES_INCOMPLETE[j].OUTCOME_NAME,"</span>",strAlarmClock,"</h3>");
						ar.push("<div class='lh-sub-sec-content'>");

							//Loop through each Measure
							for(var k=0;k<recordData.OUTCOMES_INCOMPLETE[j].MEASURES.length;k++){

								//Reset for each Measure
								firstTaskFound = 0;

								//Create each Measures (ex:Warfarin)
								ar.push("<dl class='lh-qm-info'>");
								ar.push("<dt><span>measure</span></dt><dd class='lh-qm-ic-name'><span>"
								,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].NAME,"</span></dd>");
								ar.push("</dl>");


								//Create each Measures Data (ex:Order Administer Reconcile)
								ar.push("<dl class='lh-qm-info'>");
								ar.push("<dt>");
								ar.push("<dd class='lh-qm-ic-name-grp'>"); //* New Class 001

								//If ORDERS is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERSETIND == 1){

									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERPRESENTIND == 1){
										ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInOrder'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERINCOMPLETEDISPLAY,"</span>");
									} else {
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERMEASUREIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERMEASUREIND == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.ORDERDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERTASKIND == 1){
											ar.push("<a id = 'openInOrder' onclick='cerner.lh_quality_measures_44.prototype.OpenQMOrderWindow(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ORDERDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORDERTASKIND == 2){
											ar.push("<a id = 'openInOrder' onclick='cerner.lh_quality_measures_44.prototype.OpenQMOrderProfileWindow(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ORDERDISPLAY,"</a>");
										}

									}
									firstTaskFound = 1;

								}

								//If COLLECT is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLSETIND == 1){

									if (firstTaskFound == 1){
										ar.push(" | ");
									}
 
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLPRESENTIND == 1){
										ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInCol'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLINCOMPLETEDISPLAY,"</span>");
									} else {
										if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTASKIND == 1){ //MOEW
											ar.push("<a id = 'openInPresOrder' onclick='cerner.lh_quality_measures_44.prototype.OpenQMOrderWindow("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.COLDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTASKIND == 3){ // POWERFORM
											ar.push("<a id = 'openInColForm' onclick='cerner.lh_quality_measures_44.prototype.OpenQMForm("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + "," +recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLFORMID +")'>",recordData.COLDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTASKIND == 4){ //IVIEW
											ar.push("<a id = 'openInDocView' onclick='cerner.lh_quality_measures_44.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.COLDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTASKIND == 5){ //PowerNote
										
											//support old powernote as well
											if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTABNAME.indexOf("!") > 0)
												{ar.push("<a id = 'openInDocNote' onclick='cerner.lh_quality_measures_44.prototype.OpenQMPowerNote(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTABNAME + "\"," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.COLDISPLAY,"</a>");}
											else
												{ar.push("<a id = 'openInDocNote' onclick='cerner.lh_quality_measures_44.prototype.AddEPByCKI(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].COLTABNAME + "\"," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.COLDISPLAY,"</a>");}

										}

									}

									firstTaskFound = 1;
								}


								//If ADMINISTER is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINSETIND == 1){

									if (firstTaskFound == 1){
										ar.push(" | ");
									}

									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINPRESENTIND == 1){
										ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInAdmin'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMININCOMPLETEDISPLAY,"</span>");
									} else{
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERMEASUREIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERMEASUREIND == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.ADMINDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTASKIND == 2){ //MAR
											ar.push("<a id = 'openInAdminMAR' onclick='cerner.lh_quality_measures_44.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ADMINDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTASKIND == 3){ //PowerForm
											ar.push("<a id = 'openInAdminForm' onclick='cerner.lh_quality_measures_44.prototype.OpenQMForm("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + "," +recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINFORMID +")'>",recordData.ADMINDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTASKIND == 4){ //IView
											ar.push("<a id = 'openInAdminView' onclick='cerner.lh_quality_measures_44.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ADMINTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.ADMINDISPLAY,"</a>");
										}

									}

									firstTaskFound = 1;
								}


								//If PRESCRIBE is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESSETIND == 1){
									if (firstTaskFound == 1){
										ar.push(" | ");
									}

									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESPRESENTIND == 1){
										ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInPres'>" //* New Class 001
										,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESINCOMPLETEDISPLAY,"</span>");
									} else{
										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERACEIPRESIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERPRESAMIIND == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.PRESDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERARBPRESIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERPRESAMIIND == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.PRESDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERMEASUREIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERMEASUREIND == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.PRESDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESTASKIND == 1){ //MOEW
											ar.push("<a id = 'openInPresOrder' onclick='cerner.lh_quality_measures_44.prototype.OpenQMOrderWindow("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.PRESDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].PRESTASKIND == 6){ //MedsRec
											ar.push("<a id = 'openInPresRec' onclick='cerner.lh_quality_measures_44.prototype.OpenQMMedsRec("+ recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.PRESDISPLAY,"</a>");
										}
									}

									firstTaskFound = 1;
								}


								//If DOCUMENT is part of this Measure
								if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCSETIND == 1){

									if (firstTaskFound == 1){
										ar.push(" | ");
									}
									if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCPRESENTIND == 1){

										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DELAYDITHERIND == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].VANCOPRESIND == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										//PCI Delay = 2
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 2 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DELAYDITHERIND == 2){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else {
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>" //* New Class 001
											,recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCINCOMPLETEDISPLAY,"</span>");
										}
									} else{

										if (recordData.OUTCOMES_INCOMPLETE[j].DITHERMEASUREIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DITHERMEASUREIND == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										} //VTE Oral Factor Xa
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 3 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].ORALFACTORDITHER == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].ADMINMETIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].CONTRAIND == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].PRESMETIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].CONTRAIND == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DELAYDITHERIND == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].VANCOPRESIND == 1){
											ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayInDoc'>",recordData.DOCDISPLAY,"</span>");
										}

										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 1){ //MOEW
											ar.push("<a id = 'openInDocOrder' onclick='cerner.lh_quality_measures_44.prototype.OpenQMOrderWindow(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 3){ //PowerForm

											ar.push("<a id = 'openInDocForm' onclick='cerner.lh_quality_measures_44.prototype.OpenQMForm(" + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + "," + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCFORMID +")'>",recordData.DOCDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 4){ //IVIEW
											ar.push("<a id = 'openInDocView' onclick='cerner.lh_quality_measures_44.prototype.OpenChartTab(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTABNAME + "\" ," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");
										}
										else if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTASKIND == 5){ //PowerNote
												//support old powernote as well
												if (recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTABNAME.indexOf("!") > 0)
													{ar.push("<a id = 'openInDocNote' onclick='cerner.lh_quality_measures_44.prototype.OpenQMPowerNote(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTABNAME + "\"," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");}
												else
													{ar.push("<a id = 'openInDocNote' onclick='cerner.lh_quality_measures_44.prototype.AddEPByCKI(\"" + recordData.OUTCOMES_INCOMPLETE[j].MEASURES[k].DOCTABNAME + "\"," + recordData.PERSON_ID + "," +  recordData.ENCNTR_ID + ")'>",recordData.DOCDISPLAY,"</a>");}
											
										}

									}

									firstTaskFound = 1;
								}

								ar.push("</dd>");
								ar.push("</dt>");
								ar.push("</dl>");

							} //for(var k=0;k<recordData.OUTCOMES_INCOMPLETE[j].MEASURES.length;k++){ , Loop through each measure


						ar.push("</div>");//ar.push("<div class='lh-sub-sec-content'>");

						//*Close DIV for Outcome
						ar.push("</div>"); //ar.push("<div class='lh-sub-sub-sec-content'>"); //*001 New class

						//*Shows docuemnt icon on mouseover* ar.push("<dl class='lh-qm-info' onmouseover='CERN_QUALITY_MEASURES_O1.ShowIcon(this)' onmouseout='CERN_QUALITY_MEASURES_O1.HideIcon(this)'>");
						//*Prints outcome name* ar.push("<dt><span>measure</span></dt><dd class='lh-qm-ic-name'><span>"+recordData.OUTCOMES_INCOMPLETE[j].OUTCOME_NAME+"</span></dd>");
						//*Lauches specific Powerform for outcome* ar.push("<dt><span>measure</span></dt><dd class='qm-doc'><span class='cmp-doc' onclick='CERN_QUALITY_MEASURES_O1.OpenQMDoc("+recordData.OUTCOMES_INCOMPLETE[j].FORM_REF_ID+","+recordData.OUTCOMES_INCOMPLETE[j].FORM_ACT_ID+")'>&nbsp;</span></dd>");
						//*Close dl* ar.push("</dl>");

					} //for(var j=0;j<recordData.OUTCOMES_INCOMPLETE.length;j++){ , Loop through each outcome


				}else{ //(recordData.OUTCOMES_INCOMPLETE.length>0)
					ar.push("<span class='lh-res-none'>",i18n.NO_RESULTS_FOUND,"</span>");
				}

			ar.push("</div>"); //ar.push("<div class='lh-sub-sec-content'>");
		ar.push("</div>");	//ar.push("<div class='lh-sub-sec'>");, Incomplete Section

		//Complete Section
		ar.push("<div id='comp" + compId + "' class='lh-sub-sec'>");

			ar.push("<h3 class='lh-sub-sec-hd'><span class = 'lh-sub-sec-hd-tgl' title="+i18n.HIDE_SECTION+"></span><span class='lh-sub-sec-title'>"
				+i18n.QM_COMPLETE+" (",recordData.OUTCOMES_COMPLETE.length,")</span></h3>");

				ar.push("<div class='lh-sub-sec-content'>");

				if(recordData.OUTCOMES_COMPLETE.length>0){

					for(var j=0;j<recordData.OUTCOMES_COMPLETE.length;j++){

						//*Create new section for each outcome (ex:VTE Overlap Therapy)
						ar.push("<div class='lh-sub-sub-sec-content'>"); //*001 New class

						var tip2 = "TipA" + j;

						var hover2Display = "";
						hover2Display = recordData.OUTCOMES_COMPLETE[j].HOVERDISPLAY;

						//Hover Div
						ar.push("<div id= ",tip2," left='' top='' style='position:absolute; z-index:1000;background-color:#FFC;border:1px solid #000; visibility: hidden;'>"
							,hover2Display,"</div>");

						strAlarmClock = "";
						if (recordData.OUTCOMES_COMPLETE[j].SHOWICONIND == '1')
						{
							strAlarmClock += "<span>&nbsp;&nbsp;&nbsp;";
							strAlarmClock += "<img src=" + strAlarmIcon + "/>" ;
							strAlarmClock += "</span>"
						}

						//*Create Outcome header with toggle
						ar.push("<h3 class='lh-sub-sec-hd-test'><span class='lh-sub-sec-hd-tgl' title=",i18n.HIDE_SECTION
						,">-</span><span class='lh-sub-sec-title' onmouseover='cerner.lh_quality_measures_44.prototype.ShowHover(\"" + recordData.OUTCOMES_COMPLETE[j].HOVERDISPLAY + "\"," + j + "," + 0 + "," + -15 + ",\"TipA\");' onmouseout='cerner.lh_quality_measures_44.prototype.HideHover("+ j + ",\"TipA\");'>"
						,recordData.OUTCOMES_COMPLETE[j].OUTCOME_NAME,"</span>",strAlarmClock,"</h3>");

						ar.push("<div class='lh-sub-sec-content'>");

						//Loop through each Measure
						for(var k=0;k<recordData.OUTCOMES_COMPLETE[j].MEASURES.length;k++){

							//Reset for each Measure
							firstTaskFound = 0;

							//Create each Measures (ex:Warfarin)
							ar.push("<dl class='lh-qm-info'>");
							ar.push("<dt><span>measure</span></dt><dd class='lh-qm-ic-name'><span>"
								,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].NAME,"</span></dd>");
							ar.push("</dl>");


							//Create each Measures Data (ex:Order Administer Reconcile)
							ar.push("<dl class='lh-qm-info'>");
							ar.push("<dt>");
							ar.push("<dd class='lh-qm-ic-name-grp'>"); //* New Class 001

							//If ORDERS is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ORDERSETIND == 1){

								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ORDERPRESENTIND == 1){
									ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayOrder'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ORDERCOMPLETEDISPLAY,"</span>");
								} else{
									ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayOrder'>",recordData.ORDERDISPLAY,"</span>");
								}

								firstTaskFound = 1;
							}

							//If Collect is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].COLSETIND == 1){

								if (firstTaskFound == 1){
									ar.push(" | ");
								}

								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].COLPRESENTIND == 1){
									ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayCol'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].COLCOMPLETEDISPLAY,"</span>");
								} else{
									ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayCol'>",recordData.COLDISPLAY,"</span>");
								}

								firstTaskFound = 1;
							}

							//If ADMINISTER is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ADMINSETIND == 1){
								if (firstTaskFound == 1){
									ar.push(" | ");
								}
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ADMINPRESENTIND == 1){
									ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayAdmin'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].ADMINCOMPLETEDISPLAY,"</span>");
								} else {
									ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayAdmin'>",recordData.ADMINDISPLAY,"</span>");
								}

								firstTaskFound = 1;
							}

							//If PRESCRIBE is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].PRESSETIND == 1){
								if (firstTaskFound == 1){
									ar.push(" | ");
								}
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].PRESPRESENTIND == 1){
									ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayPres'>" //* New Class 001
									,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].PRESCOMPLETEDISPLAY,"</span>");
								} else{
									ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayPres'>",recordData.PRESDISPLAY,"</span>");
								}

								firstTaskFound = 1;
							}

							//If DOCUMENT is part of this Measure
							if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DOCSETIND == 1){
								if (firstTaskFound == 1){
									ar.push(" | ");
								}
								if (recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DOCPRESENTIND == 1){

									if (recordData.OUTCOMES_COMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DELAYDITHERIND == 1){
										ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.DOCDISPLAY,"</span>");
									}
									else if (recordData.OUTCOMES_COMPLETE[j].DITHERDOCIND == 2 && recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DELAYDITHERIND == 2){
										ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.DOCDISPLAY,"</span>");
									}
									else if (recordData.OUTCOMES_COMPLETE[j].DITHERDOCIND == 1 && recordData.OUTCOMES_COMPLETE[j].MEASURES[k].VANCOPRESIND == 1) {
										ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.DOCDISPLAY,"</span>");
									}

									else{

										ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayDoc'>" //* New Class 001
										,recordData.OUTCOMES_COMPLETE[j].MEASURES[k].DOCCOMPLETEDISPLAY,"</span>");
									}

								} else{
									ar.push("<span class = 'lh-qm-ic-name-display' id = 'displayDoc'>",recordData.DOCDISPLAY,"</span>");
								}

								firstTaskFound = 1;
							}

							ar.push("</dd>");
							ar.push("</dt>");
							ar.push("</dl>");


						} //for(var k=0;k<recordData.OUTCOMES_COMPLETE[j].MEASURES.length;k++){	, Loop through each measure

						ar.push("</div>"); //ar.push("<div class='lh-sub-sec-content'>");


						//*Close DIV for Outcome
						ar.push("</div>"); //ar.push("<div class='lh-sub-sub-sec-content'>");


					} //for(var j=0;j<recordData.OUTCOMES_COMPLETE.length;j++){, Loop through each outcome
				}else{
					if(recordData.OUTCOMES_COMPLETE.length===0){
						ar.push("<span class='lh-res-none'>",i18n.NO_RESULTS_FOUND,"</span>");
					}
				}

				ar.push("</div>"); //ar.push("<div class='lh-sub-sec-content'>");

		ar.push("</div>"); //ar.push("<div class='lh-sub-sec'>");, Complete Section

		ar.push("</div>"); //ar.push("<div id='condID",compId,"'>");, DIV for Incomplete and Complete
		ar.push("</div>"); //ar.push("<div class='lh-content-body scrollable'>");


		}catch(err){

			alert("error in QM" + err);

		}
	element.innerHTML = ar.join("");
	
	var dropDown = document.getElementById("qmTask"+compId);
	var condition = cookieContent.data[index].selectedCond;
	// Set default selected condition to "All" if the cookie has not been set and dropdown has more than 1 option
	if (condition == "" && dropDown.options.length > 1) condition = "All"; 
		
	for(var i=0; i<dropDown.options.length; i++) {
		if(dropDown.options[i].text == condition){
			dropDown.selectedIndex = i;			 
		}
	}
	
	//Init subsection toggles
	//NOTE this will not work outside of Cerner's architecture
	MP_Util.Doc.InitSubToggles(element, 'lh-sub-sec-hd-tgl');
	
	// Complete Section Toggle based on bedrock indicator
	var completeSectionToggle = document.getElementById("comp" + compId).childNodes[0].firstChild;
	
	// Variable to keep track the title status, use to decide which framework this script is currently use
	// In old framework (Mpage <5.x), when the onclick function is called, the title hasn't been switched yet
	// versus new framework, title switches to new string before the onclick function run
	var titleTemp1 = completeSectionToggle.title;
	var titleTemp2 = "";
	completeSectionToggle.onclick = function (e) {
	    cookieContent.data[index].expcollInd = this.title;
	    titleTemp2 = this.title;
	    if (cookieContent.frameWork == "") cookieContent.frameWork = (titleTemp1 != titleTemp2) ? "new" : "old";
	    cerner.lh_quality_measures_44.prototype.setCookie('lh_quality_measures_44', cookieContent);
	};
	
	var expcoll_ind = cookieContent.data[index].expcollInd;
	if(expcoll_ind == ""){
		var conditions = [];
		for(var j=0 ; j < jsonObj.RECORD_DATA.CONDITIONS.length ; j++){
			if(JSON.stringify(jsonObj.RECORD_DATA.CONDITIONS[j].COLLAPSE_IND) == 1)
			{
				conditions.push(jsonObj.RECORD_DATA.CONDITIONS[j].CONDITION_NAME);
			}
		}
		
		if(jsonObj.RECORD_DATA.CONDITIONS.length==1 && conditions.length==1){

		    condition = jsonObj.RECORD_DATA.CONDITIONS.CONDITION_NAME;
		    titleTemp1 = completeSectionToggle.title;
			completeSectionToggle.click();
		}else{
			for(var m=0 ; m < conditions.length ; m++)
			{
			    if (condition == conditions[m]) {
			        titleTemp1 = completeSectionToggle.title;
					completeSectionToggle.click();	
				}
			}
		}
	}
	
	else{
		
	    if (expcoll_ind === 'Collapse' && cookieContent.frameWork === 'old')
		{
		    titleTemp1 = completeSectionToggle.title;
		    completeSectionToggle.click();
	    }
	    if (expcoll_ind === 'Expand' && cookieContent.frameWork === 'new') {
	        titleTemp1 = completeSectionToggle.title;
			completeSectionToggle.click();	
		}

	}
	
	
	
	//Add selection events to the drop down box
	//sl014066:  You have to add selection event after the HTML elements have been created because there is no way to pass objects otherwise.
	
	dropDown.onchange = function(e){
	    var index = cerner.lh_quality_measures_44.prototype.PrepCookie(comp);
	    var cookieContent = JSON.parse(cerner.lh_quality_measures_44.prototype.getCookie('lh_quality_measures_44'));
	    cookieContent.data[index].selectedIndex = this.value;
	    cookieContent.data[index].selectedCond = this.options[this.selectedIndex].text;
	    cookieContent.data[index].expcollInd = '';
	    cerner.lh_quality_measures_44.prototype.setCookie('lh_quality_measures_44', cookieContent);
		comp.LoadCondition(this.options[this.selectedIndex], comp);	
	};
	
};
cerner.lh_quality_measures_44.prototype.getCookie = function(cname) {
	// Manually define trim function for String object if currently IE does not support
	// According to IE 8, trim is not officially supported yet.
	if(!String.prototype.trim){ 
		String.prototype.trim = function(){ 
			return this.replace(/^\s+|\s+$/g,''); 
		}; 
	}
	var name = cname + "=";
	var ca = document.cookie.split(';');
	for(var i=0; i<ca.length; i++) {
		var c = ca[i].trim();
		if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
	}
	return "";
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_44.prototype.ShowHover = function(strHoverText, idValue, xOffSet, yOffSet, idStr){

	idStr = idStr || "Tip";
	
	var x = "";
	var y = "";
	var tmpID = idStr + idValue;
	var tDIV = document.getElementById(tmpID);
	
	tDIV.style.left = '';
	tDIV.style.top = '';

	x = tDIV.offsetLeft;
	tDIV.setAttribute('left',x);
	y = tDIV.offsetTop;
	tDIV.setAttribute('top',y);

	x = parseInt(x) - parseInt(xOffSet);
	y = parseInt(y) - parseInt(yOffSet);

	tDIV.style.left = x;
	tDIV.style.top = y;

	tDIV.style.width = "250px";
	//tDIV.style.cursor = "hand";
	tDIV.style.visibility = "visible";

};


//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_44.prototype.HideHover = function(valueHide,idHide){
	idHide = idHide || "Tip";
	var tmpID = idHide + valueHide;
	var tDIV = document.getElementById(tmpID);
	tDIV.style.visibility = "hidden";

};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_44.prototype.OpenQMOrderWindow = function(qmpersonId, qmencntrID){

	var orderWindowString = qmpersonId + "|" + qmencntrID + "|";
	orderWindowString += "{ORDER|0|0|0|0|0}";
	orderWindowString += "|24|{2|127}{3|127}|8";
	MP_Util.LogMpagesEventInfo(null,"ORDERS",orderWindowString,"qualitymeasures.js","OpenQMOrderWindow");
	MPAGES_EVENT("Orders",orderWindowString);

};

cerner.lh_quality_measures_44.prototype.OpenQMOrderProfileWindow = function(qmpersonId, qmencntrID){

	var mrObject = {};
	mrObject = window.external.DiscernObjectFactory("ORDERS");
	mrObject.PersonId = qmpersonId;
 	mrObject.EncntrId = qmencntrID;
 	mrObject.reconciliationMode = 0;
	MP_Util.LogMpagesEventInfo(null,"ORDERS","OpenQMMedsRec","qualitymeasures.js","OpenQMMedsRec");
	mrObject.LaunchOrdersMode(0, 0, 0); //2 -  Meds Rec

};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_44.prototype.OpenQMForm = function(qmpersonId, qmencntrID, formID){


	var dPersonId = qmpersonId;
	var dEncounterId = qmencntrID;
	var activityId = 0.0;
	var chartMode = 0;
	var mpObj = window.external.DiscernObjectFactory("POWERFORM");
	mpObj.OpenForm(dPersonId, dEncounterId, formID, activityId, chartMode);

};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_44.prototype.OpenChartTab = function(tabName, qmpersonId, qmencntrID){

	var alink = "";
	var jlink = "";

	//jw014069: Changed applink from being hardcoded to powerchart.exe to instead use variable containing currently running clone
	alink = 'javascript:APPLINK(0,"$APP_AppName$","/PERSONID=' + qmpersonId + ' /ENCNTRID=' + qmencntrID + ' /FIRSTTAB=^' + tabName + '^");';

	if(document.getElementById("hrefLaunchTab"))
	{
		document.body.removeChild(document.getElementById("hrefLaunchTab"));
	}
	jlink =  document.createElement("a");
	jlink.id = "hrefLaunchTab";
	jlink.href = alink;
	document.body.appendChild(jlink);
	document.getElementById("hrefLaunchTab").click();
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_44.prototype.OpenQMPowerNote = function(noteName, qmpersonId, qmencntrID){

	var person_id = qmpersonId;
	var encounter_id = qmencntrID;
	var noteset = "";
	noteset = person_id + "|" + encounter_id + "|";

	noteset += noteName;
	noteset += "|0";

	var noteXmlStr = MPAGES_EVENT("POWERNOTE", noteset);
};

// Global function needs to be added to the component's prototype for opening powernote
cerner.lh_quality_measures_44.prototype.AddEPByCKI = function(noteName,qmpersonId, qmencntrID){
//function AddEPByCKI(qmpersonId, qmencntrID){

	var m_dPersonId = qmpersonId;
    var m_dEncounterId = qmencntrID;
	var m_bstrEPCKISource = "";
	var m_bstrEPCKIIdentifier = "";
	if (noteName.indexOf("---") >0) {
		m_bstrEPCKISource = noteName.split("---")[0];
		m_bstrEPCKIIdentifier = noteName.split("---")[1];;
	}
	else {
		m_bstrEPCKISource = "CKI";
		m_bstrEPCKIIdentifier = noteName;
	}

	var PowerNoteMPageUtils = window.external.DiscernObjectFactory("POWERNOTE");
	PowerNoteMPageUtils.BeginNoteFromEncounterPathway(m_dPersonId, m_dEncounterId, m_bstrEPCKISource, m_bstrEPCKIIdentifier);
	
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_44.prototype.OpenQMMedsRec = function(qmpersonId, qmencntrID){

	var mrObject = {};
	var code = MP_Util.GetCodeValueByMeaning("DISCHARGEMED", 54732);
	mrObject = window.external.DiscernObjectFactory("ORDERS"); 
	mrObject.PersonId = qmpersonId; 
	mrObject.EncntrId = qmencntrID; 
	mrObject.reconciliationMode = 3;
	mrObject.defaultVenue = (code) ? code.codeValue : 0;
	MP_Util.LogMpagesEventInfo(null,"ORDERS","OpenQMMedsRec","qualitymeasures.js","OpenQMMedsRec");
	mrObject.LaunchOrdersMode(2, 0, 0); //2 -  Meds Rec
};

//sl014066: Gloabl function needs to be added to the component's prototype
cerner.lh_quality_measures_44.prototype.InitSubToggles = function(par, tog){
	 var i18nCore = i18n.discernabu;
		    var toggleArray = Util.Style.g(tog, par, "span");
		    for (var k=0; k<toggleArray.length; k++) {
		        Util.addEvent(toggleArray[k], "click", MP_Util.Doc.ExpandCollapse);
		        var checkClosed = Util.gp(Util.gp(toggleArray[k]));
		        if (Util.Style.ccss(checkClosed, "closed")) {
		            toggleArray[k].innerHTML = "+";
		            toggleArray[k].title = i18nCore.SHOW_SECTION;
		        }
		    }
};

cerner.lh_quality_measures_44.prototype.LoadCondition = function(element,comp){

	//Get the value selected in the drop down
	var selectedValue = element.value;
	var params = [];

	//Create the callback function
	var callback = function(compReference){
		compReference.render();
	};

	//Update the cclParams value
	params.push("mine");
	params.push(comp.getProperty("personId"));
	params.push(comp.getProperty("encounterId"));
	params.push(comp.getProperty("userId"));
	params.push(comp.getProperty("positionCd"));
	params.push(comp.getProperty("pprCd"));
	params.push(comp.getOption("encntrFilter"));
	params.push(comp.getOption("lookbackNum"));
	params.push(comp.getOption("lookbackUnit"));
	params.push(selectedValue);

	comp.cclParams = params;

	//Update the cclProgram value if needed
	//comp.cclProgram = "lh_mp_get_filtered_qual"

	comp.setProperty("headerSubTitle", "Loading...");

	//call the loadData function which will make the CCL call and load its response into the component.
	comp.loadData(callback);

};
/* Initialize cookie for new patient chart if need to add to the cookie under lh_quality_measures_44 name
   lh_quality_measures_44 {
     frameWork: "old"|"new" 
     data : [
        {
            ID: value,
            selectedIndex: value,
            selectedCond: value,
            expcollInd: value
        }
     ]
   }
   Also function return the index of inner array data that point to the new or matched encounter ID to this current chart

   NOTE: potential issue of this design is that cookie will run of space to store add'l encntrData. The JSON libray also 
   has limitation on the string to parse as well. Since this is not well documented atm of research, I only tested and found 
   it failed after 4.9K bytes of character. Any case, this design will be able to support at least 47 different charts, after
   that either cookie run out space (cookie will be ignored by browser) OR JSON library fails, the component will show "Error
   Retrieving Result", work around is to close powerchart and reopen whatever chart they want next.
   Furture fix would be to reuse the oldest encntrData in cookie with new encntrData but not implemented yet. 11/18/2014
*/
cerner.lh_quality_measures_44.prototype.PrepCookie = function (comp) {
    var cookieHolder = cerner.lh_quality_measures_44.prototype.getCookie('lh_quality_measures_44');
    var encntrData = {
            ID: comp.getProperty('encounterId'),
            selectedIndex: '',
            selectedCond: '',
        expcollInd: ''
    };
    var data = {
        frameWork: "",
        data: [encntrData]
    };
    if (cookieHolder === '') {       
        cerner.lh_quality_measures_44.prototype.setCookie('lh_quality_measures_44', data);
        return 0; 
    }
    else {
        var obj = JSON.parse(cookieHolder);
        for (var i = 0; i < obj.data.length; i++) {
            if (obj.data[i].ID == comp.getProperty('encounterId')) {
                return i;
            }
        }
        obj.data.push(encntrData);
        cerner.lh_quality_measures_44.prototype.setCookie('lh_quality_measures_44',obj)
        return (obj.data.length-1);           
    }
};
cerner.lh_quality_measures_44.prototype.setCookie = function (cookieName, data) {
    if (data && cookieName) {   
        document.cookie = cookieName+ '=' + JSON.stringify(data);
    }
};

/*End of Custom Component source code Core Measures*/



MPage.namespace('anteca');
anteca.phys_notify = function () {};
anteca.phys_notify.prototype = new MPage.Component();
anteca.phys_notify.prototype.constructor = MPage.Component;
anteca.phys_notify.prototype.base = MPage.Component.prototype;
anteca.phys_notify.name = 'anteca.phys_notify';
anteca.phys_notify.cclProgram = 'ante_ca_phys_notify:group1';
anteca.phys_notify.cclParams = ["MINE", "personId", "encounterId", "userId"];
anteca.phys_notify.curTab = 1;

anteca.phys_notify.prototype.init = function () {
    var paramList;
    var x;
    var len;
    var tempProp;
    var params = [];

    this.cclProgram = this.getOption('cclProgram') === 'undefined' ? 'ANTE_CA_PHYS_NOTIFY:group1' : this.getOption('cclProgram');
    this.cclDataType = 'JSON';

    paramList = this.getOption('cclParams') === 'undefined' ? ["MINE", this.getProperty("personId"), this.getProperty("encounterId"), this.getProperty("userId")] : this.getOption('cclParams');

    this.cclParams = paramList;
    this.data = '';
};

/**
 * Subroutine to render the component
 * @return {undefined} undefined
 */
anteca.phys_notify.prototype.render = function() {
    var tempStr = [],
        expOrdHTML = [],
        commHTML = [],
        qualOrdHTML = [],

        component = this,
        element = this.getTarget(),
        data = this.data,
        compID = this.getComponentUid(),
        _pID = component.getProperty("personId"),
        _eID = component.getProperty("encounterId"),
        _prID = component.getProperty("userId"),
        _pageCat = component.getProperty("categoryMean"),
        contentDiv,tglOpenClose,commInfo,renewInfo,qualInfo, docAddPlus,curTab, sCurTab, dfirstOrder;
        var tooltip = new MPageTooltip().setShowDelay(300);  
        var pOrd  = data.RECORD_DATA;

    var custHead = ("<a id='recallAdd' class='recall-add' href='javascript:nPhysAddNote()';></a>");
    MPage.getCustomComp(compID).setProperty("headerSubTitle","Loading...");

    tempStr.push("<div class='content-body' id='recallContent_", compID, "'>");
    tempStr.push("<div id='tabDiv' class='nPhys-tabDiv'>");
    tempStr.push("<ul>");
    tempStr.push("<li class = 'recall_tab_inactive' id='quality_li_", compID, "'>Quality (" + pOrd.QCNT + ")</li>");
    tempStr.push("<li class = 'recall_tab_active' id='expire_li_", compID, "'>Order Renewals (" + pOrd.ECNT + ")</li>");
	
    if(pOrd.AA_CONTINUE_LOGIC == "Y"){
        tempStr.push("<li class = 'recall_tab_inactive' id='comm_li_", compID, "'>Antimicrobial time-out (" + pOrd.ACNT + ")</li");
    }else{
        tempStr.push("<li class = 'recall_tab_inactive' id='comm_li_", compID, "'>Antimicrobial time-out (0)</li");
    }
	
    tempStr.push("</ul></div>");

    /*Order Renewal tab data livis in expOrdHTML*/
    expOrdHTML.push('<div class="sub-sec open">');
    expOrdHTML.push('<div class="sub-sec-content">');   
    expOrdHTML.push("<div class='list-as-table'>");
    expOrdHTML.push("<div class='content-hdr'>");
    expOrdHTML.push("<dl class='result-info hdr'>");
    expOrdHTML.push("<dd class = 'nPhys-order1'>Order</dd>");
    expOrdHTML.push("<dd class='nPhys-ignore'>Discontinue</dd>");
    expOrdHTML.push("<dd class='nPhys-renew'>Renew</dd></dl></div>");

    //var pOrd  = data.RECORD_DATA;
	if (pOrd.EXP.length > 0) {
		var eCnt = pOrd.EXP.length;

		for (x = 0; x < eCnt; x++) {
			pOrdObj = pOrd.EXP[x];

			var hoverData,hoverHTML = [];

			hoverHTML.push("<dd><span class = 'recall-grey'>Order: </span>" + pOrdObj.ONAME + "</dd>");
			hoverHTML.push("<dd><span class = 'recall-grey'>Order Details: </span>" + pOrdObj.CLINDISPLAY + "</dd>");
			hoverHTML.push("<dd><span class = 'recall-grey'>Order Comments: </span>" + pOrdObj.COMMENT.replace(/\n/g,"<br />") + "</dd>");
			hoverHTML.push("<dd><span class = 'recall-grey'>Order Date/Time: </span>" + pOrdObj.ORDERDATE + " </dd>");
			hoverHTML.push("<dd><span class = 'recall-grey'>Start Date/Time: </span>" + pOrdObj.STARTDATE + " </dd>");
			hoverHTML.push("<dd><span class = 'recall-grey'>Status: </span>" + pOrdObj.STATUS + " </dd>");
			hoverHTML.push("<dd><span class = 'recall-grey'>Ordered By: </span>" + pOrdObj.ORDEREDBY + " </dd>");

			hoverData = hoverHTML.join("");

			expOrdHTML.push("<div class='hoverDiv' id='recall-hover'>");
			expOrdHTML.push("<div class='hoverTxt hidden'>");
			expOrdHTML.push("<dl class = 'recall-details'>" + hoverData + "</dl></div>");
			expOrdHTML.push("<h3 class='info-hd'>Result</h3><dl class='nPhys-order-info'>");
			expOrdHTML.push("<dt class = 'nPhys-order1'>" + pOrdObj.ONAME + "</dt>");
			
			if(pOrdObj.CLINDISPLAY.length > 0){
				expOrdHTML.push("<dd class='nPhys-oDetail'>" + pOrdObj.CLINDISPLAY+" -- " + pOrdObj.EXPIREDISPLAY + "</dd>");
			}else{
				expOrdHTML.push("<dd class='nPhys-oDetail'>Expires in "+pOrdObj.EXPIREDISPLAY+"</dd>");
			}
			expOrdHTML.push("<dt class='nPhys-ignore'><div class='nPhys-expire-btn' id = 'nPhys-expire-btn_" + pOrdObj.ORDERID +"' title = 'Discontinue'/></dt>");
			expOrdHTML.push("<dt class='nPhys-renew'><div class='nPhys-renew-btn'  id = 'nPhys-renew-btn_" + pOrdObj.ORDERID +"' title = 'Renew'/></dt>");
			expOrdHTML.push("</dl></div>");    
		}
	}else{
		expOrdHTML.push("<dl class='nPhys-order-info'><dt class='nPhys-order1'>No Data Found</dt></dl>");
	}

	expOrdHTML.push('</div></div>');
      
    commHTML.push('<div class="sub-sec-content">'); 
    commHTML.push("<div class='list-as-table'>");
    commHTML.push("<div class='content-hdr' >");
    commHTML.push("<dl class='nPhys-disclaimer-header'>");
    commHTML.push("<dd class='nPhys-aa-disclaimer'>I have reviewed the current antimicrobial therapy and considered or addressed the following:</dd></dl>"); 
    commHTML.push("<ul style='padding-left:20px'><li>-Discontinued antimicrobial if not indicated</li>");
    commHTML.push("<li>-Stopped unnecessary combinations / narrowed spectrum of coverage </li>");
    commHTML.push("<li>-Set duration in Cerner if appropriate</li>");
    commHTML.push("<li>-Transitioned to oral antimicrobial if appropriate</li>");
    commHTML.push("<li>-Reviewed appropriateness for PPI therapy to minimize risk of C. diff infection</li></ul>");

    commHTML.push("</div>");

    if(pOrd.ANTIBIOTIC.length > 0 && pOrd.AA_CONTINUE_LOGIC == "Y" ){
        dfirstOrder = pOrd.ANTIBIOTIC[0].ORDER_ID

        var aCnt = pOrd.ANTIBIOTIC.length;
        for(a = 0; a < aCnt; a++){
            aQualObj = pOrd.ANTIBIOTIC[a];

            commHTML.push("<h3 class='info-hd'>Result</h3><dl class='nPhys-order-info'>");
            commHTML.push("<dt class='nPhys-aa-ordered'>" + aQualObj.ONAME + "</dt>");
            commHTML.push("<dd class='nPhys-oDetail'>" + aQualObj.CLINDISPLAY + "</dd></dl>");
        }
        commHTML.push("</div><div><button id='nPhys_ack_check_", compID, "' type='button' class = 'mdar-button' value="+dfirstOrder+" >Acknowledge</button>");

    }else{
            commHTML.push("<dl class='nPhys-order-info'><dt class='nPhys-order1'>No Data Found</dt></dl>");
    }

    commHTML.push("</div>");

    qualOrdHTML.push('<div class="sub-sec-content">'); 
    qualOrdHTML.push("<div class='list-as-table'>");
    qualOrdHTML.push("<div class='content-hdr'>");
    qualOrdHTML.push("<dl class='result-info hdr'>");
    qualOrdHTML.push("<dd class = 'nPhys-order1'>Order</dd>");
    qualOrdHTML.push("<dd class='nPhys-ignore'>Discontinue</dd>");
    qualOrdHTML.push("<dd class='nPhys-renew'>Continue</dd></dl></div>");

    //var pOrd  = data.RECORD_DATA;
	if (pOrd.QQUAL.length > 0) {
		var qCnt = pOrd.QQUAL.length;

		for (q = 0; q < qCnt; q++) {
			pQualObj = pOrd.QQUAL[q];

			var hoverqData,hoverqHTML = [];

			hoverqHTML.push("<dd><span class = 'recall-grey'>Order: </span>" + pQualObj.ONAME + "</dd>");
			hoverqHTML.push("<dd><span class = 'recall-grey'>Order Details: </span>" + pQualObj.CLINDISPLAY + "</dd>");
			hoverqHTML.push("<dd><span class = 'recall-grey'>Order Comments: </span>" + pQualObj.COMMENT.replace(/\n/g,"<br />") + "</dd>");
			hoverqHTML.push("<dd><span class = 'recall-grey'>Order Date/Time: </span>" + pQualObj.ORDERDATE + " </dd>");
			hoverqHTML.push("<dd><span class = 'recall-grey'>Start Date/Time: </span>" + pQualObj.STARTDATE + " </dd>");
			hoverqHTML.push("<dd><span class = 'recall-grey'>Status: </span>" + pQualObj.STATUS+" </dd>");
			hoverqHTML.push("<dd><span class = 'recall-grey'>Ordered By: </span>" + pQualObj.ORDEREDBY + " </dd>");

			hoverqData = hoverqHTML.join("");

			qualOrdHTML.push("<h3 class='info-hd'>Result</h3><dl class='nPhys-order-info'>");
			qualOrdHTML.push("<dt class = 'nPhys-order1'>" + pQualObj.ONAME + "<div class='hoverDiv' id='qual-hover'>");
			qualOrdHTML.push("<div class='hoverTxt hidden'>");
			qualOrdHTML.push("<dl class = 'recall-details'>" + hoverqData + "</dl></div>");
			
			if(pQualObj.CLINDISPLAY.length > 0){
				qualOrdHTML.push("<dd class='nPhys-oDetail'>" + pQualObj.CLINDISPLAY+" -- " + pQualObj.EXPIREDISPLAY + "</dd>");
			}else{
				qualOrdHTML.push("<dd class='nPhys-oDetail'>Expires in " + pQualObj.EXPIREDISPLAY + "</dd>");
			}
			
			qualOrdHTML.push("<dd class='nPhys-ignore'><div class='nPhys-discontinue-btn' id = 'nPhys-discontinue-btn_"+ pQualObj.ORDERID +"' data-CatCd = '" + pQualObj.DC_SYN_ID + "' title = 'Discontinue'/></dd>");
			qualOrdHTML.push("<dd class='nPhys-renew'><div class='nPhys-continue-btn'  id = 'nPhys-continue-btn_"+ pQualObj.ORDERID +"' title = 'Continue'/></dd>");

			if(pQualObj.NEEDREASON === "Y"){
				if(pOrd.INDICATOR.length > 0  ){
					qualOrdHTML.push('<dt class = "nPhys-cReason">Continue Reason:  <select id="nPhysSelect_', compID,'"><option></option>');
					var sCnt = pOrd.INDICATOR.length;
					var ordMeaning = pQualObj.MEANING;
										
					for(s = 0; s < sCnt; s++){
						indQual = pOrd.INDICATOR[s];
						
						if (ordMeaning === indQual.MEANING) {
							qualOrdHTML.push('<option value="' + indQual.VALUE+'">' + indQual.DISPLAY+'</option>');
						}
					}
					qualOrdHTML.push('</select></dt></dl>');
				}
			}else{	
				qualOrdHTML.push('</dl>');
			}
			qualOrdHTML.push('</div>');
		}
	}else{
		qualOrdHTML.push("<dl class='nPhys-order-info'><dt class='nPhys-order1'>No Data Found</dt></dl>");
	}

	qualOrdHTML.push('</div></div>');   
  
    commInfo = commHTML.join("");
    renewInfo = expOrdHTML.join("");
    qualInfo = qualOrdHTML.join("");

    tempStr.push('<div id="exp_content_', compID,'" class="nPhys-tabcontent">' + renewInfo + '</div></div>');
    tempStr.push('<div id="comm_content_', compID,'" class="nPhys-tabcontent">' + commInfo + '</div></div>');
    tempStr.push('<div id="quality_content_', compID,'" class="nPhys-tabcontent">' + qualInfo + '</div></div>');

    element.innerHTML = tempStr.join("");

    MPage.getCustomComp(compID).setProperty("headerSubTitle", "");
   
    $('.nPhys-ordered').on("mouseenter",function(e){var xPos=e.pageX;  
        var yPos=e.pageY;  
        tooltip.setX(xPos).setY(yPos).setAnchor($(this)).setContent("" + $(this).find("div.hoverTxt").html() + "");  
        tooltip.show();  
    });  

    contentDiv = document.querySelector("#recallContent_" + compID);

    var expTab          = document.querySelector("#expire_li_" + compID);
    var expContent      = document.querySelector("#exp_content_" + compID);
    var commTab         = document.querySelector("#comm_li_" + compID);
    var commContent     = document.querySelector("#comm_content_" + compID);
    var qualityTab      = document.querySelector("#quality_li_" + compID);
    var qualityContent  = document.querySelector("#quality_content_" + compID);     
    expContent.style.display = "block";
    var compDiv = element.parentNode

    if(anteca.phys_notify.curTab === 2){
            expContent.style.display = "block";
            replaceClass.call(expTab, "recall_tab_inactive","recall_tab_active")
            replaceClass.call(qualityTab, "recall_tab_active","recall_tab_inactive") 
            replaceClass.call(commTab, "recall_tab_active","recall_tab_inactive")           
            qualityContent.style.display = "none";
            commContent.style.display = "none";
            
    }else if(anteca.phys_notify.curTab === 1){
            qualityContent.style.display = "block";
            replaceClass.call(qualityTab, "recall_tab_inactive","recall_tab_active")           
            replaceClass.call(expTab, "recall_tab_active","recall_tab_inactive")  
            replaceClass.call(commTab, "recall_tab_active","recall_tab_inactive")   
            expContent.style.display = "none";          
            commContent.style.display = "none";

    }else if(anteca.phys_notify.curTab === 3){
            commContent.style.display = "block";
            replaceClass.call(commTab, "recall_tab_inactive","recall_tab_active")
            replaceClass.call(expTab, "recall_tab_active","recall_tab_inactive")  
            replaceClass.call(qualityTab, "recall_tab_active","recall_tab_inactive")          
            qualityContent.style.display = "none";
            expContent.style.display = "none";
    }

   $('.nPhys-expire-btn').on("click",function(e){
        var ordComp = $(this).attr("id");
        if(ordComp){
            var dOrdId =ordComp.replace("nPhys-expire-btn_","");
            dOrdId = dOrdId +".0";
            _eID = _eID + ".0";
            _pID = _pID + ".0";
            anteca.phys_notify.prototype.completeExpiringOrder(_pID,_eID,dOrdId);
            MPage.getCustomComp(compID).generate();
        }
   });

    $('.nPhys-renew-btn').on("click",function(e){  
        var ordComp = $(this).attr("id");      
        if(ordComp){
            var dOrdId =ordComp.replace("nPhys-renew-btn_","");
            dOrdId = dOrdId +".0";
            _eID = _eID + ".0";
            _pID = _pID + ".0";
           // iate.comp.sampleComponent.prototype.CompleteRecallOrder(_pID,_eID,dOrdId);
            anteca.phys_notify.prototype.cancelReorderOrder(_pID,_eID,dOrdId);
        }
        
   });   

   $('.nPhys-discontinue-btn').on("click",function(e){
        var ordComp = $(this).attr("id");
        if(ordComp){
            var dOrdId =ordComp.replace("nPhys-discontinue-btn_","");
            dOrdId = dOrdId +".0";
            _eID = _eID + ".0";
            _pID = _pID + ".0";
            var synId =  $(this).attr("data-CatCd");
           
            synId = synId + ".0";
            
            anteca.phys_notify.prototype.completeExpiringOrder(_pID,_eID,dOrdId);

            if(synId != "0.0"){
                anteca.phys_notify.prototype.orderDC(_pID,_eID,synId);
            }
            MPage.getCustomComp(compID).generate();
        }
   });

    $('.nPhys-continue-btn').on("click",function(e){  
        var ordComp = $(this).attr("id");
        if(ordComp){
            var dOrdId =ordComp.replace("nPhys-continue-btn_","");
            dOrdId = dOrdId +".0";
            _eID = _eID + ".0";
            _pID = _pID + ".0";

            anteca.phys_notify.prototype.cancelReorderOrder(_pID,_eID,dOrdId);

            var v = document.querySelector("#nPhysSelect_" + compID);

            if(v){
                var indVal = v.options[v.selectedIndex].value;
                var indDisplay = v.options[v.selectedIndex].text;

                if(indVal > 0){

                indVal = indVal + ".0"
                var xhr = (CERN_BrowserDevInd) ? new XMLHttpRequest() : new XMLCclRequest();
                xhr.onreadystatechange = function() {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        var msg = xhr.responseText;
                        var jsonMsg = "";
                        if (msg) {
                            jsonMsg = JSON.parse(msg);
                        }
                    }
                };
                var sendAr = ['^MINE^,' + _pID+ ',' + _eID + ','  + _prID + ','+ dOrdId + ','+indVal];

                if (CERN_BrowserDevInd) {
                    var url = "ANTE_CA_CHK_ORDER_STATUS1?parameters=" + sendAr.join(",");
                    xhr.open("GET", url, true);
                    xhr.send(null);
                } else {

                    xhr.open('GET', "ANTE_CA_CHK_ORDER_STATUS1", true);
                    xhr.send(sendAr.join(","));
                }
            }
        }
    } 
   }); 

    contentDiv.onclick = function(e) {
        e = e || window.event;
        var myTarget = e.target || e.srcElement;
        var curTable = null;
        var el = null;

        if(myTarget.id == "expire_li_" + compID) {
            
            expContent.style.display = "block";
            replaceClass.call(expTab, "recall_tab_inactive","recall_tab_active")
            replaceClass.call(commTab, "recall_tab_active","recall_tab_inactive")    
            replaceClass.call(qualityTab, "recall_tab_active","recall_tab_inactive")           
            commContent.style.display = "none";
            qualityContent.style.display = "none";
            anteca.phys_notify.curTab = 2;
        }else if(myTarget.id == "comm_li_" + compID) {         
            commContent.style.display = "block";
            replaceClass.call(commTab, "recall_tab_inactive","recall_tab_active")
            replaceClass.call(expTab, "recall_tab_active","recall_tab_inactive")
            replaceClass.call(qualityTab, "recall_tab_active","recall_tab_inactive")    
            expContent.style.display = "none";
            qualityContent.style.display = "none";
            anteca.phys_notify.curTab = 3;        
        }else if(myTarget.id == "quality_li_" + compID) {   
            qualityContent.style.display = "block";
            replaceClass.call(qualityTab, "recall_tab_inactive","recall_tab_active")       
            replaceClass.call(expTab, "recall_tab_active","recall_tab_inactive")
            replaceClass.call(commTab, "recall_tab_active","recall_tab_inactive")    
            expContent.style.display = "none" 
            commContent.style.display = "none";
            anteca.phys_notify.curTab = 1;        
        }else if(myTarget.id == "nPhys_ack_check_" + compID){
            
                var xhr = (CERN_BrowserDevInd) ? new XMLHttpRequest() : new XMLCclRequest();
                xhr.onreadystatechange = function() {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        var msg = xhr.responseText;

                        var jsonMsg = "";
                        if (msg) {
                            jsonMsg = JSON.parse(msg);
                        }
                        MPage.getCustomComp(compID).generate();
                    }
                };
                var dOrdIdAA =myTarget.value;

                dOrdIdAA = dOrdIdAA +".0";

                var sendAr = ['^MINE^,' + _pID+ ',' + _eID + ','  + _prID + ','+ dOrdIdAA + ',^ANTIBIOTICACKNOWLEDGEMENT^, ^Antibiotic Acknowledgement^,^Acknowledged^'];
                
                if (CERN_BrowserDevInd) {
                    var url = "ante_mp_ens_notes?parameters=" + sendAr.join(",");
                    xhr.open("GET", url, true);
                    xhr.send(null);
                } else {

                    xhr.open('GET', "ante_mp_ens_notes", true);
                    xhr.send(sendAr.join(","));
                }
                   
        }else if(myTarget.id == "nPhysTglOrd_" + compID || myTarget.id == "nPhysTglDoc_" + compID) {    
            var firstParent= myTarget.parentNode;
            var secondParent = firstParent.parentNode;
            
            if (secondParent.className.indexOf("open") >=0) {
                replaceClass.call(secondParent, "open", "closed");
            }
            else if(secondParent.className.indexOf("closed") >=0) {
                replaceClass.call(secondParent, "closed", "open");
            }
        }

    };


    $(contentDiv).on("mouseenter", "dl.nPhys-order-info", function(event) {  
        $(this).css("background-color", "#FFFCE0");     
    });         

    $(contentDiv).on("mouseleave", "dl.nPhys-order-info", function(event) {
        $(this).css("background-color", "#FFF");                
    });     

    function replaceClass(oldClass, newClass) {
        removeClass.call(this, oldClass);
        addClass.call(this, newClass);
    }

    function removeClass(className) {
        if (this.classList) {
            var classNames = className.split(" ");
            for (var i = 0, len = classNames.length; i < len; i++) {
                this.classList.remove(classNames[i]);
            }
        } else {
            this.className = this.className.replace(new RegExp("(^|\\b)" + className.split(" ").join("|") + "(\\b|$)", "gi"), " ");
        }
    }

    function addClass(className) {
        if (this.classList) {
            var classNames = className.split(" ");
            for (var i = 0, len = classNames.length; i < len; i++) {
                this.classList.add(classNames[i]);
            }
        } else {
            this.className += " " + className;
        }
    }    

    anteca.phys_notify.prototype.OpenDocViewer = function(eId){
        var resViewer = new ResultViewer();
        resViewer.addEventId(eId);
        resViewer.setEditModeInd(true);
        resViewer.launchViewer();
    }

    anteca.phys_notify.prototype.completeExpiringOrder = function(pId,eId,oId){
        var str = pId + "|" + eId + "|" + "{CANCEL DC|" + oId + "}|0|{2|127}{3|127}|32|1";
        var obj = MPAGES_EVENT("ORDERS",str); 
    }

    anteca.phys_notify.prototype.cancelReorderOrder = function(pId,eId,oId){
        var str = pId + "|" + eId + "|" + "{CANCEL REORD|" + oId + "}|0|{2|127}{3|127}|32|1";
        var obj = MPAGES_EVENT("ORDERS",str); 
        MPage.getCustomComp(compID).generate();
    } 

    anteca.phys_notify.prototype.orderDC = function(pId,eId,sId){
        var str = pId + "|" + eId + "|" + "{ORDER|" + sId + "|0|0|0|1}|0|{2|127}{3|127}|32";

        var obj = MPAGES_EVENT("ORDERS",str); 
    } 
};
