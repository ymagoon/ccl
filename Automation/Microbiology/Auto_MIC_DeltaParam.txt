set trace backdoor p30ins go
 
drop program Auto_MIC_DeltaParam go
create program Auto_MIC_DeltaParam
 
record request_1
    (
     1 ALLOW_PARTIAL_IND = I2
     1 SERVICE_RESOURCE_CDI = I2
     1 SOURCE_CDI = I2
     1 ORGANISM_CDI = I2
     1 QUAL[*]
       2 SERVICE_RESOURCE_CD = F8
       2 SOURCE_CD = F8
       2 ORGANISM_CD = F8
 )
 
 record request_2
    (
     1 ALLOW_PARTIAL_IND = I2
     1 SUS_DELTA_PARAM_IDI = I2
     1 ANTIBIOTIC_CDI = I2
     1 ACROSS_ENCOUNTER_INDI = I2
     1 ACROSS_ENCOUNTER_INDN = I2
     1 ACROSS_SOURCE_INDI = I2
     1 ACROSS_SOURCE_INDN = I2
     1 LOOKBACK_HOURS_NBRI = I2
     1 SHOW_MESSAGE_INDI = I2
     1 SHOW_MESSAGE_INDN = I2
     1 TOLERANCE_LIMIT_NBRI = I2
     1 REQUIRE_FOOTNOTE_INDI = I2
     1 REQUIRE_FOOTNOTE_INDN = I2
     1 QUAL[*]
       2 SUS_DELTA_PARAM_ID = F8
       2 ANTIBIOTIC_CD = F8
       2 ACROSS_ENCOUNTER_IND = I2
       2 ACROSS_SOURCE_IND = I2
       2 LOOKBACK_HOURS_NBR = I4
       2 SHOW_MESSAGE_IND = I2
       2 TOLERANCE_LIMIT_NBR = I4
       2 REQUIRE_FOOTNOTE_IND = I2
  )
 
 
 record request_valid
    (
     1 QUAL[*]
       2 service_resource = vc
       2 service_resource_valid = i2
       2 SERVICE_RESOURCE_CD = F8
 
       2 source = vc
       2 source_valid = i2
       2 SOURCE_CD = F8
 
       2 organism = vc
       2 organism_valid = i2
       2 ORGANISM_CD = F8
 
       2 antibiotic = vc
       2 antibiotic_valid = i2
       2 ANTIBIOTIC_CD = F8
 
	   2 ACROSS_ENCOUNTER_IND = I2
       2 ACROSS_SOURCE_IND = I2
       2 REQUIRE_FOOTNOTE_IND = I2
       2 SHOW_MESSAGE_IND = I2
       2 Ind_Valid = i2
 
       2 TOLERANCE_LIMIT_NBR = I4
       2 LOOKBACK_HOURS_NBR = I4
 
       2 exist = i2
 )
 
 
/*****************Copy the into request_valid*************************************/
declare Seq1 = I2
set stat = alterlist(request_valid->qual,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set Request_valid->qual[Seq1].antibiotic = requestin->List_0[Seq1].antibiotic
set Request_valid->qual[Seq1].organism = requestin->List_0[Seq1].organism
set Request_valid->qual[Seq1].service_resource = requestin->List_0[Seq1].service_resource
set Request_valid->qual[Seq1].source = requestin->List_0[Seq1].source
set Request_valid->qual[Seq1].LOOKBACK_HOURS_NBR = cnvtint(requestin->List_0[Seq1].LOOKBACK_HOURS)
set Request_valid->qual[Seq1].REQUIRE_FOOTNOTE_IND = cnvtint(requestin->List_0[Seq1].REQUIRE_FOOTNOTE)
set Request_valid->qual[Seq1].SHOW_MESSAGE_IND = cnvtint(requestin->List_0[Seq1].SHOW_MSG)
set Request_valid->qual[Seq1].TOLERANCE_LIMIT_NBR = cnvtint(requestin->List_0[Seq1].TOLERANCE_LIMIT)
set Request_valid->qual[Seq1].ACROSS_ENCOUNTER_IND = cnvtint(requestin->List_0[Seq1].ACROSS_ENCOUNTER)
set Request_valid->qual[Seq1].ACROSS_SOURCE_IND = cnvtint(requestin->List_0[Seq1].ACROSS_SOURCE)
endfor
 
declare Seq2 = I2
set CountRows = 0
set CountInvalid = 0
for (Seq2 = 1 to size(request_valid->qual,5))
set CountRows = CountRows +1
 
/**********************************************
Get invalid antibiotic
**********************************************/
if (cnvtupper(request_valid->qual[Seq2].antibiotic) = "ALL")
set Request_valid->qual[Seq2].antibiotic_valid = 1
set Request_valid->qual[Seq2].ANTIBIOTIC_CD = 0
else
set Request_valid->qual[Seq2].antibiotic_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 1011
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].antibiotic)
detail
Request_valid->qual[Seq2].antibiotic_valid = 1
Request_valid->qual[Seq2].ANTIBIOTIC_CD = cv.code_value
with nocounter
endif
 
 
/**********************************************
Get invalid organism
**********************************************/
if (cnvtupper(request_valid->qual[Seq2]. organism) = "ALL")
set Request_valid->qual[Seq2].organism_valid = 1
set Request_valid->qual[Seq2].ORGANISM_CD = 0
else
set Request_valid->qual[Seq2].organism_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 1021
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].organism)
detail
Request_valid->qual[Seq2].organism_valid = 1
Request_valid->qual[Seq2].ORGANISM_CD = cv.code_value
with nocounter
endif
 
 
/**********************************************
Get invalid service_resource
**********************************************/
if (cnvtupper(request_valid->qual[Seq2].service_resource) = "ALL")
set Request_valid->qual[Seq2].service_resource_valid = 1
set Request_valid->qual[Seq2].SERVICE_RESOURCE_CD = 0
else
set Request_valid->qual[Seq2].service_resource_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 221
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].service_resource)
detail
Request_valid->qual[Seq2].service_resource_valid = 1
Request_valid->qual[Seq2].SERVICE_RESOURCE_CD = cv.code_value
with nocounter
endif
 
/**********************************************
Get invalid sources
**********************************************/
if (cnvtupper(request_valid->qual[Seq2].source) = "ALL")
set Request_valid->qual[Seq2].source_valid = 1
set Request_valid->qual[Seq2].SOURCE_CD = 0
else
set Request_valid->qual[Seq2].source_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 2052
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].source)
detail
Request_valid->qual[Seq2].source_valid = 1
Request_valid->qual[Seq2].SOURCE_CD = cv.code_value
with nocounter
endif
 
/**********************************************
Get invalid indicators
**********************************************/
set Request_valid->qual[Seq2].Ind_Valid = 0
if (Request_valid->qual[Seq2].ACROSS_ENCOUNTER_IND in (0,1))
set Request_valid->qual[Seq2].Ind_Valid = 1
endif
 
set Request_valid->qual[Seq2].Ind_Valid = 0
if (Request_valid->qual[Seq2].ACROSS_SOURCE_IND in (0,1))
set Request_valid->qual[Seq2].Ind_Valid = 1
endif
 
set Request_valid->qual[Seq2].Ind_Valid = 0
if (Request_valid->qual[Seq2].REQUIRE_FOOTNOTE_IND in (0,1))
set Request_valid->qual[Seq2].Ind_Valid = 1
endif
 
set Request_valid->qual[Seq2].Ind_Valid = 0
if (Request_valid->qual[Seq2].SHOW_MESSAGE_IND in (0,1))
set Request_valid->qual[Seq2].Ind_Valid = 1
endif
 
/**********************************************
Get existing
**********************************************/
set Request_valid->qual[Seq2].exist = 0
select into 'NL:'
msdpc.*
from MIC_SUS_DELTA_PARAM_CRITERIA msdpc
plan msdpc where msdpc.organism_cd = request_valid->qual[Seq2].ORGANISM_CD
and msdpc.service_resource_cd = request_valid->qual[Seq2].SERVICE_RESOURCE_CD
and msdpc.source_cd = request_valid->qual[Seq2].SOURCE_CD
detail
Request_valid->qual[Seq2].exist = 1
with nocounter
 
 
if(Request_valid->qual[Seq2].antibiotic_valid = 0
or Request_valid->qual[Seq2].organism_valid = 0 or Request_valid->qual[Seq2].Ind_Valid = 0
or Request_valid->qual[Seq2].service_resource_valid = 0 or Request_valid->qual[Seq2].source_valid = 0
or Request_valid->qual[Seq2].exist = 1)
set CountInvalid = CountInvalid+1
endif
endfor
 
call echorecord (request_valid)
if (CountInvalid=0)
 
SELECT distinct INTO 'NL:'
txt_ORGANISM_CD = Request_valid->qual[d.seq].ORGANISM_CD,
txt_SERVICE_RESOURCE_CD = Request_valid->qual[d.seq].SERVICE_RESOURCE_CD,
txt_SOURCE_CD = Request_valid->qual[d.seq].SOURCE_CD
 
 
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5))
 
PLAN D where Request_valid->qual[d.seq].antibiotic_valid = 1
and Request_valid->qual[d.seq].organism_valid = 1 and Request_valid->qual[d.seq].Ind_Valid = 1
and Request_valid->qual[d.seq].service_resource_valid = 1 and Request_valid->qual[d.seq].source_valid = 1
and Request_valid->qual[d.seq].exist = 0
 
order by d.seq
 
head report
x2=0
 
head txt_SERVICE_RESOURCE_CD
dummy = 0
head txt_SOURCE_CD
dummy = 0
head txt_ORGANISM_CD
x2=x2+1
 
if(size(request_1->QUAL,5)<=x2)
stat = alterlist(request_1->qual,x2+5)
endif
		request_1->QUAL[x2].ORGANISM_CD = CNVTINT(request_valid->qual[d.seq].ORGANISM_CD)
		request_1->QUAL[x2].SERVICE_RESOURCE_CD = CNVTINT(request_valid->qual[d.seq].SERVICE_RESOURCE_CD)
		request_1->QUAL[x2].SOURCE_CD = CNVTINT(request_valid->qual[d.seq].SOURCE_CD)
 
 
foot txt_ORGANISM_CD
stat = alterlist(request_1->qual,x2)
foot txt_SOURCE_CD
dummy = 1
foot txt_SERVICE_RESOURCE_CD
dummy = 1
 
with nocounter
 
set request_1->ALLOW_PARTIAL_IND =  1
set request_1->SERVICE_RESOURCE_CDI = 1
set request_1->SOURCE_CDI =  1
set request_1->ORGANISM_CDI = 1
 
call echorecord(request_1)
execute GM_I_MIC_SUS_DELT8150 WITH	REPLACE("REQUEST",REQUEST_1)
 
SELECT INTO 'NL:'
txt_ANTIBIOTIC_CD = Request_valid->qual[d.seq].ANTIBIOTIC_CD,
txt_ORGANISM_CD = Request_valid->qual[d.seq].ORGANISM_CD,
txt_SERVICE_RESOURCE_CD = Request_valid->qual[d.seq].SERVICE_RESOURCE_CD,
txt_SOURCE_CD = Request_valid->qual[d.seq].SOURCE_CD,
txt_sus_delta_param_id = msdpc.sus_delta_param_id
 
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5)), MIC_SUS_DELTA_PARAM_CRITERIA msdpc
 
PLAN D where Request_valid->qual[d.seq].antibiotic_valid = 1
and Request_valid->qual[d.seq].organism_valid = 1 and Request_valid->qual[d.seq].Ind_Valid = 1
and Request_valid->qual[d.seq].service_resource_valid = 1 and Request_valid->qual[d.seq].source_valid = 1
and Request_valid->qual[d.seq].exist = 0
join msdpc
where msdpc.organism_cd = Request_valid->qual[d.seq].ORGANISM_CD
and msdpc.service_resource_cd = Request_valid->qual[d.seq].SERVICE_RESOURCE_CD
and msdpc.source_cd = Request_valid->qual[d.seq].SOURCE_CD
 
 
 
head report
x3=0
head txt_sus_delta_param_id
dummy = 0
head txt_ANTIBIOTIC_CD
x3=x3+1
 
if(size(request_2->QUAL,5)<=x3)
stat = alterlist(request_2->qual,x3+5)
endif
		request_2->QUAL[x3].ANTIBIOTIC_CD = CNVTINT(request_valid->qual[d.seq].ANTIBIOTIC_CD)
		request_2->QUAL[x3].ACROSS_ENCOUNTER_IND = CNVTINT(request_valid->qual[d.seq].ACROSS_ENCOUNTER_IND)
		request_2->QUAL[x3].SUS_DELTA_PARAM_ID = CNVTINT(msdpc.sus_delta_param_id)
		request_2->QUAL[x3].ACROSS_SOURCE_IND = CNVTINT(request_valid->qual[d.seq].ACROSS_SOURCE_IND)
		request_2->QUAL[x3].LOOKBACK_HOURS_NBR = CNVTINT(request_valid->qual[d.seq].LOOKBACK_HOURS_NBR)
		request_2->QUAL[x3].REQUIRE_FOOTNOTE_IND = CNVTINT(request_valid->qual[d.seq].REQUIRE_FOOTNOTE_IND)
		request_2->QUAL[x3].SHOW_MESSAGE_IND = CNVTINT(request_valid->qual[d.seq].SHOW_MESSAGE_IND)
		request_2->QUAL[x3].TOLERANCE_LIMIT_NBR = CNVTINT(request_valid->qual[d.seq].TOLERANCE_LIMIT_NBR)
 
foot txt_ANTIBIOTIC_CD
stat = alterlist(request_2->qual,x3)
foot txt_sus_delta_param_id
dummy=1
with nocounter
set request_2->ACROSS_ENCOUNTER_INDI =  1
set request_2->ACROSS_SOURCE_INDI = 1
set request_2->ALLOW_PARTIAL_IND =  1
set request_2->ANTIBIOTIC_CDI = 1
set request_2->LOOKBACK_HOURS_NBRI = 1
set request_2->REQUIRE_FOOTNOTE_INDI =  1
set request_2->SHOW_MESSAGE_INDI = 1
set request_2->SUS_DELTA_PARAM_IDI =  1
set request_2->TOLERANCE_LIMIT_NBRI = 1
 
 
call echorecord(request_2)
execute GM_I_MIC_SUS_DELT8151 WITH	REPLACE("REQUEST",REQUEST_2)
call echo("///////////////////////////////////////////////////////////////////////////////////////")
call echo("/////////////////////////////////////Importing Done////////////////////////////////////")
call echo("///////////////////////////////////////////////////////////////////////////////////////")
else
 
call clear(1,1)
call video(i)
call text(2, 4, "Importing have stopped because some of the entities in the csv file is invalid")
call text(3, 4, "kindly check the log file Auto_MIC_DeltaParam_log")
 
select into "Auto_MIC_DeltaParam_log"
antibiotic 			= request_valid->qual[d.seq].antibiotic
,antibiotic_valid	  			= if(request_valid->qual[d.seq].antibiotic_valid) "Yes" else "No" endif
,organism 			= request_valid->qual[d.seq].organism
,organism_valid	  			= if(request_valid->qual[d.seq].organism_valid) "Yes" else "No" endif
,service_resource 			= request_valid->qual[d.seq].service_resource
,service_resource_valid	  			= if(request_valid->qual[d.seq].service_resource_valid) "Yes" else "No" endif
,source 			= request_valid->qual[d.seq].source
,source_valid	  			= if(request_valid->qual[d.seq].source_valid) "Yes" else "No" endif
,ACROSS_ENCOUNTER_IND = request_valid->qual[d.seq].ACROSS_ENCOUNTER_IND
,ACROSS_SOURCE_IND = request_valid->qual[d.seq].ACROSS_SOURCE_IND
,REQUIRE_FOOTNOTE_IND = request_valid->qual[d.seq].REQUIRE_FOOTNOTE_IND
,SHOW_MESSAGE_IND = request_valid->qual[d.seq].SHOW_MESSAGE_IND
,Ind_Valid = if(request_valid->qual[d.seq].Ind_Valid) "Yes" else "No" endif
,exist  			= if(request_valid->qual[d.seq].exist) "Yes" else "No" endif
 
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->qual,5))
PLAN D
with nocounter, version
endif
 
end
go
 
 