set trace backdoor p30ins go
 
drop program Auto_MIC_ManNumericInterp go
create program Auto_MIC_ManNumericInterp
 
/****************Create Record to be sent to program******************************/
 record request_total
 (
     1 Total[*]  
       2  interp_id               = f8
       2  organism_grouping_cd    = f8
       2  medication_cd           = f8
       2  sus_detail_cd           = f8
       2  source_grouping_cd      = f8
       2  qual[*]
          3 interp_range_id       = f8
          3 interp_test_cd        = f8
          3 interp_qual[*]
            4 sus_result_cd       = f8
            4 low_value           = f8
            4 interp_result_cd    = f8
            4 high_value          = f8
 )
 
 record request2
 (
       1  interp_id               = f8
       1  organism_grouping_cd    = f8
       1  medication_cd           = f8
       1  sus_detail_cd           = f8
       1  source_grouping_cd      = f8
       1  qual[*]
          2 interp_range_id       = f8
          2 interp_test_cd        = f8
          2 interp_qual[*]
            3 sus_result_cd       = f8
            3 low_value           = f8
            3 interp_result_cd    = f8
            3 high_value          = f8
 )
 
 
 
 
/********************Create another record to do the validation*****************************/
RECORD REQUEST_valid
(
   1 qual[*]
 
     2 Source    			= vc
     2 Source_valid        	= I2
     2 Source_cd			= f8
 
     2 Organism				= vc
     2 Organism_valid       = I2
     2 organism_cd         	= f8
 
     2 Antibiotic     		= vc
     2 Antibiotic_valid     = i2
     2 Antibiotic_cd		= f8
 
     2 Method1     			= vc
     2 Method1_valid   	 	= i2
     2 Method1_cd			= f8
 
     2 Method2     			= vc
     2 Method2_valid   	 	= i2
     2 Method2_cd			= f8
 
     2 low_value		 		 	= f8
     2 high_value		 		 	= f8
      
     2 interp_result     			= vc
     2 interp_result_valid			= i2
     2 interp_result_cd				= f8

     2 Record_Exist 		= i2
     2 interp_id			= f8
  
  	2 row_valid = i2
 )
 
 
/*****************Copy the requestin into the request_valid*************************************/
declare Seq1 = I2
set stat = alterlist(request_valid->qual,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set Request_valid->qual[Seq1].Antibiotic = requestin->List_0[Seq1].Antibiotic
set Request_valid->qual[Seq1].high_value = cnvtreal(requestin->List_0[Seq1].high_value)
set Request_valid->qual[Seq1].low_value = cnvtreal(requestin->List_0[Seq1].low_value)
set Request_valid->qual[Seq1].interp_result = requestin->List_0[Seq1].interp_result
set Request_valid->qual[Seq1].Organism = requestin->List_0[Seq1].Organism
set Request_valid->qual[Seq1].Source = requestin->List_0[Seq1].Source
set Request_valid->qual[Seq1].Method1 = requestin->List_0[Seq1].Method1
set Request_valid->qual[Seq1].Method2 = requestin->List_0[Seq1].Method2
 
endfor
 
 
/*********************Loop through second record*************************/
declare Seq2 = I2
 
declare CountRows = I4
declare CountInvalidRows = I4
 
set stat = alterlist(request_valid->qual,size(request_valid->qual,5))
 
set CountRows =0
set CountInvalidRows = 0
for (Seq2 = 1 to size(request_valid->qual,5))
set CountRows = CountRows +1
 
/************************************Get invalid Sources *******************************************/
if (cnvtupper(request_valid->qual[Seq2].source) = "ALL")
set request_valid->qual[Seq2].source_valid = 1
set request_valid->qual[Seq2].source_cd = 0
else
set request_valid->qual[Seq2].source_valid = 0
select into 'NL:'
TxtSource = cv.code_value
from code_value cv
plan cv where cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].source) 
and cv.code_set IN (1150, 1151, 2052) 
detail
request_valid->qual[Seq2].source_valid = 1
request_valid->qual[Seq2].source_cd = TxtSource
with nocounter
endif
 
/************************************Get invalid Organisms *******************************************/
set request_valid->qual[Seq2].Organism_valid = 0
select into 'NL:'
TxtOrganismCd = cv.code_value
from code_value cv
where cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].Organism)
and cv.code_set = 1021
detail
request_valid->qual[Seq2].Organism_valid = 1
request_valid->qual[Seq2].organism_cd = TxtOrganismCd
with nocounter
 
/************************************Get invalid antibiotics*******************************/
set request_valid->qual[Seq2].Antibiotic_valid = 0
select into 'NL:'
TxtAbCd = cv.code_value
from code_value cv
plan cv where cv.code_set = 1011
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].Antibiotic)
detail
request_valid->qual[Seq2].Antibiotic_valid = 1
request_valid->qual[Seq2].Antibiotic_cd = TxtAbCd
with nocounter
 
/************************************Get invalid Methods *******************************************/
set request_valid->qual[Seq2].Method1_valid = 0
select into 'NL:'
TxtMethodCd = cv.code_value
from code_value cv
where cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].Method1)
and cv.code_set = 1004
detail
request_valid->qual[Seq2].Method1_valid = 1
request_valid->qual[Seq2].Method1_cd = TxtMethodCd
with nocounter
 
 
set request_valid->qual[Seq2].Method2_valid = 0
select into 'NL:'
TxtMethodCd = cv.code_value
from code_value cv
where cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].Method2)
and cv.code_set = 1004
detail
request_valid->qual[Seq2].Method2_valid = 1
request_valid->qual[Seq2].Method2_cd = TxtMethodCd
with nocounter
 
 
/************************************Get invalid interps *******************************************/
set request_valid->qual[Seq2].interp_result_valid = 0
select into 'NL:'
TxtIntrpCd = cv.code_value
from code_value cv
where cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].interp_result)
and cv.code_set = 64
detail
request_valid->qual[Seq2].interp_result_valid = 1
request_valid->qual[Seq2].interp_result_cd = TxtIntrpCd
with nocounter
 
/************************************Get Existing Records *******************************************/
set request_valid->qual[Seq2].interp_id = 0
select into 'NL:'
Txtinterp_id = msfli.interp_id
from mic_sus_first_level_interp msfli
where msfli.organism_grouping_cd = request_valid->qual[Seq2].organism_cd
and msfli.source_grouping_cd = request_valid->qual[Seq2].Source_cd
and msfli.sus_detail_cd = request_valid->qual[Seq2].Method1_cd
and msfli.medication_cd = request_valid->qual[Seq2].Antibiotic_cd
detail
request_valid->qual[Seq2].interp_id = Txtinterp_id
with nocounter
 
 
if(Request_valid->qual[Seq2].Antibiotic_valid = 0 or Request_valid->qual[Seq2].Method2_valid = 0
or Request_valid->qual[Seq2].interp_result_valid = 0 or Request_valid->qual[Seq2].Method1_valid = 0
or Request_valid->qual[Seq2].Organism_valid = 0 or Request_valid->qual[Seq2].Source_valid = 0)
set request_valid->qual[Seq2].Row_valid = 0
set CountInvalidRows = CountInvalidRows +1
else
set request_valid->qual[Seq2].Row_valid = 1
endif
 
endfor
 
;call echorecord (request_valid)
 
if (CountInvalidRows=0)
 

SELECT INTO 'NL:'
txt_Antibiotic_cd = request_valid->qual[d.seq].Antibiotic,
txt_organism_cd = request_valid->qual[d.seq].organism_cd,
txt_source_cd = request_valid->qual[d.seq].Source_cd,
txt_Method1_cd = request_valid->qual[d.seq].Method1_cd,
txt_Method2_cd = request_valid->qual[d.seq].Method2_cd,
txt_high_value = request_valid->qual[d.seq].high_value,
txt_low_value = request_valid->qual[d.seq].low_value,
txt_interp_result_cd = request_valid->qual[d.seq].interp_result_cd,
txt_interp_id = request_valid->qual[d.seq].interp_id
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5))
PLAN D where Request_valid->qual[d.seq].Row_valid = 1
order txt_Antibiotic_cd, 0, txt_organism_cd, 1, txt_source_cd, 2, txt_Method1_cd,3, txt_Method2_cd,4

head report
x2=0
 
head txt_Antibiotic_cd
dummy = 0
head txt_organism_cd
dummy = 0
head txt_source_cd
dummy = 0
head txt_Method1_cd
x2=x2+1
x3=0
if(size(request_total->Total,5)<=x2)
stat = alterlist(request_total->total,x2+5)
endif
request_total->total[x2]->interp_id = Request_valid->qual[d.seq].interp_id
request_total->total[x2]->medication_cd = Request_valid->qual[d.seq].Antibiotic_cd
request_total->total[x2]->organism_grouping_cd = Request_valid->qual[d.seq].organism_cd
request_total->total[x2]->source_grouping_cd = Request_valid->qual[d.seq].Source_cd
request_total->total[x2]->sus_detail_cd = Request_valid->qual[d.seq].Method1_cd

head txt_Method2_cd
x3=x3+1
x4 = 0
if(size(request_total->Total[x2]->qual,5)<=x3)
stat = alterlist(request_total->Total[x2]->qual,x3+5)
endif
	request_total->total[x2]->qual[x3].interp_test_cd = Request_valid->qual[d.seq].Method2_cd
	request_total->total[x2]->qual[x3].interp_range_id = -1
	
	head txt_low_value
	x4=x4+1
		if(size(request_total->Total[x2]->qual[x3].interp_qual,5)<=x4)
		stat = alterlist(request_total->Total[x2]->qual[x3].interp_qual,x4+5)
		endif

		request_total->Total[x2]->qual[x3].interp_qual[x4].low_value = cnvtreal(Request_valid->qual[d.seq].low_value)
		request_total->Total[x2]->qual[x3].interp_qual[x4].high_value = cnvtreal(Request_valid->qual[d.seq].high_value)
		request_total->Total[x2]->qual[x3].interp_qual[x4].interp_result_cd = cnvtint(Request_valid->qual[d.seq].interp_result_cd) 
	foot txt_low_value
 	stat = alterlist(request_total->Total[x2]->qual[x3]->interp_qual,x4)
foot txt_Method2_cd
stat = alterlist(request_total->Total[x2]->qual,x3)
foot txt_Method1_cd
stat = alterlist(request_total->Total,x2)
foot txt_source_cd
dummy = 1
foot txt_organism_cd
dummy = 1
foot txt_Antibiotic_cd
dummy = 1
with nocounter



for (Seq3 = 1 to size(request_total->total,5))
set request2->interp_id = request_total->total[Seq3].interp_id
set request2->medication_cd = request_total->total[Seq3].medication_cd
set request2->organism_grouping_cd = request_total->total[Seq3].organism_grouping_cd
set request2->source_grouping_cd = request_total->total[Seq3].source_grouping_cd
set request2->sus_detail_cd = request_total->total[Seq3].sus_detail_cd
set stat = alterlist(request2->qual,size(request_total->total[Seq3].qual,5))
for (Seq6 = 1 to size(request_total->total[Seq3].qual,5))
set request2->qual[Seq6].interp_test_cd = request_total->total[Seq3].qual[Seq6].interp_test_cd
set request2->qual[Seq6].interp_range_id = request_total->total[Seq3].qual[Seq6].interp_range_id
set stat = alterlist(request2->qual[Seq6]->interp_qual,size(request_total->total[Seq3].qual[Seq6]->interp_qual,5))
for (Seq7 = 1 to size(request_total->total[Seq3].qual[Seq6]->interp_qual,5))
set request2->qual[Seq6].interp_qual[Seq7].high_value = request_total->total[Seq3].qual[Seq6].interp_qual[Seq7].high_value
set request2->qual[Seq6].interp_qual[Seq7].low_value = request_total->total[Seq3].qual[Seq6].interp_qual[Seq7].low_value
set request2->qual[Seq6].interp_qual[Seq7].interp_result_cd 
= request_total->total[Seq3].qual[Seq6].interp_qual[Seq7].interp_result_cd
endfor
endfor 
call echorecord (REQUEST2)
execute MIC_ADD_REF_SUS_INTERP WITH	REPLACE("REQUEST",REQUEST2)
endfor

call echo("///////////////////////////////////////////////////////////////////////////////////////")
call echo("/////////////////////////////////////Importing Done////////////////////////////////////")
call echo("/////////////////Need to Cycle Server 80 for the interps to appear/////////////////////")
call echo("///////////////////////////////////////////////////////////////////////////////////////")
else
 
call clear(1,1)
call video(i)
call text(2, 4, "Importing have stopped because some of the entities in the csv file is invalid")
call text(3, 4, "kindly check the log file Auto_MIC_ManNumericInterp_log")
 
select into "Auto_MIC_ManNumericInterp_log"
 Source 			= request_valid->qual[d.seq].Source
,Source_valid		  			= if(request_valid->qual[d.seq].Source_valid) "Yes" else "No" endif
,Organism 			= request_valid->qual[d.seq].Organism
,Organism_valid	  			= if(request_valid->qual[d.seq].Organism_valid) "Yes" else "No" endif
,Antibiotic 			= request_valid->qual[d.seq].Antibiotic
,Antibiotic_valid	  			= if(request_valid->qual[d.seq].Antibiotic_valid) "Yes" else "No" endif
,Method1 			= request_valid->qual[d.seq].Method1
,Method1_valid		  			= if(request_valid->qual[d.seq].Method1_valid) "Yes" else "No" endif
,Method2 			= request_valid->qual[d.seq].Method2
,Method2_valid		  			= if(request_valid->qual[d.seq].Method2_valid) "Yes" else "No" endif
,high_value 			= request_valid->qual[d.seq].high_value
,low_value 			= request_valid->qual[d.seq].low_value
,interp_result			= request_valid->qual[d.seq].interp_result
,interp_result_valid	  			= if(request_valid->qual[d.seq].interp_result_valid) "Yes" else "No" endif
,Row_valid	  			= if(request_valid->qual[d.seq].Row_valid) "YES" else "NO" endif
 
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->qual,5))
PLAN D
with nocounter, version
endif
 
end
go