set trace backdoor p30ins go
drop program Auto_GL_PPR_Copy go
create program Auto_GL_PPR_Copy
 
record Request
 ( 1 Qual[*]
       2 Prsnl_id               = f8
       2 service_resource_cd    = f8
       2 action_flag            = i2
 )
 
record Request_valid
 ( 1 rlist[*]
       2 Prsnl_id_from          = f8
       2 user_name_from			= c100
       2 user_name_from_valid	= i2
       
       2 Prsnl_id_to 	        = f8
       2 user_name_to			= c100
       2 user_name_to_valid		= i2
       
       2 Append					= i2
       2 Append_valid			= i2
       
       2 Rec_valid 				= i2
 )
 
declare Seq = I2
 
declare CountRows = I4
declare CountInvalidRows = I4
 
set CountRows =0
set CountInvalidRows = 0

set stat = alterlist(request_valid->rlist,size(requestin->list_0,5))
for (Seq=1 to size(requestin->List_0,5))
set request_valid->rlist[Seq].user_name_from = requestin->List_0[Seq].user_name_from
set request_valid->rlist[Seq].user_name_to = requestin->List_0[Seq].user_name_to
set request_valid->rlist[Seq].Append = cnvtint(requestin->List_0[Seq].Append )
set CountRows = CountRows +1
 
/*------------------------------------------ validate username in personnel ---------------------------------------*/
set request_valid->rlist[Seq].user_name_from_valid = 0
select into 'NL:'
FromPrsnlID = p.person_id
from PRSNL P
plan p where cnvtupper(p.username) = cnvtupper(Request_valid->rlist[Seq].user_name_from)
detail
Request_valid->rlist[Seq].Prsnl_id_from = FromPrsnlID
request_valid->rlist[Seq].user_name_from_valid = 1 
with nocounter

set request_valid->rlist[Seq].user_name_to_valid = 0
select into 'NL:'
ToPrsnlID = p.person_id
from PRSNL P
plan p where cnvtupper(p.username) = cnvtupper(Request_valid->rlist[Seq].user_name_to)
detail
Request_valid->rlist[Seq].Prsnl_id_to = ToPrsnlID
request_valid->rlist[Seq].user_name_to_valid = 1 
with nocounter 

/*------------------------------------------ validate Append Indicator ---------------------------------------*/
if(request_valid->rlist[Seq].Append in (0,1))
set request_valid->rlist[Seq].Append_valid = 1
else
set request_valid->rlist[Seq].Append_valid = 0
endif


/*------------------------------------Get Invalid Rows--------------------------------------*/
if(Request_valid->rlist[Seq].user_name_to_valid = 0 or Request_valid->rlist[Seq].user_name_from_valid = 0
or Request_valid->rlist[Seq].Append_valid = 0 )
set Request_valid->rlist[Seq].rec_valid = 0
set CountInvalidRows = CountInvalidRows + 1
else
set Request_valid->rlist[Seq].rec_valid = 1
endif
 
endfor
 
if(CountInvalidRows = 0)

for (Seq3 = 1 to size(Request_valid->rlist,5))
if (Request_valid->rlist[Seq3].rec_valid = 1)

if(Request_valid->rlist[Seq3].Append = 0)
SELECT INTO 'NL:'
txt_prsnl_id1 = p.prsnl_id,
txt_sr_cd1 = p.service_resource_cd
FROM PRSNL_SERVICE_RESOURCE_RELTN p
PLAN p where p.prsnl_id = Request_valid->rlist[Seq3].Prsnl_id_to
order by  txt_prsnl_id1
 
head report
x2=0
head txt_prsnl_id1
z=0
head txt_sr_cd1
x2=x2+1
	if(size(request->Qual,5)<=x2)
	stat = alterlist(request->Qual,x2+5)
	endif
	request->Qual[x2].Prsnl_id = txt_prsnl_id1
	request->Qual[x2].service_resource_cd = txt_sr_cd1
	request->Qual[x2].action_flag = 2
 
foot txt_sr_cd1
z=0
foot txt_prsnl_id1
stat = alterlist(request->Qual,x2)
 
with nocounter
call echorecord(request) 
execute PPR_UPD_SERVRES_ACCESS
free record request
record Request
 ( 1 Qual[*]
       2 Prsnl_id               = f8
       2 service_resource_cd    = f8
       2 action_flag            = i2
 )


endif

SELECT INTO 'NL:'
txt_prsnl_id = Request_valid->rlist[Seq3].Prsnl_id_to,
txt_sr_cd = p.service_resource_cd
FROM PRSNL_SERVICE_RESOURCE_RELTN p
PLAN p where p.prsnl_id = Request_valid->rlist[Seq3].Prsnl_id_from
and p.service_resource_cd not in 
(select p1.service_resource_cd from PRSNL_SERVICE_RESOURCE_RELTN p1 where p1.prsnl_id = Request_valid->rlist[Seq3].Prsnl_id_to)
order by  txt_prsnl_id
 
head report
x2=0
head txt_prsnl_id
z=0
head txt_sr_cd
x2=x2+1
	if(size(request->Qual,5)<=x2)
	stat = alterlist(request->Qual,x2+5)
	endif
	request->Qual[x2].Prsnl_id = txt_prsnl_id
	request->Qual[x2].service_resource_cd = txt_sr_cd
	request->Qual[x2].action_flag = 1
 
foot txt_sr_cd
z=0
foot txt_prsnl_id
stat = alterlist(request->Qual,x2)
 
with nocounter
;call echorecord(request) 
execute PPR_UPD_SERVRES_ACCESS
free record request
record Request
 ( 1 Qual[*]
       2 Prsnl_id               = f8
       2 service_resource_cd    = f8
       2 action_flag            = i2
 )

call echo (Concat("||||||||||||||||||||||||||||",trim(Request_valid->rlist[Seq3].user_name_to), " Copied|||||||||||||||||||||||||"))
endif
endfor



 
else
call echo ("Importing stopped as one or more of the entities are invalid")
call echo ("Kindly review the ((Auto_GL_PPR_Copy_log)) file")

select into "Auto_GL_PPR_Copy_log.dat"
 User_Name_From					= Trim(Request_valid->rlist[d.seq].user_name_from),
 User_Name_From_Valid			= if(Request_valid->rlist[d.seq].user_name_from_valid) "Yes" else "No" endif,
 User_Name_To					= Trim(Request_valid->rlist[d.seq].user_name_to),
 User_Name_To_Valid				= if(Request_valid->rlist[d.seq].user_name_to_valid) "Yes" else "No" endif,
 Record_valid					= if(Request_valid->rlist[d.seq].rec_valid) "Yes" else "No" endif
FROM (DUMMYT D WITH SEQ = SIZE(Request_valid->rlist,5))
with nocounter, version
 
 
endif
 
end
go
 