set trace backdoor p30ins go
 
drop program Auto_MIC_DeltaValues go
create program Auto_MIC_DeltaValues
 
record request_1
    (
     1 ALLOW_PARTIAL_IND = I2
     1 SERVICE_RESOURCE_CDI = I2
     1 SOURCE_CDI = I2
     1 ORGANISM_CDI = I2
     1 SUS_DETAIL_CDI = I2
     1 QUAL[*]
       2 SERVICE_RESOURCE_CD = F8
       2 SOURCE_CD = F8
       2 ORGANISM_CD = F8
       2 SUS_DETAIL_CD = F8
 )
 
 record request_2
    (
     1 ALLOW_PARTIAL_IND = I2
     1 SUS_DELTA_VALUE_IDI = I2
     1 ANTIBIOTIC_CDI = I2
     1 RESULT_CDI = I2
     1 VALUE_NBRI = I2
     1 QUAL[*]
       2 SUS_DELTA_VALUE_ID = F8
       2 ANTIBIOTIC_CD = F8
       2 RESULT_CD = F8
       2 VALUE_NBR = I4
 )
 
 
 record request_valid
    (
     1 QUAL[*]
       2 service_resource = vc
       2 service_resource_valid = i2
       2 SERVICE_RESOURCE_CD = F8
 
       2 source = vc
       2 source_valid = i2
       2 SOURCE_CD = F8
 
       2 organism = vc
       2 organism_valid = i2
       2 ORGANISM_CD = F8
 
       2 sus_detail = vc
       2 sus_detail_valid = i2
       2 SUS_DETAIL_CD = F8
 
       2 antibiotic = vc
       2 antibiotic_valid = i2
       2 ANTIBIOTIC_CD = F8
 
       2 result = vc
       2 result_valid = i2
       2 RESULT_CD = F8
 
       2 VALUE_NBR = I4
 
       2 exist = i2
 )
 
 
/*****************Copy the into request_valid*************************************/
declare Seq1 = I2
set stat = alterlist(request_valid->qual,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set Request_valid->qual[Seq1].antibiotic = requestin->List_0[Seq1].antibiotic
set Request_valid->qual[Seq1].organism = requestin->List_0[Seq1].organism
set Request_valid->qual[Seq1].result = requestin->List_0[Seq1].result
set Request_valid->qual[Seq1].service_resource = requestin->List_0[Seq1].service_resource
set Request_valid->qual[Seq1].source = requestin->List_0[Seq1].source
set Request_valid->qual[Seq1].sus_detail = requestin->List_0[Seq1].sus_detail
set Request_valid->qual[Seq1].VALUE_NBR = cnvtint(requestin->List_0[Seq1].VALUE_NBR)
endfor
 
declare Seq2 = I2
set CountRows = 0
set CountInvalid = 0
for (Seq2 = 1 to size(request_valid->qual,5))
set CountRows = CountRows +1
 
/**********************************************
Get invalid antibiotic
**********************************************/
if (cnvtupper(request_valid->qual[Seq2].antibiotic) = "ALL")
set Request_valid->qual[Seq2].antibiotic_valid = 1
set Request_valid->qual[Seq2].ANTIBIOTIC_CD = 0
else
set Request_valid->qual[Seq2].antibiotic_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 1011
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].antibiotic)
detail
Request_valid->qual[Seq2].antibiotic_valid = 1
Request_valid->qual[Seq2].ANTIBIOTIC_CD = cv.code_value
with nocounter
endif
 
 
/**********************************************
Get invalid organism
**********************************************/
if (cnvtupper(request_valid->qual[Seq2]. organism) = "ALL")
set Request_valid->qual[Seq2].organism_valid = 1
set Request_valid->qual[Seq2].ORGANISM_CD = 0
else
set Request_valid->qual[Seq2].organism_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 1021
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].organism)
detail
Request_valid->qual[Seq2].organism_valid = 1
Request_valid->qual[Seq2].ORGANISM_CD = cv.code_value
with nocounter
endif
 
/**********************************************
Get invalid result
**********************************************/
set Request_valid->qual[Seq2].result_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set in (1025,64)
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].result)
detail
Request_valid->qual[Seq2].result_valid = 1
Request_valid->qual[Seq2].RESULT_CD = cv.code_value
with nocounter
 
 
/**********************************************
Get invalid service_resource
**********************************************/
if (cnvtupper(request_valid->qual[Seq2].service_resource) = "ALL")
set Request_valid->qual[Seq2].service_resource_valid = 1
set Request_valid->qual[Seq2].SERVICE_RESOURCE_CD = 0
else
set Request_valid->qual[Seq2].service_resource_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 221
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].service_resource)
detail
Request_valid->qual[Seq2].service_resource_valid = 1
Request_valid->qual[Seq2].SERVICE_RESOURCE_CD = cv.code_value
with nocounter
endif
 
/**********************************************
Get invalid sources
**********************************************/
if (cnvtupper(request_valid->qual[Seq2].source) = "ALL")
set Request_valid->qual[Seq2].source_valid = 1
set Request_valid->qual[Seq2].SOURCE_CD = 0
else
set Request_valid->qual[Seq2].source_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 2052
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].source)
detail
Request_valid->qual[Seq2].source_valid = 1
Request_valid->qual[Seq2].SOURCE_CD = cv.code_value
with nocounter
endif
 
/**********************************************
Get invalid sus_details
**********************************************/
set Request_valid->qual[Seq2].sus_detail_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 1004
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].sus_detail)
detail
Request_valid->qual[Seq2].sus_detail_valid = 1
Request_valid->qual[Seq2].SUS_DETAIL_CD = cv.code_value
with nocounter
 
 
/**********************************************
Get existing
**********************************************/
set Request_valid->qual[Seq2].exist = 0
select into 'NL:'
msdv.*
from MIC_SUS_DELTA_VALUE msdv
plan msdv where msdv.organism_cd = request_valid->qual[Seq2].ORGANISM_CD
and msdv.service_resource_cd = request_valid->qual[Seq2].SERVICE_RESOURCE_CD
and msdv.source_cd = request_valid->qual[Seq2].SOURCE_CD
and msdv.sus_detail_cd = request_valid->qual[Seq2].SUS_DETAIL_CD
detail
Request_valid->qual[Seq2].exist = 1
with nocounter
 
 
if(Request_valid->qual[Seq2].antibiotic_valid = 0 
or Request_valid->qual[Seq2].organism_valid = 0 or Request_valid->qual[Seq2].result_valid = 0
or Request_valid->qual[Seq2].service_resource_valid = 0 or Request_valid->qual[Seq2].source_valid = 0
or Request_valid->qual[Seq2].sus_detail_valid = 0 or Request_valid->qual[Seq2].exist = 1)
set CountInvalid = CountInvalid+1
endif
endfor
 
call echorecord (request_valid)
if (CountInvalid=0)
 
SELECT distinct INTO 'NL:'
txt_ORGANISM_CD = Request_valid->qual[d.seq].ORGANISM_CD,
txt_SERVICE_RESOURCE_CD = Request_valid->qual[d.seq].SERVICE_RESOURCE_CD,
txt_SOURCE_CD = Request_valid->qual[d.seq].SOURCE_CD,
txt_SUS_DETAIL_CD = Request_valid->qual[d.seq].SUS_DETAIL_CD
 
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5))
 
PLAN D where Request_valid->qual[d.seq].antibiotic_valid = 1 
and Request_valid->qual[d.seq].organism_valid = 1 and Request_valid->qual[d.seq].result_valid = 1
and Request_valid->qual[d.seq].service_resource_valid = 1 and Request_valid->qual[d.seq].source_valid = 1
and Request_valid->qual[d.seq].sus_detail_valid = 1 and Request_valid->qual[d.seq].exist = 0
 
order by d.seq
 
head report
x2=0
 
head txt_ORGANISM_CD
dummy = 0
head txt_SERVICE_RESOURCE_CD
dummy = 0
head txt_SOURCE_CD
dummy = 0
head txt_SUS_DETAIL_CD

x2=x2+1
 
if(size(request_1->QUAL,5)<=x2)
stat = alterlist(request_1->qual,x2+5)
endif
		request_1->QUAL[x2].ORGANISM_CD = CNVTINT(request_valid->qual[d.seq].ORGANISM_CD)
		request_1->QUAL[x2].SERVICE_RESOURCE_CD = CNVTINT(request_valid->qual[d.seq].SERVICE_RESOURCE_CD)
		request_1->QUAL[x2].SOURCE_CD = CNVTINT(request_valid->qual[d.seq].SOURCE_CD)
		request_1->QUAL[x2].SUS_DETAIL_CD = CNVTINT(request_valid->qual[d.seq].SUS_DETAIL_CD)

foot txt_SUS_DETAIL_CD
stat = alterlist(request_1->qual,x2)
foot txt_SOURCE_CD
dummy = 1
foot txt_SERVICE_RESOURCE_CD
dummy = 1
foot txt_ORGANISM_CD
dummy=1
with nocounter
set request_1->ALLOW_PARTIAL_IND =  1
set request_1->SERVICE_RESOURCE_CDI = 1
set request_1->SOURCE_CDI =  1
set request_1->ORGANISM_CDI = 1
set request_1->SUS_DETAIL_CDI = 1
 
call echorecord(request_1)
execute GM_I_MIC_SUS_DELT8147 WITH	REPLACE("REQUEST",REQUEST_1)
 
SELECT INTO 'NL:'
txt_ANTIBIOTIC_CD = Request_valid->qual[d.seq].ANTIBIOTIC_CD,
txt_ORGANISM_CD = Request_valid->qual[d.seq].ORGANISM_CD,
txt_RESULT_CD = Request_valid->qual[d.seq].RESULT_CD,
txt_SERVICE_RESOURCE_CD = Request_valid->qual[d.seq].SERVICE_RESOURCE_CD,
txt_SOURCE_CD = Request_valid->qual[d.seq].SOURCE_CD,
txt_SUS_DETAIL_CD = Request_valid->qual[d.seq].SUS_DETAIL_CD,
txt_VALUE_NBR = Request_valid->qual[d.seq].VALUE_NBR,
txt_sus_delta_value_id = msdv.sus_delta_value_id
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5)), MIC_SUS_DELTA_VALUE msdv
 
PLAN D where Request_valid->qual[d.seq].antibiotic_valid = 1 
and Request_valid->qual[d.seq].organism_valid = 1 and Request_valid->qual[d.seq].result_valid = 1
and Request_valid->qual[d.seq].service_resource_valid = 1 and Request_valid->qual[d.seq].source_valid = 1
and Request_valid->qual[d.seq].sus_detail_valid = 1 and Request_valid->qual[d.seq].exist = 0
join msdv  
where msdv.organism_cd = Request_valid->qual[d.seq].ORGANISM_CD
and msdv.service_resource_cd = Request_valid->qual[d.seq].SERVICE_RESOURCE_CD
and msdv.source_cd = Request_valid->qual[d.seq].SOURCE_CD
and msdv.sus_detail_cd = Request_valid->qual[d.seq].SUS_DETAIL_CD 
 
order by txt_sus_delta_value_id, txt_ORGANISM_CD, txt_SERVICE_RESOURCE_CD, txt_SOURCE_CD, 
txt_SUS_DETAIL_CD, txt_ANTIBIOTIC_CD, txt_RESULT_CD


head report 
x3=0
head txt_sus_delta_value_id
dummy = 0
head txt_ANTIBIOTIC_CD
dummy = 0
head txt_RESULT_CD
x3=x3+1
 
if(size(request_2->QUAL,5)<=x3)
stat = alterlist(request_2->qual,x3+5)
endif
		request_2->QUAL[x3].ANTIBIOTIC_CD = CNVTINT(request_valid->qual[d.seq].ANTIBIOTIC_CD)
		request_2->QUAL[x3].RESULT_CD = CNVTINT(request_valid->qual[d.seq].RESULT_CD)
		request_2->QUAL[x3].SUS_DELTA_VALUE_ID = CNVTINT(msdv.sus_delta_value_id)
		request_2->QUAL[x3].VALUE_NBR = CNVTINT(request_valid->qual[d.seq].VALUE_NBR)
foot txt_RESULT_CD
stat = alterlist(request_2->qual,x3)
foot txt_ANTIBIOTIC_CD
dummy = 1
foot txt_sus_delta_value_id
dummy=1
with nocounter
set request_2->ALLOW_PARTIAL_IND =  1
set request_2->ANTIBIOTIC_CDI = 1
set request_2->RESULT_CDI =  1
set request_2->SUS_DELTA_VALUE_IDI = 1
set request_2->VALUE_NBRI = 1
call echorecord(request_2) 
execute GM_I_MIC_SUS_DELT8148 WITH	REPLACE("REQUEST",REQUEST_2)
call echo("///////////////////////////////////////////////////////////////////////////////////////")
call echo("/////////////////////////////////////Importing Done////////////////////////////////////")  
call echo("///////////////////////////////////////////////////////////////////////////////////////") 
else
 
call clear(1,1)
call video(i)
call text(2, 4, "Importing have stopped because some of the entities in the csv file is invalid")
call text(3, 4, "kindly check the log file Auto_MIC_DeltaValues_log")
 
select into "Auto_MIC_DeltaValues_log"
antibiotic 			= request_valid->qual[d.seq].antibiotic
,antibiotic_valid	  			= if(request_valid->qual[d.seq].antibiotic_valid) "Yes" else "No" endif
,organism 			= request_valid->qual[d.seq].organism
,organism_valid	  			= if(request_valid->qual[d.seq].organism_valid) "Yes" else "No" endif
,result 			= request_valid->qual[d.seq].result
,result_valid	  			= if(request_valid->qual[d.seq].result_valid) "Yes" else "No" endif
,service_resource 			= request_valid->qual[d.seq].service_resource
,service_resource_valid	  			= if(request_valid->qual[d.seq].service_resource_valid) "Yes" else "No" endif
,source 			= request_valid->qual[d.seq].source
,source_valid	  			= if(request_valid->qual[d.seq].source_valid) "Yes" else "No" endif
,sus_detail 			= request_valid->qual[d.seq].sus_detail
,sus_detail_valid	  			= if(request_valid->qual[d.seq].sus_detail_valid) "Yes" else "No" endif
,exist  			= if(request_valid->qual[d.seq].exist) "Yes" else "No" endif
 
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->qual,5))
PLAN D
with nocounter, version
endif
 
end
go
 
 