set trace backdoor p30ins go
 
drop program Auto_GL_Orders:dba go
create program Auto_GL_Orders:dba
 
/*prompt
	"Output to File/Printer/MINE" = "MINE"   ;* Enter or select the printer or file name to send this report to.
	;<<hidden>>"Validate_btn" = ""
 
with OUTDEV*/
 
/****************Create Record to be sent to program******************************/
 
Record Request
(  1 oc_list[*]
    2 catalog_code_value            = f8
    2 action_flag                   = i2      ;1=add,  2=update,  3=delete
    2 catalog_type_code_value       = f8
    2 activity_type_code_value      = f8
    2 subactivity_type_code_value   = f8
    2 oe_format_id                  = f8
    2 primary_name                  = c100
    2 duplicate_ind                 = i2	;1 , 0
    2 dlist[*]
      3 dup_check_level 	  		= i2	;1=orderable, 2=catalog, 3=activity
      3 look_behind_action_code_value = f8
      3 look_behind_minutes			= i4
      3 look_ahead_action_code_value = f8
      3 look_ahead_minutes			= i4
      3 exact_match_action_code_value = f8
    2 clin_cat_code_value			= f8
    2 schedule_ind				    = i2
    2 slist[*]
      3 pat_type_code_value 		= f8
    2 description                   = vc
    2 dept_name						= c100
    2 filter_ind = i2
    2 flist[*]
      3 entity_reltn_mean = vc
      3 entity2_id = f8
      3 entity2_display = vc
      3 rank_sequence = i4
      3 entity2_name = vc
    2 procedure_type_code_value = f8
    2 concept_cki = vc
    2 cki = vc
)
/*********************************** Validation Request List **************************************/
 
Record Request_valid
(  1 oc_list[*]
	2 action_flag					= i2
	2 catalog_code					= f8
	2 department_name 				= vc
	2 department_name_valid			= i2
	2 description 					= vc
	2 primary_name 					= c100
	2 primary_name_valid			= i2
 
	2 catalog_type_code_value       = f8
	2 catalog_type_name 			= vc
	2 catalog_type_valid			= i2
 
    2 activity_type_code_value      = f8
	2 activity_type_name 			= vc
	2 activity_type_valid			= i2
 
	2 activity_subtype_name 		= vc
	2 activity_subtype_code_value   = f8
	2 activity_subtype_valid		= i2
 
	2 OE_format 					= vc
	2 OE_format_valid				= i2
	2 OE_format_id					= f8
 
	2 duplicate_ind					= i2	;1,0
	2 duplicate_level 				= vc 		;1=orderable, 2=catalog, 3=activity
	2 dup_check_level_cd			= i2
	2 duplicate_level_valid			= i2
 
	2 look_ahead_time 				= vc
	2 look_ahead_minutes			= i4
	2 look_ahead_action 			= vc
	2 look_ahead_action_code_value 	= f8
	2 look_ahead_action_valid		= i2
 
	2 look_back_time 				= vc
	2 look_behind_minutes			= i4
	2 look_back_action 				= vc
	2 look_behind_action_code_value = f8
    2 look_back_action_valid		= i2
 
	2 exact_match_action 			= vc
	2 exact_match_action_code_value = f8
 	2 exact_match_action_valid		= i2
 
	2 clin_cat_code_value			= f8
 
	2 rec_valid						= I2
 
)
 
Declare seq = I2
 
declare Result_cattype = vc
declare Result_cattype_r = vc
declare Result_cattype_echo = vc
 
declare Result_Actvtype = vc
declare Result_Actvtype_r = vc
declare Result_Actvtype_echo = vc
 
declare Result_ActvSubtype = vc
declare Result_ActvSubtype_r = vc
declare Result_ActvSubtype_echo = vc
 
declare Result_OEFormat = vc
declare Result_OEFormat_r = vc
declare Result_OEFormat_echo = vc
 
declare Result_Depname = vc
declare Result_Depname_r = vc
declare Result_Depname_echo = vc
 
declare Result_Primary = vc
declare Result_Primary_r = vc
declare Result_Primary_echo = vc
 
declare Result_dup_level = vc
declare Result_dup_level_r = vc
declare Result_dup_level_echo = vc
 
declare Result_look_ahead = vc
declare Result_look_ahead_r = vc
declare Result_look_ahead_echo = vc
 
declare Result_look_back = vc
declare Result_look_back_r = vc
declare Result_look_back_echo = vc
 
declare Result_exact_match = vc
declare Result_exact_match_r = vc
declare Result_exact_match_echo = vc
 
declare Result8_r = vc
declare Result8_echo = vc
 
 
declare CountRows = I4
declare CountInvalidCattype = I4
declare CountInvalidActvtype = I4
declare CountInvalidActvSubtype = I4
declare CountInvalidOEFormat = I4
declare CountInvalidPrimary = I4
declare CountInvalidDeptname = I4
declare CountInvalidDuplevel = I4
declare CountInvalidLookahead = I4
declare CountInvalidLookback = I4
declare CountInvalidExactmatch = I4
 
declare CountInvalidRows = I4
 
 
set stat = alterlist(request_valid->oc_list,size(requestin->list_0,5))
 
set CountRows =0
set CountInvalidCattype = 0
set CountInvalidActvtype = 0
set CountInvalidActvSubtype = 0
set CountInvalidOEFormat = 0
set CountInvalidPrimary = 0
set CountInvalidDeptname = 0
set CountInvalidDuplevel = 0
set CountInvalidLookahead = 0
set CountInvalidLookback = 0
set CountInvalidExactmatch = 0
set CountInvalidRows = 0
 
for (Seq=1 to size(requestin->List_0,5))
 
 
set Request_valid->oc_list[Seq].department_name = requestin->List_0[Seq].department_name
set Request_valid->oc_list[Seq].description = requestin->List_0[Seq].description
set Request_valid->oc_list[Seq].primary_name = requestin->List_0[Seq].primary_name
set Request_valid->oc_list[Seq].catalog_type_name = requestin->List_0[Seq].catalog_type_name
set Request_valid->oc_list[Seq].activity_type_name = requestin->List_0[Seq].activity_type_name
set Request_valid->oc_list[Seq].activity_subtype_name = requestin->List_0[Seq].activity_subtype_name
set Request_valid->oc_list[Seq].OE_format = requestin->List_0[Seq].OE_format
set Request_valid->oc_list[Seq].duplicate_level = requestin->List_0[Seq].duplicate_level
set Request_valid->oc_list[Seq].look_ahead_minutes = cnvtint(requestin->List_0[Seq].look_ahead_time)
set Request_valid->oc_list[Seq].look_ahead_action = requestin->List_0[Seq].look_ahead_action
set Request_valid->oc_list[Seq].look_behind_minutes = cnvtint(requestin->List_0[Seq].look_back_time)
set Request_valid->oc_list[Seq].look_back_action = requestin->List_0[Seq].look_back_action
set Request_valid->oc_list[Seq].exact_match_action = requestin->List_0[Seq].exact_match_action
 
/***************************** Check Dep.Name & Primary Syn & Check Catalog_code Exist*********************/
set Request_valid->oc_list[Seq].catalog_code = 0
set request_valid->oc_list[Seq].department_name_valid = 0
set request_valid->oc_list[Seq].primary_name_valid = 0
set request_valid->oc_list[Seq].action_flag = 1
 
 
 if (size(request_valid->oc_list[Seq].department_name) <= 100 )
 	set request_valid->oc_list[Seq].department_name_valid = 1
 else
 	set CountInvalidDeptname = CountInvalidDeptname +1
	set Result_Depname = concat(Result_Depname,request_valid->oc_list[Seq].department_name,", ")
	set Result_Depname_r = concat (Result_Depname_r,trim(cnvtstring(Seq)),", ")
 endif
 
 if (size(request_valid->oc_list[Seq].primary_name) <= 100)
 	set request_valid->oc_list[Seq].primary_name_valid = 1
 else
 	set CountInvalidPrimary = CountInvalidPrimary +1
	set Result_Primary = concat(Result_Primary,request_valid->oc_list[Seq].primary_name,", ")
	set Result_Primary_r = concat (Result_Primary_r,trim(cnvtstring(Seq)),", ")
 endif
 
if (request_valid->oc_list[Seq].department_name_valid = 1 and request_valid->oc_list[Seq].primary_name_valid = 1 )
 
select into 'NL:'
IntCatalogCd = oc.catalog_cd
from order_catalog oc
plan oc where cnvtupper(oc.PRIMARY_MNEMONIC) = cnvtupper(Request_valid->oc_list[Seq].primary_name)
detail
;call echo(IntCatalogCd)
Request_valid->oc_list[Seq].catalog_code = IntCatalogCd
request_valid->oc_list[Seq].action_flag = 2
with nocounter
 
endif
 
/************************************Get catalog_type code value *******************************************/
 
set CountRows = CountRows +1
set request_valid->oc_list[Seq].catalog_type_valid = 0
 
select into 'NL:'
catalog_type_cv = cv.code_value
from code_value cv
plan cv where cv.code_set = 6000 and cnvtlower(cv.display) = cnvtlower(Request_valid->oc_list[Seq].catalog_type_name)
detail
Request_valid->oc_list[Seq].catalog_type_valid = 1
Request_valid->oc_list[Seq].catalog_type_code_value = catalog_type_cv
with nocounter
 
if(Request_valid->oc_list[Seq].catalog_type_valid = 0)
set CountInvalidCattype = CountInvalidCattype +1
set Result_cattype = concat(Result_cattype,Request_valid->oc_list[Seq].catalog_type_name,", ")
set Result_cattype_r = concat(Result_cattype_r,trim(cnvtstring(Seq)),", ")
endif
 
/************************************Get activity type code value *******************************************/
 
set request_valid->oc_list[Seq].activity_type_valid = 0
select into 'NL:'
activity_type_cv = cv.code_value
from code_value cv
plan cv where cv.code_set = 106 and cnvtlower(cv.display) = cnvtlower(Request_valid->oc_list[Seq].activity_type_name)
detail
Request_valid->oc_list[Seq].activity_type_valid = 1
Request_valid->oc_list[Seq].activity_type_code_value = activity_type_cv
with nocounter
 
if(Request_valid->oc_list[Seq].activity_type_valid = 0)
set CountInvalidActvtype = CountInvalidActvtype +1
set Result_Actvtype = concat(Result_Actvtype,Request_valid->oc_list[Seq].activity_type_name,", ")
set Result_Actvtype_r = concat(Result_Actvtype_r,trim(cnvtstring(Seq)),", ")
endif
 
/************************************Get subactivity type code value *******************************************/
 
set request_valid->oc_list[Seq].activity_subtype_valid = 0
if (trim(Request_valid->oc_list[Seq].activity_subtype_name) = "")
	set Request_valid->oc_list[Seq].activity_subtype_code_value = 0
	set request_valid->oc_list[Seq].activity_subtype_valid = 1
 
else
 
	select into 'NL:'
	activity_subtype_cv = cv.code_value
	from code_value cv
	plan cv where cv.code_set = 5801 and cnvtlower(cv.display) = cnvtlower(requestin->List_0[Seq].activity_subtype_name)
 	detail
 	request_valid->oc_list[Seq].activity_subtype_valid = 1
	Request_valid->oc_list[Seq].activity_subtype_code_value = activity_subtype_cv
	with nocounter
 
	if(Request_valid->oc_list[Seq].activity_subtype_valid = 0)
	set CountInvalidActvSubtype = CountInvalidActvSubtype +1
	set Result_ActvSubtype = concat(Result_ActvSubtype,Request_valid->oc_list[Seq].activity_subtype_name,", ")
	set Result_ActvSubtype_r = concat(Result_ActvSubtype_r,trim(cnvtstring(Seq)),", ")
	endif
 
endif
 
/************************************Get order entry formats*******************************************/
 
set request_valid->oc_list[Seq].OE_format_valid = 0
 
select into 'NL:'
oe_format_id = oef.oe_format_id
from ORDER_ENTRY_FORMAT oef
plan oef where cnvtlower(oef.oe_format_name) = cnvtlower(Request_valid->oc_list[Seq].OE_format)
		   and oef.action_type_cd = 2534.00
detail
 
request_valid->oc_list[Seq].OE_format_valid = 1
Request_valid->oc_list[Seq].OE_format_id = oe_format_id
with nocounter
 
if(request_valid->oc_list[Seq].OE_format_valid = 0)
set CountInvalidOEFormat = CountInvalidOEFormat +1
set Result_OEFormat = concat(Result_OEFormat,Request_valid->oc_list[Seq].OE_format,", ")
set Result_OEFormat_r = concat(Result_OEFormat_r,trim(cnvtstring(Seq)),", ")
endif
 
/************************************ Duplicate check *******************************************/
 
set Request_valid->oc_list[Seq].dup_check_level_cd = 0
call echo(Request_valid->oc_list[Seq].duplicate_level)
if (cnvtlower(Request_valid->oc_list[Seq].duplicate_level)="orderable")
	set Request_valid->oc_list[Seq].dup_check_level_cd =1
	set Request_valid->oc_list[Seq].duplicate_ind =1
	set Request_valid->oc_list[Seq].duplicate_level_valid = 1
elseif (cnvtlower(Request_valid->oc_list[Seq].duplicate_level)="catalog")
	set Request_valid->oc_list[Seq].dup_check_level_cd =2
	set Request_valid->oc_list[Seq].duplicate_ind =1
	set Request_valid->oc_list[Seq].duplicate_level_valid = 1
elseif (cnvtlower(Request_valid->oc_list[Seq].duplicate_level)="activity")
	set Request_valid->oc_list[Seq].dup_check_level_cd =3
	set Request_valid->oc_list[Seq].duplicate_ind =1
	set Request_valid->oc_list[Seq].duplicate_level_valid = 1
elseif (Request_valid->oc_list[Seq].duplicate_level ="")
 
	set Request_valid->oc_list[Seq].dup_check_level_cd =0
	set Request_valid->oc_list[Seq].duplicate_ind =0
	set Request_valid->oc_list[Seq].duplicate_level_valid = 1
else
 	set Request_valid->oc_list[Seq].duplicate_ind =1
	set Request_valid->oc_list[Seq].duplicate_level_valid = 0
endif
 
if(request_valid->oc_list[Seq].duplicate_level_valid = 0)
set CountInvalidDuplevel = CountInvalidDuplevel +1
set Result_dup_level= concat(Result_dup_level,Request_valid->oc_list[Seq].duplicate_level,", ")
set Result_dup_level_r = concat(Result_dup_level_r,trim(cnvtstring(Seq)),", ")
endif
 
if (Request_valid->oc_list[Seq].dup_check_level_cd =0)
	set Request_valid->oc_list[Seq].look_ahead_action_code_value = 0
	set request_valid->oc_list[Seq].look_ahead_action_valid = 1
	set Request_valid->oc_list[Seq].look_behind_action_code_value = 0
	set request_valid->oc_list[Seq].look_back_action_valid = 1
	set Request_valid->oc_list[Seq].exact_match_action_code_value=0
	set request_valid->oc_list[Seq].exact_match_action_valid = 1
else



/*********************************** Duplicate Time check **********************************************/
;set Request_valid->oc_list[Seq].look_ahead_time = requestin->List_0[Seq].look_ahead_time
 set request_valid->oc_list[Seq].look_ahead_action_valid = 0
if (trim(Request_valid->oc_list[Seq].look_ahead_action) = "")
	set Request_valid->oc_list[Seq].look_ahead_action_code_value = 0
	set request_valid->oc_list[Seq].look_ahead_action_valid = 1
 
else
 
	select into 'NL:'
	look_ahead_action_cv = cv.code_value
	from code_value cv
	plan cv where cv.code_set = 6001 and cnvtlower(cv.description) = cnvtlower(Request_valid->oc_list[Seq].look_ahead_action)
	detail
 	Request_valid->oc_list[Seq].look_ahead_action_code_value = look_ahead_action_cv
 	request_valid->oc_list[Seq].look_ahead_action_valid = 1
 	with nocounter
endif
if(request_valid->oc_list[Seq].look_ahead_action_valid = 0)
set CountInvalidLookahead = CountInvalidLookahead +1
set Result_look_ahead= concat(Result_look_ahead,Request_valid->oc_list[Seq].look_ahead_action,", ")
set Result_look_ahead_r = concat(Result_look_ahead_r,trim(cnvtstring(Seq)),", ")
endif
/******************************************************************************************************/
;set Request_valid->oc_list[Seq].look_back_time = requestin->List_0[Seq].look_back_time
 set request_valid->oc_list[Seq].look_back_action_valid = 0
 if (trim(Request_valid->oc_list[Seq].look_back_action) = "")
	set Request_valid->oc_list[Seq].look_behind_action_code_value = 0
	set request_valid->oc_list[Seq].look_back_action_valid = 1
 
else
	select into 'NL:'
	look_back_action_cv = cv.code_value
	from code_value cv
	plan cv where cv.code_set = 6001 and cnvtlower(cv.description) = cnvtlower(Request_valid->oc_list[Seq].look_back_action)
	detail
	Request_valid->oc_list[Seq].look_behind_action_code_value = look_back_action_cv
	request_valid->oc_list[Seq].look_back_action_valid = 1
	with nocounter
 endif
 if(request_valid->oc_list[Seq].look_back_action_valid = 0)
set CountInvalidLookback = CountInvalidLookback +1
set Result_look_back= concat(Result_look_back,Request_valid->oc_list[Seq].look_back_action,", ")
set Result_look_back_r = concat(Result_look_back_r,trim(cnvtstring(Seq)),", ")
endif
/*****************************************************************************************************/
 set request_valid->oc_list[Seq].exact_match_action_valid = 0
  if (trim(Request_valid->oc_list[Seq].exact_match_action) = "")
	set Request_valid->oc_list[Seq].exact_match_action_code_value = 0
	set request_valid->oc_list[Seq].exact_match_action_valid = 1
 
else
	select into 'NL:'
	exact_match_action_cv = cv.code_value
	from code_value cv
	plan cv where cv.code_set = 6001 and cnvtlower(cv.description) = cnvtlower(Request_valid->oc_list[Seq].exact_match_action)
	detail
	Request_valid->oc_list[Seq].exact_match_action_code_value = exact_match_action_cv
	request_valid->oc_list[Seq].exact_match_action_valid = 1
 	with nocounter
 
 endif
endif
if(request_valid->oc_list[Seq].exact_match_action_valid = 0)
set CountInvalidExactmatch = CountInvalidExactmatch +1
set Result_exact_match= concat(Result_exact_match,Request_valid->oc_list[Seq].exact_match_action,", ")
set Result_exact_match_r = concat(Result_exact_match_r,trim(cnvtstring(Seq)),", ")
endif
/************************************ DCP Clinical Category code value *******************************************/
 
if (cnvtlower(Request_valid->oc_list[Seq].catalog_type_name) = "laboratory")
 
	select into 'NL:'
	clin_cat_cv = cv.code_value
	from code_value cv
	plan cv where cv.code_set = 16389 and cnvtlower(cv.description) = cnvtlower(Request_valid->oc_list[Seq].catalog_type_name)
 	Detail
	 Request_valid->oc_list[Seq].clin_cat_code_value = clin_cat_cv
	with nocounter
endif
 
/************************************Get invalid rows*******************************************/
if(Request_valid->oc_list[Seq].catalog_type_valid = 0 or Request_valid->oc_list[Seq].activity_type_valid = 0 or
Request_valid->oc_list[Seq].activity_subtype_valid = 0 or Request_valid->oc_list[Seq].OE_format_valid = 0 or
Request_valid->oc_list[Seq].department_name_valid = 0 or Request_valid->oc_list[Seq].primary_name_valid = 0 or
Request_valid->oc_list[Seq].duplicate_level_valid = 0 or Request_valid->oc_list[Seq].look_ahead_action_valid = 0 or
Request_valid->oc_list[Seq].look_back_action_valid = 0 or Request_valid->oc_list[Seq].exact_match_action_valid = 0 )
set Request_valid->oc_list[Seq].rec_valid = 0
set CountInvalidRows = CountInvalidRows + 1
set result8_r = concat (Result8_r,trim(cnvtstring(Seq2)),", ")
;call echo (result8_r)
else
set Request_valid->oc_list[Seq].rec_valid = 1
endif
 
endfor
 
if(CountInvalidCattype < CountRows)
if(size(Result_cattype)>0)
set Result_cattype_echo = Concat ("(",trim(cnvtstring(CountInvalidCattype)),")", "Invalid Catalog Type are ",
replace(Result_cattype,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_cattype_r,",","",2))
else
set Result_cattype_echo = "All Catalog Type valid..."
endif
else
set Result_cattype_echo = "INVALID Catalog Type !!!"
endif
 
if(CountInvalidActvtype < CountRows)
if(size(Result_Actvtype)>0)
set Result_Actvtype_echo = Concat ("(",trim(cnvtstring(CountInvalidActvtype)),")", "Invalid Activities Type are ",
replace(Result_Actvtype,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_Actvtype_r,",","",2))
else
set Result_Actvtype_echo = "All Activites Type valid..."
endif
else
set Result_Actvtype_echo = "INVALID Activity Type !!!"
endif
 
if(CountInvalidActvSubtype < CountRows)
if(size(Result_ActvSubtype)>0)
set Result_ActvSubtype_echo = Concat ("(",trim(cnvtstring(CountInvalidActvSubtype)),")", "Invalid Activities subTypes are ",
replace(Result_ActvSubtype,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_ActvSubtype_r,",","",2))
else
set Result_ActvSubtype_echo = "All Activity Subtype valid..."
endif
else
set Result_ActvSubtype_echo = "INVALID Activity Subtype !!!"
endif
 
if(CountInvalidOEFormat < CountRows)
if(size(Result_OEFormat)>0)
set Result_OEFormat_echo = Concat ("(",trim(cnvtstring(CountInvalidOEFormat)),")", "Invalid Order Entry Format are ",
replace(Result_OEFormat,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_OEFormat_r,",","",2))
else
set Result_OEFormat_echo = "All Order Entry Format valid..."
endif
else
set Result_OEFormat_echo = "INVALID Order Entry Format !!!"
endif
 
if(CountInvalidDeptname < CountRows)
if(size(Result_Depname)>0)
set Result_Depname_echo = Concat ("(",trim(cnvtstring(CountInvalidDeptname)),")", "Invalid Department Name are ",
replace(Result_Depname,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_Depname_r,",","",2))
else
set Result_Depname_echo = "All Department Name valid..."
endif
else
set Result_Depname_echo = "INVALID Department Name !!!"
endif
 
if(CountInvalidPrimary < CountRows)
if(size(Result_Primary)>0)
set Result_Primary_echo = Concat ("(",trim(cnvtstring(CountInvalidPrimary)),")", "Invalid Primary Name are ",
replace(Result_Primary,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_Primary_r,",","",2))
else
set Result_Primary_echo = "All Primary Name valid..."
endif
else
set Result_Primary_echo = "INVALID Primary Name !!!"
endif

if(CountInvalidDuplevel < CountRows)
if(size(Result_dup_level)>0)
set Result_dup_level_echo = Concat ("(",trim(cnvtstring(CountInvalidDuplevel)),")", "Invalid Duplicate Check Level are ",
replace(Result_dup_level,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_dup_level_r,",","",2))
else
set Result_dup_level_echo = "All Duplicate Check Level valid..."
endif
else
set Result_dup_level_echo = "INVALID Duplicate Check Level !!!"
endif
 
if(CountInvalidLookahead < CountRows)
if(size(Result_look_ahead)>0)
set Result_look_ahead_echo = Concat ("(",trim(cnvtstring(CountInvalidLookahead)),")", "Invalid Look ahead are ",
replace(Result_look_ahead,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_look_ahead_r,",","",2))
else
set Result_look_ahead_echo = "All Look ahead valid..."
endif
else
set Result_look_ahead_echo = "INVALID Look ahead !!!"
endif
 
if(CountInvalidLookback < CountRows)
if(size(Result_look_back)>0)
set Result_look_back_echo = Concat ("(",trim(cnvtstring(CountInvalidLookback)),")", "Invalid Look back are ",
replace(Result_look_back,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_look_back_r,",","",2))
else
set Result_look_back_echo = "All Look back valid..."
endif
else
set Result_look_back_echo = "INVALID Look back !!!"
endif
 
if(CountInvalidExactmatch < CountRows)
if(size(Result_exact_match)>0)
set Result_exact_match_echo = Concat ("(",trim(cnvtstring(CountInvalidExactmatch)),")", "Invalid Exact match action are ",
replace(Result_exact_match,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_exact_match_r,",","",2))
else
set Result_exact_match_echo = "All Exact match action valid..."
endif
else
set Result_exact_match_echo = "INVALID Exact match action  !!!"
endif

/************************************ create parameters to sent *******************************************/
 
SELECT INTO 'NL:'
txt_catalog_cd = Request_valid->oc_list[d.Seq].catalog_code,
txt_action_flag = request_valid->oc_list[d.Seq].action_flag,
txt_catalog_type = request_valid->oc_list[d.seq].catalog_type_code_value,
txt_activity_type = request_valid->oc_list[d.seq].activity_type_code_value,
txt_activity_sub_type = request_valid->oc_list[d.seq].activity_subtype_code_value,
txt_oe_format_id = request_valid->oc_list[d.seq].OE_format_id,
txt_primary_name = trim(request_valid->oc_list[d.seq].primary_name),
txt_duplicate_ind = Request_valid->oc_list[d.Seq].duplicate_ind,
txt_check_level = Request_valid->oc_list[d.Seq].dup_check_level_cd,
txt_look_behind_action_code_value = Request_valid->oc_list[d.Seq].look_behind_action_code_value,
txt_look_behind_minutes = Request_valid->oc_list[d.Seq].look_behind_minutes,
txt_look_ahead_action_code_value = Request_valid->oc_list[d.Seq].look_ahead_action_code_value,
txt_look_ahead_minutes = Request_valid->oc_list[d.Seq].look_ahead_minutes,
txt_exact_match_action_code_value = Request_valid->oc_list[d.Seq].exact_match_action_code_value,
txt_clin_cat_code_value = Request_valid->oc_list[d.Seq].clin_cat_code_value,
txt_description = trim(request_valid->oc_list[d.seq].description),
txt_dept_name = trim(request_valid->oc_list[d.seq].department_name),
txt_schedule_ind =0 ,
txt_pat_type_code_value = 0,
txt_filter_ind = 0 ,
txt_entity_reltn_mean = 0 ,
txt_entity2_id = 0 ,
txt_txt_entity2_display = 0 ,
txt_rank_sequence = 0 ,
txt_entity2_name = 0 ,
txt_procedure_type_code_value =0
;txt_concept_cki = 0 ,
;txt_cki = 0
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->oc_list,5))
PLAN D where Request_valid->oc_list[d.seq].rec_valid = 1
order by  txt_primary_name,txt_dept_name
 
 
 
head report
x2=0
 
head txt_primary_name
x2=x2+1
x3=0
 
if(size(request->oc_list,5)<=x2)
stat = alterlist(request->oc_list,x2+5)
endif
 
request->oc_list[x2].catalog_code_value = cnvtint(Request_valid->oc_list[d.Seq].catalog_code)
request->oc_list[x2].dept_name = trim(request_valid->oc_list[d.seq].department_name)
request->oc_list[x2].description = trim(request_valid->oc_list[d.seq].description)
request->oc_list[x2].primary_name = trim(request_valid->oc_list[d.seq].primary_name)
request->oc_list[x2].action_flag = CNVTINT(txt_action_flag)
request->oc_list[x2].catalog_type_code_value = cnvtint(Request_valid->oc_list[d.Seq].catalog_type_code_value)
request->oc_list[x2].activity_type_code_value = cnvtint(request_valid->oc_list[d.seq].activity_type_code_value)
request->oc_list[x2].subactivity_type_code_value = cnvtint(request_valid->oc_list[d.seq].activity_subtype_code_value)
request->oc_list[x2].oe_format_id = cnvtint(request_valid->oc_list[d.seq].OE_format_id)
request->oc_list[x2].duplicate_ind = CNVTINT(Request_valid->oc_list[d.Seq].duplicate_ind)
request->oc_list[x2].clin_cat_code_value = cnvtint(Request_valid->oc_list[d.Seq].clin_cat_code_value)
	head txt_dept_name
	x3=x3+1
	x4=0
	if(size(request->oc_list[x2].dlist,5)<=x3)
	stat = alterlist(request->oc_list[x2].dlist,x3+5)
	endif
	request->oc_list[x2].dlist[x3].dup_check_level = CNVTINT(Request_valid->oc_list[d.Seq].dup_check_level_cd)
	request->oc_list[x2].dlist[x3].look_behind_action_code_value = cnvtint(Request_valid->oc_list[d.Seq].look_behind_action_code_value)
	request->oc_list[x2].dlist[x3].look_behind_minutes = CNVTINT(Request_valid->oc_list[d.Seq].look_behind_minutes)
	request->oc_list[x2].dlist[x3].look_ahead_action_code_value = cnvtint(Request_valid->oc_list[d.Seq].look_ahead_action_code_value)
	request->oc_list[x2].dlist[x3].look_ahead_minutes = CNVTINT(Request_valid->oc_list[d.Seq].look_ahead_minutes)
	request->oc_list[x2].dlist[x3].exact_match_action_code_value = cnvtint(Request_valid->oc_list[d.Seq].exact_match_action_code_value)
	foot txt_dept_name
	stat = alterlist(request->oc_list[x2].dlist,x3)
 
 
foot txt_primary_name
stat = alterlist(request->oc_list,x2)
 
with nocounter
 
 
call clear(1,1)
call video(i)
 
call text (2,4,Result_Depname_echo)
call text (3,4,"Department names length should be at maximum 100 characters")
 
call text (5,4,Result_Primary_echo)
call text (6,4,"Primary names length should be at maximum 100 characters")
 
call text (8,4,Result_cattype_echo)
call text (9,4,"Catalog Type should be found in SELECT cv.display FROM CODE_VALUE CV WHERE CV.CODE_SET = 6000")
 
call text (11,4,Result_Actvtype_echo)
call text (12,4,"Activity Type should be found in SELECT cv.display FROM CODE_VALUE CV WHERE CV.CODE_SET = 106")
 
call text (14,4,Result_ActvSubtype_echo)
call text (15,4,"Activity SubType should be found in SELECT cv.display FROM CODE_VALUE CV WHERE CV.CODE_SET = 5801")
 
call text (17,4,Result_OEFormat_echo)
call text (18,4,"Order Entry Format should be found in SELECT oef.oe_format_name FROM ORDER_ENTRY_FORMAT oef")

call clear(1,1)
 call video(i)
call text (2,4,Result_dup_level_echo)
call text (3,4,"Duplicate Check Level should be orderable, catalog, activity ")
 
call text (5,4,Result_look_ahead_echo)
call text (6,4,"Look ahead action should be found in SELECT cv.display FROM CODE_VALUE CV WHERE CV.CODE_SET = 6001")
 
call text (8,4,Result_look_back_echo)
call text (9,4,"Look back action should be found in SELECT cv.display FROM CODE_VALUE CV WHERE CV.CODE_SET = 6001")
 
call text (11,4,Result_exact_match_echo)
call text (12,4,"Exact match action should be found in SELECT cv.display FROM CODE_VALUE CV WHERE CV.CODE_SET = 6001")

call text(16, 4, concat("Valid Rows for Import are ", trim(cnvtstring(CountRows-CountInvalidRows)), " out of ", 
trim(cnvtstring(CountRows))))

if(CountInvalidRows < CountRows)
call text(17,4,"Import valid rows? (Y/N) ")
call accept(17,30, "P;CU", "N" WHERE CURACCEPT IN ("Y","N"))
set choice2 = curaccept
if ((choice2 = "Y"))
;call echorecord (request)
execute BED_ENS_OC
endif
endif
 
call clear(1,1)
 call video(i)
 if(CountInvalidRows < CountRows)
 if(choice2 = "Y")
 call text(2, 4, concat("Importing completed ", trim(cnvtstring(CountRows-CountInvalidRows)),
 " out of ", trim(cnvtstring(CountRows))))
 endif
 else
 call text(2, 4, "Importing skipped")
 endif
 call text(4,4,"1)Exit and save the invalid rows into the log file Auto_GL_Order_log")
 call text(6,4,"2)Exit and show the invalid rows on screen...")
 call text(8,4,"3)EXIT without logging the invalid rows...")
 
 
 call text(17, 4, "Select ")
 call accept(17, 15, "1;", 3 where curaccept in (1, 2, 3))
 set choice3 = curaccept
 
 if (choice3 = 2)
 select into "MINE"
 Department_Name			= Trim(Request_valid->oc_list[d.seq].department_name),
 Department_Name_Valid		= if(Request_valid->oc_list[d.seq].department_name_valid = 1) "Yes" else "No" endif,
 Primary_Name				= Trim(Request_valid->oc_list[d.seq].primary_name),
 Primary_Name_Valid			= if(Request_valid->oc_list[d.seq].primary_name_valid = 1) "Yes" else "No" endif,
 Catalog_Type				= Trim(Request_valid->oc_list[d.seq].catalog_type_name),
 Catalog_Type_Valid			= if(Request_valid->oc_list[d.seq].catalog_type_valid = 1) "Yes" else "No" endif,
 Activity_Type				= Trim(Request_valid->oc_list[d.seq].activity_type_name),
 Activity_Type_Valid		= if(Request_valid->oc_list[d.seq].activity_type_valid = 1) "Yes" else "No" endif,
 Activity_SubType			= Trim(Request_valid->oc_list[d.seq].activity_subtype_name),
 Activity_SubType_Valid		= if(Request_valid->oc_list[d.seq].activity_subtype_valid = 1) "Yes" else "No" endif,
 Order_Entry_Format_id 		= Request_valid->oc_list[d.seq].OE_format_id,
 OEF_Valid 					= if(Request_valid->oc_list[d.seq].OE_format_valid = 1) "Yes" else "No" endif,
 Dup_Level					= Request_valid->oc_list[d.seq].duplicate_level,
 Dup_Level_Valid			= if(Request_valid->oc_list[d.seq].duplicate_level_valid = 1) "Yes" else "No" endif,
 Look_ahead					= Request_valid->oc_list[d.seq].look_ahead_action,
 Look_ahead_Valid			= if(Request_valid->oc_list[d.seq].look_ahead_action_valid = 1) "Yes" else "No" endif,
 Look_Back					= Request_valid->oc_list[d.seq].look_back_action,
 Look_Back_Valid			= if(Request_valid->oc_list[d.seq].look_back_action_valid = 1) "Yes" else "No" endif,
 Exact_Action				= Request_valid->oc_list[d.seq].exact_match_action,
 Exact_Action_Valid			= if(Request_valid->oc_list[d.seq].exact_match_action_valid = 1) "Yes" else "No" endif,
 Record_valid				= if(Request_valid->oc_list[d.seq].rec_valid = 1) "Yes" else "No" endif
FROM (DUMMYT D WITH SEQ = SIZE(Request_valid->oc_list,5))
PLAN D
where Request_valid->oc_list[d.seq].rec_valid = 0
with nocounter, version
 
 else if (choice3 = 1)
 select into "Auto_GL_Order_log.dat"
 Department_Name			= Trim(Request_valid->oc_list[d.seq].department_name),
 Department_Name_Valid		= if(Request_valid->oc_list[d.seq].department_name_valid = 1) "Yes" else "No" endif,
 Primary_Name				= Trim(Request_valid->oc_list[d.seq].primary_name),
 Primary_Name_Valid			= if(Request_valid->oc_list[d.seq].primary_name_valid = 1) "Yes" else "No" endif,
 Catalog_Type				= Trim(Request_valid->oc_list[d.seq].catalog_type_name),
 Catalog_Type_Valid			= if(Request_valid->oc_list[d.seq].catalog_type_valid = 1) "Yes" else "No" endif,
 Activity_Type				= Trim(Request_valid->oc_list[d.seq].activity_type_name),
 Activity_Type_Valid		= if(Request_valid->oc_list[d.seq].activity_type_valid = 1) "Yes" else "No" endif,
 Activity_SubType			= Trim(Request_valid->oc_list[d.seq].activity_subtype_name),
 Activity_SubType_Valid		= if(Request_valid->oc_list[d.seq].activity_subtype_valid = 1) "Yes" else "No" endif,
 Order_Entry_Format_id 		= Request_valid->oc_list[d.seq].OE_format_id,
 OEF_Valid 					= if(Request_valid->oc_list[d.seq].OE_format_valid = 1) "Yes" else "No" endif,
 Dup_Level					= Request_valid->oc_list[d.seq].duplicate_level,
 Dup_Level_Valid			= if(Request_valid->oc_list[d.seq].duplicate_level_valid = 1) "Yes" else "No" endif,
 Look_ahead					= Request_valid->oc_list[d.seq].look_ahead_action,
 Look_ahead_Valid			= if(Request_valid->oc_list[d.seq].look_ahead_action_valid = 1) "Yes" else "No" endif,
 Look_Back					= Request_valid->oc_list[d.seq].look_back_action,
 Look_Back_Valid			= if(Request_valid->oc_list[d.seq].look_back_action_valid = 1) "Yes" else "No" endif,
 Exact_Action				= Request_valid->oc_list[d.seq].exact_match_action,
 Exact_Action_Valid			= if(Request_valid->oc_list[d.seq].exact_match_action_valid = 1) "Yes" else "No" endif,
 Record_valid				= if(Request_valid->oc_list[d.seq].rec_valid = 1) "Yes" else "No" endif
FROM (DUMMYT D WITH SEQ = SIZE(Request_valid->oc_list,5))
PLAN D
where Request_valid->oc_list[d.seq].rec_valid = 0
with nocounter, version
endif
endif
 
 
end go