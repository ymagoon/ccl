set trace backdoor p30ins go
 
drop program Auto_GL_Syn go
create program Auto_GL_Syn
 
/****************Create Record to be sent to program******************************/
RECORD REQUEST
(   1 clist[*]
     2 catalog_cd                    	= f8
     2 description                    	= c100
     2 slist[*]
       3 action_flag                    = i2        ;1=insert, 2=update
       3 synonym_id                    	= f8
       3 synonym_type_cd               	= f8
       3 synonym_name                   = c60
       3 order_entry_format_id          = f8
       3 active_ind                     = i2
       3 hide_flag                    	= i2
       3 med_admin_mask                	= i2
       3 titratable_ind              	= i2
       3 facilities[*]
         4 facility_code_value       	= f8
     2 name_review_ind               	= i2
     2 dept_name                     	= vc
 )
 
 
/********************Create another record to do the validation*****************************/
RECORD REQUEST_2
(
   1 clist[*]
     2 description                    	= vc
     2 description_valid                = I2
     2 catalog_cd			= f8
     2 dept_name			= vc
 
     2 synonym_type		        = vc
     2 synonym_type_valid            	= I2
	 2 synonym_type_cd              = f8
 
     2 synonym_name                   	= vc
     2 synonym_name_valid               = I2
     2 synonym_name_exist		= I2
 
     2 order_entry_format_id          	= f8
 
     2 rec_valid			= I2
 )
 
;SET STAT = MOVEREC(requestin,REQUEST_Process)
 
/*****************Copy the first record into the second record*************************************/
declare Seq1 = I2
set stat = alterlist(request_2->clist,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set Request_2->clist[Seq1].description = requestin->List_0[Seq1].Primary_name
set Request_2->clist[Seq1].synonym_name = requestin->List_0[Seq1].synonym_name
set Request_2->clist[Seq1].synonym_type = requestin->List_0[Seq1].synonym_type
endfor
 
 
/*********************Loop through second record*************************/
declare Seq2 = I2
 
declare Result3 = vc
declare Result3_r = vc
declare Result3_echo = vc
 
declare Result4 = vc
declare Result4_r = vc
declare Result4_echo = vc
 
declare Result5 = vc
declare Result5_r = vc
declare Result5_echo = vc
 
declare Result6 = vc
declare Result6_r = vc
declare Result6_echo = vc
 
declare Result7 = vc
declare Result7_r = vc
declare Result7_echo = vc
 
declare Result8_r = vc
declare Result8_echo = vc
 
declare CountRows = I4
declare CountInvalidDesc = I4
declare CountInvalidSyn = I4
declare CountInvalidSynTyp = I4
declare CountExistingSyn = I4
declare CountInvalidFacility = I4
declare CountInvalidRows = I4
/************************************Get invalid descriptions*******************************************/
set stat = alterlist(request_2->clist,size(request_2->clist,5))
 
set CountRows =0
set CountInvalidDesc = 0
set CountInvalidSyn = 0
set CountInvalidSynTyp = 0
set CountExistingSyn = 0
set CountInvalidFacility = 0
set CountInvalidRows = 0
 
for (Seq2 = 1 to size(request_2->clist,5))
set CountRows = CountRows +1
 
set Request_2->clist[Seq2].description_valid = 0
select into 'NL:'
IntCatalogCd = oc.catalog_cd,
TxtDeptName = oc.dept_display_name
from order_catalog oc
plan oc where cnvtupper(oc.PRIMARY_MNEMONIC) = cnvtupper(request_2->clist[Seq2].description)
detail
Request_2->clist[Seq2].description_valid = 1
Request_2->clist[Seq2].catalog_cd = IntCatalogCd
Request_2->clist[Seq2].dept_name = TxtDeptName
with nocounter
 
if(request_2->clist[Seq2].description_valid = 0)
set CountInvalidDesc = CountInvalidDesc +1
set Result3 = concat(Result3,request_2->clist[Seq2].description,", ")
set Result3_r = concat (Result3_r,trim(cnvtstring(Seq2)),", ")
endif
 
 
/************************************Get order entry formats from orderable*******************************/
select into 'NL:'
OCOEF = oc.OE_FORMAT_ID
from order_catalog oc
plan oc where cnvtupper(oc.PRIMARY_MNEMONIC) = cnvtupper(request_2->clist[Seq2].description)
detail
Request_2->clist[Seq2].order_entry_format_id = OCOEF
with nocounter
 
/************************************Get invalid synonym types*******************************************/
set Request_2->clist[Seq2].synonym_type_valid = 0
select into 'NL:'
IntSynType = cv.code_value
from code_value cv
plan cv where cv.code_set = 6011 and cnvtupper(cv.description) = cnvtupper(request_2->clist[Seq2].synonym_type)
detail
Request_2->clist[Seq2].synonym_type_valid = 1
Request_2->clist[Seq2].synonym_type_cd = IntSynType
with nocounter
 
if(request_2->clist[Seq2].synonym_type_valid = 0)
set CountInvalidSynTyp = CountInvalidSynTyp +1
set Result4 = concat(Result4,request_2->clist[Seq2].synonym_type,", ")
set Result4_r = concat (Result4_r,trim(cnvtstring(Seq2)),", ")
endif

/************************************Get invalid synonym names*******************************************/
if(size(request_2->clist[Seq2].synonym_name,1) >60)
set request_2->clist[Seq2].synonym_name_valid = 0
set CountInvalidSyn = CountInvalidSyn +1
set Result6 = concat(Result6,request_2->clist[Seq2].synonym_name,", ")
set Result6_r = concat (Result6_r,trim(cnvtstring(Seq2)),", ")
else
set request_2->clist[Seq2].synonym_name_valid = 1
endif
/************************************Get synonym names already exist*******************************************/
set Request_2->clist[Seq2].synonym_name_exist = 0
select into 'NL:'
TxtSyn = ocs.MNEMONIC
FROM 	order_catalog_synonym   ocs
plan ocs where cnvtupper(ocs.mnemonic) = cnvtupper(request_2->clist[Seq2].synonym_name)
and ocs.mnemonic_type_cd = request_2->clist[Seq2].synonym_type_cd
detail
Request_2->clist[Seq2].synonym_name_exist = 1
CountExistingSyn = CountExistingSyn + 1
Result7 = concat(Result7,request_2->clist[Seq2].synonym_name,", ")
Result7_r = concat (Result7_r,trim(cnvtstring(Seq2)),", ")
with nocounter
 
/************************************Get invalid rows*******************************************/
if(Request_2->clist[Seq2].description_valid = 0 or
Request_2->clist[Seq2].synonym_name_valid = 0 or Request_2->clist[Seq2].synonym_type_valid = 0
or Request_2->clist[Seq2].synonym_name_exist = 1)
set Request_2->clist[Seq2].rec_valid = 0
set CountInvalidRows = CountInvalidRows + 1
set result8_r = concat (Result8_r,trim(cnvtstring(Seq2)),", ")
call echo (result8_r)
else
set Request_2->clist[Seq2].rec_valid = 1
endif
 
endfor
 
if(CountInvalidDesc < CountRows)
if(size(result3)>0)
set Result3_echo = Concat ("(",trim(cnvtstring(CountInvalidDesc)),")", "Invalid primary mnemonics are ", replace(Result3,",","",2),
"|||||||||||||| Invalid rows are ", replace(Result3_r,",","",2))
else
set Result3_echo = "All primary mnemonics are valid..."
endif
else
set Result3_echo = "INVALID primary mnemonics !!!"
endif
 
if(CountInvalidSynTyp < CountRows)
if(size(result4)>0)
set Result4_echo = Concat ("(",trim(cnvtstring(CountInvalidSynTyp)),")", "Invalid synonym types are ", replace(Result4,",","",2),
"|||||||||||||| Invalid rows are ", replace(Result4_r,",","",2))
else
set Result4_echo = "All synonym types are valid..."
endif
else
set Result4_echo = "INVALID synonym types!!!"
endif
 
if(CountInvalidSyn<CountRows)
if(size(result6)>0)
set Result6_echo = Concat ("(",trim(cnvtstring(CountInvalidSyn)),")", "Invalid synonym names are ", replace(Result6,",","",2),
 "|||||||||||||| Invalid rows are ", replace(Result6_r,",","",2))
else
set Result6_echo = "All synonym names are valid..."
endif
else
set Result6_echo = "INVALID synonym names"
endif
 
if (CountExistingSyn < CountRows)
if(size(result7)>0)
set Result7_echo = Concat ("(",trim(cnvtstring(CountExistingSyn)),")", "Existing synonym names are ", replace(Result7,",","",2),
"|||||||||||||| Rows are ", replace(Result7_r,",","",2))
else
set Result7_echo = "All synonym names are new..."
endif
else
set Result7_echo = "All synonym names exist!!!"
endif
 
if(CountInvalidRows < CountRows)
if(size(result8_r)>0)
set Result8_echo = concat("Total invalid rows are (", trim(cnvtstring(CountInvalidRows)),
") out of (", trim(cnvtstring(CountRows)),") ,which are ", replace(Result8_r,",","",2))
else
set Result8_echo = "All rows are valid..."
endif
else
set Result8_echo = "Invalid csv!!!"
endif
 
SELECT INTO 'NL:'
txt_catalog_cd = request_2->clist[d.seq].catalog_cd,
txt_description = trim(request_2->clist[d.seq].description),
txt_action_flag = 1,
txt_active_ind = 1,
txt_dept_name = trim(request_2->clist[d.seq].dept_name),
txt_hide_flag = 0,
txt_med_admin_mask = 0,
txt_name_review_ind = 0,
txt_order_entry_format_id = request_2->clist[d.seq].order_entry_format_id,
txt_synonym_id = 0,
txt_synonym_name = trim(request_2->clist[d.seq].synonym_name),
txt_synonym_type_cd = request_2->clist[d.seq].synonym_type_cd,
txt_titratable_ind = 0
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_2->clist,5))
PLAN D where Request_2->clist[d.seq].rec_valid = 1
order by  txt_catalog_cd, txt_synonym_name
head report
x2=0
 
head txt_catalog_cd
x2=x2+1
x3=0
 
if(size(request->clist,5)<=x2)
stat = alterlist(request->clist,x2+5)
endif
request->clist[x2].catalog_cd = CNVTINT(txt_catalog_cd)
request->clist[x2].dept_name = trim(request_2->clist[d.seq].dept_name)
request->clist[x2].description = trim(request_2->clist[d.seq].description)
request->clist[x2].name_review_ind = CNVTINT(txt_name_review_ind)
 
	head txt_synonym_name
		x3=x3+1
		x4=0
 
		if(size(request->clist[x2].slist,5)<=x3)
		stat = alterlist(request->clist[x2].slist,x3+5)
		endif
		request->clist[x2].slist[x3].action_flag = CNVTINT(txt_action_flag)
		request->clist[x2].slist[x3].active_ind = CNVTINT(txt_active_ind)
		request->clist[x2].slist[x3].hide_flag = CNVTINT(txt_hide_flag)
		request->clist[x2].slist[x3].med_admin_mask = CNVTINT(txt_med_admin_mask)
		request->clist[x2].slist[x3].order_entry_format_id = CNVTINT(txt_order_entry_format_id)
		request->clist[x2].slist[x3].synonym_id = CNVTINT(txt_synonym_id)
		request->clist[x2].slist[x3].synonym_name = trim(request_2->clist[d.seq].synonym_name)
		request->clist[x2].slist[x3].synonym_type_cd = CNVTINT(txt_synonym_type_cd)
		request->clist[x2].slist[x3].titratable_ind = CNVTINT(txt_titratable_ind)
 		stat = alterlist(request->clist[x2].slist[x3].facilities,1)
 		request->clist[x2].slist[x3].facilities[x4].facility_code_value = 0
/*			head txt_facility_code_value
			x4=x4+1
 
			if(size(request->clist[x2].slist[x3].facilities,5)<=x4)
			stat = alterlist(request->clist[x2].slist[x3].facilities,x4+5)
			endif
 
			detail
			request->clist[x2].slist[x3].facilities[x4].facility_code_value = CNVTINT(txt_facility_code_value)
 
			foot txt_facility_code_value
			stat = alterlist(request->clist[x2].slist[x3].facilities,x4)*/
 
		foot txt_synonym_name
		stat = alterlist(request->clist[x2].slist,x3)
 
foot txt_catalog_cd
stat = alterlist(request->clist,x2)
with nocounter
 
call echorecord(request)
 
call clear(1,1)
call video(i)
call text (2,4,result3_echo)
call text (3,4,"Descriptions should be found in SELECT OC.DESCRIPTION FROM ORDER_CATALOG OC")
 
call text (5,4,result4_echo)
call text (6,4,"Synonym types should be found in SELECT CV.DESCRIPTION FROM CODE_VALUE CV WHERE CV.CODE_SET = 6011")
 
 
call text (8,4,result6_echo)
call text (9,4,"Synonym names length should be at maximum 60 characters")
 
call text (11,4,result7_echo)
call text (12,4,"Synonym names shouldn't be found in SELECT OCS.MNEMONIC FROM ORDER_CATALOG_SYNONYM OCS")
 
call text (14,4,result8_echo)
 
if(CountInvalidRows < CountRows)
call text(24,4,"Import valid rows? (Y/N) ")
call accept(24,30, "P;CU", "N" WHERE CURACCEPT IN ("Y","N"))
set choice2 = curaccept
if ((choice2 = "Y"))
 
call echorecord(request)
execute bed_ens_oc_synonyms
endif
endif
 
call clear(1,1)
 call video(i)
 if(CountInvalidRows < CountRows)
 if(choice2 = "Y")
 call text(2, 4, concat("Importing completed ", trim(cnvtstring(CountRows-CountInvalidRows)),
 " out of ", trim(cnvtstring(CountRows))))
 endif
 else
 call text(2, 4, "Importing skipped")
 endif
 call text(4,4,"1)Exit and save the invalid rows into the log file Auto_GL_Syn_log")
 call text(6,4,"2)Exit and show the invalid rows on screen...")
 call text(8,4,"3)EXIT without logging the invalid rows...")
 
 
 call text(14, 4, "Select ")
 call accept(14, 12, "1;", 3 where curaccept in (1, 2, 3))
 set choice3 = curaccept
 
 if (choice3 = 2)
 select into "MINE"
 Description 				= request_2->clist[d.seq].description,
 Description_valid 			= if(request_2->clist[d.seq].description_valid = 1) "Yes" else "No" endif,
 Order_Entry_Format_id 			= request_2->clist[d.seq].order_entry_format_id,
 Synonym_name				= request_2->clist[d.seq].synonym_name,
 Synonym_name_exist			= if(request_2->clist[d.seq].synonym_name_exist = 1) "Yes" else "No" endif,
 Synonym_name_valid 			= if(request_2->clist[d.seq].synonym_name_valid = 1) "Yes" else "No" endif,
 Synonym_type				= request_2->clist[d.seq].synonym_type,
 Synonym_type_valid			= if(request_2->clist[d.seq].synonym_type_valid = 1) "Yes" else "No" endif,
 Record_valid				= if(request_2->clist[d.seq].rec_valid = 1) "Yes" else "No" endif
FROM (DUMMYT D WITH SEQ = SIZE(request_2->clist,5))
PLAN D
where request_2->clist[d.seq].rec_valid = 0
with nocounter, version
 
 else if (choice3 = 1)
 select into "Auto_GL_Syn_log.dat"
 Description 				= request_2->clist[d.seq].description,
 Description_valid 			= if(request_2->clist[d.seq].description_valid = 1) "Yes" else "No" endif,
 Synonym_name				= request_2->clist[d.seq].synonym_name,
 Synonym_name_exist			= if(request_2->clist[d.seq].synonym_name_exist = 1) "Yes" else "No" endif,
 Synonym_name_valid 		= if(request_2->clist[d.seq].synonym_name_valid = 1) "Yes" else "No" endif,
 Synonym_type				= request_2->clist[d.seq].synonym_type,
 Synonym_type_valid			= if(request_2->clist[d.seq].synonym_type_valid = 1) "Yes" else "No" endif,
 Record_valid				= if(request_2->clist[d.seq].rec_valid = 1) "Yes" else "No" endif
FROM (DUMMYT D WITH SEQ = SIZE(request_2->clist,5))
PLAN D
where request_2->clist[d.seq].rec_valid = 0
with nocounter, version
endif
endif
end go
 
 