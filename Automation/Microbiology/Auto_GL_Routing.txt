set trace backdoor p30ins go
drop program auto_GL_routing go
create program auto_GL_routing
 
 record request
 (
   1 rel_list[*]
     2 action_flag = i2
     2 oc_code_value = f8
     2 sr_code_value = f8
     2 sequence = i4
     2 default = i2
 )
 
record request_valid
 (
   1 Rlist[*]
     2 action_flag = i2
     2 oc_code_value = f8
     2 oc_primary_name =c100
     2 oc_primary_name_valid =i2
     2 oc_routing_valid = i2
     2 sr_code_value = f8
     2 sr_display_name = c100
     2 sr_display_name_valid =i2
     2 sequence = vc
     2 default = vc
     2 Rec_valid = i2
 )
 
declare Seq = I2
 
declare Result_primary_name = vc
declare Result_primary_name_r = vc
declare Result_primary_name_echo = vc
 
declare Result_ExistRouting = vc
declare Result_ExistRouting_r = vc
declare Result_ExistRouting_echo = vc
 
declare Result_sr_displayname = vc
declare Result_sr_displayname_r = vc
declare Result_sr_displayname_echo = vc
 
declare Result8_r = vc
declare Result8_echo = vc
 
declare CountRows = I4
declare CountInvalidPrimary = I4
declare CountExsitRouting = i4
declare CountInvalidServiceResource = I4
declare CountInvalidRows = I4
 
set CountRows =0
 
set CountInvalidPrimary = 0
set CountInvalidServiceResource = 0
set CountInvalidRows = 0
set CountExsitRouting = 0
set stat = alterlist(request_valid->rlist,size(requestin->list_0,5))
 
for (Seq=1 to size(requestin->List_0,5))
set request_valid->rlist[Seq].action_flag = 1
set request_valid->rlist[Seq].oc_primary_name = requestin->List_0[Seq].primary_name
set request_valid->rlist[Seq].sr_display_name = requestin->List_0[Seq].sr_display_name
set request_valid->rlist[Seq].sequence = requestin->List_0[Seq].sequence
set request_valid->rlist[Seq].default = requestin->List_0[Seq].default
 
 
set CountRows = CountRows +1
 
/*------------------------------------------validate primary names in order catalog table------------------------------*/
set request_valid->rlist[Seq].oc_primary_name_valid = 0
set request_valid->rlist[Seq].oc_routing_valid = 0
select into 'NL:'
IntCatalogCd = oc.catalog_cd
from order_catalog oc
plan oc where cnvtupper(oc.PRIMARY_MNEMONIC) = cnvtupper(Request_valid->rlist[Seq].oc_primary_name)
detail
Request_valid->rlist[Seq].oc_code_value = cnvtint(IntCatalogCd)
 Request_valid->rlist[Seq].oc_primary_name_valid = 1
with nocounter
; call echo(Request_valid->rlist[Seq].oc_code_value)
 if(Request_valid->rlist[Seq].oc_primary_name_valid = 1)
 ;call echo(" if 1")
 	select into 'NL:'
	IntCountExsitRouting = count(o.catalog_cd)
	from ORC_RESOURCE_LIST   O
	where o.catalog_cd = cnvtint(Request_valid->rlist[Seq].oc_code_value)
	detail
	if (IntCountExsitRouting = 0)
	Request_valid->rlist[Seq].oc_routing_valid = 1
	endif
 	with nocounter
	
	
	
 endif
 
if(Request_valid->rlist[Seq].oc_primary_name_valid = 0)
set CountInvalidPrimary = CountInvalidPrimary +1
set Result_primary_name = concat(Result_primary_name,Request_valid->rlist[Seq].oc_primary_name,", ")
set Result_primary_name_r = concat(Result_primary_name_r,trim(cnvtstring(Seq)),", ")
endif
 
if(Request_valid->rlist[Seq].oc_routing_valid = 0)
set CountExsitRouting = CountExsitRouting +1
set Result_Existrouting = concat(Result_Existrouting,Request_valid->rlist[Seq].oc_primary_name,", ")
set Result_Existrouting_r = concat(Result_Existrouting_r,trim(cnvtstring(Seq)),", ")
endif
 
/*------------------------------------------validate Service Resources---------------------------------------*/
set request_valid->rlist[Seq].sr_display_name_valid = 0
select into 'NL:'
IntServiceResourceCd = cv.code_value
from code_value cv
plan cv where cnvtupper(cv.display) = cnvtupper(Request_valid->rlist[Seq].sr_display_name)
and cv.code_set = 221
detail
Request_valid->rlist[Seq].sr_code_value = cnvtint(IntServiceResourceCd)
Request_valid->rlist[Seq].sr_display_name_valid = 1
 
with nocounter
 
if(Request_valid->rlist[Seq].sr_display_name_valid = 0)
set CountInvalidServiceResource = CountInvalidServiceResource +1
set Result_sr_displayname = concat(Result_sr_displayname,Request_valid->rlist[Seq].sr_display_name,", ")
set Result_sr_displayname_r = concat(Result_sr_displayname_r,trim(cnvtstring(Seq)),", ")
endif
/*------------------------------------Check default flag value------------------------------*/
 
if(request_valid->Rlist[seq].default = "" )
 
set request_valid->Rlist[seq].default = "0"
 
endif
 
/*------------------------------------Get Invalid Rows--------------------------------------*/
;call echo(Request_valid->rlist[Seq].oc_routing_valid)
if(Request_valid->rlist[Seq].oc_primary_name_valid = 0 
or Request_valid->rlist[Seq].sr_display_name_valid = 0
or Request_valid->rlist[Seq].oc_routing_valid = 0)
set Request_valid->rlist[Seq].rec_valid = 0
set CountInvalidRows = CountInvalidRows + 1
set result8_r = concat (Result8_r,trim(cnvtstring(Seq)),", ")
;call echo (result8_r)
else
set Request_valid->rlist[Seq].rec_valid = 1
endif
 
endfor
 
if(CountInvalidPrimary < CountRows)
if(size(Result_primary_name)>0)
set Result_primary_name_echo = Concat ("(",trim(cnvtstring(CountInvaliPrimary)),")", "Invalid Primary Names are ",
replace(Result_primary_name,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_primary_name_r,",","",2))
else
set Result_primary_name_echo = "All Primary Names valid..."
endif
else
set Result_primary_name_echo = "INVALID Primary Names !!!"
endif
 
 
if(CountInvalidServiceResource < CountRows)
if(size(Result_sr_displayname)>0)
set Result_sr_displayname_echo = Concat ("(",trim(cnvtstring(CountInvalidServiceResource)),")", "Invalid Service Resources are ",
replace(Result_sr_displayname,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_sr_displayname_r,",","",2))
else
set Result_sr_displayname_echo = "All Service Resources valid..."
endif
else
set Result_sr_displayname_echo = "INVALID Service Resources !!!"
endif
;call echorecord(request_valid)
 
SELECT INTO 'NL:'
txt_action_flag = Request_valid->rlist[d.Seq].action_flag,
txt_catalog_cd = cnvtint(Request_valid->rlist[d.Seq].oc_code_value),
txt_sr_codevalue = cnvtint(Request_valid->rlist[d.Seq].sr_code_value),
txt_sequence = request_valid->rlist[d.Seq].sequence,
txt_default = request_valid->rlist[d.Seq].default
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->rlist,5))
PLAN D where Request_valid->rlist[d.seq].rec_valid = 1
order by  txt_catalog_cd
 
head report
x2=0
head txt_catalog_cd
z=0
head txt_sr_codevalue
x2=x2+1
	if(size(request->rel_list,5)<=x2)
	stat = alterlist(request->rel_list,x2+5)
	endif
	request->rel_list[x2].action_flag = cnvtint(Request_valid->rlist[d.Seq].action_flag)
	request->rel_list[x2].oc_code_value = cnvtint(Request_valid->rlist[d.Seq].oc_code_value)
	request->rel_list[x2].sr_code_value = cnvtint(Request_valid->rlist[d.Seq].sr_code_value)
	request->rel_list[x2].sequence = cnvtint(request_valid->rlist[d.Seq].sequence)
	request->rel_list[x2].default = cnvtint(request_valid->rlist[d.Seq].default)
 
foot txt_catalog_cd
z=0
foot txt_sr_codevalue
stat = alterlist(request->rel_list,x2)
 
with nocounter
call echorecord(request_valid)
call clear(1,1)
call video(i)
 
call text (2,4,Result_primary_name_echo)
call text (3,4,"Primary Name should be found in SELECT oc.catalog_cd FROM order_catalog oc ")
 
call text (5,4,Result_sr_displayname_echo)
call text (6,4,"Service Resource should be found in SELECT cv.display FROM CODE_VALUE CV WHERE CV.CODE_SET = 221")
 
call text(8, 4, concat("Valid Rows for Import are ", trim(cnvtstring(CountRows-CountInvalidRows)),
 " out of ", trim(cnvtstring(CountRows))))
 
call text (10,4,result8_echo)
 
if(CountInvalidRows < CountRows)
call text(12,4,"Import valid rows? (Y/N) ")
call accept(12,30, "P;CU", "N" WHERE CURACCEPT IN ("Y","N"))
set choice2 = curaccept
if ((choice2 = "Y"))
 
execute BED_ENS_REL_OC_SR_B
endif
endif
 
 call clear(1,1)
 call video(i)
 if(CountInvalidRows < CountRows)
 if(choice2 = "Y")
 call text(2, 4, concat("Importing completed ", trim(cnvtstring(CountRows-CountInvalidRows)),
 " out of ", trim(cnvtstring(CountRows))))
 endif
 else
 call text(2, 4, "Importing skipped")
 endif
 call text(4,4,"1)Exit and save the invalid rows into the log file Auto_GL_Routing_log")
 call text(6,4,"2)Exit and show the invalid rows on screen...")
 call text(8,4,"3)EXIT without logging the invalid rows...")
 
 
 call text(17, 4, "Select ")
 call accept(17, 15, "1;", 3 where curaccept in (1, 2, 3))
 set choice3 = curaccept
 
 if (choice3 = 2)
 select into "MINE"
 Primary_Name				= Trim(Request_valid->rlist[d.seq].oc_primary_name),
 Primary_Name_Valid			= Trim(if(Request_valid->rlist[d.seq].oc_primary_name_valid = 1) "Yes" else "No" endif),
 Service_Resource_name		= Trim(Request_valid->rlist[d.seq].sr_display_name),
 Service_Resource_Valid		= Trim(if(Request_valid->rlist[d.seq].sr_display_name_valid = 1) "Yes" else "No" endif),
 Exist_Routing				= Trim(if(Request_valid->rlist[d.seq].oc_routing_valid = 1) "No" else "Yes" endif),
 Record_valid				= Trim(if(Request_valid->rlist[d.seq].rec_valid = 1) "Yes" else "No" endif)
FROM (DUMMYT D WITH SEQ = SIZE(Request_valid->rlist,5))
PLAN D
where Request_valid->rlist[d.seq].rec_valid = 0
with nocounter, version
 
 else if (choice3 = 1)
 select into "Auto_GL_ROUTING_log.dat"
 Primary_Name				= Trim(Request_valid->rlist[d.seq].oc_primary_name),
 Primary_Name_Valid			= Trim(if(Request_valid->rlist[d.seq].oc_primary_name_valid = 1) "Yes" else "No" endif),
 Service_Resource_name		= Trim(Request_valid->rlist[d.seq].sr_display_name),
 Service_Resource_Valid		= Trim(if(Request_valid->rlist[d.seq].sr_display_name_valid = 1) "Yes" else "No" endif),
 Exist_Routing				= Trim(if(Request_valid->rlist[d.seq].oc_routing_valid = 1) "No" else "Yes" endif),
 Record_valid				= Trim(if(Request_valid->rlist[d.seq].rec_valid = 1) "Yes" else "No" endif)
FROM (DUMMYT D WITH SEQ = SIZE(Request_valid->rlist,5))
PLAN D
where Request_valid->rlist[d.seq].rec_valid = 0
with nocounter, version
 
endif
endif
 
end
go
 