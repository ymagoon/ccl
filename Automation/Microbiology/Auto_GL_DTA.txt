set trace backdoor p30ins go
 
drop program Auto_GL_dta go
create program Auto_GL_dta
 
 record request_1
 ( 1 qual[*]
     2 mnemonic        = c50
     2 description    = c100
     2 activity_type_cd  = f8
     2 event_cd          = f8
     2 default_result_type_cd = f8
     2 bb_result_processing_cd = f8
     2 rad_section_type_cd = f8
     2 strt_assay_id     = f8
     2 code_set          = i4
     2 beg_effective_dt_tm = dq8
     2 end_effective_dt_tm = dq8
     2 concept_cki         = vc
     2 sci_notation_ind    = i2
   1 commit_at_once_ind    = i2
 
 )
 
 record request_2
 (
   1 catalog_cd         = f8
   1 group_ind        = i2
   1 reference_task_id = f8
   1 qual[*]
     2 task_assay_cd     = f8
     2 pending_ind       = i2
     2 sequence        = i4
     2 version_nbr    = i4
     2 group_cd        = f8
     2 repeat_ind    = i2
     2 restrict_display_ind = i2
     2 post_prompt_ind   = i2
     2 prompt_resource_cd= f8
     2 item_type_flag    = i2
     2 dup_chk_min    = i4
     2 dup_chk_action_cd = f8
 )
 
record request_valid
(
1 rlist[*]
2 ActivityType	= vc
2 ActivityTypeValid	= i2
2 ActivityTypeCd	= f8
 
2 PrimaryName	= c100
2 PrimaryNameValid	= i2
2 Catalog_cd	= f8
 
2 AssayDisplay	= C50
2 AssayDisplayValid	= i2
2 Assay_cd = f8
2 Assay_exist = i2
 
2 AssayDescription	= c100
2 AssayDescriptionValid	= i2
 
2 Required	= vc
2 RequiredValid	= i2
 
2 Sequence	= vc
2 SequenceValid	= i2
 
2 PromptInd	= vc
2 PromptIndValid	= i2
 
2 PostPrompt 	= vc
2 PostPromptValid 	= i2
 
2 RestrictDisplay	= vc
2 RestrictDisplayValid	= i2
 
2 DefaultResultType	= vc
2 DefaultResultTypeValid	= i2
2 DefaultResultTypeCd	= f8
 
2 rec_valid = i2
)
 
declare Seq1 = I2
set stat = alterlist(request_valid->rlist,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set Request_valid->rlist[Seq1].ActivityType = requestin->List_0[Seq1].ActivityType
set Request_valid->rlist[Seq1].AssayDescription = requestin->List_0[Seq1].AssayDescription
set Request_valid->rlist[Seq1].AssayDisplay = requestin->List_0[Seq1].AssayDisplay
set Request_valid->rlist[Seq1].DefaultResultType = requestin->List_0[Seq1].DefaultResultType
set Request_valid->rlist[Seq1].PostPrompt = requestin->List_0[Seq1].PostPrompt
set Request_valid->rlist[Seq1].PrimaryName = requestin->List_0[Seq1].PrimaryName
set Request_valid->rlist[Seq1].PromptInd = requestin->List_0[Seq1].PromptInd
set Request_valid->rlist[Seq1].Required = requestin->List_0[Seq1].Required
set Request_valid->rlist[Seq1].RestrictDisplay = requestin->List_0[Seq1].RestrictDisplay
set Request_valid->rlist[Seq1].Sequence = requestin->List_0[Seq1].Sequence
endfor
 
 
declare Seq2 = I2
 
declare Result1 = vc
declare Result1_r = vc
declare Result1_echo = vc
 
declare Result2 = vc
declare Result2_r = vc
declare Result2_echo = vc
 
declare Result3 = vc
declare Result3_r = vc
declare Result3_echo = vc
 
declare Result4 = vc
declare Result4_r = vc
declare Result4_echo = vc
 
declare Result5 = vc
declare Result5_r = vc
declare Result5_echo = vc
 
declare Result6 = vc
declare Result6_r = vc
declare Result6_echo = vc
 
declare Result7 = vc
declare Result7_r = vc
declare Result7_echo = vc
 
declare Result8 = vc
declare Result8_r = vc
declare Result8_echo = vc
 
declare Result9 = vc
declare Result9_r = vc
declare Result9_echo = vc
 
declare Result10 = vc
declare Result10_r = vc
declare Result10_echo = vc
 
declare Result11_r = vc
declare Result11_echo = vc
 
declare CountRows = I4
declare CountInvalidActivityType = I4
declare CountInvalidPrimaryName = I4
declare CountInvalidDisplay = i4
declare CountInvalidDescription = i4
declare CountInvalidResultType = i4
declare CountInvalidPostPrompt = i4
declare CountInvalidRequired = i4
declare CountInvalidPrompt = i4
declare CountInvalidRestrict = i4
declare CountInvalidSequence = i4
declare CountInvalidRows = i4
 
/************************************Loop through request_valid***********************/
set stat = alterlist(request_valid->rlist,size(request_valid->rlist,5))
 
set CountRows =0
set CountInvalidActivityType = 0
set CountInvalidPrimaryName = 0
set CountInvalidDisplay = 0
set CountInvalidDescription = 0
set CountInvalidResultType = 0
set CountInvalidPostPrompt = 0
set CountInvalidRequired = 0
set CountInvalidPrompt = 0
set CountInvalidRestrict = 0
set CountInvalidSequence = 0
set CountInvalidRows = 0
 
for (Seq2 = 1 to size(request_valid->rlist,5))
set CountRows = CountRows +1
 
 
/************************************Get New Assays***********************/
set Request_valid->rlist[Seq2].Assay_exist = 0
select into 'NL:'
TxtAssay = dta.mnemonic
from DISCRETE_TASK_ASSAY dta
where cnvtupper(dta.mnemonic) = cnvtupper(request_valid->rlist[Seq2].AssayDisplay)
detail
Request_valid->rlist[Seq2].Assay_exist = 1
with nocounter
 
 
/************************************Get Invalid Activity Type***********************/
set Request_valid->rlist[Seq2].ActivityTypeValid = 0
select into 'NL:'
ActivityTypeCd = cv.code_value
from code_value cv
plan cv where cv.code_set = 106 and cv.definition = "GENERAL LAB"
and cnvtupper(cv.display) = cnvtupper(request_valid->rlist[Seq2].ActivityType)
detail
Request_valid->rlist[Seq2].ActivityTypeValid = 1
Request_valid->rlist[Seq2].ActivityTypeCd = ActivityTypeCd
with nocounter
 
if(request_valid->rlist[Seq2].ActivityTypeValid = 0)
set CountInvalidActivityType = CountInvalidActivityType +1
set Result1 = concat(Result1,request_valid->rlist[Seq2].ActivityType,", ")
set Result1_r = concat (Result1_r,trim(cnvtstring(Seq2)),", ")
endif
 
 
/************************************Get Invalid Primary Name***********************/
set Request_valid->rlist[Seq2].PrimaryNameValid = 0
select into 'NL:'
Catalog_cd = oc.catalog_cd
from order_catalog oc where cnvtupper(oc.primary_mnemonic) = cnvtupper(request_valid->rlist[Seq2].PrimaryName)
and oc.catalog_cd not in (select distinct ptr.catalog_cd from profile_task_r ptr where ptr.active_ind = 1)
detail
Request_valid->rlist[Seq2].PrimaryNameValid = 1
Request_valid->rlist[Seq2].Catalog_cd = Catalog_cd
with nocounter
 
if(request_valid->rlist[Seq2].PrimaryNameValid = 0)
set CountInvalidPrimaryName = CountInvalidPrimaryName +1
set Result2 = concat(Result2,request_valid->rlist[Seq2].PrimaryName,", ")
set Result2_r = concat (Result2_r,trim(cnvtstring(Seq2)),", ")
endif
 
 
/************************************Get invalid Display Names*******************************************/
if(size(request_valid->rlist[Seq2].AssayDisplay,1) <= 50 and request_valid->rlist[Seq2].AssayDisplay != "" )
set request_valid->rlist[Seq2].AssayDisplayValid = 1
else
set request_valid->rlist[Seq2].AssayDisplayValid = 0
set CountInvalidDisplay = CountInvalidDisplay +1
set Result3 = concat(Result3,request_valid->rlist[Seq2].AssayDisplay,", ")
set Result3_r = concat (Result3_r,trim(cnvtstring(Seq2)),", ")
endif
 
/************************************Get invalid Description Names*******************************************/
if(size(request_valid->rlist[Seq2].AssayDescription,1) <= 100 and request_valid->rlist[Seq2].AssayDescription !="" )
set request_valid->rlist[Seq2].AssayDescriptionValid = 1
else
set request_valid->rlist[Seq2].AssayDescriptionValid = 0
set CountInvalidDescription = CountInvalidDescription +1
set Result4 = concat(Result4,request_valid->rlist[Seq2].AssayDescription,", ")
set Result4_r = concat (Result4_r,trim(cnvtstring(Seq2)),", ")
endif
 
/************************************Get Invalid Result Type***********************/
set Request_valid->rlist[Seq2].DefaultResultTypeValid = 0
select into 'NL:'
ResultTypeCd = cv.code_value
from code_value cv where cv.code_set = 289
and cnvtupper(cv.display) = cnvtupper(request_valid->rlist[Seq2].DefaultResultType)
detail
 
Request_valid->rlist[Seq2].DefaultResultTypeValid = 1
Request_valid->rlist[Seq2].DefaultResultTypeCd = ResultTypeCd
with nocounter
 
if(request_valid->rlist[Seq2].DefaultResultTypeValid = 0)
set CountInvalidResultType = CountInvalidResultType +1
set Result5 = concat(Result5,request_valid->rlist[Seq2].DefaultResultType,", ")
set Result5_r = concat (Result5_r,trim(cnvtstring(Seq2)),", ")
endif
 
/************************************Get invalid Prompt*******************************************/
if(request_valid->rlist[Seq2].PromptInd not in ("0","1"))
set request_valid->rlist[Seq2].PromptIndValid = 0
set CountInvalidPrompt = CountInvalidPrompt +1
set Result9 = concat(Result9,request_valid->rlist[Seq2].PromptInd,", ")
set Result9_r = concat (Result9_r,trim(cnvtstring(Seq2)),", ")
else
set request_valid->rlist[Seq2].PromptIndValid = 1
endif
 
/************************************Get invalid Post Prompt*******************************************/
if(request_valid->rlist[Seq2].PostPrompt not in ("0","1"))
set request_valid->rlist[Seq2].PostPromptValid = 0
set CountInvalidPostPrompt = CountInvalidPostPrompt +1
set Result6 = concat(Result6,request_valid->rlist[Seq2].PostPrompt,", ")
set Result6_r = concat (Result6_r,trim(cnvtstring(Seq2)),", ")
else
if(request_valid->rlist[Seq2].PostPrompt = "1" and request_valid->rlist[Seq2].PromptInd = "0")
set request_valid->rlist[Seq2].PostPromptValid = 0
set CountInvalidPostPrompt = CountInvalidPostPrompt +1
set Result6 = concat(Result6,request_valid->rlist[Seq2].PostPrompt,", ")
set Result6_r = concat (Result6_r,trim(cnvtstring(Seq2)),", ")
else
set request_valid->rlist[Seq2].PostPromptValid = 1
endif
endif
 
/************************************Get invalid Required*******************************************/
if(request_valid->rlist[Seq2].Required not in ("0","1"))
set request_valid->rlist[Seq2].RequiredValid = 0
set CountInvalidRequired = CountInvalidRequired +1
set Result7 = concat(Result7,request_valid->rlist[Seq2].Required,", ")
set Result7_r = concat (Result7_r,trim(cnvtstring(Seq2)),", ")
else
set request_valid->rlist[Seq2].RequiredValid = 1
endif
 
 
/************************************Get invalid Restrict*******************************************/
if(request_valid->rlist[Seq2].RestrictDisplay not in ("0","1"))
set request_valid->rlist[Seq2].RestrictDisplayValid = 0
set CountInvalidRestrict = CountInvalidRestrict +1
set Result8 = concat(Result8,request_valid->rlist[Seq2].RestrictDisplay,", ")
set Result8_r = concat (Result8_r,trim(cnvtstring(Seq2)),", ")
else
set request_valid->rlist[Seq2].RestrictDisplayValid = 1
endif
 
 
/************************************Get invalid Sequence*******************************************/
if(cnvtint(request_valid->rlist[Seq2].Sequence)>= 0)
set request_valid->rlist[Seq2].SequenceValid = 1
else
set request_valid->rlist[Seq2].SequenceValid = 0
set CountInvalidSequence = CountInvalidSequence +1
set Result10 = concat(Result10,request_valid->rlist[Seq2].Sequence,", ")
set Result10_r = concat (Result10_r,trim(cnvtstring(Seq2)),", ")
endif
 
 
/************************************Get invalid rows*******************************************/
if(Request_valid->rlist[Seq2].ActivityTypeValid = 0 or Request_valid->rlist[Seq2].AssayDescriptionValid = 0 or Request_valid->
rlist[Seq2].AssayDisplayValid = 0 or Request_valid->rlist[Seq2].DefaultResultTypeValid = 0 or Request_valid->rlist[Seq2].
PostPromptValid = 0 or Request_valid->rlist[Seq2].PrimaryNameValid = 0 or Request_valid->rlist[Seq2].PromptIndValid = 0 or
Request_valid->rlist[Seq2].RequiredValid = 0 or Request_valid->rlist[Seq2].RestrictDisplayValid = 0 or Request_valid->rlist[Seq2
].SequenceValid = 0)
set Request_valid->rlist[Seq2].rec_valid = 0
set CountInvalidRows = CountInvalidRows + 1
set result11_r = concat (Result11_r,trim(cnvtstring(Seq2)),", ")
else
set Request_valid->rlist[Seq2].rec_valid = 1
endif
endfor
 
 
 
if(CountInvalidActivityType < CountRows)
if(size(result1)>0)
set Result1_echo = Concat ("(",trim(cnvtstring(CountInvalidActivityType)),")", "Invalid Activity Types are ",
replace(Result1,",","",2),"|||||||||||||| Invalid rows are ", replace(Result1_r,",","",2))
else
set Result1_echo = "All Activity Types are valid..."
endif
else
set Result1_echo = "INVALID Activity Types!!!"
endif
 
if(CountInvalidPrimaryName < CountRows)
if(size(result2)>0)
set Result2_echo = Concat ("(",trim(cnvtstring(CountInvalidPrimaryName)),")", "Invalid Primary Names are ",
replace(Result2,",","",2),"|||||||||||||| Invalid rows are ", replace(Result2_r,",","",2))
else
set Result2_echo = "All Primary Names are valid..."
endif
else
set Result2_echo = "INVALID Primary Names!!!"
endif
 
if(CountInvalidDisplay < CountRows)
if(size(result3)>0)
set Result3_echo = Concat ("(",trim(cnvtstring(CountInvalidDisplay)),")", "Invalid Assay Displays are ",
replace(Result3,",","",2),"|||||||||||||| Invalid rows are ", replace(Result3_r,",","",2))
else
set Result3_echo = "All Assay Displays are valid..."
endif
else
set Result3_echo = "INVALID Assay Displays!!!"
endif
 
if(CountInvalidDescription < CountRows)
if(size(result4)>0)
set Result4_echo = Concat ("(",trim(cnvtstring(CountInvalidDescription)),")", "Invalid Assay Descriptions are ",
replace(Result4,",","",2),"|||||||||||||| Invalid rows are ", replace(Result4_r,",","",2))
else
set Result4_echo = "All Assay Descriptions are valid..."
endif
else
set Result4_echo = "INVALID Assay Descriptions!!!"
endif
 
if(CountInvalidResultType < CountRows)
if(size(result5)>0)
set Result5_echo = Concat ("(",trim(cnvtstring(CountInvalidResultType)),")", "Invalid Result Types are ",
replace(Result5,",","",2),"|||||||||||||| Invalid rows are ", replace(Result5_r,",","",2))
else
set Result5_echo = "All Result Types are valid..."
endif
else
set Result5_echo = "INVALID Result Types!!!"
endif
 
if(CountInvalidPrompt < CountRows)
if(size(result9)>0)
set result9_echo = Concat ("(",trim(cnvtstring(CountInvalidPrompt)),")", "Invalid Prompt indicators are ",
replace(result9,",","",2),"|||||||||||||| Invalid rows are ", replace(result9_r,",","",2))
else
set result9_echo = "All Prompt indicators are valid..."
endif
else
set result9_echo = "INVALID Prompt indicators!!!"
endif
 
if(CountInvalidPostPrompt < CountRows)
if(size(result6)>0)
set result6_echo = Concat ("(",trim(cnvtstring(CountInvalidPostPrompt)),")", "Invalid Post prompt indicators are ",
replace(result6,",","",2),"|||||||||||||| Invalid rows are ", replace(result6_r,",","",2))
else
set result6_echo = "All post prompt indicators are valid..."
endif
else
set result6_echo = "INVALID post prompt indicators!!!"
endif
 
if(CountInvalidRequired < CountRows)
if(size(result7)>0)
set result7_echo = Concat ("(",trim(cnvtstring(CountInvalidRequired)),")", "Invalid Required Indicators are ",
replace(result7,",","",2),"|||||||||||||| Invalid rows are ", replace(result7_r,",","",2))
else
set result7_echo = "All Required Indicators are valid..."
endif
else
set Result7_echo = "INVALID Required Indicators!!!"
endif
 
if(CountInvalidRestrict < CountRows)
if(size(result8)>0)
set result8_echo = Concat ("(",trim(cnvtstring(CountInvalidRestrict)),")", "Invalid Restrict Display indicators are ",
replace(result8,",","",2),"|||||||||||||| Invalid rows are ", replace(result8_r,",","",2))
else
set result8_echo = "All Restrict Display indicators are valid..."
endif
else
set result8_echo = "INVALID Restrict Display indicators!!!"
endif
 
if(CountInvalidSequence < CountRows)
if(size(result10)>0)
set result10_echo = Concat ("(",trim(cnvtstring(CountInvalidSequence)),")", "Invalid Sequences are ",
replace(result10,",","",2),"|||||||||||||| Invalid rows are ", replace(result10_r,",","",2))
else
set result10_echo = "All Sequences are valid..."
endif
else
set Result10_echo = "INVALID Sequences!!!"
endif
 
if(CountInvalidRows < CountRows)
if(size(result11_r)>0)
set Result11_echo = concat("Total invalid rows are (", trim(cnvtstring(CountInvalidRows)),
") out of (", trim(cnvtstring(CountRows)),") ,which are ", replace(Result11_r,",","",2))
else
set Result11_echo = "All rows are valid..."
endif
else
set Result11_echo = "Invalid csv!!!"
endif
 
call clear(1,1)
 
call text (2,4,result1_echo)
call text (3,4,concat("Activity Types should be in SELECT DESCRIPTION FROM CODE_VALUE WHERE",
' CODE_SET = 106 AND DEFINITION = "GENERAL LAB"'))
 
call text (4,4,result2_echo)
call text (5,4,"Primary names should have no DTAs defined and should be in SELECT primary_mnemonic FROM ORDER_CATALOG")
 
call text (6,4,result3_echo)
call text (7,4,"Assay Display shouldn't be in SELECT MNEMONIC FROM DISCRETE_TASK_ASSAY and not > 50 Char")
 
call text (8,4,result4_echo)
call text (9,4,"Assay Description shouldn't be in SELECT DESCRIPTION FROM DISCRETE_TASK_ASSAY and not > 100 Char")
 
call text (10,4,result5_echo)
call text (11,4,"Result Types should be found in SELECT CV.display FROM CODE_VALUE CV WHERE CV.CODE_SET = 289")
 
call text (12,4,result9_echo)
call text (13,4,"Prompt indicator should be either 0 or 1")
 
call text (14,4,result6_echo)
call text (15,4,"Post Prompt indicator should be either 0 or 1 in case of the prompt indicator is 1 too")
 
call text (16,4,result7_echo)
call text (17,4,"Required indicator should be either 0 or 1")
 
call text (18,4,result8_echo)
call text (19,4,"Restrict Display indicator should be either 0 or 1")
 
call text (20,4,result10_echo)
call text (21,4,"Sequence should be a number greater or equal to 0")
 
call text (22,4,result11_echo)
 
 
 
if(CountInvalidRows < CountRows)
call text(23,4,"Import valid rows? (Y/N) ")
call accept(23,30, "P;CU", "N" WHERE CURACCEPT IN ("Y","N"))
set choice2 = curaccept
if ((choice2 = "Y"))
 
SELECT distinct INTO 'NL:'
txt_ActivityTypeCd = request_valid->rlist[d.seq].ActivityTypeCd,
txt_AssayDescription = request_valid->rlist[d.seq].AssayDescription,
txt_AssayDisplay = request_valid->rlist[d.seq].AssayDisplay,
txt_DefaultResultTypeCd = request_valid->rlist[d.seq].DefaultResultTypeCd
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->rlist,5))
PLAN D where Request_valid->rlist[d.seq].rec_valid = 1 and Request_valid->rlist[d.seq].Assay_exist = 0
order  txt_AssayDisplay, 0
 
head report
x  = 0
head txt_AssayDisplay
x=x+1
 
if(size(request_1->qual,5)<=x)
stat = alterlist(request_1->qual,x+5)
endif
request_1->qual[x].mnemonic = trim(request_valid->rlist[d.seq].AssayDisplay)
request_1->qual[x].description = trim(request_valid->rlist[d.seq].AssayDescription)
request_1->qual[x].default_result_type_cd = CNVTINT(request_valid->rlist[d.seq].DefaultResultTypeCd)
request_1->qual[x].activity_type_cd = CNVTINT(request_valid->rlist[d.seq].ActivityTypeCd)
 
foot txt_AssayDisplay
stat = alterlist(request_1->qual,x)
with nocounter
;call echorecord(request_1,"Auto_dta_req1.dat")
execute orc_add_discrete_assay WITH	REPLACE("REQUEST",REQUEST_1)
 
 
for (Seq4 = 1 to size(request_valid->rlist,5))
select into "nl:"
dta_cd = dta.task_assay_cd
from discrete_task_assay dta
where cnvtupper(dta.mnemonic) =  cnvtupper(Request_valid->rlist[Seq4].AssayDisplay)
detail
request_valid->rlist[seq4].Assay_cd = dta_cd
with nocounte
endfor
 
;call echorecord (request_2,"Auto_dta_req2.dat")
set stat = alterlist(request_2->qual,1)
for (Seq3 = 1 to size(request_valid->rlist,5))
if(request_valid->rlist[Seq3].rec_valid = 1 and request_valid->rlist[Seq3].Assay_cd != 0)
set request_2->catalog_cd = cnvtint(Request_valid->rlist[Seq3].Catalog_cd)
set request_2->qual[1].item_type_flag = cnvtint(Request_valid->rlist[Seq3].PromptInd)
set request_2->qual[1].pending_ind = cnvtint(Request_valid->rlist[Seq3].Required)
set request_2->qual[1].post_prompt_ind = cnvtint(Request_valid->rlist[Seq3].PostPrompt)
set request_2->qual[1].restrict_display_ind = cnvtint(Request_valid->rlist[Seq3].RestrictDisplay)
set request_2->qual[1].sequence = cnvtint(Request_valid->rlist[Seq3].Sequence)
set request_2->qual[1].task_assay_cd = cnvtint(Request_valid->rlist[Seq3].Assay_cd)
 
;call echorecord (request_2,"Auto_dta_req2.dat",1)
execute orc_add_profile_task_r WITH	REPLACE("REQUEST",REQUEST_2)
endif
 
endfor
 
endif
endif
 
call clear(1,1)
 call video(i)
 if(CountInvalidRows < CountRows)
 if(choice2 = "Y")
 call text(2, 4, concat("Importing completed ", trim(cnvtstring(CountRows-CountInvalidRows)),
 " out of ", trim(cnvtstring(CountRows))))
 endif
 else
 call text(2, 4, "Importing skipped")
 endif
 call text(4,4,"1)Exit and save log file Auto_GL_DTA_log")
 call text(6,4,"2)Exit and show on screen the invalid rows...")
 call text(8,4,"3)EXIT without logging...")
 
 
 call text(14, 4, "Select ")
 call accept(14, 12, "1;", 3 where curaccept in (1, 2, 3))
 set choice3 = curaccept
 
 if (choice3 = 1)
 select into "Auto_GL_DTA_log.dat"
 ___________________________________________= "Invalid records out of the csv file"
 with version
 
 select into "Auto_GL_DTA_log.dat"
 ActivityType 				= request_valid->rlist[d.seq].ActivityType,
 ActivityType_valid 		= if(request_valid->rlist[d.seq].ActivityTypeValid = 1) "Yes" else "No" endif,
 PrimaryName				= request_valid->rlist[d.seq].PrimaryName,
 PrimaryName_valid 			= if(request_valid->rlist[d.seq].PrimaryNameValid= 1) "Yes" else "No" endif,
 AssayDisplay		 		= request_valid->rlist[d.seq].AssayDisplay,
 AssayDisplay_valid			= if(request_valid->rlist[d.seq].AssayDisplayValid = 1) "Yes" else "No" endif,
 AssayDescription			= request_valid->rlist[d.seq].AssayDescription,
 AssayDescription_valid 	= if(request_valid->rlist[d.seq].AssayDescriptionValid = 1) "Yes" else "No" endif,
 DefaultResultType			= request_valid->rlist[d.seq].DefaultResultType,
 DefaultResultType_valid	= if(request_valid->rlist[d.seq].DefaultResultTypeValid = 1) "Yes" else "No" endif,
 Sequence					= request_valid->rlist[d.seq].Sequence,
 Sequence_valid 			= if(request_valid->rlist[d.seq].SequenceValid = 1) "Yes" else "No" endif,
 Required		 			= request_valid->rlist[d.seq].Required,
 Required_valid				= if(request_valid->rlist[d.seq].RequiredValid = 1) "Yes" else "No" endif,
 PromptInd					= request_valid->rlist[d.seq].PromptInd,
 PromptInd_valid 			= if(request_valid->rlist[d.seq].PromptIndValid = 1) "Yes" else "No" endif,
 PostPrompt					= request_valid->rlist[d.seq].PostPrompt,
 PostPrompt_valid			= if(request_valid->rlist[d.seq].PostPromptValid = 1) "Yes" else "No" endif,
 RestrictDisplay			= request_valid->rlist[d.seq].RestrictDisplay,
 RestrictDisplay_valid 		= if(request_valid->rlist[d.seq].RestrictDisplayValid = 1) "Yes" else "No" endif,
 Record_valid				= if(request_valid->rlist[d.seq].rec_valid = 1) "Yes" else "No" endif
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->rlist,5))
PLAN D
where request_valid->rlist[d.seq].rec_valid = 0
with nocounter, append
 
else if (choice3 = 2)
 select into "MINE"
 ActivityType 				= request_valid->rlist[d.seq].ActivityType,
 ActivityType_valid 		= if(request_valid->rlist[d.seq].ActivityTypeValid = 1) "Yes" else "No" endif,
 PrimaryName				= request_valid->rlist[d.seq].PrimaryName,
 PrimaryName_valid 			= if(request_valid->rlist[d.seq].PrimaryNameValid= 1) "Yes" else "No" endif,
 AssayDisplay		 		= request_valid->rlist[d.seq].AssayDisplay,
 AssayDisplay_valid			= if(request_valid->rlist[d.seq].AssayDisplayValid = 1) "Yes" else "No" endif,
 AssayDescription			= request_valid->rlist[d.seq].AssayDescription,
 AssayDescription_valid 	= if(request_valid->rlist[d.seq].AssayDescriptionValid = 1) "Yes" else "No" endif,
 DefaultResultType			= request_valid->rlist[d.seq].DefaultResultType,
 DefaultResultType_valid	= if(request_valid->rlist[d.seq].DefaultResultTypeValid = 1) "Yes" else "No" endif,
 Sequence					= request_valid->rlist[d.seq].Sequence,
 Sequence_valid 			= if(request_valid->rlist[d.seq].SequenceValid = 1) "Yes" else "No" endif,
 Required		 			= request_valid->rlist[d.seq].Required,
 Required_valid				= if(request_valid->rlist[d.seq].RequiredValid = 1) "Yes" else "No" endif,
 PromptInd					= request_valid->rlist[d.seq].PromptInd,
 PromptInd_valid 			= if(request_valid->rlist[d.seq].PromptIndValid = 1) "Yes" else "No" endif,
 PostPrompt					= request_valid->rlist[d.seq].PostPrompt,
 PostPrompt_valid			= if(request_valid->rlist[d.seq].PostPromptValid = 1) "Yes" else "No" endif,
 RestrictDisplay			= request_valid->rlist[d.seq].RestrictDisplay,
 RestrictDisplay_valid 		= if(request_valid->rlist[d.seq].RestrictDisplayValid = 1) "Yes" else "No" endif,
 Record_valid				= if(request_valid->rlist[d.seq].rec_valid = 1) "Yes" else "No" endif
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->rlist,5))
PLAN D
where request_valid->rlist[d.seq].rec_valid = 0
with nocounter
endif
endif
 
end go