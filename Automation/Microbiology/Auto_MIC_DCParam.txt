set trace backdoor p30ins go
 
drop program Auto_MIC_DCParam go
create program Auto_MIC_DCParam
 
/****************Create Record to be sent to program******************************/
record request1
 (
 1 qual[*]
   2 sus_dc_param_id      = f8
   2 service_resource_cd  = f8
   2 source_cd            = f8
   2 organism_cd          = f8
   2 across_encounter_ind = i2
   2 across_source_ind    = i2
   2 matching_ab_ind      = i2
   2 matching_ab_nbr      = i4
   2 lookback_hours       = i4
 )
 record request1a
 (
   1 sus_dc_param_id      = f8
   1 service_resource_cd  = f8
   1 source_cd            = f8
   1 organism_cd          = f8
   1 across_encounter_ind = i2
   1 across_source_ind    = i2
   1 matching_ab_ind      = i2
   1 matching_ab_nbr      = i4
   1 lookback_hours       = i4
 )
 
record request2
 (
  1 qlist[*]
   2 sus_dc_param_id              = f8
   2 across_encounter_ind         = i2
   2 across_source_ind            = i2
   2 matching_ab_ind              = i2
   2 matching_ab_nbr              = i4
   2 lookback_hours               = i4
   2 updt_cnt                     = i4
   2 cross_ref_qual[*]
     3 sus_detail1_cd             = f8
     3 sus_detail2_cd             = f8
    ;3 updt_cnt                   = i4
   2 limit_tol_qual[*]
     3 amount_of_change           = i4
     3 tolerance                  = i4
    ;3 updt_cnt                   = i4
 )
 record request2a
 (
  1 sus_dc_param_id              = f8
   1 across_encounter_ind         = i2
   1 across_source_ind            = i2
   1 matching_ab_ind              = i2
   1 matching_ab_nbr              = i4
   1 lookback_hours               = i4
   1 updt_cnt                     = i4
   1 cross_ref_qual[*]
     2 sus_detail1_cd             = f8
     2 sus_detail2_cd             = f8
    ;2 updt_cnt                   = i4
   1 limit_tol_qual[*]
     2 amount_of_change           = i4
     2 tolerance                  = i4
    ;2 updt_cnt                   = i4
 )
 
 
 
 record request_valid
 (
 	1	qual[*]
 		2 service_resource			= vc
		2 service_resource_cd		= f8
		2 service_resource_valid	= i2
 
		2 source					= vc
		2 source_cd					= f8
		2 source_valid				= i2
 
		2 organism					= vc
		2 organism_cd				= f8
		2 organism_valid			= i2
 
		2 sus_detail1				= vc
		2 sus_detail1_cd			= f8
		2 sus_detail1_type_cd		= f8
		2 sus_detail1_valid			= i2
 
		2 sus_detail2				= vc
		2 sus_detail2_cd			= f8
		2 sus_detail2_type_cd		= f8
		2 sus_detail2_valid			= i2
 
		2 amount_of_change	        = i4
		2 tolerance	                = i4
 
		2 tol_cross_valid			= i2
 
		2 across_encounter_ind 		= i2
		2 across_source_ind    		= i2
		2 matching_ab_ind      		= i2
		2 ind_valid					= i2
 
		2 matching_ab_nbr      		= i4
		2 lookback_hours       		= i4
 
 
		2 row_exist					= i2
		2 row_valid					= i2
   )
 
 
/*****************Copy the requestin into the request_valid*************************************/
declare Seq1 = I2
set stat = alterlist(request_valid->qual,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set Request_valid->qual[Seq1].service_resource = requestin->List_0[Seq1].service_resource
set Request_valid->qual[Seq1].source = requestin->List_0[Seq1].source
set Request_valid->qual[Seq1].organism = requestin->List_0[Seq1].organism
set Request_valid->qual[Seq1].sus_detail1 = requestin->List_0[Seq1].sus_detail1
set Request_valid->qual[Seq1].sus_detail2 = requestin->List_0[Seq1].sus_detail2
 
if (cnvtupper(requestin->List_0[Seq1].across_encounter_ind) in ("", "NO", "N"))
set Request_valid->qual[Seq1].across_encounter_ind  = 0
elseif (cnvtupper(requestin->List_0[Seq1].across_encounter_ind) in ("YES","Y"))
set Request_valid->qual[Seq1].across_encounter_ind  = 1
else
set Request_valid->qual[Seq1].across_encounter_ind  = cnvtint(trim(requestin->List_0[Seq1].across_encounter_ind))
endif
 
if (cnvtupper(requestin->List_0[Seq1].across_source_ind) in ("", "NO", "N"))
set Request_valid->qual[Seq1].across_source_ind  = 0
elseif (cnvtupper(requestin->List_0[Seq1].across_source_ind) in ("YES","Y"))
set Request_valid->qual[Seq1].across_source_ind  = 1
else
set Request_valid->qual[Seq1].across_source_ind  = cnvtint(trim(requestin->List_0[Seq1].across_source_ind))
endif
 
if (cnvtupper(requestin->List_0[Seq1].matching_ab_ind) in ("", "NO", "N"))
set Request_valid->qual[Seq1].matching_ab_ind  = 0
elseif (cnvtupper(requestin->List_0[Seq1].matching_ab_ind) in ("YES","Y"))
set Request_valid->qual[Seq1].matching_ab_ind  = 1
else
set Request_valid->qual[Seq1].matching_ab_ind  = cnvtint(trim(requestin->List_0[Seq1].matching_ab_ind))
endif
 
if (cnvtupper(requestin->List_0[Seq1].matching_ab_ind) in ("", "NO", "N"))
set Request_valid->qual[Seq1].matching_ab_ind  = 0
elseif (cnvtupper(requestin->List_0[Seq1].matching_ab_ind) in ("YES","Y"))
set Request_valid->qual[Seq1].matching_ab_ind  = 1
else
set Request_valid->qual[Seq1].matching_ab_ind  = cnvtint(trim(requestin->List_0[Seq1].matching_ab_ind))
endif
 
set Request_valid->qual[Seq1].amount_of_change = cnvtint(requestin->List_0[Seq1].amount_of_change)
set Request_valid->qual[Seq1].lookback_hours = cnvtint(requestin->List_0[Seq1].lookback_hours)
set Request_valid->qual[Seq1].matching_ab_nbr = cnvtint(requestin->List_0[Seq1].matching_ab_nbr)
set Request_valid->qual[Seq1].tolerance = cnvtint(requestin->List_0[Seq1].tolerance)
 
endfor
 
 
/*********************Loop through second record*************************/
declare Seq2 = I2
 
declare CountRows = I4
declare CountInvalidRows = I4
 
set stat = alterlist(request_valid->qual,size(request_valid->qual,5))
 
set CountRows =0
set CountInvalidRows = 0
 
for (Seq2 = 1 to size(request_valid->qual,5))
set CountRows = CountRows +1
 
 
/************************************Get invalid service resources*******************************/
if (cnvtupper(request_valid->qual[Seq2].service_resource) = "ALL")
set request_valid->qual[Seq2].service_resource_valid = 1
set request_valid->qual[Seq2].service_resource_cd = 0
else
set request_valid->qual[Seq2].service_resource_valid = 0
select into 'NL:'
TxtSR = cv.code_value
from code_value cv
plan cv where cv.code_set = 221
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].service_resource)
detail
request_valid->qual[Seq2].service_resource_valid = 1
request_valid->qual[Seq2].service_resource_cd = TxtSR
with nocounter
endif
 
 
/************************************Get invalid Sources*******************************/
if (cnvtupper(request_valid->qual[Seq2].source) = "ALL")
set request_valid->qual[Seq2].source_valid = 1
set request_valid->qual[Seq2].source_cd = 0
else
set request_valid->qual[Seq2].source_valid = 0
select into 'NL:'
TxtSource = cv.code_value
from code_value cv
plan cv where cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].source) 
and cv.code_set IN (1150, 1151, 2052) 
detail
request_valid->qual[Seq2].source_valid = 1
request_valid->qual[Seq2].source_cd = TxtSource
with nocounter
endif
 
/************************************Get invalid organisms*******************************/
set request_valid->qual[Seq2].organism_valid = 0
select into 'NL:'
TxtOrganism = cv.code_value
from code_value cv
plan cv where cv.code_set = 1021
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].organism)
detail
request_valid->qual[Seq2].organism_valid = 1
request_valid->qual[Seq2].organism_cd = TxtOrganism
with nocounter
 
/************************************Get invalid sus detail1*******************************/
if(request_valid->qual[Seq2].sus_detail1 = "")
set request_valid->qual[Seq2].sus_detail1_valid = 1
else
set request_valid->qual[Seq2].sus_detail1_valid = 0
select into 'NL:'
TxtSusDetail1 = cv.code_value,
TxtSusDetailType1 = m.task_type_flag
from code_value cv, mic_detail_task m
plan cv where cv.code_set = 1004 and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].sus_detail1)
join m where m.task_component_cd = cv.code_value and m.task_type_flag in (14,7)
detail
request_valid->qual[Seq2].sus_detail1_valid = 1
request_valid->qual[Seq2].sus_detail1_cd = TxtSusDetail1
request_valid->qual[Seq2].sus_detail1_type_cd = TxtSusDetailType1
with nocounter
endif
/************************************Get invalid sus detail2*******************************/
if(request_valid->qual[Seq2].sus_detail2 = "")
set request_valid->qual[Seq2].sus_detail2_valid = 1
else
set request_valid->qual[Seq2].sus_detail2_valid = 0
select into 'NL:'
TxtSusDetail2 = cv.code_value,
TxtSusDetailType2 = m.task_type_flag
from code_value cv, mic_detail_task m
plan cv where cv.code_set = 1004 and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].sus_detail2)
join m where m.task_component_cd = cv.code_value and m.task_type_flag in (14,7)
detail
request_valid->qual[Seq2].sus_detail2_valid = 1
request_valid->qual[Seq2].sus_detail2_cd = TxtSusDetail2
request_valid->qual[Seq2].sus_detail2_type_cd = TxtSusDetailType2
with nocounter
endif
 
/************************************Get invalid tolerance vs sus_detail*******************************/
set c1 = request_valid->qual[Seq2].amount_of_change
set c2 = request_valid->qual[Seq2].tolerance
set c3 = request_valid->qual[Seq2].sus_detail1_cd
set c4 = request_valid->qual[Seq2].sus_detail1_type_cd
set c5 = request_valid->qual[Seq2].sus_detail2_cd
set c6 = request_valid->qual[Seq2].sus_detail2_type_cd
 
if((c1>0 and c3>0 and c5>0 and c4=c6)or(c1>0 and (c3=0 or c5=0))or (c1<=0 and c3>0 and c5>0 and c4=c6))
set request_valid->qual[Seq2].tol_cross_valid = 1
else
set request_valid->qual[Seq2].tol_cross_valid = 0
endif
 
 
 
/************************************Get invalid indicators*******************************/
if(request_valid->qual[Seq2].across_encounter_ind not in (0,1) or request_valid->qual[Seq2].across_source_ind not in (0,1)
or request_valid->qual[Seq2].matching_ab_ind not in (0,1))
set request_valid->qual[Seq2].ind_valid = 0
else
set request_valid->qual[Seq2].ind_valid = 1
endif
 
/************************************Get existing records*******************************/
set request_valid->qual[Seq2].row_exist = 0
select into 'NL:'
*
from mic_stat_sus_dc_param m
plan m where m.organism_cd = Request_valid->qual[Seq2].organism_cd
and m.service_resource_cd = Request_valid->qual[Seq2].service_resource_cd
and m.source_cd = Request_valid->qual[Seq2].source_cd
detail
request_valid->qual[Seq2].row_exist = 1
with nocounter
 
 
 
if(Request_valid->qual[Seq2].organism_valid = 0 or Request_valid->qual[Seq2].tol_cross_valid = 0
or Request_valid->qual[Seq2].ind_valid = 0 or Request_valid->qual[Seq2].service_resource_valid = 0
or Request_valid->qual[Seq2].source_valid = 0 or request_valid->qual[Seq2].row_exist = 1
or (Request_valid->qual[Seq2].sus_detail1_valid = 0 and Request_valid->qual[Seq2].amount_of_change <=0)
or (Request_valid->qual[Seq2].sus_detail2_valid = 0 and Request_valid->qual[Seq2].amount_of_change <=0))
set Request_valid->qual[Seq2].row_valid = 0
set CountInvalidRows = CountInvalidRows+1
else
set Request_valid->qual[Seq2].row_valid = 1
endif
endfor
 
;call echorecord (request_valid)
 
 
if (CountInvalidRows=0)
 
 
SELECT distinct INTO 'NL:'
txt_service_resource_cd = Request_valid->qual[d.seq].service_resource_cd,
txt_source_cd = Request_valid->qual[d.seq].source_cd,
txt_organism_cd = Request_valid->qual[d.seq].organism_cd,
txt_across_encounter_ind = Request_valid->qual[d.seq].across_encounter_ind,
txt_across_source_ind = Request_valid->qual[d.seq].across_source_ind,
txt_lookback_hours = Request_valid->qual[d.seq].lookback_hours,
txt_matching_ab_ind = Request_valid->qual[d.seq].matching_ab_ind,
txt_matching_ab_nbr = Request_valid->qual[d.seq].matching_ab_nbr
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5))
 
PLAN D where Request_valid->qual[d.seq].row_valid = 1
 
order by txt_service_resource_cd, txt_source_cd, txt_organism_cd
 
head report
x2=0
 
head d.seq
x2 = x2+1
if(size(request1->QUAL,5)<=x2)
stat = alterlist(request1->qual,x2+5)
endif
		request1->QUAL[x2].sus_dc_param_id = 0
		request1->QUAL[x2].organism_cd = request_valid->qual[d.seq].organism_cd
		request1->QUAL[x2].service_resource_cd = request_valid->qual[d.seq].service_resource_cd
		request1->QUAL[x2].source_cd = request_valid->qual[d.seq].source_cd
		request1->QUAL[x2].across_encounter_ind = request_valid->qual[d.seq].across_encounter_ind
		request1->QUAL[x2].across_source_ind = request_valid->qual[d.seq].across_source_ind
		request1->QUAL[x2].matching_ab_ind = request_valid->qual[d.seq].matching_ab_ind
		request1->QUAL[x2].matching_ab_nbr = request_valid->qual[d.seq].matching_ab_nbr
		request1->QUAL[x2].lookback_hours = request_valid->qual[d.seq].lookback_hours
 
 
foot d.seq
stat = alterlist(request1->QUAL[x2],x2)
with nocounter
 
for (Seq3 = 1 to size(request1->qual,5))
set request1a->organism_cd = request1->qual[Seq3].organism_cd
set request1a->service_resource_cd = request1->qual[Seq3].service_resource_cd
set request1a->source_cd = request1->qual[Seq3].source_cd
set request1a->sus_dc_param_id = request1->qual[Seq3].sus_dc_param_id
set request1a->across_encounter_ind = request1->qual[Seq3].across_encounter_ind
set request1a->across_source_ind = request1->qual[Seq3].across_source_ind
set request1a->matching_ab_ind = request1->qual[Seq3].matching_ab_ind
set request1a->matching_ab_nbr = request1->qual[Seq3].matching_ab_nbr
set request1a->lookback_hours = request1->qual[Seq3].lookback_hours
;call echorecord(request1a)
execute mic_add_stat_sus_dc_param WITH REPLACE("REQUEST",REQUEST1a)
endfor
 
 
SELECT INTO 'NL:'
txt_sus_dc_param_id = mp.sus_dc_param_id,
txt_across_encounter_ind = Request_valid->qual[d.seq].across_encounter_ind,
txt_across_source_ind = Request_valid->qual[d.seq].across_source_ind,
txt_lookback_hours = Request_valid->qual[d.seq].lookback_hours,
txt_matching_ab_ind = Request_valid->qual[d.seq].matching_ab_ind,
txt_matching_ab_nbr = Request_valid->qual[d.seq].matching_ab_nbr,
txt_amount_of_change = Request_valid->qual[d.seq].amount_of_change,
txt_tolerance = Request_valid->qual[d.seq].tolerance,
txt_sus_detail1_cd = Request_valid->qual[d.seq].sus_detail1_cd,
txt_sus_detail2_cd= Request_valid->qual[d.seq].sus_detail2_cd
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5)),mic_stat_sus_dc_param mp
 
PLAN D where Request_valid->qual[d.seq].row_valid = 1 
join mp where mp.service_resource_cd = Request_valid->qual[d.seq].service_resource_cd
and mp.source_cd = Request_valid->qual[d.seq].source_cd
and mp.organism_cd = Request_valid->qual[d.seq].organism_cd
 
head report
x2=0
 
head txt_sus_dc_param_id
x2 = x2+1
x3 = 0
if(size(request2->qlist,5)<=x2)
stat = alterlist(request2->qlist,x2+5)
endif
		request2->qlist[x2].sus_dc_param_id = txt_sus_dc_param_id
		request2->qlist[x2].across_encounter_ind = txt_across_encounter_ind
		request2->qlist[x2].across_source_ind = txt_across_source_ind
		request2->qlist[x2].lookback_hours = txt_lookback_hours
		request2->qlist[x2].matching_ab_ind = txt_matching_ab_ind
		request2->qlist[x2].matching_ab_nbr = txt_matching_ab_nbr
 
	head txt_amount_of_change
	if (Request_valid->qual[d.seq].amount_of_change>0)
	x3 = x3+1
	if(size(request2->qlist[x2].limit_tol_qual,5)<=x3)
	stat = alterlist(request2->qlist[x2].limit_tol_qual,x3+5)
	endif
	request2->qlist[x2].limit_tol_qual[x3].amount_of_change = request_valid->qual[d.seq].amount_of_change
	request2->qlist[x2].limit_tol_qual[x3].tolerance = request_valid->qual[d.seq].tolerance
 	endif
	foot txt_amount_of_change
	stat = alterlist(request2->qlist[x2].limit_tol_qual,x3)
foot txt_sus_dc_param_id
stat = alterlist(request2->qlist,x2)
with nocounter
 
;call echorecord(request2) 
 
SELECT INTO "NL:"
txt_sus_dc_param_id = mp.sus_dc_param_id,
txt_across_encounter_ind = Request_valid->qual[d.seq].across_encounter_ind,
txt_across_source_ind = Request_valid->qual[d.seq].across_source_ind,
txt_lookback_hours = Request_valid->qual[d.seq].lookback_hours,
txt_matching_ab_ind = Request_valid->qual[d.seq].matching_ab_ind,
txt_matching_ab_nbr = Request_valid->qual[d.seq].matching_ab_nbr,
txt_amount_of_change = Request_valid->qual[d.seq].amount_of_change,
txt_tolerance = Request_valid->qual[d.seq].tolerance,
txt_sus_detail1_cd = Request_valid->qual[d.seq].sus_detail1_cd,
txt_sus_detail2_cd= Request_valid->qual[d.seq].sus_detail2_cd
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5)),mic_stat_sus_dc_param mp
 
PLAN D where Request_valid->qual[d.seq].row_valid = 1 
join mp where mp.service_resource_cd = Request_valid->qual[d.seq].service_resource_cd
and mp.source_cd = Request_valid->qual[d.seq].source_cd
and mp.organism_cd = Request_valid->qual[d.seq].organism_cd
 
head report
x2=0
;call echorecord(request_valid)
 
head txt_sus_dc_param_id
x2=x2+1
x3 = 0
	head txt_sus_detail1_cd
	dummy = 0
	head txt_sus_detail2_cd
	if(Request_valid->qual[d.seq].sus_detail1_cd > 0 and Request_valid->qual[d.seq].sus_detail2_cd > 0)
	x3 = x3+1
	if(size(request2->qlist[x2].cross_ref_qual,5)<=x3)
	stat = alterlist(request2->qlist[x2].cross_ref_qual,x3+5)
	endif
	request2->qlist[x2].cross_ref_qual[x3].sus_detail1_cd = request_valid->qual[d.seq].sus_detail1_cd
	request2->qlist[x2].cross_ref_qual[x3].sus_detail2_cd = request_valid->qual[d.seq].sus_detail2_cd
 	endif
	foot txt_sus_detail2_cd
	stat = alterlist(request2->qlist[x2].cross_ref_qual,x3)
	foot txt_sus_detail1_cd
	dummy = 1
foot txt_sus_dc_param_id
dummy = 1
with nocounter



;call echorecord(request2) 
;call echorecord(request2a,"request2.dat") 
for (Seq4 = 1 to size(request2->qlist,5))
set request2a->sus_dc_param_id = request2->qlist[Seq4].sus_dc_param_id
set request2a->across_encounter_ind = request2->qlist[Seq4].across_encounter_ind
set request2a->across_source_ind = request2->qlist[Seq4].across_source_ind
set request2a->lookback_hours = request2->qlist[Seq4].lookback_hours
set request2a->matching_ab_ind = request2->qlist[Seq4].matching_ab_ind
set request2a->matching_ab_nbr = request2->qlist[Seq4].matching_ab_nbr
 
set stat = alterlist(request2a->limit_tol_qual,size(request2->qlist[Seq4].limit_tol_qual,5))
for (Seq5 = 1 to size(request2->qlist[Seq4].limit_tol_qual,5))
set request2a->limit_tol_qual[Seq5].amount_of_change = request2->qlist[Seq4].limit_tol_qual[Seq5].amount_of_change
set request2a->limit_tol_qual[Seq5].tolerance = request2->qlist[Seq4].limit_tol_qual[Seq5].tolerance
 
set stat = alterlist(request2a->cross_ref_qual,size(request2->qlist[Seq4].cross_ref_qual,5))
for (Seq6 = 1 to size(request2->qlist[Seq4].cross_ref_qual,5))
set request2a->cross_ref_qual[Seq6].sus_detail1_cd = request2->qlist[Seq4].cross_ref_qual[Seq6].sus_detail1_cd
set request2a->cross_ref_qual[Seq6].sus_detail2_cd = request2->qlist[Seq4].cross_ref_qual[Seq6].sus_detail2_cd
endfor
endfor
;call echorecord(request2a,"request2.dat",1)
execute mic_chg_stat_sus_dc_param_all WITH REPLACE("REQUEST",REQUEST2a)
endfor
 
call echo("///////////////////////////////////////////////////////////////////////////////////////")
call echo("/////////////////////////////////////Importing Done////////////////////////////////////")
call echo("///////////////////////////////////////////////////////////////////////////////////////")
else
 
call clear(1,1)
call video(i)
call text(2, 4, "Importing have stopped because some of the entities in the csv file is invalid")
call text(3, 4, "kindly check the log file Auto_MIC_DCParam_log")
 
select into "Auto_MIC_DCParam_log"
service_resource 				= trim(request_valid->qual[d.seq].service_resource)
,service_resource_valid	  		= if(request_valid->qual[d.seq].service_resource_valid) "Yes" else "No" endif
,source 						= request_valid->qual[d.seq].source
,source_valid	  				= if(request_valid->qual[d.seq].source_valid) "Yes" else "No" endif
,organism 						= request_valid->qual[d.seq].organism
,organism_valid	  				= if(request_valid->qual[d.seq].organism_valid) "Yes" else "No" endif
,across_encounter_ind  			= request_valid->qual[d.seq].across_encounter_ind
,across_source_ind    	  		= request_valid->qual[d.seq].across_source_ind
,matching_ab_ind       			= request_valid->qual[d.seq].matching_ab_ind
,ind_valid						= if(request_valid->qual[d.seq].ind_valid) "Yes" else "No" endif
,matching_ab_nbr      			= request_valid->qual[d.seq].matching_ab_nbr
,lookback_hours      			= request_valid->qual[d.seq].lookback_hours
,amount_of_change      			= request_valid->qual[d.seq].amount_of_change
,tolerance		      			= request_valid->qual[d.seq].tolerance
,sus_detail1 					= request_valid->qual[d.seq].sus_detail1
,sus_detail1_valid	  			= if(request_valid->qual[d.seq].sus_detail1_valid) "Yes" else "No" endif
,sus_detail2 					= request_valid->qual[d.seq].sus_detail2
,sus_detail2_valid	  			= if(request_valid->qual[d.seq].sus_detail2_valid) "Yes" else "No" endif
,tol_cross_valid	  			= if(request_valid->qual[d.seq].tol_cross_valid) "Yes" else "No" endif
,row_exist	  					= if(request_valid->qual[d.seq].row_exist) "Yes" else "No" endif
,row_valid	  					= if(request_valid->qual[d.seq].row_valid) "Yes" else "No" endif
 
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->qual,5))
PLAN D
with nocounter, version
endif
 
end
go
 
 