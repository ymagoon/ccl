set trace backdoor p30ins go
 
drop program Auto_MIC_DCValues go
create program Auto_MIC_DCValues
 
/****************Create Record to be sent to program******************************/
record request1
 (
 1 qual[*]
   2 sus_dc_value_id      = f8
   2 service_resource_cd  = f8
   2 source_cd            = f8
   2 organism_cd          = f8
   2 sus_detail_cd        = f8
 )
 record request1a
 (
   1 sus_dc_value_id      = f8
   1 service_resource_cd  = f8
   1 source_cd            = f8
   1 organism_cd          = f8
   1 sus_detail_cd        = f8
 )
 
record request2
 (
  1 qlist[*]
   2 sus_dc_value_id              = f8
   2 updt_cnt                     = i4
   2 qual[*]
     3 antibiotic_cd              = f8
     3 result_qual[*]
       4 result_cd                = f8
       4 value                    = i4
     3 numeric_qual[*]
       4 begin_range              = i4
       4 end_range                = i4
       4 value                    = i4
 )
 record request2a
 (
   1 sus_dc_value_id              = f8
   1 updt_cnt                     = i4
   1 qual[*]
     2 antibiotic_cd              = f8
     2 result_qual[*]
       3 result_cd                = f8
       3 value                    = i4
     2 numeric_qual[*]
       3 begin_range              = i4
       3 end_range                = i4
       3 value                    = i4
 )
 
 
 
 record request_valid
 (
 	1	qual[*]
 		2 service_resource		= vc
		2 service_resource_cd	= f8
		2 service_resource_valid= i2
 
		2 source				= vc
		2 source_cd				= f8
		2 source_valid			= i2
 
		2 organism				= vc
		2 organism_cd			= f8
		2 organism_valid		= i2
 
		2 sus_detail			= vc
		2 sus_detail_cd			= f8
		2 sus_detail_valid		= i2
 
		2 antibiotic			= vc
		2 antibiotic_cd			= f8
		2 antibiotic_valid		= i2
 
		2 result				= vc
		2 result_cd 			= f8
		2 result_valid			= i2
 
		2 value 				= f8
 
		2 row_exist				= i2
		2 row_valid				= i2
 
  )
 
 
/*****************Copy the requestin into the request_valid*************************************/
declare Seq1 = I2
set stat = alterlist(request_valid->qual,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set Request_valid->qual[Seq1].antibiotic  = trim(requestin->List_0[Seq1].antibiotic)
set Request_valid->qual[Seq1].organism = trim(requestin->List_0[Seq1].organism)
set Request_valid->qual[Seq1].result = trim(requestin->List_0[Seq1].result)
set Request_valid->qual[Seq1].sus_detail = trim(requestin->List_0[Seq1].sus_detail)
set Request_valid->qual[Seq1].service_resource = trim(requestin->List_0[Seq1].service_resource)
set Request_valid->qual[Seq1].source = trim(requestin->List_0[Seq1].source)
set Request_valid->qual[Seq1].value = cnvtint(requestin->List_0[Seq1].value)
endfor
 
 
/*********************Loop through second record*************************/
declare Seq2 = I2
 
declare CountRows = I4
declare CountInvalidRows = I4
 
set stat = alterlist(request_valid->qual,size(request_valid->qual,5))
 
set CountRows =0
set CountInvalidRows = 0
 
for (Seq2 = 1 to size(request_valid->qual,5))
set CountRows = CountRows +1
 
 
/************************************Get invalid sus detail*******************************/
set request_valid->qual[Seq2].sus_detail_valid = 0
select into 'NL:'
TxtSusDetail = cv.code_value
from code_value cv
plan cv where cv.code_set = 1004
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].sus_detail)
detail
request_valid->qual[Seq2].sus_detail_valid = 1
request_valid->qual[Seq2].sus_detail_cd = TxtSusDetail
with nocounter
 
/************************************Get invalid results*******************************/
set request_valid->qual[Seq2].result_valid = 0
select into 'NL:'
TxtResult = cv.code_value
from code_value cv
plan cv where cv.code_set in (1025,64)
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].result)
detail
request_valid->qual[Seq2].result_valid = 1
request_valid->qual[Seq2].result_cd = TxtResult
with nocounter
 
 
/************************************Get invalid organisms*******************************/
set request_valid->qual[Seq2].organism_valid = 0
select into 'NL:'
TxtOrganism = cv.code_value
from code_value cv
plan cv where cv.code_set = 1021
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].organism)
detail
request_valid->qual[Seq2].organism_valid = 1
request_valid->qual[Seq2].organism_cd = TxtOrganism
with nocounter
 
 
/************************************Get invalid antibiotics*******************************/
set request_valid->qual[Seq2].antibiotic_valid = 0
select into 'NL:'
TxtAB = cv.code_value
from code_value cv
plan cv where cv.code_set = 1011
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].antibiotic)
detail
request_valid->qual[Seq2].antibiotic_valid = 1
request_valid->qual[Seq2].antibiotic_cd = TxtAB
with nocounter
 
 
/************************************Get invalid service resources*******************************/
if (cnvtupper(request_valid->qual[Seq2].service_resource) = "ALL")
set request_valid->qual[Seq2].service_resource_valid = 1
set request_valid->qual[Seq2].service_resource_cd = 0
else
set request_valid->qual[Seq2].service_resource_valid = 0
select into 'NL:'
TxtSR = cv.code_value
from code_value cv
plan cv where cv.code_set = 221
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].service_resource)
detail
request_valid->qual[Seq2].service_resource_valid = 1
request_valid->qual[Seq2].service_resource_cd = TxtSR
with nocounter
endif
 
 
/************************************Get invalid Sources*******************************/
if (cnvtupper(request_valid->qual[Seq2].source) = "ALL")
set request_valid->qual[Seq2].source_valid = 1
set request_valid->qual[Seq2].source_cd = 0
else
set request_valid->qual[Seq2].source_valid = 0
select into 'NL:'
TxtSource = cv.code_value
from code_value cv
plan cv where cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].source) 
and cv.code_set IN (1150, 1151, 2052) 
detail
request_valid->qual[Seq2].source_valid = 1
request_valid->qual[Seq2].source_cd = TxtSource
with nocounter
endif
 
/************************************Get existing records*******************************/
set request_valid->qual[Seq2].row_exist = 0
select into 'NL:'
*
from MIC_STAT_SUS_DC_VALUE m
plan m where m.sus_detail_cd = Request_valid->qual[Seq2].sus_detail_cd
and m.organism_cd = Request_valid->qual[Seq2].organism_cd
and m.service_resource_cd = Request_valid->qual[Seq2].service_resource_cd
and m.source_cd = Request_valid->qual[Seq2].source_cd
detail
request_valid->qual[Seq2].row_exist = 1
with nocounter
 
 
 
if(Request_valid->qual[Seq2].antibiotic_valid = 0
or Request_valid->qual[Seq2].sus_detail_valid = 0 or Request_valid->qual[Seq2].organism_valid = 0
or Request_valid->qual[Seq2].result_valid = 0 or Request_valid->qual[Seq2].service_resource_valid = 0
or Request_valid->qual[Seq2].source_valid = 0 or request_valid->qual[Seq2].row_exist = 1)
set Request_valid->qual[Seq2].row_valid = 0
set CountInvalidRows = CountInvalidRows+1
else
set Request_valid->qual[Seq2].row_valid = 1
endif
endfor
 
call echorecord (request_valid)
 
 
if (CountInvalidRows=0)
 
 
SELECT distinct INTO 'NL:'
txt_sus_detail_cd = Request_valid->qual[d.seq].sus_detail_cd,
txt_organism_cd = Request_valid->qual[d.seq].organism_cd,
txt_service_resource_cd = Request_valid->qual[d.seq].service_resource_cd,
txt_source_cd = Request_valid->qual[d.seq].source_cd
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5))
 
PLAN D where Request_valid->qual[d.seq].row_valid = 1
 
order by txt_service_resource_cd, txt_source_cd, txt_organism_cd, txt_sus_detail_cd
 
head report
x2=0
 
head d.seq
x2 = x2+1
if(size(request1->QUAL,5)<=x2)
stat = alterlist(request1->qual,x2+5)
endif
		request1->QUAL[x2].organism_cd = request_valid->qual[d.seq].organism_cd
		request1->QUAL[x2].service_resource_cd = request_valid->qual[d.seq].service_resource_cd
		request1->QUAL[x2].source_cd = request_valid->qual[d.seq].source_cd
		request1->QUAL[x2].sus_detail_cd = request_valid->qual[d.seq].sus_detail_cd
		request1->QUAL[x2].sus_dc_value_id = 0
foot d.seq
stat = alterlist(request1->QUAL[x2],x2)
with nocounter

;call echorecord(request1a,"reques1.dat") 
for (Seq3 = 1 to size(request1->qual,5))
set request1a->organism_cd = request1->qual[Seq3].organism_cd
set request1a->service_resource_cd = request1->qual[Seq3].service_resource_cd
set request1a->source_cd = request1->qual[Seq3].source_cd
set request1a->sus_dc_value_id = request1->qual[Seq3].sus_dc_value_id
set request1a->sus_detail_cd = request1->qual[Seq3].sus_detail_cd
;call echorecord(request1a,"reques1.dat",1)
execute mic_add_stat_sus_dc_value WITH REPLACE("REQUEST",REQUEST1a)
endfor
 
 
SELECT distinct INTO 'NL:'
txt_sus_dc_value_id = mv.sus_dc_value_id,
txt_antibiotic_cd = Request_valid->qual[d.seq].antibiotic_cd,
txt_result_cd = Request_valid->qual[d.seq].result_cd
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5)),mic_stat_sus_dc_value mv
 
PLAN D where Request_valid->qual[d.seq].row_valid = 1
join mv where mv.service_resource_cd = Request_valid->qual[d.seq].service_resource_cd
and mv.source_cd = Request_valid->qual[d.seq].source_cd
and mv.organism_cd = Request_valid->qual[d.seq].organism_cd
and mv.sus_detail_cd = Request_valid->qual[d.seq].sus_detail_cd
 
order by txt_sus_dc_value_id, txt_antibiotic_cd, txt_result_cd
 
head report
x2=0
 
head txt_sus_dc_value_id
x2 = x2+1
x3 = 0
if(size(request2->qlist,5)<=x2)
stat = alterlist(request2->qlist,x2+5)
endif
		request2->qlist[x2].sus_dc_value_id = txt_sus_dc_value_id
 
	head txt_antibiotic_cd
	x3 = x3+1
	x4 = 0
	if(size(request2->qlist[x2].qual,5)<=x3)
	stat = alterlist(request2->qlist[x2].qual,x3+5)
	endif
	request2->qlist[x2].qual[x3].antibiotic_cd = request_valid->qual[d.seq].antibiotic_cd
 
		head txt_result_cd
		x4 = x4+1
		if(size(request2->qlist[x2].qual[x3].result_qual,5)<=x4)
		stat = alterlist(request2->qlist[x2].qual[x3].result_qual,x4+5)
		endif
		request2->qlist[x2].qual[x3].result_qual[x4].result_cd = request_valid->qual[d.seq].result_cd
		request2->qlist[x2].qual[x3].result_qual[x4].value = request_valid->qual[d.seq].value
		foot txt_result_cd
		stat = alterlist(request2->qlist[x2].qual[x3].result_qual,x4)
 
	foot txt_antibiotic_cd
	stat = alterlist(request2->qlist[x2].qual,x3)
 
foot txt_sus_dc_value_id
stat = alterlist(request2->qlist,x2)
with nocounter
 
for (Seq4 = 1 to size(request2->qlist,5))
set request2a->sus_dc_value_id = request2->qlist[Seq4].sus_dc_value_id
 
set stat = alterlist(request2a->qual,size(request2->qlist[Seq4].qual,5))
for (Seq5 = 1 to size(request2->qlist[Seq4].qual,5))
set request2a->qual[Seq5].antibiotic_cd = request2->qlist[Seq4].qual[Seq5].antibiotic_cd

;call echorecord(request2a,"request2.dat") 
set stat = alterlist(request2a->qual[Seq5].result_qual,size(request2->qlist[Seq4].qual[Seq5].result_qual,5))
for (Seq6 = 1 to size(request2->qlist[Seq4].qual[Seq5].result_qual,5))
set request2a->qual[Seq5].result_qual[Seq6].result_cd = request2->qlist[Seq4].qual[Seq5].result_qual[Seq6].result_cd
set request2a->qual[Seq5].result_qual[Seq6].value = request2->qlist[Seq4].qual[Seq5].result_qual[Seq6].value
endfor
endfor
;call echorecord(request2a,"request2.dat",1)
execute mic_chg_stat_sus_dc_ab_all WITH REPLACE("REQUEST",REQUEST2a)
endfor
 
call echo("///////////////////////////////////////////////////////////////////////////////////////")
call echo("/////////////////////////////////////Importing Done////////////////////////////////////")
call echo("///////////////////////////////////////////////////////////////////////////////////////")
else
 
call clear(1,1)
call video(i)
call text(2, 4, "Importing have stopped because some of the entities in the csv file is invalid")
call text(3, 4, "kindly check the log file Auto_MIC_DCValues_log")
 
select into "Auto_MIC_DCValues_log"
service_resource 			= trim(request_valid->qual[d.seq].service_resource)
,service_resource_valid	  			= if(request_valid->qual[d.seq].service_resource_valid) "Yes" else "No" endif
,source 			= request_valid->qual[d.seq].source
,source_valid	  			= if(request_valid->qual[d.seq].source_valid) "Yes" else "No" endif
,organism 			= request_valid->qual[d.seq].organism
,organism_valid	  			= if(request_valid->qual[d.seq].organism_valid) "Yes" else "No" endif
,sus_detail 			= request_valid->qual[d.seq].sus_detail
,sus_detail_valid	  			= if(request_valid->qual[d.seq].sus_detail_valid) "Yes" else "No" endif
,antibiotic 			= request_valid->qual[d.seq].antibiotic
,antibiotic_valid	  			= if(request_valid->qual[d.seq].antibiotic_valid) "Yes" else "No" endif
,result 			= request_valid->qual[d.seq].result
,result_valid	  			= if(request_valid->qual[d.seq].result_valid) "Yes" else "No" endif
,value 			= request_valid->qual[d.seq].value
,row_exist	  			= if(request_valid->qual[d.seq].row_exist) "Yes" else "No" endif
,row_valid	  			= if(request_valid->qual[d.seq].row_valid) "Yes" else "No" endif
 
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->qual,5))
PLAN D
with nocounter, version
endif
 
end
go
 
 