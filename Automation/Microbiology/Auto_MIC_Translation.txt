set trace backdoor p30ins go
 
drop program Auto_MIC_Translation go
create program Auto_MIC_Translation
 
/*
Translations will be of the following types based on the Micro_flag
0-Organisms
1-Sources
2-Susceptibility Results
3-Medications
4-Panels
5-Susceptibility Procedures
6-Biochemical Number from Instrument
7-Percent Probability from Instrument
(Note: 6 & 7 are not used in the Tool and are only used by the MDI server code)
*/
 
/****************Create Record to be sent to program******************************/
record request
 (
 1  qual[*]
       2  service_resource_cd      = f8
       2  micro_alias              = vc
       2  micro_flag               = i2
       2  micro_cd         		   = f8
 )
 
 record request_valid
 (
 1	qual[*]
 	2 service_resource	       = vc
	2 service_resource_cd      = f8
	2 Service_resource_valid   = i2
 
    2 micro_alias              = vc
	2 micro_alias_valid	       = i2
 
    2 micro_object		       = vc
    2 micro_cd                 = f8
	2 micro_cd_valid		   = i2
 
	2 object_type		       = vc
	2 micro_flag               = i2
	2 micro_flag_valid	       = i2
 
	2 row_exist				   = i2
	2 row_valid				   = i2
  )

/*****************Copy the requestin into the record request_valid*************************************/
declare Seq1 = I2
set CountRows = 0
set CountInvalid = 0
set stat = alterlist(request_valid->qual,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set CountRows = CountRows +1
 
set Request_valid->qual[Seq1].micro_alias = requestin->List_0[Seq1].micro_alias
set Request_valid->qual[Seq1].micro_object = requestin->List_0[Seq1].micro_object
set Request_valid->qual[Seq1].object_type = requestin->List_0[Seq1].object_type
set Request_valid->qual[Seq1].service_resource = requestin->List_0[Seq1].service_resource

/************************************Get invalid service resources*******************************/
set request_valid->qual[Seq1].service_resource_valid = 0
select into 'NL:'
TxtSR = cv.code_value
from code_value cv
plan cv where cv.code_set = 221
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq1].service_resource)
detail
request_valid->qual[Seq1].service_resource_valid = 1
request_valid->qual[Seq1].service_resource_cd = TxtSR
with nocounter
 
/************************************Get invalid micro_object/object_type*******************************/
set request_valid->qual[Seq1].micro_flag_valid = 0
set request_valid->qual[Seq1].micro_cd_valid = 0
 
/*************Validate Organism************/
if (cnvtupper(request_valid->qual[Seq1].object_type) in ("ORGANISM" , "ORGANISMS"))
set request_valid->qual[Seq1].micro_flag_valid = 1
set request_valid->qual[Seq1].micro_flag = 0
 
set request_valid->qual[Seq1].micro_cd_valid = 0
select into 'NL:'
TxtOrganism = cv.code_value
from code_value cv
plan cv where cv.code_set = 1021
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq1].micro_object)
detail
request_valid->qual[Seq1].micro_cd_valid = 1
request_valid->qual[Seq1].micro_cd = TxtOrganism
with nocounter
 
 
/*************Validate Source************/
Elseif (cnvtupper(request_valid->qual[Seq1].object_type) in ("SOURCE" , "SOURCES"))
set request_valid->qual[Seq1].micro_flag_valid = 1
set request_valid->qual[Seq1].micro_flag = 1
 
set request_valid->qual[Seq1].micro_cd_valid = 0
select into 'NL:'
TxtSource = cv.code_value
from code_value cv
plan cv where cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq1].micro_object)
and cv.code_set = 2052
detail
request_valid->qual[Seq1].micro_cd_valid = 1
request_valid->qual[Seq1].micro_cd = TxtSource
with nocounter
 
 
/*************Validate Susceptibility Result************/
Elseif (cnvtupper(request_valid->qual[Seq1].object_type) in ("SUSCEPTIBILITY RESULT" , "SUSCEPTIBILITY RESULTS"))
set request_valid->qual[Seq1].micro_flag_valid = 1
set request_valid->qual[Seq1].micro_flag = 2
 
set request_valid->qual[Seq1].micro_cd_valid = 0
select into 'NL:'
TxtResult = cv.code_value
from code_value cv
plan cv where cv.code_set in (1025,64)
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq1].micro_object)
detail
request_valid->qual[Seq1].micro_cd_valid = 1
request_valid->qual[Seq1].micro_cd = TxtResult
with nocounter
 
 
/*************Validate Antibiotics************/
Elseif (cnvtupper(request_valid->qual[Seq1].object_type) in ("MEDICATION" , "MEDICATIONS", "ANTIBIOTIC", "ANTIBIOTICS"))
set request_valid->qual[Seq1].micro_flag_valid = 1
set request_valid->qual[Seq1].micro_flag = 3
 
set request_valid->qual[Seq1].micro_cd_valid = 0
select into 'NL:'
TxtAB = cv.code_value
from code_value cv
plan cv where cv.code_set = 1011
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq1].micro_object)
detail
request_valid->qual[Seq1].micro_cd_valid = 1
request_valid->qual[Seq1].micro_cd = TxtAB
with nocounter
 
 
/*************Validate Panel************/
Elseif (cnvtupper(request_valid->qual[Seq1].object_type) in ("PANEL" , "PANELS"))
set request_valid->qual[Seq1].micro_flag_valid = 1
set request_valid->qual[Seq1].micro_flag = 4
 
set request_valid->qual[Seq1].micro_cd_valid = 0
select into 'NL:'
TxtPanelCd = m.task_assay_cd
from mic_task m, code_value cv
plan m where m.task_type_flag = 12
join cv where cv.code_value = m.task_assay_cd
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq1].micro_object)
detail
request_valid->qual[Seq1].micro_cd_valid = 1
request_valid->qual[Seq1].micro_cd = TxtPanelCd
with nocounter
 

/*************Validate Susceptibility Procedure************/
Elseif (cnvtupper(request_valid->qual[Seq1].object_type) in ("SUSCEPTIBILITY PROCEDURE" , "SUSCEPTIBILITY PROCEDURES"))
set request_valid->qual[Seq1].micro_flag_valid = 1
set request_valid->qual[Seq1].micro_flag = 5
 
set request_valid->qual[Seq1].micro_cd_valid = 0
select into 'NL:'
TxtSusDetail = cv.code_value
from code_value cv, mic_detail_task m
plan cv where cv.code_set = 1004 and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq1].micro_object)
join m where m.task_component_cd = cv.code_value and m.task_type_flag in (14,7)
detail
request_valid->qual[Seq1].micro_cd_valid = 1
request_valid->qual[Seq1].micro_cd = TxtSusDetail
with nocounter
 
select into 'NL:'
Txt = cv.code_value
from code_value cv
plan cv where cv.code_set = 65
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq1].micro_object)
detail
request_valid->qual[Seq1].micro_cd_valid = 1
request_valid->qual[Seq1].micro_cd = Txt
with nocounter

endif 
 
/************************************Get invalid micro_alias*******************************/
if ( Request_valid->qual[Seq1].micro_alias = "")
set Request_valid->qual[Seq1].micro_alias_valid = 0
else
set Request_valid->qual[Seq1].micro_alias_valid = 1
endif
 
 
/************************************Get Existing rows*******************************/
set request_valid->qual[Seq1].row_exist = 0
select into 'NL:'
*
from MIC_INSTR_TRANS m
plan m where m.micro_alias = Request_valid->qual[Seq1].micro_alias
and m.micro_flag = Request_valid->qual[Seq1].micro_flag
and m.service_resource_cd = Request_valid->qual[Seq1].service_resource_cd
and m.micro_cd = Request_valid->qual[Seq1].micro_cd
detail
request_valid->qual[Seq1].row_exist = 1
with nocounter
 
set request_valid->qual[Seq1].row_valid = 1
if(request_valid->qual[Seq1].micro_cd_valid = 0 or request_valid->qual[Seq1].micro_alias_valid = 0
or request_valid->qual[Seq1].micro_flag_valid = 0 or request_valid->qual[Seq1].Service_resource_valid = 0
or request_valid->qual[Seq1].row_exist = 1)
call echo  (CountInvalid)
set CountInvalid = CountInvalid +1
set request_valid->qual[Seq1].row_valid = 0
endif

endfor
 
;call echorecord (request_valid)

if (CountInvalid=0)
 
SELECT distinct INTO 'NL:'
txt_micro_alias = Request_valid->qual[d.seq].micro_alias,
txt_micro_cd = Request_valid->qual[d.seq].micro_cd,
txt_micro_flag = Request_valid->qual[d.seq].micro_flag,
txt_service_resource_cd = Request_valid->qual[d.seq].service_resource_cd
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5))
 
PLAN D where Request_valid->qual[d.seq].row_valid = 1
 
head report
x2=0
 
head txt_service_resource_cd
d = 1
head txt_micro_flag
d = 1
head txt_micro_cd
d = 1
head txt_micro_alias
x2=x2+1
 
if(size(request->QUAL,5)<=x2)
stat = alterlist(request->qual,x2+5)
endif
		request->QUAL[x2].service_resource_cd = request_valid->qual[d.seq].service_resource_cd
		request->QUAL[x2].micro_flag = request_valid->qual[d.seq].micro_flag
		request->QUAL[x2].micro_cd = request_valid->qual[d.seq].micro_cd
		request->QUAL[x2].micro_alias = request_valid->qual[d.seq].micro_alias

foot txt_micro_alias
stat = alterlist(request->qual,x2)
foot txt_micro_cd
d = 0
foot txt_micro_flag
d = 0
foot txt_service_resource_cd
d = 0
with nocounter
 
;call echorecord(request)
execute MIC_ADD_INSTR_TRANS
 
 
call echo("///////////////////////////////////////////////////////////////////////////////////////")
call echo("/////////////////////////////////////Importing Done////////////////////////////////////")
call echo("///////////////////////////////////////////////////////////////////////////////////////")
else
 
call clear(1,1)
call video(i)
call text(2, 4, "Importing have stopped because some of the entities in the csv file is invalid")
call text(3, 4, "kindly check the log file Auto_Translation_log")
call text(4, 4, CONCAT("Count of invalid rows: ", trim(cnvtstring(CountInvalid))))
select into "Auto_MIC_Translation_log"
service_resource 		= request_valid->qual[d.seq].service_resource
,service_resource_valid	= if(request_valid->qual[d.seq].Service_resource_valid) "Yes" else "No" endif
,object_type 			= request_valid->qual[d.seq].object_type
,micro_flag_valid	  	= if(request_valid->qual[d.seq].micro_flag_valid) "Yes" else "No" endif
,micro_object 			= request_valid->qual[d.seq].micro_object
,micro_cd_valid	  		= if(request_valid->qual[d.seq].micro_cd_valid) "Yes" else "No" endif
,micro_alias 			= request_valid->qual[d.seq].micro_alias
,micro_alias_valid	  	= if(request_valid->qual[d.seq].micro_alias_valid) "Yes" else "No" endif
,row_exist	  			= if(request_valid->qual[d.seq].row_exist) "Y" else "N" endif
,row_valid	  			= if(request_valid->qual[d.seq].row_valid) "Yes" else "No" endif
 
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->qual,5))
PLAN D
with nocounter, version
endif
 
end
go