set trace backdoor p30ins go
drop program Auto_GL_PPR go
create program Auto_GL_PPR
 
record Request
 ( 1 Qual[*]
       2 Prsnl_id              = f8
       2 service_resource_cd    = f8
       2 action_flag            = i2
 )
 
record Request_valid
 ( 1 rlist[*]
       2 Prsnl_id               = f8
       2 user_name 				= c100
       2 user_name_valid		= i2
       2 service_resource_cd    = f8
       2 sr_display_name		= c100
       2 sr_display_name_valid	= i2
       2 action_flag            = i2
       2 Rec_valid 				= i2
 )
 
declare Seq = I2
 
declare Result_user_name = vc
declare Result_user_name_r = vc
declare Result_user_name_echo = vc
 
declare Result_sr_displayname = vc
declare Result_sr_displayname_r = vc
declare Result_sr_displayname_echo = vc
 
declare Result8_r = vc
declare Result8_echo = vc
 
declare CountRows = I4
declare CountInvalidUsers = I4
declare CountInvalidServiceResource = I4
declare CountInvalidRows = I4
 
set CountRows =0
 
set CountInvalidUsers = 0
set CountInvalidServiceResource = 0
set CountInvalidRows = 0
set stat = alterlist(request_valid->rlist,size(requestin->list_0,5))
 
for (Seq=1 to size(requestin->List_0,5))
set request_valid->rlist[Seq].action_flag = 1
set request_valid->rlist[Seq].user_name = requestin->List_0[Seq].user_name
set request_valid->rlist[Seq].sr_display_name = requestin->List_0[Seq].sr_display_name
 
set CountRows = CountRows +1
 
/*------------------------------------------validate primary names in order catalog table---------------------------------------*/
set request_valid->rlist[Seq].user_name_valid = 0
call echo(cnvtupper(Request_valid->rlist[Seq].user_name))
select into 'NL:'
IntPrsnlID = p.person_id
from PRSNL P
plan p where cnvtupper(p.username) = cnvtupper(Request_valid->rlist[Seq].user_name)
detail
Request_valid->rlist[Seq].Prsnl_id = cnvtint(IntPrsnlID)
request_valid->rlist[Seq].user_name_valid = 1 
with nocounter
 
if(Request_valid->rlist[Seq].user_name_valid = 0)
set CountInvalidUsers = CountInvalidUsers +1
set Result_user_name = concat(Result_user_name,Request_valid->rlist[Seq].user_name,", ")
set Result_user_name_r = concat(Result_user_name_r,trim(cnvtstring(Seq)),", ")
endif
/*------------------------------------------validate Service Resources---------------------------------------*/
set request_valid->rlist[Seq].sr_display_name_valid = 0
select into 'NL:'
IntServiceResourceCd = cv.code_value
from code_value cv
plan cv where cnvtupper(cv.display) = cnvtupper(Request_valid->rlist[Seq].sr_display_name)
and cv.code_set = 221
detail
Request_valid->rlist[Seq].service_resource_cd = cnvtint(IntServiceResourceCd)
Request_valid->rlist[Seq].sr_display_name_valid = 1
 
with nocounter
 
if(Request_valid->rlist[Seq].sr_display_name_valid = 0)
set CountInvalidServiceResource = CountInvalidServiceResource +1
set Result_sr_displayname = concat(Result_sr_displayname,Request_valid->rlist[Seq].sr_display_name,", ")
set Result_sr_displayname_r = concat(Result_sr_displayname_r,trim(cnvtstring(Seq)),", ")
endif
/*------------------------------------Get Invalid Rows--------------------------------------*/
if(Request_valid->rlist[Seq].user_name_valid = 0 or Request_valid->rlist[Seq].sr_display_name_valid = 0 )
set Request_valid->rlist[Seq].rec_valid = 0
set CountInvalidRows = CountInvalidRows + 1
set result8_r = concat (Result8_r,trim(cnvtstring(Seq)),", ")
;call echo (result8_r)
else
set Request_valid->rlist[Seq].rec_valid = 1
endif
 
endfor
 
if(CountInvalidUsers < CountRows)
if(size(Result_user_name)>0)
set Result_user_name_echo = Concat ("(",trim(cnvtstring(CountInvalidUsers)),")", "Invalid Users Names are ",
replace(Result_user_name,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_user_name_r,",","",2))
else
set Result_user_name_echo = "All Users Names valid..."
endif
else
set Result_user_name_echo = "INVALID Users Names !!!"
endif
 
 
if(CountInvalidServiceResource < CountRows)
if(size(Result_sr_displayname)>0)
set Result_sr_displayname_echo = Concat ("(",trim(cnvtstring(CountInvalidServiceResource)),")", "Invalid Service Resources are ",
replace(Result_sr_displayname,",","",2),"|||||||||||||| Invalid rows are ", replace(Result_sr_displayname_r,",","",2))
else
set Result_sr_displayname_echo = "All Service Resources valid..."
endif
else
set Result_sr_displayname_echo = "INVALID Service Resources !!!"
endif
 
SELECT INTO 'NL:'
txt_action_flag = Request_valid->rlist[d.Seq].action_flag,
txt_prsnl_id = cnvtint(Request_valid->rlist[d.Seq].Prsnl_id),
txt_sr_codevalue = cnvtint(Request_valid->rlist[d.Seq].service_resource_cd)
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->rlist,5))
PLAN D where Request_valid->rlist[d.seq].rec_valid = 1
order by  txt_prsnl_id
 
head report
x2=0
head txt_prsnl_id
z=0
head txt_sr_codevalue
x2=x2+1
	if(size(request->Qual,5)<=x2)
	stat = alterlist(request->Qual,x2+5)
	endif
	request->Qual[x2].action_flag = cnvtint(Request_valid->rlist[d.Seq].action_flag)
	request->Qual[x2].Prsnl_id = cnvtint(Request_valid->rlist[d.Seq].Prsnl_id)
	request->Qual[x2].service_resource_cd = cnvtint(Request_valid->rlist[d.Seq].service_resource_cd)
 
foot txt_prsnl_id
z=0
foot txt_sr_codevalue
stat = alterlist(request->Qual,x2)
 
with nocounter
 
call clear(1,1)
call video(i)
 
call text (2,4,Result_user_name_echo)
call text (3,4,"User Name should be found in SELECT p.person_id FROM PRSNL P ")
 
call text (5,4,Result_sr_displayname_echo)
call text (6,4,"Service Resource should be found in SELECT cv.display FROM CODE_VALUE CV WHERE CV.CODE_SET = 221")
 
call text (8,4,result8_echo)
 
if(CountInvalidRows < CountRows)
call text(10,4,"Import valid rows? (Y/N) ")
call accept(10,30, "P;CU", "N" WHERE CURACCEPT IN ("Y","N"))
set choice2 = curaccept
if ((choice2 = "Y"))
 
execute PPR_UPD_SERVRES_ACCESS
endif
endif
 
call clear(1,1)
 call video(i)
 if(CountInvalidRows < CountRows)
 if(choice2 = "Y")
 call text(2, 4, concat("Importing completed ", trim(cnvtstring(CountRows-CountInvalidRows)),
 " out of ", trim(cnvtstring(CountRows))))
 endif
 else
 call text(2, 4, "Importing skipped")
 endif
 call text(4,4,"1)Exit and save the invalid rows into the log file Auto_GL_PPR_log")
 call text(6,4,"2)Exit and show the invalid rows on screen...")
 call text(8,4,"3)EXIT without logging the invalid rows...")
 
 
 call text(17, 4, "Select ")
 call accept(17, 15, "1;", 3 where curaccept in (1, 2, 3))
 set choice3 = curaccept
 
 if (choice3 = 2)
 select into "MINE"
 User_Name					= Trim(Request_valid->rlist[d.seq].user_name),
 User_Name_Valid			= Trim(if(Request_valid->rist[d.seq].user_name_valid = 1) "Yes" else "No" endif),
 Service_Resource_name		= Trim(Request_valid->rlist[d.seq].sr_display_name),
 Service_Resource_Valid		= Trim(if(Request_valid->rlist[d.seq].sr_display_name_valid = 1) "Yes" else "No" endif),
 Record_valid				= Trim(if(Request_valid->rlist[d.seq].rec_valid = 1) "Yes" else "No" endif)
FROM (DUMMYT D WITH SEQ = SIZE(Request_valid->rlist,5))
PLAN D
where Request_valid->rlist[d.seq].rec_valid = 0
with nocounter, version
 
 else if (choice3 = 1)
 select into "Auto_GL_PPR_log.dat"
 User_Name					= Trim(Request_valid->rlist[d.seq].user_name),
 User_Name_Valid			= Trim(if(Request_valid->rist[d.seq].user_name_valid = 1) "Yes" else "No" endif),
 Service_Resource_name		= Trim(Request_valid->rlist[d.seq].sr_display_name),
 Service_Resource_Valid		= Trim(if(Request_valid->rlist[d.seq].sr_display_name_valid = 1) "Yes" else "No" endif),
 Record_valid				= Trim(if(Request_valid->rlist[d.seq].rec_valid = 1) "Yes" else "No" endif)
FROM (DUMMYT D WITH SEQ = SIZE(Request_valid->rlist,5))
PLAN D
where Request_valid->rlist[d.seq].rec_valid = 0
with nocounter, version
 
endif
endif
 
end
go
 