set trace backdoor p30ins go
 
drop program Auto_MIC_ValidPanels go
create program Auto_MIC_ValidPanels
 
/****************Create Record to be sent to program******************************/
record request
 (
     1   qual[*]
         2   service_resource_cd         = f8
         2   catalog_cd                  = f8
         2   source_grouping_cd          = f8
         2   organism_grouping_cd        = f8
         2   method_cd                   = f8
         2   valid_panel_id              = f8
         2   add_flag                    = i2
         2   ext_cnt                     = i4
         2   ext[*]
             3   panel_cd           	= f8
             3   default_panel_ind  	= i2
             3   id_only_ind        	= i2
 )
 
 
 record request_valid
 (
 	1	qual[*]
 		2 service_resource		= vc
		2 service_resource_cd		= f8
		2 service_resource_valid	= i2
 
 		2 orderable			= vc
 		2 catalog_cd			= f8
		2 orderable_valid		= i2
 
		2 source			= vc
		2 source_cd			= f8
		2 source_valid			= i2
 
		2 organism			= vc
		2 organism_cd			= f8
		2 organism_valid		= i2
 
		2 method			= vc
		2 method_cd			= f8
		2 method_valid			= i2
 
		2 panel				= vc
		2 panel_cd			= f8
		2 panel_valid			= i2
 
		2 def_panel_ind			= i2
		2 id_only_ind 			= i2
		2 ind_valid			= i2
 
		2 row_exist			= i2
		2 row_valid			= i2
 
  )
 
 
/*****************Copy the requestin into the request_valid*************************************/
declare Seq1 = I2
set stat = alterlist(request_valid->qual,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set Request_valid->qual[Seq1].def_panel_ind = cnvtint(trim(requestin->List_0[Seq1].def_panel_ind))
set Request_valid->qual[Seq1].method = requestin->List_0[Seq1].method
set Request_valid->qual[Seq1].orderable = requestin->List_0[Seq1].orderable
set Request_valid->qual[Seq1].organism = requestin->List_0[Seq1].organism
set Request_valid->qual[Seq1].panel = requestin->List_0[Seq1].panel
set Request_valid->qual[Seq1].service_resource = requestin->List_0[Seq1].service_resource
set Request_valid->qual[Seq1].source = requestin->List_0[Seq1].source
endfor
 
 
/*********************Loop through second record*************************/
declare Seq2 = I2
 
declare CountRows = I4
declare CountInvalidRows = I4
 
set stat = alterlist(request_valid->qual,size(request_valid->qual,5))
 
set CountRows =0
set CountInvalidRows = 0
 
for (Seq2 = 1 to size(request_valid->qual,5))
set CountRows = CountRows +1
 
/************************************Get invalid default indicators *******************************************/
set request_valid->qual[Seq2].ind_valid = 0
if(request_valid->qual[Seq2].def_panel_ind in(0,1))
set request_valid->qual[Seq2].ind_valid = 1
endif
 
 
/************************************Get invalid methods*******************************/
set request_valid->qual[Seq2].method_valid = 0
select into 'NL:'
TxtMethod = cv.code_value
from code_value cv
plan cv where cv.code_set = 65
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].method)
detail
request_valid->qual[Seq2].method_valid = 1
request_valid->qual[Seq2].method_cd = TxtMethod
with nocounter
 
 
/************************************Get invalid orderables*******************************/
if (cnvtupper(request_valid->qual[Seq2].orderable) = "ALL")
set request_valid->qual[Seq2].orderable_valid = 1
set request_valid->qual[Seq2].catalog_cd = 0
else
set request_valid->qual[Seq2].orderable_valid = 0
select into 'NL:'
Txtorderable = oc.catalog_cd
from order_catalog oc
plan oc where cnvtupper(oc.primary_mnemonic) = cnvtupper(request_valid->qual[Seq2].orderable)
and oc.activity_type_cd = 696
detail
request_valid->qual[Seq2].orderable_valid = 1
request_valid->qual[Seq2].catalog_cd = Txtorderable
with nocounter
endif
 
/************************************Get invalid organisms*******************************/
set request_valid->qual[Seq2].organism_valid = 0
select into 'NL:'
TxtOrganism = cv.code_value
from code_value cv
plan cv where cv.code_set = 1021
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].organism)
detail
request_valid->qual[Seq2].organism_valid = 1
request_valid->qual[Seq2].organism_cd = TxtOrganism
with nocounter
 
 
/************************************Get invalid panels*******************************/
set request_valid->qual[Seq2].panel_valid = 0
select into 'NL:'
TxtPanel = cv.code_value
from code_value cv
plan cv where cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].panel)
and cv.code_set = 1010 or (cv.code_set = 132038 and cv.cdf_meaning = "11")
detail
request_valid->qual[Seq2].panel_valid = 1
if(cv.code_set != 1010)
request_valid->qual[Seq2].id_only_ind = 1
endif
request_valid->qual[Seq2].panel_cd = TxtPanel
with nocounter
 
 
/************************************Get invalid service resources*******************************/
if (cnvtupper(request_valid->qual[Seq2].service_resource) = "ALL")
set request_valid->qual[Seq2].service_resource_valid = 1
set request_valid->qual[Seq2].service_resource_cd = 0
else
set request_valid->qual[Seq2].service_resource_valid = 0
select into 'NL:'
TxtSR = cv.code_value
from code_value cv
plan cv where cv.code_set = 221
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].service_resource)
detail
request_valid->qual[Seq2].service_resource_valid = 1
request_valid->qual[Seq2].service_resource_cd = TxtSR
with nocounter
endif
 
 
/************************************Get invalid Sources*******************************/
if (cnvtupper(request_valid->qual[Seq2].source) = "ALL")
set request_valid->qual[Seq2].source_valid = 1
set request_valid->qual[Seq2].source_cd = 0
else
set request_valid->qual[Seq2].source_valid = 0
select into 'NL:'
TxtSource = cv.code_value
from code_value cv
plan cv where cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].source) 
and cv.code_set IN (1150, 1151, 2052) 
detail
request_valid->qual[Seq2].source_valid = 1
request_valid->qual[Seq2].source_cd = TxtSource
with nocounter
endif
 
/************************************Get existing records*******************************/
set request_valid->qual[Seq2].row_exist = 0
select into 'NL:'
*
from MIC_VALID_SUS_PANEL m
plan m where m.catalog_cd = Request_valid->qual[Seq2].catalog_cd
and m.method_cd = Request_valid->qual[Seq2].method_cd
and m.organism_grouping_cd = Request_valid->qual[Seq2].organism_cd
and m.service_resource_cd = Request_valid->qual[Seq2].service_resource_cd
and m.source_grouping_cd = Request_valid->qual[Seq2].source_cd
detail
request_valid->qual[Seq2].row_exist = 1
with nocounter

 
 
if(Request_valid->qual[Seq2].ind_valid = 0 or Request_valid->qual[Seq2].method_valid = 0
or Request_valid->qual[Seq2].orderable_valid = 0 or Request_valid->qual[Seq2].organism_valid = 0
or Request_valid->qual[Seq2].panel_valid = 0 or Request_valid->qual[Seq2].service_resource_valid = 0
or Request_valid->qual[Seq2].source_valid = 0 or request_valid->qual[Seq2].row_exist = 1)
set Request_valid->qual[Seq2].row_valid = 0
set CountInvalidRows = CountInvalidRows+1
else
set Request_valid->qual[Seq2].row_valid = 1
endif
endfor
 
;call echorecord (request_valid)
 
 
if (CountInvalidRows=0)
 
SELECT distinct INTO 'NL:'
txt_catalog_cd = Request_valid->qual[d.seq].catalog_cd,
txt_def_panel_ind = Request_valid->qual[d.seq].def_panel_ind,
txt_method_cd = Request_valid->qual[d.seq].method_cd,
txt_organism_cd = Request_valid->qual[d.seq].organism_cd,
txt_panel_cd = Request_valid->qual[d.seq].panel_cd,
txt_service_resource_cd = Request_valid->qual[d.seq].service_resource_cd,
txt_source_cd = Request_valid->qual[d.seq].source_cd
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5))
 
PLAN D where Request_valid->qual[d.seq].row_valid = 1
 
order by txt_service_resource_cd, txt_catalog_cd, txt_source_cd, txt_organism_cd, txt_method_cd, txt_panel_cd
 
head report
x2=0
 
head txt_service_resource_cd
dummy = 0
head txt_catalog_cd
dummy = 0
head txt_source_cd
dummy = 0
head txt_organism_cd
dummy = 0
head txt_method_cd
x2 = x2+1
x3 = 0
if(size(request->QUAL,5)<=x2)
stat = alterlist(request->qual,x2+5)
endif
		request->QUAL[x2].add_flag = 1
		request->QUAL[x2].catalog_cd = request_valid->qual[d.seq].catalog_cd
		request->QUAL[x2].method_cd = request_valid->qual[d.seq].method_cd
		request->QUAL[x2].organism_grouping_cd = request_valid->qual[d.seq].organism_cd
		request->QUAL[x2].service_resource_cd = request_valid->qual[d.seq].service_resource_cd
		request->QUAL[x2].source_grouping_cd = request_valid->qual[d.seq].source_cd
 
	head txt_panel_cd
	x3 = x3+1
	if(size(request->QUAL[x2].ext,5)<=x3)
	stat = alterlist(request->QUAL[x2].ext,x3+5)
	endif
		request->QUAL[x2].ext[x3].panel_cd = request_valid->qual[d.seq].panel_cd
		request->QUAL[x2].ext[x3].default_panel_ind = request_valid->qual[d.seq].def_panel_ind
		request->QUAL[x2].ext[x3].id_only_ind = request_valid->qual[d.seq].id_only_ind
 
 
	foot txt_panel_cd
	stat = alterlist(request->QUAL[x2].ext,x3)
 		request->QUAL[x2].ext_cnt = x3
foot txt_method_cd
stat = alterlist(request->qual,x2)
foot txt_organism_cd
dummy=1
foot txt_source_cd
dummy=1
foot txt_catalog_cd
dummy=1
foot txt_service_resource_cd
dummy=1
with nocounter
 
;call echorecord(request)
execute MIC_ADD_CRITERIA_PNLS
 
 
call echo("///////////////////////////////////////////////////////////////////////////////////////")
call echo("/////////////////////////////////////Importing Done////////////////////////////////////")
call echo("///////////////////////////////////////////////////////////////////////////////////////")
else
 
call clear(1,1)
call video(i)
call text(2, 4, "Importing have stopped because some of the entities in the csv file is invalid")
call text(3, 4, "kindly check the log file Auto_MIC_ValidPanels_log")
 
select into "Auto_MIC_ValidPanels_log"
service_resource 			= trim(request_valid->qual[d.seq].service_resource)
,service_resource_valid	  			= if(request_valid->qual[d.seq].service_resource_valid) "Yes" else "No" endif
,orderable1 			= request_valid->qual[d.seq].orderable
,orderable_valid	  			= if(request_valid->qual[d.seq].orderable_valid) "Yes" else "No" endif
,source 			= request_valid->qual[d.seq].source
,source_valid	  			= if(request_valid->qual[d.seq].source_valid) "Yes" else "No" endif
,organism 			= request_valid->qual[d.seq].organism
,organism_valid	  			= if(request_valid->qual[d.seq].organism_valid) "Yes" else "No" endif
,method 			= request_valid->qual[d.seq].method
,method_valid	  			= if(request_valid->qual[d.seq].method_valid) "Yes" else "No" endif
,panel 			= request_valid->qual[d.seq].panel
,panel_valid	  			= if(request_valid->qual[d.seq].panel_valid) "Yes" else "No" endif
,def_panel_ind 			= request_valid->qual[d.seq].def_panel_ind
,ind_valid	  			= if(request_valid->qual[d.seq].ind_valid) "YES" else "NO" endif
,row_exist	  			= if(request_valid->qual[d.seq].row_exist) "Yes" else "No" endif
,row_valid	  			= if(request_valid->qual[d.seq].row_valid) "Yes" else "No" endif
 
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->qual,5))
PLAN D
with nocounter, version
endif
 
end
go
 
 