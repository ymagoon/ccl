set trace backdoor p30ins go
 
drop program Auto_MIC_AbnormalSus go
create program Auto_MIC_AbnormalSus
 
/****************Create Record to be sent to program******************************/
record request
 (
     1   qual[*]
     	 2   service_resource_cd        = f8
         2   catalog_cd                 = f8
         2   source_cd              	= f8
         2   organism_cd            	= f8
         2   sus_method_cd              = f8
         2   sus_detail_cd            	= f8
         2   abn_sus_id                	= f8
         2   add_flag            		= i2
      	 2   ext_cnt                    = i4
         2   ext[*]
             3   medication_cd          = f8
             3   default_result_cd      = f8
             3   low_value              = i4
             3   high_value             = i4
 )
 
 
 
 
 record request_valid
 (
 	1 qual[*]
 		2 service_resource			= vc
		2 service_resource_cd		= f8
		2 service_resource_valid	= i2
 
		2 Procedure					= vc
		2 catalog_cd                = f8
		2 Procedure_valid			= i2
 
		2 source					= vc
		2 source_cd					= f8
		2 source_valid				= i2
 
		2 organism					= vc
		2 organism_cd				= f8
		2 organism_valid			= i2
 
		2 sus_method				= vc
		2 sus_method_cd				= f8
		2 sus_method_valid			= i2
 
		2 sus_detail				= vc
		2 sus_detail_cd				= f8
		2 sus_detail_valid			= i2
 
		2 Antibiotic				= vc
		2 Antibiotic_cd				= f8
		2 Antibiotic_valid			= i2
 
		2 Result					= vc
		2 Result_cd					= f8
		2 Result_valid				= i2
 
		2 row_exist					= i2
		2 row_valid					= i2
   )
 
 
/*****************Copy the requestin into the request_valid*************************************/
declare Seq1 = I2
set stat = alterlist(request_valid->qual,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set Request_valid->qual[Seq1].service_resource = requestin->List_0[Seq1].service_resource
set Request_valid->qual[Seq1].procedure = requestin->List_0[Seq1].procedure
set Request_valid->qual[Seq1].source = requestin->List_0[Seq1].source
set Request_valid->qual[Seq1].organism = requestin->List_0[Seq1].organism
set Request_valid->qual[Seq1].sus_method = requestin->List_0[Seq1].sus_method
set Request_valid->qual[Seq1].sus_detail = requestin->List_0[Seq1].sus_detail
set Request_valid->qual[Seq1].Antibiotic = requestin->List_0[Seq1].Antibiotic
set Request_valid->qual[Seq1].Result = requestin->List_0[Seq1].Result
 
endfor
 
 
/*********************Loop through second record*************************/
declare Seq2 = I2
 
declare CountRows = I4
declare CountInvalidRows = I4
 
set stat = alterlist(request_valid->qual,size(request_valid->qual,5))
 
set CountRows =0
set CountInvalidRows = 0
 
for (Seq2 = 1 to size(request_valid->qual,5))
set CountRows = CountRows +1
 
 
/************************************Get invalid service resources*******************************/
if (cnvtupper(request_valid->qual[Seq2].service_resource) = "ALL")
set request_valid->qual[Seq2].service_resource_valid = 1
set request_valid->qual[Seq2].service_resource_cd = 0
else
set request_valid->qual[Seq2].service_resource_valid = 0
select into 'NL:'
TxtSR = cv.code_value
from code_value cv
plan cv where cv.code_set = 221
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].service_resource)
detail
request_valid->qual[Seq2].service_resource_valid = 1
request_valid->qual[Seq2].service_resource_cd = TxtSR
with nocounter
endif
 
/************************************Get invalid procedures*******************************/
if (cnvtupper(request_valid->qual[Seq2].Procedure) = "ALL")
set request_valid->qual[Seq2].Procedure_valid = 1
set request_valid->qual[Seq2].catalog_cd = 0
else
set request_valid->qual[Seq2].Procedure_valid = 0
select into 'NL:'
Txtprocedure = oc.catalog_cd
from order_catalog oc
plan oc where cnvtupper(oc.primary_mnemonic) = cnvtupper(request_valid->qual[Seq2].Procedure)
and oc.activity_type_cd = 696
detail
request_valid->qual[Seq2].Procedure_valid = 1
request_valid->qual[Seq2].catalog_cd = Txtprocedure
with nocounter
endif
 
/************************************Get invalid Sources*******************************/
if (cnvtupper(request_valid->qual[Seq2].source) = "ALL")
set request_valid->qual[Seq2].source_valid = 1
set request_valid->qual[Seq2].source_cd = 0
else
set request_valid->qual[Seq2].source_valid = 0
select into 'NL:'
TxtSource = cv.code_value
from code_value cv
plan cv where cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].source)
and cv.code_set IN (1150, 1151, 2052)
detail
request_valid->qual[Seq2].source_valid = 1
request_valid->qual[Seq2].source_cd = TxtSource
with nocounter
endif
 
/************************************Get invalid organisms*******************************/
set request_valid->qual[Seq2].organism_valid = 0
select into 'NL:'
TxtOrganism = cv.code_value
from code_value cv
plan cv where cv.code_set = 1021
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].organism)
detail
request_valid->qual[Seq2].organism_valid = 1
request_valid->qual[Seq2].organism_cd = TxtOrganism
with nocounter
 
/************************************Get invalid methods*******************************/
set request_valid->qual[Seq2].sus_method_valid = 0
select into 'NL:'
TxtMethod = cv.code_value
from code_value cv
plan cv where cv.code_set = 65
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].sus_method)
detail
request_valid->qual[Seq2].sus_method_valid = 1
request_valid->qual[Seq2].sus_method_cd = TxtMethod
with nocounter
 
/************************************Get invalid sus detail*******************************/
set request_valid->qual[Seq2].sus_detail_valid = 0
select into 'NL:'
TxtSusDetail = cv.code_value
from code_value cv, mic_detail_task m
plan cv where cv.code_set = 1004 and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].sus_detail)
join m where m.task_component_cd = cv.code_value and m.task_type_flag in (14,7)
detail
request_valid->qual[Seq2].sus_detail_valid = 1
request_valid->qual[Seq2].sus_detail_cd = TxtSusDetail
with nocounter
 
 
/************************************Get invalid antibiotics*******************************/
set request_valid->qual[Seq2].antibiotic_valid = 0
select into 'NL:'
TxtAB = cv.code_value
from code_value cv
plan cv where cv.code_set = 1011
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].antibiotic)
detail
request_valid->qual[Seq2].antibiotic_valid = 1
request_valid->qual[Seq2].antibiotic_cd = TxtAB
with nocounter
 
/************************************Get invalid results*******************************/
set request_valid->qual[Seq2].result_valid = 0
select into 'NL:'
TxtResult = cv.code_value
from code_value cv
plan cv where cv.code_set in (1025,64)
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].result)
detail
request_valid->qual[Seq2].result_valid = 1
request_valid->qual[Seq2].result_cd = TxtResult
with nocounter
 
 
/************************************Get existing records*******************************/
set request_valid->qual[Seq2].row_exist = 0
select into 'NL:'
*
from MIC_ABN_SUS_RESULT m
plan m where m.organism_cd = Request_valid->qual[Seq2].organism_cd
and m.service_resource_cd = Request_valid->qual[Seq2].service_resource_cd
and m.source_grouping_cd = Request_valid->qual[Seq2].source_cd
and m.catalog_cd = Request_valid->qual[Seq2].catalog_cd
and m.sus_detail_cd = Request_valid->qual[Seq2].sus_detail_cd
and m.sus_method_cd = Request_valid->qual[Seq2].sus_method_cd
 
detail
request_valid->qual[Seq2].row_exist = 1
with nocounter
 
 
 
if(Request_valid->qual[Seq2].organism_valid = 0 or Request_valid->qual[Seq2].service_resource_valid = 0
or Request_valid->qual[Seq2].source_valid = 0 or request_valid->qual[Seq2].row_exist = 1
or Request_valid->qual[Seq2].sus_detail_valid = 0 or Request_valid->qual[Seq2].sus_method_valid = 0
or Request_valid->qual[Seq2].Antibiotic_valid = 0 or request_valid->qual[Seq2].Procedure_valid = 0
or Request_valid->qual[Seq2].Result_valid = 0 )
set Request_valid->qual[Seq2].row_valid = 0
set CountInvalidRows = CountInvalidRows+1
else
set Request_valid->qual[Seq2].row_valid = 1
endif
endfor
 
;call echorecord (request_valid)
 
 
if (CountInvalidRows=0)
 
 
SELECT INTO 'NL:'
txt_service_resource_cd = Request_valid->qual[d.seq].service_resource_cd,
txt_catalog_cd = Request_valid->qual[d.seq].catalog_cd,
txt_source_cd = Request_valid->qual[d.seq].source_cd,
txt_organism_cd = Request_valid->qual[d.seq].organism_cd,
txt_sus_method_cd = Request_valid->qual[d.seq].sus_method_cd,
txt_sus_detail_cd = Request_valid->qual[d.seq].sus_detail_cd,
txt_Antibiotic_cd = Request_valid->qual[d.seq].Antibiotic_cd,
txt_Result_cd = Request_valid->qual[d.seq].Result_cd
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5))
 
PLAN D where Request_valid->qual[d.seq].row_valid = 1
 
order by txt_service_resource_cd, txt_catalog_cd, txt_source_cd, txt_organism_cd, txt_sus_method_cd, txt_sus_detail_cd
 
head report
x2=0
 
head txt_service_resource_cd
dummy = 0
head txt_catalog_cd
dummy = 0
head txt_source_cd
dummy = 0
head txt_organism_cd
dummy = 0
head txt_sus_method_cd
dummy = 0
head txt_sus_detail_cd
x2 = x2+1
x3=0
if(size(request->QUAL,5)<=x2)
stat = alterlist(request->qual,x2+5)
endif
request->QUAL[x2].abn_sus_id = 0
request->QUAL[x2].organism_cd = request_valid->qual[d.seq].organism_cd
request->QUAL[x2].service_resource_cd = request_valid->qual[d.seq].service_resource_cd
request->QUAL[x2].source_cd = request_valid->qual[d.seq].source_cd
request->QUAL[x2].catalog_cd = request_valid->qual[d.seq].catalog_cd
request->QUAL[x2].sus_method_cd = request_valid->qual[d.seq].sus_method_cd
request->QUAL[x2].sus_detail_cd = request_valid->qual[d.seq].sus_detail_cd
request->QUAL[x2].add_flag = 1
 
	head txt_Antibiotic_cd
	dummy = 0
	head txt_Result_cd
	x3 = x3+1
	if(size(request->QUAL[x2].ext,5)<=x3)
	stat = alterlist(request->QUAL[x2].ext,x3+5)
	endif
		request->QUAL[x2].ext[x3].medication_cd = request_valid->qual[d.seq].Antibiotic_cd
		request->QUAL[x2].ext[x3].default_result_cd = request_valid->qual[d.seq].Result_cd
	foot txt_Result_cd
	stat = alterlist(request->QUAL[x2].ext,x3)
	request->QUAL[x2].ext_cnt = x3
	foot txt_Antibiotic_cd
	dummy = 1
 
foot txt_sus_detail_cd
stat = alterlist(request->QUAL,x2)
foot txt_sus_method_cd
dummy=1
foot txt_organism_cd
dummy=1
foot txt_source_cd
dummy=1
foot txt_catalog_cd
dummy=1
foot txt_service_resource_cd
dummy=1
with nocounter
;call echorecord (request)
execute MIC_ADD_CRITERIA_ABN_SUS
 
 
 
call echo("///////////////////////////////////////////////////////////////////////////////////////")
call echo("/////////////////////////////////////Importing Done////////////////////////////////////")
call echo("///////////////////////////////////////////////////////////////////////////////////////")
else
 
call clear(1,1)
call video(i)
call text(2, 4, "Importing have stopped because some of the entities in the csv file is invalid")
call text(3, 4, "kindly check the log file Auto_MIC_AbnormalSus_log")
 
select into "Auto_MIC_AbnormalSus_log"
service_resource 				= trim(request_valid->qual[d.seq].service_resource)
,service_resource_valid	  		= if(request_valid->qual[d.seq].service_resource_valid) "Yes" else "No" endif
,Procedure 						= request_valid->qual[d.seq].Procedure
,Procedure_valid	  			= if(request_valid->qual[d.seq].Procedure_valid) "Yes" else "No" endif
,source 						= request_valid->qual[d.seq].source
,source_valid	  				= if(request_valid->qual[d.seq].source_valid) "Yes" else "No" endif
,organism 						= request_valid->qual[d.seq].organism
,organism_valid	  				= if(request_valid->qual[d.seq].organism_valid) "Yes" else "No" endif
,sus_method 					= request_valid->qual[d.seq].sus_method
,sus_method_valid	  			= if(request_valid->qual[d.seq].sus_method_valid) "Yes" else "No" endif
,sus_detail 					= request_valid->qual[d.seq].sus_detail
,sus_detail_valid	  			= if(request_valid->qual[d.seq].sus_detail_valid) "Yes" else "No" endif
,Antibiotic 					= request_valid->qual[d.seq].Antibiotic
,Antibiotic_valid	  			= if(request_valid->qual[d.seq].Antibiotic_valid) "Yes" else "No" endif
,Result 						= request_valid->qual[d.seq].Result
,Result_valid	 	  			= if(request_valid->qual[d.seq].Result_valid) "Yes" else "No" endif
,row_exist	  					= if(request_valid->qual[d.seq].row_exist) "Yes" else "No" endif
,row_valid	  					= if(request_valid->qual[d.seq].row_valid) "Yes" else "No" endif
 
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->qual,5))
PLAN D
with nocounter, version
endif
 
end
go
 
 