set trace backdoor p30ins go
 
drop program Auto_GL_Coll go
create program Auto_GL_Coll
 
record request
 (  1 pst_qual [*]
      2 catalog_cd = f8
      2 specimen_type_cd = f8
      2 accession_class_cd = f8
      2 default_collection_method_cd = f8
    1 qual [*]
         2 catalog_cd   = f8
         2 specimen_type_cd = f8
         2 accession_class_cd = f8
         2 default_collection_method_cd = f8
         2 sequence = f8
         2 species_cd = f8
         2 age_from_minutes = i4
         2 age_to_minutes = i4
         2 coll_priority_cd = f8
         2 spec_cntnr_cd = f8
         2 spec_hndl_cd = f8
         2 min_vol = f8
         2 min_vol_units = c15
         2 aliquot_ind  = i2
         2 optional_ind = i2
         2 aliquot_seq = f8
         2 aliquot_route_sequence = i4
         2 coll_class_cd = f8
         2 service_resource_cd = f8
         2 additional_labels = i2
         2 array_index = i2                   ;004
 )
 
 
record request_valid
(
1 rlist[*]
2 Orderable = vc
2 OrderableValid	= i2
2 Catalog_cd	= f8
 
2 SpecimenType = vc
2 SpecimenTypeValid = i2
2 specimen_type_cd = f8
 
2 AccessionClass	= vc
2 AccessionClassValid	= i2
2 accession_class_cd	= f8
 
2 DefaultCollectionMethod = vc
2 DefaultCollectionMethodValid = i2
2 default_collection_method_cd = f8
 
2 Container = vc
2 ContainerValid	= i2
2 spec_cntnr_cd	= f8
 
2 SpecialHandling	= vc
2 SpecialHandlingValid	= i2
2 spec_hndl_cd	= f8
 
2 MinVol	= f8
 
2 CollClass 	= vc
2 CollClassValid 	= i2
2 coll_class_cd 	= f8
 
2 ServiceResource	= vc
2 ServiceResourceValid	= i2
2 service_resource_cd	= f8
 
2 from_age 				= i4
 
2 from_age_unit				= vc
2 From_age_unit_valid			= i2
 
2 to_age 				= i4

2 to_age_unit				= vc
2 to_age_unit_valid			= i2
 
2 rec_valid = i2
2 procedure_specimen_Type_Exist = i2
)
 
declare Seq1 = I2
set stat = alterlist(request_valid->rlist,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set Request_valid->rlist[Seq1].Orderable = requestin->List_0[Seq1].Orderable
set Request_valid->rlist[Seq1].SpecimenType  = requestin->List_0[Seq1].SpecimenType
set Request_valid->rlist[Seq1].AccessionClass = requestin->List_0[Seq1].AccessionClass
set Request_valid->rlist[Seq1].DefaultCollectionMethod = requestin->List_0

[Seq1].DefaultCollectionMethod
set Request_valid->rlist[Seq1].Container = requestin->List_0[Seq1].Container
set Request_valid->rlist[Seq1].SpecialHandling = requestin->List_0[Seq1].SpecialHandling
set Request_valid->rlist[Seq1].MinVol = cnvtreal(requestin->List_0[Seq1].MinVol)
set Request_valid->rlist[Seq1].CollClass = requestin->List_0[Seq1].CollClass
set Request_valid->rlist[Seq1].ServiceResource = requestin->List_0[Seq1].ServiceResource
set Request_valid->rlist[Seq1].from_age = cnvtint(requestin->List_0[Seq1].from_age)
set Request_valid->rlist[Seq1].from_age_unit = requestin->List_0[Seq1].from_age_unit
set Request_valid->rlist[Seq1].to_age = cnvtint(requestin->List_0[Seq1].to_age)
set Request_valid->rlist[Seq1].to_age_unit = requestin->List_0[Seq1].to_age_unit
endfor
 
 
declare Seq2 = I2
 
declare Result1 = vc
declare Result1_r = vc
declare Result1_echo = vc
 
declare Result2 = vc
declare Result2_r = vc
declare Result2_echo = vc
 
declare Result3 = vc
declare Result3_r = vc
declare Result3_echo = vc
 
declare Result4 = vc
declare Result4_r = vc
declare Result4_echo = vc
 
declare Result5 = vc
declare Result5_r = vc
declare Result5_echo = vc
 
declare Result6 = vc
declare Result6_r = vc
declare Result6_echo = vc
 
declare Result7 = vc
declare Result7_r = vc
declare Result7_echo = vc
 
declare Result8 = vc
declare Result8_r = vc
declare Result8_echo = vc
 
declare Result9 = vc
declare Result9_r = vc
declare Result9_echo = vc
 
declare Result10 = vc
declare Result10_r = vc
declare Result10_echo = vc
 
declare Result11_r = vc
declare Result11_echo = vc

declare Result12 = vc
declare Result12_r = vc
declare Result12_echo = vc
 
declare CountRows = I4
declare CountInvalidOrderable = I4
declare CountInvalidSpecimenType = I4
declare CountInvalidAccessionClass = i4
declare CountInvalidDefaultCollectionMethod = i4
declare CountInvalidContainer = i4
declare CountInvalidSpecialHandling = i4
declare CountInvalidMinVol = i4
declare CountInvalidCollClass = i4
declare CountInvalidServiceResource = i4
declare CountInvalidAgeUnit = i4
declare CountInvalidRows = i4
 
/************************************Loop through request_valid***********************/
set stat = alterlist(request_valid->rlist,size(request_valid->rlist,5))
 
set CountRows =0
set CountInvalidOrderable = 0
set CountInvalidSpecimenType = 0
set CountInvalidAccessionClass = 0
set CountInvalidDefaultCollectionMethod = 0
set CountInvalidContainer = 0
set CountInvalidSpecialHandling = 0
set CountInvalidMinVol = 0
set CountInvalidCollClass = 0
set CountInvalidServiceResource = 0
set CountInvalidAgeUnit = 0
set CountInvalidRows = 0
 
for (Seq2 = 1 to size(request_valid->rlist,5))
set CountRows = CountRows +1
 
/************************************Get Invalid Orderables***********************/
set Request_valid->rlist[Seq2].OrderableValid = 0
select into 'NL:'
catalog_cd = oc.catalog_cd
from order_catalog oc
plan oc where cnvtupper(oc.primary_mnemonic) = cnvtupper(request_valid->rlist

[Seq2].Orderable)
detail
Request_valid->rlist[Seq2].OrderableValid = 1
Request_valid->rlist[Seq2].Catalog_cd = Catalog_cd
with nocounter
 
if(request_valid->rlist[Seq2].OrderableValid = 0)
set CountInvalidOrderable = CountInvalidOrderable +1
set Result1 = concat(Result1,request_valid->rlist[Seq2].Orderable,", ")
set Result1_r = concat (Result1_r,trim(cnvtstring(Seq2)),", ")
endif
 
 
/************************************Get Invalid Specimen Type***********************/
set Request_valid->rlist[Seq2].SpecimenTypeValid = 0
select into 'NL:'
Specimen_Type_Cd = cv.code_value
from code_value cv
plan cv where cv.code_set = 2052
and cnvtupper(cv.display) = cnvtupper(request_valid->rlist[Seq2].SpecimenType)
detail
Request_valid->rlist[Seq2].SpecimenTypeValid = 1
Request_valid->rlist[Seq2].specimen_type_cd = Specimen_Type_Cd
with nocounter
 
if(request_valid->rlist[Seq2].SpecimenTypeValid = 0)
set CountInvalidSpecimenType = CountInvalidSpecimenType +1
set Result2 = concat(Result2,request_valid->rlist[Seq2].SpecimenType,", ")
set Result2_r = concat (Result2_r,trim(cnvtstring(Seq2)),", ")
endif
 
 
/************************************Get invalid Accession Class*******************************************/
set request_valid->rlist[Seq2].AccessionClassValid = 0
select into 'NL:'
Accession_Class_Cd = cv.code_value
from code_value cv
plan cv where cv.code_set = 2056
and cnvtupper(cv.display) = cnvtupper(request_valid->rlist[Seq2].AccessionClass)
detail
request_valid->rlist[Seq2].AccessionClassValid = 1
Request_valid->rlist[Seq2].accession_class_cd = Accession_Class_Cd
with nocounter
 
if(request_valid->rlist[Seq2].AccessionClassValid = 0)
set CountInvalidAccessionClass = CountInvalidAccessionClass +1
set Result3 = concat(Result3,request_valid->rlist[Seq2].AccessionClass,", ")
set Result3_r = concat (Result3_r,trim(cnvtstring(Seq2)),", ")
endif
 
/************************************Get invalid Default Collection Method********************************/
set request_valid->rlist[Seq2].DefaultCollectionMethodValid = 0
select into 'NL:'
Default_Coll_Method_cd = cv.code_value
from code_value cv
plan cv where cv.code_set = 2058
and cnvtupper(cv.display) = cnvtupper(request_valid->rlist[Seq2].DefaultCollectionMethod)
detail
request_valid->rlist[Seq2].DefaultCollectionMethodValid = 1
Request_valid->rlist[Seq2].default_collection_method_cd = Default_Coll_Method_cd
with nocounter
 
If(request_valid->rlist[Seq2].DefaultCollectionMethodValid = 0)
set CountInvalidDefaultCollectionMethod = CountInvalidDefaultCollectionMethod +1
set Result4 = concat(Result4,request_valid->rlist[Seq2].DefaultCollectionMethod,", ")
set Result4_r = concat (Result4_r,trim(cnvtstring(Seq2)),", ")
endif
 
/************************************Get Invalid Container *********************************************/
set Request_valid->rlist[Seq2].ContainerValid = 0
select into 'NL:'
Container_cd = cv.code_value
from code_value cv where cv.code_set = 2051
and cnvtupper(cv.display) = cnvtupper(request_valid->rlist[Seq2].Container)
detail
Request_valid->rlist[Seq2].ContainerValid = 1
Request_valid->rlist[Seq2].spec_cntnr_cd = Container_cd
with nocounter
 
if(request_valid->rlist[Seq2].ContainerValid = 0)
set CountInvalidContainer = CountInvalidContainer +1
set Result5 = concat(Result5,request_valid->rlist[Seq2].Container,", ")
set Result5_r = concat (Result5_r,trim(cnvtstring(Seq2)),", ")
endif
 
/************************************Get invalid Special Handling*******************************************/
set Request_valid->rlist[Seq2].SpecialHandlingValid = 0
select into 'NL:'
Special_Handling_cd = cv.code_value
from code_value cv where cv.code_set = 230
and cnvtupper(cv.display) = cnvtupper(request_valid->rlist[Seq2].SpecialHandling)
detail
Request_valid->rlist[Seq2].SpecialHandlingValid = 1
Request_valid->rlist[Seq2].spec_hndl_cd = Special_Handling_cd
with nocounter
if(request_valid->rlist[Seq2].SpecialHandling = "")
set Request_valid->rlist[Seq2].SpecialHandlingValid = 1
endif
if(request_valid->rlist[Seq2].SpecialHandlingValid = 0)
set CountInvalidSpecialHandling = CountInvalidSpecialHandling +1
set Result6 = concat(Result6,request_valid->rlist[Seq2].SpecialHandling,", ")
set Result6_r = concat (Result6_r,trim(cnvtstring(Seq2)),", ")
endif

/***********************************************Get Invalid Unit of Age***********************************************/
set Request_valid->rlist[Seq2].From_age_unit_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 340
and cnvtupper(cv.display) = cnvtupper(request_valid->rlist[Seq2].from_age_unit)
detail
Request_valid->rlist[Seq2].From_age_unit_valid = 1
with nocounter
 
set Request_valid->rlist[Seq2].to_age_unit_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 340
and cnvtupper(cv.display) = cnvtupper(request_valid->rlist[Seq2].to_age_unit)
detail
Request_valid->rlist[Seq2].to_age_unit_valid = 1
with nocounter 


if(request_valid->rlist[Seq2].From_age_unit_valid = 0 or Request_valid->rlist[Seq2].to_age_unit_valid = 0 )
set CountInvalidAgeUnit = CountInvalidAgeUnit +1
set Result12 = concat(Result12,request_valid->rlist[Seq2].from_age_unit,"/",request_valid->rlist[Seq2].to_age_unit,", ")
set Result12_r = concat (Result12_r,trim(cnvtstring(Seq2)),", ")
endif

 
/************************************Get invalid Collection Class*******************************************/
set Request_valid->rlist[Seq2].CollClassValid = 0
select into 'NL:'
Coll_Class_cd = cv.code_value
from code_value cv where cv.code_set = 231
and cnvtupper(cv.display) = cnvtupper(request_valid->rlist[Seq2].CollClass)
detail
Request_valid->rlist[Seq2].CollClassValid = 1
Request_valid->rlist[Seq2].coll_class_cd = Coll_Class_cd
with nocounter
 
if(request_valid->rlist[Seq2].CollClassValid = 0)
set CountInvalidCollClass = CountInvalidCollClass +1
set Result8 = concat(Result8,request_valid->rlist[Seq2].CollClass,", ")
set Result8_r = concat (Result8_r,trim(cnvtstring(Seq2)),", ")
endif
 
/************************************Get invalid Service Resource*******************************************/
if (cnvtupper(request_valid->rlist[Seq2].ServiceResource) = "ALL")
set request_valid->rlist[Seq2].ServiceResourceValid = 1
set request_valid->rlist[Seq2].service_resource_cd = 0
else
set Request_valid->rlist[Seq2].ServiceResourceValid = 0
select into 'NL:'
Service_Resource_cd = orl.service_resource_cd
from orc_resource_list orl, code_value cv
plan orl where orl.catalog_cd = request_valid->rlist[Seq2].Catalog_cd
join cv where cv.code_value = orl.service_resource_cd and cv.code_set = 221
and cnvtupper(cv.display) = cnvtupper(request_valid->rlist[Seq2].ServiceResource)
;and cv.code_value not in (select distinct orl2.service_resource_cd from orc_resource_list orl2)
detail
Request_valid->rlist[Seq2].ServiceResourceValid = 1
Request_valid->rlist[Seq2].service_resource_cd = Service_Resource_cd
with nocounter
endif
 
if(request_valid->rlist[Seq2].ServiceResourceValid = 0)
set CountInvalidServiceResource = CountInvalidServiceResource +1
set Result9 = concat(Result9,request_valid->rlist[Seq2].ServiceResource,", ")
set Result9_r = concat (Result9_r,trim(cnvtstring(Seq2)),", ")
endif
 
/**********************************Get existing pst*********************************************/
set request_valid->rlist[Seq2].procedure_specimen_Type_Exist = 0
select into 'NL:' pst.accession_class_cd
from procedure_specimen_type pst
where pst.accession_class_cd = request_valid->rlist[Seq2].accession_class_cd
and pst.catalog_cd = request_valid->rlist[Seq2].Catalog_cd
and pst.default_collection_method_cd = request_valid->rlist

[Seq2].default_collection_method_cd
and pst.specimen_type_cd = request_valid->rlist[Seq2].specimen_type_cd
detail
request_valid->rlist[Seq2].procedure_specimen_Type_Exist = 1
with nocounter
 
/************************************Get invalid rows*******************************************/
if(Request_valid->rlist[Seq2].AccessionClassValid = 0 or Request_valid->rlist[Seq2].CollClassValid = 0
or Request_valid->rlist[Seq2].ContainerValid = 0 or Request_valid->rlist[Seq2].DefaultCollectionMethodValid = 0
or Request_valid->rlist[Seq2].OrderableValid = 0
or Request_valid->rlist[Seq2].ServiceResourceValid = 0 or Request_valid->rlist[Seq2].SpecialHandlingValid = 0
or Request_valid->rlist[Seq2].SpecialHandlingValid = 0 or Request_valid->rlist[Seq2].to_age_unit_valid = 0
or Request_valid->rlist[Seq2].from_age_unit_valid = 0)
set Request_valid->rlist[Seq2].rec_valid = 0
set CountInvalidRows = CountInvalidRows + 1
set result11_r = concat (Result11_r,trim(cnvtstring(Seq2)),", ")
else
set Request_valid->rlist[Seq2].rec_valid = 1
endif
endfor
 
call echorecord (request_valid)
 
if(CountInvalidOrderable < CountRows)
if(size(result1)>0)
set Result1_echo = Concat ("(",trim(cnvtstring(CountInvalidOrderable)),")", "Invalid Orderables are ",
replace(Result1,",","",2),"|||||||||||||| Invalid rows are ", replace(Result1_r,",","",2))
else
set Result1_echo = "All Orderables are valid..."
endif
else
set Result1_echo = "INVALID Orderables!!!"
endif
 
if(CountInvalidSpecimenType < CountRows)
if(size(result2)>0)
set Result2_echo = Concat ("(",trim(cnvtstring(CountInvalidSpecimenType)),")", "Invalid Specimen Types are ",
replace(Result2,",","",2),"|||||||||||||| Invalid rows are ", replace(Result2_r,",","",2))
else
set Result2_echo = "All Specimen Types are valid..."
endif
else
set Result2_echo = "INVALID Specimen Types!!!"
endif
 
if(CountInvalidAccessionClass < CountRows)
if(size(result3)>0)
set Result3_echo = Concat ("(",trim(cnvtstring(CountInvalidAccessionClass)),")", "Invalid Accession Classes are ",
replace(Result3,",","",2),"|||||||||||||| Invalid rows are ", replace(Result3_r,",","",2))
else
set Result3_echo = "All Accession Classes are valid..."
endif
else
set Result3_echo = "INVALID Accession Classes!!!"
endif
 
if(CountInvalidDefaultCollectionMethod < CountRows)
if(size(result4)>0)
set Result4_echo = Concat ("(",trim(cnvtstring(CountInvalidDefaultCollectionMethod)),")", 

"Invalid Default Collection Methods are ",
replace(Result4,",","",2),"|||||||||||||| Invalid rows are ", replace(Result4_r,",","",2))
else
set Result4_echo = "All Default Collection Methods are valid..."
endif
else
set Result4_echo = "INVALID Default Collection Methods!!!"
endif
 
if(CountInvalidContainer < CountRows)
if(size(result5)>0)
set Result5_echo = Concat ("(",trim(cnvtstring(CountInvalidContainer)),")", "Invalid Containers are ",
replace(Result5,",","",2),"|||||||||||||| Invalid rows are ", replace(Result5_r,",","",2))
else
set Result5_echo = "All Containers are valid..."
endif
else
set Result5_echo = "INVALID Containers!!!"
endif
 
if(CountInvalidSpecialHandling < CountRows)
if(size(result6)>0)
set result6_echo = Concat ("(",trim(cnvtstring(CountInvalidSpecialHandling)),")", "Invalid Special Handlings are ",
replace(result6,",","",2),"|||||||||||||| Invalid rows are ", replace(result6_r,",","",2))
else
set result6_echo = "All Special Handlings are valid..."
endif
else
set result6_echo = "INVALID Special Handlings!!!"
endif
 
/*if(CountInvalidMinVol < CountRows)
if(size(result7)>0)
set result7_echo = Concat ("(",trim(cnvtstring(CountInvalidMinVol)),")", "Invalid Minimum 

Volumes are ",
replace(result7,",","",2),"|||||||||||||| Invalid rows are ", replace(result7_r,",","",2))
else
set result7_echo = "All Minimum Volumes are valid..."
endif
else
set Result7_echo = "INVALID Minimum Volumes!!!"
endif*/
 
if(CountInvalidCollClass < CountRows)
if(size(result8)>0)
set result8_echo = Concat ("(",trim(cnvtstring(CountInvalidCollClass)),")", "Invalid Collection Classes are ",
replace(result8,",","",2),"|||||||||||||| Invalid rows are ", replace(result8_r,",","",2))
else
set result8_echo = "All Collection Classes are valid..."
endif
else
set result8_echo = "INVALID Collection Classes!!!"
endif
 
if(CountInvalidServiceResource < CountRows)
if(size(result9)>0)
set result9_echo = Concat ("(",trim(cnvtstring(CountInvalidServiceResource)),")", "Invalid Service Resources are ",
replace(result9,",","",2),"|||||||||||||| Invalid rows are ", replace(result9_r,",","",2))
else
set result9_echo = "All Service Resources are valid..."
endif
else
set Result9_echo = "INVALID Service Resources!!!"
endif

if(CountInvalidAgeUnit < CountRows)
if(size(result12)>0)
set result12_echo = Concat ("(",trim(cnvtstring(CountInvalidAgeUnit)),")", "Invalid Age Units are ",
replace(result12,",","",2),"|||||||||||||| Invalid rows are ", replace(result12_r,",","",2))
else
set result12_echo = "All Age Units are valid..."
endif
else
set Result12_echo = "INVALID Age Units !!!"
endif

 
if(CountInvalidRows < CountRows)
if(size(result11_r)>0)
set Result11_echo = concat("Total invalid rows are (", trim(cnvtstring(CountInvalidRows)),
") out of (", trim(cnvtstring(CountRows)),") ,which are ", replace(Result11_r,",","",2))
else
set Result11_echo = "All rows are valid..."
endif
else
set Result11_echo = "Invalid csv!!!"
endif
 
call clear(1,1)
 
call text (2,4,result1_echo)
call text (3,4,"Orderables should be in select code_value from code_value where code_set = 200")
 
call text (4,4,result2_echo)
call text (5,4,"Specimen Types should be in select code_value from code_value where code_set = 2052")
 
call text (6,4,result3_echo)
call text (7,4,"Accession Classes should be in select code_value from code_value where code_set = 2056")
 
call text (8,4,result4_echo)
call text (9,4,"Default Collection should be in select code_value from code_value where code_set = 2058")
 
call text (10,4,result5_echo)
call text (11,4,"Containers should be in select code_value from code_value where code_set = 2051")
 
call text (12,4,result6_echo)
call text (13,4,"Special handlings should be in select code_value from code_value where code_set = 230")
 
call text (14,4,result12_echo)
call text (15,4,"Age Units should be in select code_value from code_value where code_set = 340")
 
call text (16,4,result8_echo)
call text (17,4,"Collection classes should be in select code_value from code_value where code_set = 231")
 
call text (18,4,result9_echo)
call text (19,4,concat("Service Resources Should be defined, the orderable routed to it and the orderable doesn't",
" have collection requirements to it"))
 
 
call text (22,4,result11_echo)
 
 
 
if(CountInvalidRows < CountRows)
call text(23,4,"Import valid rows? (Y/N) ")
call accept(23,30, "P;CU", "N" WHERE CURACCEPT IN ("Y","N"))
set choice2 = curaccept
if ((choice2 = "Y"))
 
SELECT distinct INTO 'NL:'
txt_CatalogCd2 = request_valid->rlist[d.seq].Catalog_cd,
txt_SpecimenTypeCd2 = request_valid->rlist[d.seq].specimen_type_cd,
txt_AccClassCd2 = request_valid->rlist[d.seq].accession_class_cd,
txt_DefCollMethodCd2 = request_valid->rlist[d.seq].default_collection_method_cd
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->rlist,5))
PLAN D where Request_valid->rlist[d.seq].rec_valid = 1 and Request_valid->rlist

[d.seq].procedure_specimen_Type_Exist = 0
 
head report
x2  = 0
head txt_CatalogCd2
x2=x2+1
 
if(size(request->pst_qual,5)<=x2)
stat = alterlist(request->pst_qual,x2+5)
endif
request->pst_qual[x2].accession_class_cd = cnvtint(txt_AccClassCd2)
request->pst_qual[x2].catalog_cd = cnvtint(txt_CatalogCd2)
request->pst_qual[x2].default_collection_method_cd = CNVTINT(txt_DefCollMethodCd2)
request->pst_qual[x2].specimen_type_cd = CNVTINT(txt_SpecimenTypeCd2)
 
foot txt_CatalogCd2
stat = alterlist(request->pst_qual,x2)
with nocounter
 
SELECT INTO 'NL:'
txt_CatalogCd = request_valid->rlist[d.seq].Catalog_cd,
txt_SpecimenTypeCd = request_valid->rlist[d.seq].specimen_type_cd,
txt_AccClassCd = request_valid->rlist[d.seq].accession_class_cd,
txt_DefCollMethodCd = request_valid->rlist[d.seq].default_collection_method_cd,
txt_ContainerCd = request_valid->rlist[d.seq].spec_cntnr_cd,
txt_SpecialHandlingCd = request_valid->rlist[d.seq].spec_hndl_cd,
txt_MinVol = request_valid->rlist[d.seq].MinVol,
txt_CollClassCd = request_valid->rlist[d.seq].coll_class_cd,
txt_ServiceResourceCd = request_valid->rlist[d.seq].service_resource_cd,
txt_from_age = request_valid->rlist[d.seq].from_age,
txt_from_age_unit = request_valid->rlist[d.seq].from_age_unit,
txt_to_age = request_valid->rlist[d.seq].to_age,
txt_to_age_unit = request_valid->rlist[d.seq].to_age_unit
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->rlist,5))
PLAN D where Request_valid->rlist[d.seq].rec_valid = 1
 
head report
 
;head txt_CatalogCd
x  = 0
detail
x=x+1
 
if(size(request->qual,5)<=x)
stat = alterlist(request->qual,x+5)
endif
request->qual[x].accession_class_cd = cnvtint(txt_AccClassCd)

if(cnvtupper(txt_from_age_unit) = "MINUTES")
		request->qual[x].age_from_minutes = request_valid->rlist[d.seq].from_age
		elseif(cnvtupper(txt_from_age_unit) = "HOURS")
		request->qual[x].age_from_minutes = request_valid->rlist[d.seq].from_age * 60
		elseif(cnvtupper(txt_from_age_unit) = "DAYS")
		request->qual[x].age_from_minutes = request_valid->rlist[d.seq].from_age * 60 * 24
		elseif(cnvtupper(txt_from_age_unit) = "WEEKS")
		request->qual[x].age_from_minutes = request_valid->rlist[d.seq].from_age * 60 * 24 * 7
		elseif(cnvtupper(txt_from_age_unit) = "MONTHS")
		request->qual[x].age_from_minutes = request_valid->rlist[d.seq].from_age * 60 * 24 * 30
		elseif(cnvtupper(txt_from_age_unit) = "YEARS")
		request->qual[x].age_from_minutes = request_valid->rlist[d.seq].from_age * 60 * 24 * 365
		endif
 
		if(cnvtupper(txt_to_age_unit) = "MINUTES")
		request->qual[x].age_to_minutes = request_valid->rlist[d.seq].to_age
		elseif(cnvtupper(txt_to_age_unit) = "HOURS")
		request->qual[x].age_to_minutes = request_valid->rlist[d.seq].to_age * 60
		elseif(cnvtupper(txt_to_age_unit) = "DAYS")
		request->qual[x].age_to_minutes = request_valid->rlist[d.seq].to_age * 60 * 24
		elseif(cnvtupper(txt_to_age_unit) = "WEEKS")
		request->qual[x].age_to_minutes = request_valid->rlist[d.seq].to_age * 60 * 24 * 7
		elseif(cnvtupper(txt_to_age_unit) = "MONTHS")
		request->qual[x].age_to_minutes = request_valid->rlist[d.seq].to_age * 60 * 24 * 30
		elseif(cnvtupper(txt_to_age_unit) = "YEARS")
		request->qual[x].age_to_minutes = request_valid->rlist[d.seq].to_age * 60 * 24 * 365
		endif

request->qual[x].catalog_cd = CNVTINT(txt_CatalogCd)
request->qual[x].coll_class_cd = cnvtint(txt_CollClassCd)
request->qual[x].default_collection_method_cd = cnvtint(txt_DefCollMethodCd)
request->qual[x].min_vol = CNVTreal(txt_MinVol)
request->qual[x].service_resource_cd = CNVTINT(txt_ServiceResourceCd)
request->qual[x].spec_cntnr_cd = CNVTINT(txt_ContainerCd)
request->qual[x].spec_hndl_cd = cnvtint(txt_SpecialHandlingCd)
request->qual[x].specimen_type_cd = cnvtint(txt_SpecimenTypeCd)
request->qual[x].min_vol_units = "ML"
 
foot report
 
 
stat = alterlist(request->qual,x)
with nocounter
;call echorecord(request) 
execute scs_add_collection_info
 
endif
endif
 
call clear(1,1)
 call video(i)
 if(CountInvalidRows < CountRows)
 if(choice2 = "Y")
 call text(2, 4, concat("Importing completed ", trim(cnvtstring(CountRows-CountInvalidRows)),
 " out of ", trim(cnvtstring(CountRows))))
 endif
 else
 call text(2, 4, "Importing skipped")
 endif
 call text(4,4,"1)Exit and save log file Auto_GL_Coll_log")
 call text(6,4,"2)Exit and show on screen the invalid rows...")
 call text(8,4,"3)EXIT without logging...")
 
 
 call text(14, 4, "Select ")
 call accept(14, 12, "1;", 3 where curaccept in (1, 2, 3))
 set choice3 = curaccept
 
 if (choice3 = 1)
 select into "Auto_GL_Coll_log.dat"
 ___________________________________________= "Invalid records out of the csv file"
 with version
 
 select into "Auto_GL_Coll_log.dat"
 AccessionClass 			= request_valid->rlist[d.seq].AccessionClass,
 AccessionClass_valid 		= if(request_valid->rlist[d.seq].AccessionClassValid = 1) "Yes" else "No" endif,
 CollClass					= request_valid->rlist[d.seq].CollClass,
 CollClass_valid 			= if(request_valid->rlist[d.seq].CollClassValid= 1) "Yes" else "No" endif,
 Container		 			= request_valid->rlist[d.seq].Container,
 Container_valid			= if(request_valid->rlist[d.seq].ContainerValid = 1) "Yes" else "No" endif,
 DefaultCollectionMethod	= request_valid->rlist[d.seq].DefaultCollectionMethod,
 DefaultCollectionMethodn_valid 	= if(request_valid->rlist[d.seq].DefaultCollectionMethodValid = 1) "Yes" else "No" endif,
 MinVol						= request_valid->rlist[d.seq].MinVol,
 Orderable					= request_valid->rlist[d.seq].Orderable,
 Orderable_valid 			= if(request_valid->rlist[d.seq].OrderableValid = 1) "Yes" else "No" endif,
 ServiceResource 			= request_valid->rlist[d.seq].ServiceResource,
 ServiceResource_valid		= if(request_valid->rlist[d.seq].ServiceResourceValid = 1) "Yes" else "No" endif,
 SpecialHandling			= request_valid->rlist[d.seq].SpecialHandling,
 SpecialHandling_valid		= if(request_valid->rlist[d.seq].SpecialHandlingValid = 1) "Yes" else "No" endif,
 SpecimenType				= request_valid->rlist[d.seq].SpecimenType,
 SpecimenType_valid			= if(request_valid->rlist[d.seq].SpecimenTypeValid = 1) "Yes" else "No" endif,
 Record_valid				= if(request_valid->rlist[d.seq].rec_valid = 1) "Yes" else "No" endif,
 Procedure_Specimen_Type_Exist =  if(request_valid->rlist[d.seq].procedure_specimen_Type_Exist = 1) "Yes" else "No" endif,
 to_age						= 	request_valid->rlist[d.seq].to_age,			
 to_age_unit				= 	request_valid->rlist[d.seq].to_age_unit,			
 to_age_unit_valid			= 	if(request_valid->rlist[d.seq].to_age_unit_valid = 1) "Yes" else "No" endif,
 From_age						= 	request_valid->rlist[d.seq].from_age,			
 From_age_unit				= 	request_valid->rlist[d.seq].From_age_unit,			
 From_age_unit_valid			= 	if(request_valid->rlist[d.seq].From_age_unit_valid = 1) "Yes" else "No" endif
 
 
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->rlist,5))
PLAN D
where request_valid->rlist[d.seq].rec_valid = 0
with nocounter, append
 
else if (choice3 = 2)
 select into "MINE"
 AccessionClass 			= request_valid->rlist[d.seq].AccessionClass,
 AccessionClass_valid 		= if(request_valid->rlist[d.seq].AccessionClassValid = 1) "Yes" else "No" endif,
 CollClass					= request_valid->rlist[d.seq].CollClass,
 CollClass_valid 			= if(request_valid->rlist[d.seq].CollClassValid= 1) "Yes" else "No" endif,
Container		 			= request_valid->rlist[d.seq].Container,
 Container_valid			= if(request_valid->rlist[d.seq].ContainerValid = 1) "Yes" else "No" endif,
 DefaultCollectionMethod	= request_valid->rlist[d.seq].DefaultCollectionMethod,
 DefaultCollectionMethodn_valid 	= if(request_valid->rlist[d.seq].DefaultCollectionMethodValid = 1) "Yes" else "No" endif,
 Orderable					= request_valid->rlist[d.seq].Orderable,
 Orderable_valid 			= if(request_valid->rlist[d.seq].OrderableValid = 1) "Yes" else "No" endif,
 ServiceResource 			= request_valid->rlist[d.seq].ServiceResource,
 ServiceResource_valid		= if(request_valid->rlist[d.seq].ServiceResourceValid = 1) "Yes" else "No" endif,
 SpecialHandling			= request_valid->rlist[d.seq].SpecialHandling,
 SpecialHandling_valid		= if(request_valid->rlist[d.seq].SpecialHandlingValid = 1) "Yes" else "No" endif,
 SpecimenType				= request_valid->rlist[d.seq].SpecimenType,
 SpecimenType_valid			= if(request_valid->rlist[d.seq].SpecimenTypeValid = 1) "Yes" else "No" endif,
 Record_valid				= if(request_valid->rlist[d.seq].rec_valid = 1) "Yes" else "No" endif,
 Procedure_Specimen_Type_Exist =  if(request_valid->rlist[d.seq].procedure_specimen_Type_Exist = 1) "Yes" else "No" endif,
 to_age						= 	request_valid->rlist[d.seq].to_age,			
 to_age_unit				= 	request_valid->rlist[d.seq].to_age_unit,			
 to_age_unit_valid			= 	if(request_valid->rlist[d.seq].to_age_unit_valid = 1) "Yes" else "No" endif,
 From_age						= 	request_valid->rlist[d.seq].from_age,			
 From_age_unit				= 	request_valid->rlist[d.seq].From_age_unit,			
 From_age_unit_valid			= 	if(request_valid->rlist[d.seq].From_age_unit_valid = 1) "Yes" else "No" endif
 
 
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->rlist,5))
PLAN D
where request_valid->rlist[d.seq].rec_valid = 0
with nocounter
endif
endif
 
;call echorecord(request_valid)
 
 
 
end go
