set trace backdoor p30ins go
 
drop program Auto_MIC_Panels go
create program Auto_MIC_Panels
 
/****************Create Record to be sent to program******************************/
record request 
 ( 
     1   qual[*] 
         2   active_ind      = i2 
         2   mnemonic        = c40 
         2   description     = vc 
         2   report_name     = vc 
 	 	 2   group_ind       = i2 
         2   task_type_flag  = i2 
         2   task_class_flag = i2 
         2   code_set        = i4 
         2   chartable_ind   = i2 
 )
 
 record request_valid
 (
 	1	qual[*]
 		2 mnemonic 			= c40
 		2 description		= vc
 		2 valid				= i2
  )
 
/*****************Copy the requestin into the record request_valid*************************************/
declare Seq1 = I2
set CountRows = 0
set CountInvalid = 0
set stat = alterlist(request_valid->qual,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set CountRows = CountRows +1

set Request_valid->qual[Seq1].valid = 1
set Request_valid->qual[Seq1].mnemonic = requestin->List_0[Seq1].mnemonic
set Request_valid->qual[Seq1].description = requestin->List_0[Seq1].description

if ( size(Request_valid->qual[Seq1].mnemonic,1) >10)
set Request_valid->qual[Seq1].valid = 0
endif

if ( size(Request_valid->qual[Seq1].description,1) >60)
set Request_valid->qual[Seq1].valid = 0
endif

select into 'NL:' * from mic_task m, code_value cv
plan m where m.task_type_flag = 12
join cv where cv.code_value = m.task_assay_cd
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq1].mnemonic)
detail
Request_valid->qual[Seq1].valid = 0
with nocounter	

if(Request_valid->qual[Seq1].valid = 0)
set CountInvalid = CountInvalid+1
endif

endfor
 
;call echorecord (request_valid)

if (CountInvalid=0)
 
SELECT distinct INTO 'NL:'
txt_mnemonic = Request_valid->qual[d.seq].mnemonic,
txt_description = Request_valid->qual[d.seq].description
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5))
 
PLAN D where Request_valid->qual[d.seq].valid = 1
 
head report
x2=0
 
head txt_mnemonic
x2=x2+1
 
if(size(request->QUAL,5)<=x2)
stat = alterlist(request->qual,x2+5)
endif
		request->QUAL[x2].mnemonic = request_valid->qual[d.seq].mnemonic
		request->QUAL[x2].description = request_valid->qual[d.seq].description
		Request->QUAL[x2].active_ind = 1
		request->QUAL[x2].group_ind = 1
		request->QUAL[x2].task_type_flag = 12
		request->QUAL[x2].task_class_flag = 9
 
 
foot txt_mnemonic
stat = alterlist(request->qual,x2)
with nocounter
 
;call echorecord(request)
execute mic_add_tasks


call echo("///////////////////////////////////////////////////////////////////////////////////////")
call echo("/////////////////////////////////////Importing Done////////////////////////////////////")
call echo("///////////////////////////////////////////////////////////////////////////////////////")
else
 
call clear(1,1)
call video(i)
call text(2, 4, "Importing have stopped because some of the entities in the csv file is invalid")
call text(3, 4, "kindly check the log file Auto_MIC_Panels_log")
 
select into "Auto_MIC_Panels_log"
mnemonic 			= request_valid->qual[d.seq].mnemonic
,description 			= request_valid->qual[d.seq].description
,valid	  			= if(request_valid->qual[d.seq].valid) "Yes" else "No" endif
 
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->qual,5))
PLAN D
with nocounter, version
endif
 
end
go