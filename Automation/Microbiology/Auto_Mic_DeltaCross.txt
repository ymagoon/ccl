set trace backdoor p30ins go
 
drop program auto_mic_deltaCross go
create program auto_mic_deltaCross
 
record request 
    ( 
     1 ALLOW_PARTIAL_IND = I2 
     1 SUS_DELTA_PARAM_IDI = I2 
     1 ANTIBIOTIC_CDI = I2 
     1 SUS_DETAIL1_CDI = I2 
     1 SUS_DETAIL2_CDI = I2 
     1 QUAL[*] 
       2 SUS_DELTA_PARAM_ID = F8 
       2 ANTIBIOTIC_CD = F8 
       2 SUS_DETAIL1_CD = F8 
       2 SUS_DETAIL2_CD = F8 
 ) 
 
  record request_valid
    (
     1 QUAL[*]
       2 service_resource = vc
       2 service_resource_valid = i2
       2 SERVICE_RESOURCE_CD = F8
 
       2 source = vc
       2 source_valid = i2
       2 SOURCE_CD = F8
 
       2 organism = vc
       2 organism_valid = i2
       2 ORGANISM_CD = F8
       
       2 exist = i2
 
       2 antibiotic = vc
       2 antibiotic_valid = i2
       2 ANTIBIOTIC_CD = F8
 
	   2 SUS_DETAIL1 = vc
	   2 SUS_DETAIL1_valid =i2
	   2 SUS_DETAIL1_CD = F8 
	   
       2 SUS_DETAIL2 = vc
       2 SUS_DETAIL2_valid = i2
       2 SUS_DETAIL2_CD = F8
 
 )
 
 
/*****************Copy the into request_valid*************************************/
declare Seq1 = I2
set stat = alterlist(request_valid->qual,size(requestin->list_0,5))
for (Seq1=1 to size(requestin->List_0,5))
set Request_valid->qual[Seq1].antibiotic = requestin->List_0[Seq1].antibiotic
set Request_valid->qual[Seq1].organism = requestin->List_0[Seq1].organism
set Request_valid->qual[Seq1].service_resource = requestin->List_0[Seq1].service_resource
set Request_valid->qual[Seq1].source = requestin->List_0[Seq1].source
set Request_valid->qual[Seq1].SUS_DETAIL1 = requestin->List_0[Seq1].SUS_DETAIL1
set Request_valid->qual[Seq1].SUS_DETAIL2 = requestin->List_0[Seq1].SUS_DETAIL2
endfor
 
declare Seq2 = I2
set CountRows = 0
set CountInvalid = 0
for (Seq2 = 1 to size(request_valid->qual,5))
set CountRows = CountRows +1
 
/**********************************************
Get invalid antibiotic
**********************************************/
if (cnvtupper(request_valid->qual[Seq2].antibiotic) = "ALL")
set Request_valid->qual[Seq2].antibiotic_valid = 1
set Request_valid->qual[Seq2].ANTIBIOTIC_CD = 0
else
set Request_valid->qual[Seq2].antibiotic_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 1011
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].antibiotic)
detail
Request_valid->qual[Seq2].antibiotic_valid = 1
Request_valid->qual[Seq2].ANTIBIOTIC_CD = cv.code_value
with nocounter
endif
 
 
/**********************************************
Get invalid organism
**********************************************/
if (cnvtupper(request_valid->qual[Seq2]. organism) = "ALL")
set Request_valid->qual[Seq2].organism_valid = 1
set Request_valid->qual[Seq2].ORGANISM_CD = 0
else
set Request_valid->qual[Seq2].organism_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 1021
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].organism)
detail
Request_valid->qual[Seq2].organism_valid = 1
Request_valid->qual[Seq2].ORGANISM_CD = cv.code_value
with nocounter
endif
 
 
/**********************************************
Get invalid service_resource
**********************************************/
if (cnvtupper(request_valid->qual[Seq2].service_resource) = "ALL")
set Request_valid->qual[Seq2].service_resource_valid = 1
set Request_valid->qual[Seq2].SERVICE_RESOURCE_CD = 0
else
set Request_valid->qual[Seq2].service_resource_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 221
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].service_resource)
detail
Request_valid->qual[Seq2].service_resource_valid = 1
Request_valid->qual[Seq2].SERVICE_RESOURCE_CD = cv.code_value
with nocounter
endif
 
/**********************************************
Get invalid sources
**********************************************/
if (cnvtupper(request_valid->qual[Seq2].source) = "ALL")
set Request_valid->qual[Seq2].source_valid = 1
set Request_valid->qual[Seq2].SOURCE_CD = 0
else
set Request_valid->qual[Seq2].source_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 2052
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].source)
detail
Request_valid->qual[Seq2].source_valid = 1
Request_valid->qual[Seq2].SOURCE_CD = cv.code_value
with nocounter
endif
 
/**********************************************
Get invalid sus_details
**********************************************/
set Request_valid->qual[Seq2].SUS_DETAIL1_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 1004
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].SUS_DETAIL1)
detail
Request_valid->qual[Seq2].SUS_DETAIL1_valid = 1
Request_valid->qual[Seq2].SUS_DETAIL1_CD = cv.code_value
with nocounter

set Request_valid->qual[Seq2].SUS_DETAIL2_valid = 0
select into 'NL:'
cv.code_value
from code_value cv
plan cv where cv.code_set = 1004
and cnvtupper(cv.display) = cnvtupper(request_valid->qual[Seq2].SUS_DETAIL2)
detail
Request_valid->qual[Seq2].SUS_DETAIL2_valid = 1
Request_valid->qual[Seq2].SUS_DETAIL2_CD = cv.code_value
with nocounter 
 
/**********************************************
Get existing
**********************************************/
set Request_valid->qual[Seq2].exist = 0
select into 'NL:'
*
from MIC_SUS_DELTA_PARAM_CRITERIA msdpc, MIC_SUS_DELTA_PARAMETER msdp
plan msdpc where msdpc.organism_cd = request_valid->qual[Seq2].ORGANISM_CD
and msdpc.service_resource_cd = request_valid->qual[Seq2].SERVICE_RESOURCE_CD
and msdpc.source_cd = request_valid->qual[Seq2].SOURCE_CD
join msdp where msdpc.sus_delta_param_id = msdp.sus_delta_param_id
and msdp.antibiotic_cd = request_valid->qual[Seq2].ANTIBIOTIC_CD
detail
Request_valid->qual[Seq2].exist = 1
with nocounter
 
 
if(Request_valid->qual[Seq2].antibiotic_valid = 0
or Request_valid->qual[Seq2].organism_valid = 0 or Request_valid->qual[Seq2].SUS_DETAIL1_valid = 0
or Request_valid->qual[Seq2].service_resource_valid = 0 or Request_valid->qual[Seq2].source_valid = 0
or Request_valid->qual[Seq2].exist = 0 or Request_valid->qual[Seq2].SUS_DETAIL2_valid = 0)
set CountInvalid = CountInvalid+1
endif
endfor
 
call echorecord (request_valid)
if (CountInvalid=0)
 
SELECT INTO 'NL:'
txt_ANTIBIOTIC_CD = Request_valid->qual[d.seq].ANTIBIOTIC_CD,
txt_ORGANISM_CD = Request_valid->qual[d.seq].ORGANISM_CD,
txt_SERVICE_RESOURCE_CD = Request_valid->qual[d.seq].SERVICE_RESOURCE_CD,
txt_SOURCE_CD = Request_valid->qual[d.seq].SOURCE_CD,
txt_SUS_DETAIL1_CD = Request_valid->qual[d.seq].SUS_DETAIL1_CD,
txt_SUS_DETAIL2_CD = Request_valid->qual[d.seq].SUS_DETAIL2_CD,
txt_sus_delta_param_id = msdpc.sus_delta_param_id
 
 
FROM (DUMMYT D WITH SEQ = SIZE(REQUEST_valid->qual,5)), MIC_SUS_DELTA_PARAM_CRITERIA msdpc
 
PLAN D where Request_valid->qual[d.seq].antibiotic_valid = 1
and Request_valid->qual[d.seq].organism_valid = 1 and Request_valid->qual[d.seq].SUS_DETAIL1_valid = 1
and Request_valid->qual[d.seq].service_resource_valid = 1 and Request_valid->qual[d.seq].source_valid = 1
and Request_valid->qual[d.seq].exist = 1 and Request_valid->qual[d.seq].SUS_DETAIL2_valid = 1
join msdpc
where msdpc.organism_cd = Request_valid->qual[d.seq].ORGANISM_CD
and msdpc.service_resource_cd = Request_valid->qual[d.seq].SERVICE_RESOURCE_CD
and msdpc.source_cd = Request_valid->qual[d.seq].SOURCE_CD
 
 
 
head report
x3=0
head txt_sus_delta_param_id
dummy = 0
head txt_ANTIBIOTIC_CD
dummy = 0 
head txt_SUS_DETAIL1_CD
dummy = 0
head txt_SUS_DETAIL2_CD
x3=x3+1
 
if(size(request->QUAL,5)<=x3)
stat = alterlist(request->qual,x3+5)
endif
		request->QUAL[x3].ANTIBIOTIC_CD = CNVTINT(request_valid->qual[d.seq].ANTIBIOTIC_CD)
		request->QUAL[x3].SUS_DELTA_PARAM_ID = CNVTINT(msdpc.sus_delta_param_id)
		request->QUAL[x3].SUS_DETAIL1_CD = CNVTINT(request_valid->qual[d.seq].SUS_DETAIL1_CD)
		request->QUAL[x3].SUS_DETAIL2_CD = CNVTINT(request_valid->qual[d.seq].SUS_DETAIL2_CD)

foot txt_SUS_DETAIL2_CD 
stat = alterlist(request->qual,x3)
foot txt_SUS_DETAIL1_CD
dummy =0
foot txt_ANTIBIOTIC_CD
dummy = 0
foot txt_sus_delta_param_id
dummy=1
with nocounter
set request->ALLOW_PARTIAL_IND =  1
set request->ANTIBIOTIC_CDI = 1
set request->SUS_DELTA_PARAM_IDI =  1
set request->SUS_DETAIL1_CDI = 1
set request->SUS_DETAIL2_CDI = 1

call echorecord(request)
execute GM_I_MIC_SUS_DELT8171
call echo("///////////////////////////////////////////////////////////////////////////////////////")
call echo("/////////////////////////////////////Importing Done////////////////////////////////////")
call echo("///////////////////////////////////////////////////////////////////////////////////////")
else
 
call clear(1,1)
call video(i)
call text(2, 4, "Importing have stopped because some of the entities in the csv file is invalid")
call text(3, 4, "kindly check the log file Auto_MIC_DeltaCross_log")
 
select into "Auto_MIC_DeltaCross_log"
antibiotic 			= request_valid->qual[d.seq].antibiotic
,antibiotic_valid	  			= if(request_valid->qual[d.seq].antibiotic_valid) "Yes" else "No" endif
,organism 			= request_valid->qual[d.seq].organism
,organism_valid	  			= if(request_valid->qual[d.seq].organism_valid) "Yes" else "No" endif
,service_resource 			= request_valid->qual[d.seq].service_resource
,service_resource_valid	  			= if(request_valid->qual[d.seq].service_resource_valid) "Yes" else "No" endif
,source 			= request_valid->qual[d.seq].source
,source_valid	  			= if(request_valid->qual[d.seq].source_valid) "Yes" else "No" endif
,exist  			= if(request_valid->qual[d.seq].exist) "Yes" else "No" endif
,SUS_DETAIL1 			= request_valid->qual[d.seq].SUS_DETAIL1
,SUS_DETAIL1_valid	  			= if(request_valid->qual[d.seq].SUS_DETAIL1_valid) "Yes" else "No" endif
,SUS_DETAIL2 			= request_valid->qual[d.seq].SUS_DETAIL2
,SUS_DETAIL2_valid	  			= if(request_valid->qual[d.seq].SUS_DETAIL2_valid) "Yes" else "No" endif
 
FROM (DUMMYT D WITH SEQ = SIZE(request_valid->qual,5))
PLAN D
with nocounter, version
endif
 
end
go
 
 